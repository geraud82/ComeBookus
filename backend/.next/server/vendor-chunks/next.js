/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next";
exports.ids = ["vendor-chunks/next"];
exports.modules = {

/***/ "(rsc)/../node_modules/next/dist/build/output/log.js":
/*!*****************************************************!*\
  !*** ../node_modules/next/dist/build/output/log.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    prefixes: function() {\n        return prefixes;\n    },\n    bootstrap: function() {\n        return bootstrap;\n    },\n    wait: function() {\n        return wait;\n    },\n    error: function() {\n        return error;\n    },\n    warn: function() {\n        return warn;\n    },\n    ready: function() {\n        return ready;\n    },\n    info: function() {\n        return info;\n    },\n    event: function() {\n        return event;\n    },\n    trace: function() {\n        return trace;\n    },\n    warnOnce: function() {\n        return warnOnce;\n    }\n});\nconst _picocolors = __webpack_require__(/*! ../../lib/picocolors */ \"(rsc)/../node_modules/next/dist/lib/picocolors.js\");\nconst prefixes = {\n    wait: (0, _picocolors.white)((0, _picocolors.bold)(\"○\")),\n    error: (0, _picocolors.red)((0, _picocolors.bold)(\"⨯\")),\n    warn: (0, _picocolors.yellow)((0, _picocolors.bold)(\"⚠\")),\n    ready: \"▲\",\n    info: (0, _picocolors.white)((0, _picocolors.bold)(\" \")),\n    event: (0, _picocolors.green)((0, _picocolors.bold)(\"✓\")),\n    trace: (0, _picocolors.magenta)((0, _picocolors.bold)(\"\\xbb\"))\n};\nconst LOGGING_METHOD = {\n    log: \"log\",\n    warn: \"warn\",\n    error: \"error\"\n};\nfunction prefixedLog(prefixType, ...message) {\n    if ((message[0] === \"\" || message[0] === undefined) && message.length === 1) {\n        message.shift();\n    }\n    const consoleMethod = prefixType in LOGGING_METHOD ? LOGGING_METHOD[prefixType] : \"log\";\n    const prefix = prefixes[prefixType];\n    // If there's no message, don't print the prefix but a new line\n    if (message.length === 0) {\n        console[consoleMethod](\"\");\n    } else {\n        console[consoleMethod](\" \" + prefix, ...message);\n    }\n}\nfunction bootstrap(...message) {\n    console.log(\" \", ...message);\n}\nfunction wait(...message) {\n    prefixedLog(\"wait\", ...message);\n}\nfunction error(...message) {\n    prefixedLog(\"error\", ...message);\n}\nfunction warn(...message) {\n    prefixedLog(\"warn\", ...message);\n}\nfunction ready(...message) {\n    prefixedLog(\"ready\", ...message);\n}\nfunction info(...message) {\n    prefixedLog(\"info\", ...message);\n}\nfunction event(...message) {\n    prefixedLog(\"event\", ...message);\n}\nfunction trace(...message) {\n    prefixedLog(\"trace\", ...message);\n}\nconst warnOnceMessages = new Set();\nfunction warnOnce(...message) {\n    if (!warnOnceMessages.has(message[0])) {\n        warnOnceMessages.add(message.join(\" \"));\n        warn(...message);\n    }\n} //# sourceMappingURL=log.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9vdXRwdXQvbG9nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBV047QUFDQSxTQUFTVyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJakIsT0FBT0MsY0FBYyxDQUFDZSxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFiLFNBQVM7SUFDYkcsVUFBVTtRQUNOLE9BQU9BO0lBQ1g7SUFDQUMsV0FBVztRQUNQLE9BQU9BO0lBQ1g7SUFDQUMsTUFBTTtRQUNGLE9BQU9BO0lBQ1g7SUFDQUMsT0FBTztRQUNILE9BQU9BO0lBQ1g7SUFDQUMsTUFBTTtRQUNGLE9BQU9BO0lBQ1g7SUFDQUMsT0FBTztRQUNILE9BQU9BO0lBQ1g7SUFDQUMsTUFBTTtRQUNGLE9BQU9BO0lBQ1g7SUFDQUMsT0FBTztRQUNILE9BQU9BO0lBQ1g7SUFDQUMsT0FBTztRQUNILE9BQU9BO0lBQ1g7SUFDQUMsVUFBVTtRQUNOLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1PLGNBQWNDLG1CQUFPQSxDQUFDLCtFQUFzQjtBQUNsRCxNQUFNakIsV0FBVztJQUNiRSxNQUFNLENBQUMsR0FBR2MsWUFBWUUsS0FBSyxFQUFFLENBQUMsR0FBR0YsWUFBWUcsSUFBSSxFQUFFO0lBQ25EaEIsT0FBTyxDQUFDLEdBQUdhLFlBQVlJLEdBQUcsRUFBRSxDQUFDLEdBQUdKLFlBQVlHLElBQUksRUFBRTtJQUNsRGYsTUFBTSxDQUFDLEdBQUdZLFlBQVlLLE1BQU0sRUFBRSxDQUFDLEdBQUdMLFlBQVlHLElBQUksRUFBRTtJQUNwRGQsT0FBTztJQUNQQyxNQUFNLENBQUMsR0FBR1UsWUFBWUUsS0FBSyxFQUFFLENBQUMsR0FBR0YsWUFBWUcsSUFBSSxFQUFFO0lBQ25EWixPQUFPLENBQUMsR0FBR1MsWUFBWU0sS0FBSyxFQUFFLENBQUMsR0FBR04sWUFBWUcsSUFBSSxFQUFFO0lBQ3BEWCxPQUFPLENBQUMsR0FBR1EsWUFBWU8sT0FBTyxFQUFFLENBQUMsR0FBR1AsWUFBWUcsSUFBSSxFQUFFO0FBQzFEO0FBQ0EsTUFBTUssaUJBQWlCO0lBQ25CQyxLQUFLO0lBQ0xyQixNQUFNO0lBQ05ELE9BQU87QUFDWDtBQUNBLFNBQVN1QixZQUFZQyxVQUFVLEVBQUUsR0FBR0MsT0FBTztJQUN2QyxJQUFJLENBQUNBLE9BQU8sQ0FBQyxFQUFFLEtBQUssTUFBTUEsT0FBTyxDQUFDLEVBQUUsS0FBS0MsU0FBUSxLQUFNRCxRQUFRRSxNQUFNLEtBQUssR0FBRztRQUN6RUYsUUFBUUcsS0FBSztJQUNqQjtJQUNBLE1BQU1DLGdCQUFnQkwsY0FBY0gsaUJBQWlCQSxjQUFjLENBQUNHLFdBQVcsR0FBRztJQUNsRixNQUFNTSxTQUFTakMsUUFBUSxDQUFDMkIsV0FBVztJQUNuQywrREFBK0Q7SUFDL0QsSUFBSUMsUUFBUUUsTUFBTSxLQUFLLEdBQUc7UUFDdEJJLE9BQU8sQ0FBQ0YsY0FBYyxDQUFDO0lBQzNCLE9BQU87UUFDSEUsT0FBTyxDQUFDRixjQUFjLENBQUMsTUFBTUMsV0FBV0w7SUFDNUM7QUFDSjtBQUNBLFNBQVMzQixVQUFVLEdBQUcyQixPQUFPO0lBQ3pCTSxRQUFRVCxHQUFHLENBQUMsUUFBUUc7QUFDeEI7QUFDQSxTQUFTMUIsS0FBSyxHQUFHMEIsT0FBTztJQUNwQkYsWUFBWSxXQUFXRTtBQUMzQjtBQUNBLFNBQVN6QixNQUFNLEdBQUd5QixPQUFPO0lBQ3JCRixZQUFZLFlBQVlFO0FBQzVCO0FBQ0EsU0FBU3hCLEtBQUssR0FBR3dCLE9BQU87SUFDcEJGLFlBQVksV0FBV0U7QUFDM0I7QUFDQSxTQUFTdkIsTUFBTSxHQUFHdUIsT0FBTztJQUNyQkYsWUFBWSxZQUFZRTtBQUM1QjtBQUNBLFNBQVN0QixLQUFLLEdBQUdzQixPQUFPO0lBQ3BCRixZQUFZLFdBQVdFO0FBQzNCO0FBQ0EsU0FBU3JCLE1BQU0sR0FBR3FCLE9BQU87SUFDckJGLFlBQVksWUFBWUU7QUFDNUI7QUFDQSxTQUFTcEIsTUFBTSxHQUFHb0IsT0FBTztJQUNyQkYsWUFBWSxZQUFZRTtBQUM1QjtBQUNBLE1BQU1PLG1CQUFtQixJQUFJQztBQUM3QixTQUFTM0IsU0FBUyxHQUFHbUIsT0FBTztJQUN4QixJQUFJLENBQUNPLGlCQUFpQkUsR0FBRyxDQUFDVCxPQUFPLENBQUMsRUFBRSxHQUFHO1FBQ25DTyxpQkFBaUJHLEdBQUcsQ0FBQ1YsUUFBUVcsSUFBSSxDQUFDO1FBQ2xDbkMsUUFBUXdCO0lBQ1o7QUFDSixFQUVBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL291dHB1dC9sb2cuanM/Mzc0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHByZWZpeGVzOiBudWxsLFxuICAgIGJvb3RzdHJhcDogbnVsbCxcbiAgICB3YWl0OiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxuICAgIHdhcm46IG51bGwsXG4gICAgcmVhZHk6IG51bGwsXG4gICAgaW5mbzogbnVsbCxcbiAgICBldmVudDogbnVsbCxcbiAgICB0cmFjZTogbnVsbCxcbiAgICB3YXJuT25jZTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBwcmVmaXhlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXhlcztcbiAgICB9LFxuICAgIGJvb3RzdHJhcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBib290c3RyYXA7XG4gICAgfSxcbiAgICB3YWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhaXQ7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LFxuICAgIHdhcm46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2FybjtcbiAgICB9LFxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlYWR5O1xuICAgIH0sXG4gICAgaW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgIH0sXG4gICAgZXZlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgICB0cmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0cmFjZTtcbiAgICB9LFxuICAgIHdhcm5PbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhcm5PbmNlO1xuICAgIH1cbn0pO1xuY29uc3QgX3BpY29jb2xvcnMgPSByZXF1aXJlKFwiLi4vLi4vbGliL3BpY29jb2xvcnNcIik7XG5jb25zdCBwcmVmaXhlcyA9IHtcbiAgICB3YWl0OiAoMCwgX3BpY29jb2xvcnMud2hpdGUpKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIuKXi1wiKSksXG4gICAgZXJyb3I6ICgwLCBfcGljb2NvbG9ycy5yZWQpKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIuKor1wiKSksXG4gICAgd2FybjogKDAsIF9waWNvY29sb3JzLnllbGxvdykoKDAsIF9waWNvY29sb3JzLmJvbGQpKFwi4pqgXCIpKSxcbiAgICByZWFkeTogXCLilrJcIixcbiAgICBpbmZvOiAoMCwgX3BpY29jb2xvcnMud2hpdGUpKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIiBcIikpLFxuICAgIGV2ZW50OiAoMCwgX3BpY29jb2xvcnMuZ3JlZW4pKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIuKck1wiKSksXG4gICAgdHJhY2U6ICgwLCBfcGljb2NvbG9ycy5tYWdlbnRhKSgoMCwgX3BpY29jb2xvcnMuYm9sZCkoXCJcXHhiYlwiKSlcbn07XG5jb25zdCBMT0dHSU5HX01FVEhPRCA9IHtcbiAgICBsb2c6IFwibG9nXCIsXG4gICAgd2FybjogXCJ3YXJuXCIsXG4gICAgZXJyb3I6IFwiZXJyb3JcIlxufTtcbmZ1bmN0aW9uIHByZWZpeGVkTG9nKHByZWZpeFR5cGUsIC4uLm1lc3NhZ2UpIHtcbiAgICBpZiAoKG1lc3NhZ2VbMF0gPT09IFwiXCIgfHwgbWVzc2FnZVswXSA9PT0gdW5kZWZpbmVkKSAmJiBtZXNzYWdlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBtZXNzYWdlLnNoaWZ0KCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnNvbGVNZXRob2QgPSBwcmVmaXhUeXBlIGluIExPR0dJTkdfTUVUSE9EID8gTE9HR0lOR19NRVRIT0RbcHJlZml4VHlwZV0gOiBcImxvZ1wiO1xuICAgIGNvbnN0IHByZWZpeCA9IHByZWZpeGVzW3ByZWZpeFR5cGVdO1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gbWVzc2FnZSwgZG9uJ3QgcHJpbnQgdGhlIHByZWZpeCBidXQgYSBuZXcgbGluZVxuICAgIGlmIChtZXNzYWdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGVNZXRob2RdKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZU1ldGhvZF0oXCIgXCIgKyBwcmVmaXgsIC4uLm1lc3NhZ2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGJvb3RzdHJhcCguLi5tZXNzYWdlKSB7XG4gICAgY29uc29sZS5sb2coXCIgXCIsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gd2FpdCguLi5tZXNzYWdlKSB7XG4gICAgcHJlZml4ZWRMb2coXCJ3YWl0XCIsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXJyb3IoLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwiZXJyb3JcIiwgLi4ubWVzc2FnZSk7XG59XG5mdW5jdGlvbiB3YXJuKC4uLm1lc3NhZ2UpIHtcbiAgICBwcmVmaXhlZExvZyhcIndhcm5cIiwgLi4ubWVzc2FnZSk7XG59XG5mdW5jdGlvbiByZWFkeSguLi5tZXNzYWdlKSB7XG4gICAgcHJlZml4ZWRMb2coXCJyZWFkeVwiLCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGluZm8oLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwiaW5mb1wiLCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGV2ZW50KC4uLm1lc3NhZ2UpIHtcbiAgICBwcmVmaXhlZExvZyhcImV2ZW50XCIsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gdHJhY2UoLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwidHJhY2VcIiwgLi4ubWVzc2FnZSk7XG59XG5jb25zdCB3YXJuT25jZU1lc3NhZ2VzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gd2Fybk9uY2UoLi4ubWVzc2FnZSkge1xuICAgIGlmICghd2Fybk9uY2VNZXNzYWdlcy5oYXMobWVzc2FnZVswXSkpIHtcbiAgICAgICAgd2Fybk9uY2VNZXNzYWdlcy5hZGQobWVzc2FnZS5qb2luKFwiIFwiKSk7XG4gICAgICAgIHdhcm4oLi4ubWVzc2FnZSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwicHJlZml4ZXMiLCJib290c3RyYXAiLCJ3YWl0IiwiZXJyb3IiLCJ3YXJuIiwicmVhZHkiLCJpbmZvIiwiZXZlbnQiLCJ0cmFjZSIsIndhcm5PbmNlIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3BpY29jb2xvcnMiLCJyZXF1aXJlIiwid2hpdGUiLCJib2xkIiwicmVkIiwieWVsbG93IiwiZ3JlZW4iLCJtYWdlbnRhIiwiTE9HR0lOR19NRVRIT0QiLCJsb2ciLCJwcmVmaXhlZExvZyIsInByZWZpeFR5cGUiLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwic2hpZnQiLCJjb25zb2xlTWV0aG9kIiwicHJlZml4IiwiY29uc29sZSIsIndhcm5PbmNlTWVzc2FnZXMiLCJTZXQiLCJoYXMiLCJhZGQiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/build/output/log.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/client/components/draft-mode.js":
/*!*****************************************************************!*\
  !*** ../node_modules/next/dist/client/components/draft-mode.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraftMode\", ({\n    enumerable: true,\n    get: function() {\n        return DraftMode;\n    }\n}));\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/../node_modules/next/dist/client/components/static-generation-bailout.js\");\nclass DraftMode {\n    get isEnabled() {\n        return this._provider.isEnabled;\n    }\n    enable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().enable()\")) {\n            return;\n        }\n        return this._provider.enable();\n    }\n    disable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().disable()\")) {\n            return;\n        }\n        return this._provider.disable();\n    }\n    constructor(provider){\n        this._provider = provider;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=draft-mode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9kcmFmdC1tb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw2Q0FBNEM7SUFDeENJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQywyQkFBMkJDLG1CQUFPQSxDQUFDLG1IQUE2QjtBQUN0RSxNQUFNRjtJQUNGLElBQUlHLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQ0MsU0FBUyxDQUFDRCxTQUFTO0lBQ25DO0lBQ0FFLFNBQVM7UUFDTCxJQUFJLENBQUMsR0FBR0oseUJBQXlCSyx1QkFBdUIsRUFBRSx5QkFBeUI7WUFDL0U7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDRixTQUFTLENBQUNDLE1BQU07SUFDaEM7SUFDQUUsVUFBVTtRQUNOLElBQUksQ0FBQyxHQUFHTix5QkFBeUJLLHVCQUF1QixFQUFFLDBCQUEwQjtZQUNoRjtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0csT0FBTztJQUNqQztJQUNBQyxZQUFZQyxRQUFRLENBQUM7UUFDakIsSUFBSSxDQUFDTCxTQUFTLEdBQUdLO0lBQ3JCO0FBQ0o7QUFFQSxJQUFJLENBQUMsT0FBT2IsUUFBUWMsT0FBTyxLQUFLLGNBQWUsT0FBT2QsUUFBUWMsT0FBTyxLQUFLLFlBQVlkLFFBQVFjLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2QsUUFBUWMsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS2pCLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUWMsT0FBTyxFQUFFLGNBQWM7UUFBRWIsT0FBTztJQUFLO0lBQ25FSCxPQUFPa0IsTUFBTSxDQUFDaEIsUUFBUWMsT0FBTyxFQUFFZDtJQUMvQmlCLE9BQU9qQixPQUFPLEdBQUdBLFFBQVFjLE9BQU87QUFDbEMsRUFFQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9kcmFmdC1tb2RlLmpzPzdjMDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEcmFmdE1vZGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIERyYWZ0TW9kZTtcbiAgICB9XG59KTtcbmNvbnN0IF9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dCA9IHJlcXVpcmUoXCIuL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXRcIik7XG5jbGFzcyBEcmFmdE1vZGUge1xuICAgIGdldCBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm92aWRlci5pc0VuYWJsZWQ7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKCgwLCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQuc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQpKFwiZHJhZnRNb2RlKCkuZW5hYmxlKClcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuZW5hYmxlKCk7XG4gICAgfVxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImRyYWZ0TW9kZSgpLmRpc2FibGUoKVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm92aWRlci5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyKXtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICB9XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyYWZ0LW1vZGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIkRyYWZ0TW9kZSIsIl9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dCIsInJlcXVpcmUiLCJpc0VuYWJsZWQiLCJfcHJvdmlkZXIiLCJlbmFibGUiLCJzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCIsImRpc2FibGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVyIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/client/components/draft-mode.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/client/components/headers.js":
/*!**************************************************************!*\
  !*** ../node_modules/next/dist/client/components/headers.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    headers: function() {\n        return headers;\n    },\n    cookies: function() {\n        return cookies;\n    },\n    draftMode: function() {\n        return draftMode;\n    }\n});\nconst _requestcookies = __webpack_require__(/*! ../../server/web/spec-extension/adapters/request-cookies */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _headers = __webpack_require__(/*! ../../server/web/spec-extension/adapters/headers */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _cookies = __webpack_require__(/*! ../../server/web/spec-extension/cookies */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _requestasyncstorageexternal = __webpack_require__(/*! ./request-async-storage.external */ \"./request-async-storage.external\");\nconst _actionasyncstorageexternal = __webpack_require__(/*! ./action-async-storage.external */ \"./action-async-storage.external\");\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/../node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst _draftmode = __webpack_require__(/*! ./draft-mode */ \"(rsc)/../node_modules/next/dist/client/components/draft-mode.js\");\nfunction headers() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"headers\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _headers.HeadersAdapter.seal(new Headers({}));\n    }\n    const requestStore = _requestasyncstorageexternal.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: headers() expects to have requestAsyncStorage, none available.\");\n    }\n    return requestStore.headers;\n}\nfunction cookies() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"cookies\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _requestcookies.RequestCookiesAdapter.seal(new _cookies.RequestCookies(new Headers({})));\n    }\n    const requestStore = _requestasyncstorageexternal.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: cookies() expects to have requestAsyncStorage, none available.\");\n    }\n    const asyncActionStore = _actionasyncstorageexternal.actionAsyncStorage.getStore();\n    if (asyncActionStore && (asyncActionStore.isAction || asyncActionStore.isAppRoute)) {\n        // We can't conditionally return different types here based on the context.\n        // To avoid confusion, we always return the readonly type here.\n        return requestStore.mutableCookies;\n    }\n    return requestStore.cookies;\n}\nfunction draftMode() {\n    const requestStore = _requestasyncstorageexternal.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: draftMode() expects to have requestAsyncStorage, none available.\");\n    }\n    return new _draftmode.DraftMode(requestStore.draftMode);\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9oZWFkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBSU47QUFDQSxTQUFTSSxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVixPQUFPQyxjQUFjLENBQUNRLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUU4sU0FBUztJQUNiRyxTQUFTO1FBQ0wsT0FBT0E7SUFDWDtJQUNBQyxTQUFTO1FBQ0wsT0FBT0E7SUFDWDtJQUNBQyxXQUFXO1FBQ1AsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sa0JBQWtCQyxtQkFBT0EsQ0FBQyx1SkFBMEQ7QUFDMUYsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsdUlBQWtEO0FBQzNFLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLHFIQUF5QztBQUNsRSxNQUFNRywrQkFBK0JILG1CQUFPQSxDQUFDLDBFQUFrQztBQUMvRSxNQUFNSSw4QkFBOEJKLG1CQUFPQSxDQUFDLHdFQUFpQztBQUM3RSxNQUFNSywyQkFBMkJMLG1CQUFPQSxDQUFDLG1IQUE2QjtBQUN0RSxNQUFNTSxhQUFhTixtQkFBT0EsQ0FBQyxxRkFBYztBQUN6QyxTQUFTVjtJQUNMLElBQUksQ0FBQyxHQUFHZSx5QkFBeUJFLHVCQUF1QixFQUFFLFdBQVc7UUFDakVDLE1BQU07SUFDVixJQUFJO1FBQ0EsT0FBT1AsU0FBU1EsY0FBYyxDQUFDQyxJQUFJLENBQUMsSUFBSUMsUUFBUSxDQUFDO0lBQ3JEO0lBQ0EsTUFBTUMsZUFBZVQsNkJBQTZCVSxtQkFBbUIsQ0FBQ0MsUUFBUTtJQUM5RSxJQUFJLENBQUNGLGNBQWM7UUFDZixNQUFNLElBQUlHLE1BQU07SUFDcEI7SUFDQSxPQUFPSCxhQUFhdEIsT0FBTztBQUMvQjtBQUNBLFNBQVNDO0lBQ0wsSUFBSSxDQUFDLEdBQUdjLHlCQUF5QkUsdUJBQXVCLEVBQUUsV0FBVztRQUNqRUMsTUFBTTtJQUNWLElBQUk7UUFDQSxPQUFPVCxnQkFBZ0JpQixxQkFBcUIsQ0FBQ04sSUFBSSxDQUFDLElBQUlSLFNBQVNlLGNBQWMsQ0FBQyxJQUFJTixRQUFRLENBQUM7SUFDL0Y7SUFDQSxNQUFNQyxlQUFlVCw2QkFBNkJVLG1CQUFtQixDQUFDQyxRQUFRO0lBQzlFLElBQUksQ0FBQ0YsY0FBYztRQUNmLE1BQU0sSUFBSUcsTUFBTTtJQUNwQjtJQUNBLE1BQU1HLG1CQUFtQmQsNEJBQTRCZSxrQkFBa0IsQ0FBQ0wsUUFBUTtJQUNoRixJQUFJSSxvQkFBcUJBLENBQUFBLGlCQUFpQkUsUUFBUSxJQUFJRixpQkFBaUJHLFVBQVUsR0FBRztRQUNoRiwyRUFBMkU7UUFDM0UsK0RBQStEO1FBQy9ELE9BQU9ULGFBQWFVLGNBQWM7SUFDdEM7SUFDQSxPQUFPVixhQUFhckIsT0FBTztBQUMvQjtBQUNBLFNBQVNDO0lBQ0wsTUFBTW9CLGVBQWVULDZCQUE2QlUsbUJBQW1CLENBQUNDLFFBQVE7SUFDOUUsSUFBSSxDQUFDRixjQUFjO1FBQ2YsTUFBTSxJQUFJRyxNQUFNO0lBQ3BCO0lBQ0EsT0FBTyxJQUFJVCxXQUFXaUIsU0FBUyxDQUFDWCxhQUFhcEIsU0FBUztBQUMxRDtBQUVBLElBQUksQ0FBQyxPQUFPTCxRQUFRcUMsT0FBTyxLQUFLLGNBQWUsT0FBT3JDLFFBQVFxQyxPQUFPLEtBQUssWUFBWXJDLFFBQVFxQyxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9yQyxRQUFRcUMsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS3hDLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUXFDLE9BQU8sRUFBRSxjQUFjO1FBQUVwQyxPQUFPO0lBQUs7SUFDbkVILE9BQU95QyxNQUFNLENBQUN2QyxRQUFRcUMsT0FBTyxFQUFFckM7SUFDL0JFLE9BQU9GLE9BQU8sR0FBR0EsUUFBUXFDLE9BQU87QUFDbEMsRUFFQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9oZWFkZXJzLmpzPzViYTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBoZWFkZXJzOiBudWxsLFxuICAgIGNvb2tpZXM6IG51bGwsXG4gICAgZHJhZnRNb2RlOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICB9LFxuICAgIGNvb2tpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29va2llcztcbiAgICB9LFxuICAgIGRyYWZ0TW9kZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBkcmFmdE1vZGU7XG4gICAgfVxufSk7XG5jb25zdCBfcmVxdWVzdGNvb2tpZXMgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9yZXF1ZXN0LWNvb2tpZXNcIik7XG5jb25zdCBfaGVhZGVycyA9IHJlcXVpcmUoXCIuLi8uLi9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL2hlYWRlcnNcIik7XG5jb25zdCBfY29va2llcyA9IHJlcXVpcmUoXCIuLi8uLi9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2Nvb2tpZXNcIik7XG5jb25zdCBfcmVxdWVzdGFzeW5jc3RvcmFnZWV4dGVybmFsID0gcmVxdWlyZShcIi4vcmVxdWVzdC1hc3luYy1zdG9yYWdlLmV4dGVybmFsXCIpO1xuY29uc3QgX2FjdGlvbmFzeW5jc3RvcmFnZWV4dGVybmFsID0gcmVxdWlyZShcIi4vYWN0aW9uLWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWxcIik7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0XCIpO1xuY29uc3QgX2RyYWZ0bW9kZSA9IHJlcXVpcmUoXCIuL2RyYWZ0LW1vZGVcIik7XG5mdW5jdGlvbiBoZWFkZXJzKCkge1xuICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImhlYWRlcnNcIiwge1xuICAgICAgICBsaW5rOiBcImh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9idWlsZGluZy15b3VyLWFwcGxpY2F0aW9uL3JlbmRlcmluZy9zdGF0aWMtYW5kLWR5bmFtaWMjZHluYW1pYy1yZW5kZXJpbmdcIlxuICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBfaGVhZGVycy5IZWFkZXJzQWRhcHRlci5zZWFsKG5ldyBIZWFkZXJzKHt9KSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IF9yZXF1ZXN0YXN5bmNzdG9yYWdlZXh0ZXJuYWwucmVxdWVzdEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmICghcmVxdWVzdFN0b3JlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogaGVhZGVycygpIGV4cGVjdHMgdG8gaGF2ZSByZXF1ZXN0QXN5bmNTdG9yYWdlLCBub25lIGF2YWlsYWJsZS5cIik7XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0U3RvcmUuaGVhZGVycztcbn1cbmZ1bmN0aW9uIGNvb2tpZXMoKSB7XG4gICAgaWYgKCgwLCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQuc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQpKFwiY29va2llc1wiLCB7XG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcmVuZGVyaW5nL3N0YXRpYy1hbmQtZHluYW1pYyNkeW5hbWljLXJlbmRlcmluZ1wiXG4gICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIF9yZXF1ZXN0Y29va2llcy5SZXF1ZXN0Q29va2llc0FkYXB0ZXIuc2VhbChuZXcgX2Nvb2tpZXMuUmVxdWVzdENvb2tpZXMobmV3IEhlYWRlcnMoe30pKSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IF9yZXF1ZXN0YXN5bmNzdG9yYWdlZXh0ZXJuYWwucmVxdWVzdEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmICghcmVxdWVzdFN0b3JlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogY29va2llcygpIGV4cGVjdHMgdG8gaGF2ZSByZXF1ZXN0QXN5bmNTdG9yYWdlLCBub25lIGF2YWlsYWJsZS5cIik7XG4gICAgfVxuICAgIGNvbnN0IGFzeW5jQWN0aW9uU3RvcmUgPSBfYWN0aW9uYXN5bmNzdG9yYWdlZXh0ZXJuYWwuYWN0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKGFzeW5jQWN0aW9uU3RvcmUgJiYgKGFzeW5jQWN0aW9uU3RvcmUuaXNBY3Rpb24gfHwgYXN5bmNBY3Rpb25TdG9yZS5pc0FwcFJvdXRlKSkge1xuICAgICAgICAvLyBXZSBjYW4ndCBjb25kaXRpb25hbGx5IHJldHVybiBkaWZmZXJlbnQgdHlwZXMgaGVyZSBiYXNlZCBvbiB0aGUgY29udGV4dC5cbiAgICAgICAgLy8gVG8gYXZvaWQgY29uZnVzaW9uLCB3ZSBhbHdheXMgcmV0dXJuIHRoZSByZWFkb25seSB0eXBlIGhlcmUuXG4gICAgICAgIHJldHVybiByZXF1ZXN0U3RvcmUubXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0U3RvcmUuY29va2llcztcbn1cbmZ1bmN0aW9uIGRyYWZ0TW9kZSgpIHtcbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZWV4dGVybmFsLnJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIXJlcXVlc3RTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IGRyYWZ0TW9kZSgpIGV4cGVjdHMgdG8gaGF2ZSByZXF1ZXN0QXN5bmNTdG9yYWdlLCBub25lIGF2YWlsYWJsZS5cIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX2RyYWZ0bW9kZS5EcmFmdE1vZGUocmVxdWVzdFN0b3JlLmRyYWZ0TW9kZSk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiaGVhZGVycyIsImNvb2tpZXMiLCJkcmFmdE1vZGUiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGNvb2tpZXMiLCJyZXF1aXJlIiwiX2hlYWRlcnMiLCJfY29va2llcyIsIl9yZXF1ZXN0YXN5bmNzdG9yYWdlZXh0ZXJuYWwiLCJfYWN0aW9uYXN5bmNzdG9yYWdlZXh0ZXJuYWwiLCJfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQiLCJfZHJhZnRtb2RlIiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJsaW5rIiwiSGVhZGVyc0FkYXB0ZXIiLCJzZWFsIiwiSGVhZGVycyIsInJlcXVlc3RTdG9yZSIsInJlcXVlc3RBc3luY1N0b3JhZ2UiLCJnZXRTdG9yZSIsIkVycm9yIiwiUmVxdWVzdENvb2tpZXNBZGFwdGVyIiwiUmVxdWVzdENvb2tpZXMiLCJhc3luY0FjdGlvblN0b3JlIiwiYWN0aW9uQXN5bmNTdG9yYWdlIiwiaXNBY3Rpb24iLCJpc0FwcFJvdXRlIiwibXV0YWJsZUNvb2tpZXMiLCJEcmFmdE1vZGUiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/client/components/headers.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/client/components/hooks-server-context.js":
/*!***************************************************************************!*\
  !*** ../node_modules/next/dist/client/components/hooks-server-context.js ***!
  \***************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    DYNAMIC_ERROR_CODE: function() {\n        return DYNAMIC_ERROR_CODE;\n    },\n    DynamicServerError: function() {\n        return DynamicServerError;\n    }\n});\nconst DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nclass DynamicServerError extends Error {\n    constructor(type){\n        super(\"Dynamic server usage: \" + type);\n        this.digest = DYNAMIC_ERROR_CODE;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=hooks-server-context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9ob29rcy1zZXJ2ZXItY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsb0JBQW9CO1FBQ2hCLE9BQU9BO0lBQ1g7SUFDQUMsb0JBQW9CO1FBQ2hCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1ELHFCQUFxQjtBQUMzQixNQUFNQywyQkFBMkJPO0lBQzdCQyxZQUFZQyxJQUFJLENBQUM7UUFDYixLQUFLLENBQUMsMkJBQTJCQTtRQUNqQyxJQUFJLENBQUNDLE1BQU0sR0FBR1g7SUFDbEI7QUFDSjtBQUVBLElBQUksQ0FBQyxPQUFPSCxRQUFRZSxPQUFPLEtBQUssY0FBZSxPQUFPZixRQUFRZSxPQUFPLEtBQUssWUFBWWYsUUFBUWUsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPZixRQUFRZSxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLbEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRZSxPQUFPLEVBQUUsY0FBYztRQUFFZCxPQUFPO0lBQUs7SUFDbkVILE9BQU9tQixNQUFNLENBQUNqQixRQUFRZSxPQUFPLEVBQUVmO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVFlLE9BQU87QUFDbEMsRUFFQSxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9ob29rcy1zZXJ2ZXItY29udGV4dC5qcz9jY2Y2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRFlOQU1JQ19FUlJPUl9DT0RFOiBudWxsLFxuICAgIER5bmFtaWNTZXJ2ZXJFcnJvcjogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBEWU5BTUlDX0VSUk9SX0NPREU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRFlOQU1JQ19FUlJPUl9DT0RFO1xuICAgIH0sXG4gICAgRHluYW1pY1NlcnZlckVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIER5bmFtaWNTZXJ2ZXJFcnJvcjtcbiAgICB9XG59KTtcbmNvbnN0IERZTkFNSUNfRVJST1JfQ09ERSA9IFwiRFlOQU1JQ19TRVJWRVJfVVNBR0VcIjtcbmNsYXNzIER5bmFtaWNTZXJ2ZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKXtcbiAgICAgICAgc3VwZXIoXCJEeW5hbWljIHNlcnZlciB1c2FnZTogXCIgKyB0eXBlKTtcbiAgICAgICAgdGhpcy5kaWdlc3QgPSBEWU5BTUlDX0VSUk9SX0NPREU7XG4gICAgfVxufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob29rcy1zZXJ2ZXItY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJEWU5BTUlDX0VSUk9SX0NPREUiLCJEeW5hbWljU2VydmVyRXJyb3IiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwidHlwZSIsImRpZ2VzdCIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/client/components/hooks-server-context.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/client/components/static-generation-bailout.js":
/*!********************************************************************************!*\
  !*** ../node_modules/next/dist/client/components/static-generation-bailout.js ***!
  \********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"staticGenerationBailout\", ({\n    enumerable: true,\n    get: function() {\n        return staticGenerationBailout;\n    }\n}));\nconst _hooksservercontext = __webpack_require__(/*! ./hooks-server-context */ \"(rsc)/../node_modules/next/dist/client/components/hooks-server-context.js\");\nconst _staticgenerationasyncstorageexternal = __webpack_require__(/*! ./static-generation-async-storage.external */ \"./static-generation-async-storage.external\");\nclass StaticGenBailoutError extends Error {\n    constructor(...args){\n        super(...args);\n        this.code = \"NEXT_STATIC_GEN_BAILOUT\";\n    }\n}\nfunction formatErrorMessage(reason, opts) {\n    const { dynamic, link } = opts || {};\n    const suffix = link ? \" See more info here: \" + link : \"\";\n    return \"Page\" + (dynamic ? ' with `dynamic = \"' + dynamic + '\"`' : \"\") + \" couldn't be rendered statically because it used `\" + reason + \"`.\" + suffix;\n}\nconst staticGenerationBailout = (reason, param)=>{\n    let { dynamic, link } = param === void 0 ? {} : param;\n    const staticGenerationStore = _staticgenerationasyncstorageexternal.staticGenerationAsyncStorage.getStore();\n    if (!staticGenerationStore) return false;\n    if (staticGenerationStore.forceStatic) {\n        return true;\n    }\n    if (staticGenerationStore.dynamicShouldError) {\n        throw new StaticGenBailoutError(formatErrorMessage(reason, {\n            link,\n            dynamic: dynamic != null ? dynamic : \"error\"\n        }));\n    }\n    const message = formatErrorMessage(reason, {\n        dynamic,\n        // this error should be caught by Next to bail out of static generation\n        // in case it's uncaught, this link provides some additional context as to why\n        link: \"https://nextjs.org/docs/messages/dynamic-server-error\"\n    });\n    // If postpone is available, we should postpone the render.\n    staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, reason);\n    // As this is a bailout, we don't want to revalidate, so set the revalidate\n    // to 0.\n    staticGenerationStore.revalidate = 0;\n    if (staticGenerationStore.isStaticGeneration) {\n        const err = new _hooksservercontext.DynamicServerError(message);\n        staticGenerationStore.dynamicUsageDescription = reason;\n        staticGenerationStore.dynamicUsageStack = err.stack;\n        throw err;\n    }\n    return false;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-bailout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCwyREFBMEQ7SUFDdERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxzQkFBc0JDLG1CQUFPQSxDQUFDLHlHQUF3QjtBQUM1RCxNQUFNQyx3Q0FBd0NELG1CQUFPQSxDQUFDLDhGQUE0QztBQUNsRyxNQUFNRSw4QkFBOEJDO0lBQ2hDQyxZQUFZLEdBQUdDLElBQUksQ0FBQztRQUNoQixLQUFLLElBQUlBO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNBLFNBQVNDLG1CQUFtQkMsTUFBTSxFQUFFQyxJQUFJO0lBQ3BDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUUsR0FBR0YsUUFBUSxDQUFDO0lBQ25DLE1BQU1HLFNBQVNELE9BQU8sMEJBQTBCQSxPQUFPO0lBQ3ZELE9BQU8sU0FBVUQsQ0FBQUEsVUFBVSx1QkFBdUJBLFVBQVUsT0FBTyxFQUFDLElBQUssdURBQXVERixTQUFTLE9BQU9JO0FBQ3BKO0FBQ0EsTUFBTWQsMEJBQTBCLENBQUNVLFFBQVFLO0lBQ3JDLElBQUksRUFBRUgsT0FBTyxFQUFFQyxJQUFJLEVBQUUsR0FBR0UsVUFBVSxLQUFLLElBQUksQ0FBQyxJQUFJQTtJQUNoRCxNQUFNQyx3QkFBd0JiLHNDQUFzQ2MsNEJBQTRCLENBQUNDLFFBQVE7SUFDekcsSUFBSSxDQUFDRix1QkFBdUIsT0FBTztJQUNuQyxJQUFJQSxzQkFBc0JHLFdBQVcsRUFBRTtRQUNuQyxPQUFPO0lBQ1g7SUFDQSxJQUFJSCxzQkFBc0JJLGtCQUFrQixFQUFFO1FBQzFDLE1BQU0sSUFBSWhCLHNCQUFzQkssbUJBQW1CQyxRQUFRO1lBQ3ZERztZQUNBRCxTQUFTQSxXQUFXLE9BQU9BLFVBQVU7UUFDekM7SUFDSjtJQUNBLE1BQU1TLFVBQVVaLG1CQUFtQkMsUUFBUTtRQUN2Q0U7UUFDQSx1RUFBdUU7UUFDdkUsOEVBQThFO1FBQzlFQyxNQUFNO0lBQ1Y7SUFDQSwyREFBMkQ7SUFDM0RHLHNCQUFzQk0sUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJTixzQkFBc0JNLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDUCx1QkFBdUJOO0lBQzdHLDJFQUEyRTtJQUMzRSxRQUFRO0lBQ1JNLHNCQUFzQlEsVUFBVSxHQUFHO0lBQ25DLElBQUlSLHNCQUFzQlMsa0JBQWtCLEVBQUU7UUFDMUMsTUFBTUMsTUFBTSxJQUFJekIsb0JBQW9CMEIsa0JBQWtCLENBQUNOO1FBQ3ZETCxzQkFBc0JZLHVCQUF1QixHQUFHbEI7UUFDaERNLHNCQUFzQmEsaUJBQWlCLEdBQUdILElBQUlJLEtBQUs7UUFDbkQsTUFBTUo7SUFDVjtJQUNBLE9BQU87QUFDWDtBQUVBLElBQUksQ0FBQyxPQUFPOUIsUUFBUW1DLE9BQU8sS0FBSyxjQUFlLE9BQU9uQyxRQUFRbUMsT0FBTyxLQUFLLFlBQVluQyxRQUFRbUMsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPbkMsUUFBUW1DLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDckt0QyxPQUFPQyxjQUFjLENBQUNDLFFBQVFtQyxPQUFPLEVBQUUsY0FBYztRQUFFbEMsT0FBTztJQUFLO0lBQ25FSCxPQUFPdUMsTUFBTSxDQUFDckMsUUFBUW1DLE9BQU8sRUFBRW5DO0lBQy9Cc0MsT0FBT3RDLE9BQU8sR0FBR0EsUUFBUW1DLE9BQU87QUFDbEMsRUFFQSxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0LmpzP2U2ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdGF0aWNHZW5lcmF0aW9uQmFpbG91dFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQ7XG4gICAgfVxufSk7XG5jb25zdCBfaG9va3NzZXJ2ZXJjb250ZXh0ID0gcmVxdWlyZShcIi4vaG9va3Mtc2VydmVyLWNvbnRleHRcIik7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmFzeW5jc3RvcmFnZWV4dGVybmFsID0gcmVxdWlyZShcIi4vc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS5leHRlcm5hbFwiKTtcbmNsYXNzIFN0YXRpY0dlbkJhaWxvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuY29kZSA9IFwiTkVYVF9TVEFUSUNfR0VOX0JBSUxPVVRcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBmb3JtYXRFcnJvck1lc3NhZ2UocmVhc29uLCBvcHRzKSB7XG4gICAgY29uc3QgeyBkeW5hbWljLCBsaW5rIH0gPSBvcHRzIHx8IHt9O1xuICAgIGNvbnN0IHN1ZmZpeCA9IGxpbmsgPyBcIiBTZWUgbW9yZSBpbmZvIGhlcmU6IFwiICsgbGluayA6IFwiXCI7XG4gICAgcmV0dXJuIFwiUGFnZVwiICsgKGR5bmFtaWMgPyAnIHdpdGggYGR5bmFtaWMgPSBcIicgKyBkeW5hbWljICsgJ1wiYCcgOiBcIlwiKSArIFwiIGNvdWxkbid0IGJlIHJlbmRlcmVkIHN0YXRpY2FsbHkgYmVjYXVzZSBpdCB1c2VkIGBcIiArIHJlYXNvbiArIFwiYC5cIiArIHN1ZmZpeDtcbn1cbmNvbnN0IHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0ID0gKHJlYXNvbiwgcGFyYW0pPT57XG4gICAgbGV0IHsgZHluYW1pYywgbGluayB9ID0gcGFyYW0gPT09IHZvaWQgMCA/IHt9IDogcGFyYW07XG4gICAgY29uc3Qgc3RhdGljR2VuZXJhdGlvblN0b3JlID0gX3N0YXRpY2dlbmVyYXRpb25hc3luY3N0b3JhZ2VleHRlcm5hbC5zdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFzdGF0aWNHZW5lcmF0aW9uU3RvcmUpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlLmZvcmNlU3RhdGljKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNTaG91bGRFcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgU3RhdGljR2VuQmFpbG91dEVycm9yKGZvcm1hdEVycm9yTWVzc2FnZShyZWFzb24sIHtcbiAgICAgICAgICAgIGxpbmssXG4gICAgICAgICAgICBkeW5hbWljOiBkeW5hbWljICE9IG51bGwgPyBkeW5hbWljIDogXCJlcnJvclwiXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IGZvcm1hdEVycm9yTWVzc2FnZShyZWFzb24sIHtcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgLy8gdGhpcyBlcnJvciBzaG91bGQgYmUgY2F1Z2h0IGJ5IE5leHQgdG8gYmFpbCBvdXQgb2Ygc3RhdGljIGdlbmVyYXRpb25cbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIHVuY2F1Z2h0LCB0aGlzIGxpbmsgcHJvdmlkZXMgc29tZSBhZGRpdGlvbmFsIGNvbnRleHQgYXMgdG8gd2h5XG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvZHluYW1pYy1zZXJ2ZXItZXJyb3JcIlxuICAgIH0pO1xuICAgIC8vIElmIHBvc3Rwb25lIGlzIGF2YWlsYWJsZSwgd2Ugc2hvdWxkIHBvc3Rwb25lIHRoZSByZW5kZXIuXG4gICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnBvc3Rwb25lID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucG9zdHBvbmUuY2FsbChzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIHJlYXNvbik7XG4gICAgLy8gQXMgdGhpcyBpcyBhIGJhaWxvdXQsIHdlIGRvbid0IHdhbnQgdG8gcmV2YWxpZGF0ZSwgc28gc2V0IHRoZSByZXZhbGlkYXRlXG4gICAgLy8gdG8gMC5cbiAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSA9IDA7XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZS5pc1N0YXRpY0dlbmVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IF9ob29rc3NlcnZlcmNvbnRleHQuRHluYW1pY1NlcnZlckVycm9yKG1lc3NhZ2UpO1xuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1VzYWdlRGVzY3JpcHRpb24gPSByZWFzb247XG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5keW5hbWljVXNhZ2VTdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCIsIl9ob29rc3NlcnZlcmNvbnRleHQiLCJyZXF1aXJlIiwiX3N0YXRpY2dlbmVyYXRpb25hc3luY3N0b3JhZ2VleHRlcm5hbCIsIlN0YXRpY0dlbkJhaWxvdXRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJhcmdzIiwiY29kZSIsImZvcm1hdEVycm9yTWVzc2FnZSIsInJlYXNvbiIsIm9wdHMiLCJkeW5hbWljIiwibGluayIsInN1ZmZpeCIsInBhcmFtIiwic3RhdGljR2VuZXJhdGlvblN0b3JlIiwic3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSIsImdldFN0b3JlIiwiZm9yY2VTdGF0aWMiLCJkeW5hbWljU2hvdWxkRXJyb3IiLCJtZXNzYWdlIiwicG9zdHBvbmUiLCJjYWxsIiwicmV2YWxpZGF0ZSIsImlzU3RhdGljR2VuZXJhdGlvbiIsImVyciIsIkR5bmFtaWNTZXJ2ZXJFcnJvciIsImR5bmFtaWNVc2FnZURlc2NyaXB0aW9uIiwiZHluYW1pY1VzYWdlU3RhY2siLCJzdGFjayIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/client/components/static-generation-bailout.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/@edge-runtime/cookies/index.js":
/*!*************************************************************************!*\
  !*** ../node_modules/next/dist/compiled/@edge-runtime/cookies/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    RequestCookies: ()=>RequestCookies,\n    ResponseCookies: ()=>ResponseCookies,\n    parseCookie: ()=>parseCookie,\n    parseSetCookie: ()=>parseSetCookie,\n    stringifyCookie: ()=>stringifyCookie\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/serialize.ts\nfunction stringifyCookie(c) {\n    var _a;\n    const attrs = [\n        \"path\" in c && c.path && `Path=${c.path}`,\n        \"expires\" in c && (c.expires || c.expires === 0) && `Expires=${(typeof c.expires === \"number\" ? new Date(c.expires) : c.expires).toUTCString()}`,\n        \"maxAge\" in c && typeof c.maxAge === \"number\" && `Max-Age=${c.maxAge}`,\n        \"domain\" in c && c.domain && `Domain=${c.domain}`,\n        \"secure\" in c && c.secure && \"Secure\",\n        \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n        \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`,\n        \"priority\" in c && c.priority && `Priority=${c.priority}`\n    ].filter(Boolean);\n    return `${c.name}=${encodeURIComponent((_a = c.value) != null ? _a : \"\")}; ${attrs.join(\"; \")}`;\n}\nfunction parseCookie(cookie) {\n    const map = /* @__PURE__ */ new Map();\n    for (const pair of cookie.split(/; */)){\n        if (!pair) continue;\n        const splitAt = pair.indexOf(\"=\");\n        if (splitAt === -1) {\n            map.set(pair, \"true\");\n            continue;\n        }\n        const [key, value] = [\n            pair.slice(0, splitAt),\n            pair.slice(splitAt + 1)\n        ];\n        try {\n            map.set(key, decodeURIComponent(value != null ? value : \"true\"));\n        } catch  {}\n    }\n    return map;\n}\nfunction parseSetCookie(setCookie) {\n    if (!setCookie) {\n        return void 0;\n    }\n    const [[name, value], ...attributes] = parseCookie(setCookie);\n    const { domain, expires, httponly, maxage, path, samesite, secure, priority } = Object.fromEntries(attributes.map(([key, value2])=>[\n            key.toLowerCase(),\n            value2\n        ]));\n    const cookie = {\n        name,\n        value: decodeURIComponent(value),\n        domain,\n        ...expires && {\n            expires: new Date(expires)\n        },\n        ...httponly && {\n            httpOnly: true\n        },\n        ...typeof maxage === \"string\" && {\n            maxAge: Number(maxage)\n        },\n        path,\n        ...samesite && {\n            sameSite: parseSameSite(samesite)\n        },\n        ...secure && {\n            secure: true\n        },\n        ...priority && {\n            priority: parsePriority(priority)\n        }\n    };\n    return compact(cookie);\n}\nfunction compact(t) {\n    const newT = {};\n    for(const key in t){\n        if (t[key]) {\n            newT[key] = t[key];\n        }\n    }\n    return newT;\n}\nvar SAME_SITE = [\n    \"strict\",\n    \"lax\",\n    \"none\"\n];\nfunction parseSameSite(string) {\n    string = string.toLowerCase();\n    return SAME_SITE.includes(string) ? string : void 0;\n}\nvar PRIORITY = [\n    \"low\",\n    \"medium\",\n    \"high\"\n];\nfunction parsePriority(string) {\n    string = string.toLowerCase();\n    return PRIORITY.includes(string) ? string : void 0;\n}\nfunction splitCookiesString(cookiesString) {\n    if (!cookiesString) return [];\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    cookiesSeparatorFound = true;\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\n// src/request-cookies.ts\nvar RequestCookies = class {\n    constructor(requestHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        this._headers = requestHeaders;\n        const header = requestHeaders.get(\"cookie\");\n        if (header) {\n            const parsed = parseCookie(header);\n            for (const [name, value] of parsed){\n                this._parsed.set(name, {\n                    name,\n                    value\n                });\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this._parsed[Symbol.iterator]();\n    }\n    /**\n   * The amount of cookies received from the client\n   */ get size() {\n        return this._parsed.size;\n    }\n    get(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(name);\n    }\n    getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed);\n        if (!args.length) {\n            return all.map(([_, value])=>value);\n        }\n        const name = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter(([n])=>n === name).map(([_, value])=>value);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    set(...args) {\n        const [name, value] = args.length === 1 ? [\n            args[0].name,\n            args[0].value\n        ] : args;\n        const map = this._parsed;\n        map.set(name, {\n            name,\n            value\n        });\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value2])=>stringifyCookie(value2)).join(\"; \"));\n        return this;\n    }\n    /**\n   * Delete the cookies matching the passed name or names in the request.\n   */ delete(names) {\n        const map = this._parsed;\n        const result = !Array.isArray(names) ? map.delete(names) : names.map((name)=>map.delete(name));\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value])=>stringifyCookie(value)).join(\"; \"));\n        return result;\n    }\n    /**\n   * Delete all the cookies in the cookies in the request.\n   */ clear() {\n        this.delete(Array.from(this._parsed.keys()));\n        return this;\n    }\n    /**\n   * Format the cookies in the request as a string for logging\n   */ [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map((v)=>`${v.name}=${encodeURIComponent(v.value)}`).join(\"; \");\n    }\n};\n// src/response-cookies.ts\nvar ResponseCookies = class {\n    constructor(responseHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        var _a, _b, _c;\n        this._headers = responseHeaders;\n        const setCookie = (_c = (_b = (_a = responseHeaders.getSetCookie) == null ? void 0 : _a.call(responseHeaders)) != null ? _b : responseHeaders.get(\"set-cookie\")) != null ? _c : [];\n        const cookieStrings = Array.isArray(setCookie) ? setCookie : splitCookiesString(setCookie);\n        for (const cookieString of cookieStrings){\n            const parsed = parseSetCookie(cookieString);\n            if (parsed) this._parsed.set(parsed.name, parsed);\n        }\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */ get(...args) {\n        const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */ getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed.values());\n        if (!args.length) {\n            return all;\n        }\n        const key = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter((c)=>c.name === key);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */ set(...args) {\n        const [name, value, cookie] = args.length === 1 ? [\n            args[0].name,\n            args[0].value,\n            args[0]\n        ] : args;\n        const map = this._parsed;\n        map.set(name, normalizeCookie({\n            name,\n            value,\n            ...cookie\n        }));\n        replace(map, this._headers);\n        return this;\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */ delete(...args) {\n        const [name, path, domain] = typeof args[0] === \"string\" ? [\n            args[0]\n        ] : [\n            args[0].name,\n            args[0].path,\n            args[0].domain\n        ];\n        return this.set({\n            name,\n            path,\n            domain,\n            value: \"\",\n            expires: /* @__PURE__ */ new Date(0)\n        });\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map(stringifyCookie).join(\"; \");\n    }\n};\nfunction replace(bag, headers) {\n    headers.delete(\"set-cookie\");\n    for (const [, value] of bag){\n        const serialized = stringifyCookie(value);\n        headers.append(\"set-cookie\", serialized);\n    }\n}\nfunction normalizeCookie(cookie = {\n    name: \"\",\n    value: \"\"\n}) {\n    if (typeof cookie.expires === \"number\") {\n        cookie.expires = new Date(cookie.expires);\n    }\n    if (cookie.maxAge) {\n        cookie.expires = new Date(Date.now() + cookie.maxAge * 1e3);\n    }\n    if (cookie.path === null || cookie.path === void 0) {\n        cookie.path = \"/\";\n    }\n    return cookie;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/@opentelemetry/api/index.js":
/*!**********************************************************************!*\
  !*** ../node_modules/next/dist/compiled/@opentelemetry/api/index.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("(()=>{\n    \"use strict\";\n    var e = {\n        491: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ContextAPI = void 0;\n            const n = r(223);\n            const a = r(172);\n            const o = r(930);\n            const i = \"context\";\n            const c = new n.NoopContextManager;\n            class ContextAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new ContextAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalContextManager(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                active() {\n                    return this._getContextManager().active();\n                }\n                with(e, t, r, ...n) {\n                    return this._getContextManager().with(e, t, r, ...n);\n                }\n                bind(e, t) {\n                    return this._getContextManager().bind(e, t);\n                }\n                _getContextManager() {\n                    return (0, a.getGlobal)(i) || c;\n                }\n                disable() {\n                    this._getContextManager().disable();\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.ContextAPI = ContextAPI;\n        },\n        930: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagAPI = void 0;\n            const n = r(56);\n            const a = r(912);\n            const o = r(957);\n            const i = r(172);\n            const c = \"diag\";\n            class DiagAPI {\n                constructor(){\n                    function _logProxy(e) {\n                        return function(...t) {\n                            const r = (0, i.getGlobal)(\"diag\");\n                            if (!r) return;\n                            return r[e](...t);\n                        };\n                    }\n                    const e = this;\n                    const setLogger = (t, r = {\n                        logLevel: o.DiagLogLevel.INFO\n                    })=>{\n                        var n, c, s;\n                        if (t === e) {\n                            const t = new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");\n                            e.error((n = t.stack) !== null && n !== void 0 ? n : t.message);\n                            return false;\n                        }\n                        if (typeof r === \"number\") {\n                            r = {\n                                logLevel: r\n                            };\n                        }\n                        const u = (0, i.getGlobal)(\"diag\");\n                        const l = (0, a.createLogLevelDiagLogger)((c = r.logLevel) !== null && c !== void 0 ? c : o.DiagLogLevel.INFO, t);\n                        if (u && !r.suppressOverrideMessage) {\n                            const e = (s = (new Error).stack) !== null && s !== void 0 ? s : \"<failed to generate stacktrace>\";\n                            u.warn(`Current logger will be overwritten from ${e}`);\n                            l.warn(`Current logger will overwrite one already registered from ${e}`);\n                        }\n                        return (0, i.registerGlobal)(\"diag\", l, e, true);\n                    };\n                    e.setLogger = setLogger;\n                    e.disable = ()=>{\n                        (0, i.unregisterGlobal)(c, e);\n                    };\n                    e.createComponentLogger = (e)=>new n.DiagComponentLogger(e);\n                    e.verbose = _logProxy(\"verbose\");\n                    e.debug = _logProxy(\"debug\");\n                    e.info = _logProxy(\"info\");\n                    e.warn = _logProxy(\"warn\");\n                    e.error = _logProxy(\"error\");\n                }\n                static instance() {\n                    if (!this._instance) {\n                        this._instance = new DiagAPI;\n                    }\n                    return this._instance;\n                }\n            }\n            t.DiagAPI = DiagAPI;\n        },\n        653: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.MetricsAPI = void 0;\n            const n = r(660);\n            const a = r(172);\n            const o = r(930);\n            const i = \"metrics\";\n            class MetricsAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new MetricsAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalMeterProvider(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                getMeterProvider() {\n                    return (0, a.getGlobal)(i) || n.NOOP_METER_PROVIDER;\n                }\n                getMeter(e, t, r) {\n                    return this.getMeterProvider().getMeter(e, t, r);\n                }\n                disable() {\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.MetricsAPI = MetricsAPI;\n        },\n        181: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.PropagationAPI = void 0;\n            const n = r(172);\n            const a = r(874);\n            const o = r(194);\n            const i = r(277);\n            const c = r(369);\n            const s = r(930);\n            const u = \"propagation\";\n            const l = new a.NoopTextMapPropagator;\n            class PropagationAPI {\n                constructor(){\n                    this.createBaggage = c.createBaggage;\n                    this.getBaggage = i.getBaggage;\n                    this.getActiveBaggage = i.getActiveBaggage;\n                    this.setBaggage = i.setBaggage;\n                    this.deleteBaggage = i.deleteBaggage;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new PropagationAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalPropagator(e) {\n                    return (0, n.registerGlobal)(u, e, s.DiagAPI.instance());\n                }\n                inject(e, t, r = o.defaultTextMapSetter) {\n                    return this._getGlobalPropagator().inject(e, t, r);\n                }\n                extract(e, t, r = o.defaultTextMapGetter) {\n                    return this._getGlobalPropagator().extract(e, t, r);\n                }\n                fields() {\n                    return this._getGlobalPropagator().fields();\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(u, s.DiagAPI.instance());\n                }\n                _getGlobalPropagator() {\n                    return (0, n.getGlobal)(u) || l;\n                }\n            }\n            t.PropagationAPI = PropagationAPI;\n        },\n        997: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceAPI = void 0;\n            const n = r(172);\n            const a = r(846);\n            const o = r(139);\n            const i = r(607);\n            const c = r(930);\n            const s = \"trace\";\n            class TraceAPI {\n                constructor(){\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                    this.wrapSpanContext = o.wrapSpanContext;\n                    this.isSpanContextValid = o.isSpanContextValid;\n                    this.deleteSpan = i.deleteSpan;\n                    this.getSpan = i.getSpan;\n                    this.getActiveSpan = i.getActiveSpan;\n                    this.getSpanContext = i.getSpanContext;\n                    this.setSpan = i.setSpan;\n                    this.setSpanContext = i.setSpanContext;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new TraceAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalTracerProvider(e) {\n                    const t = (0, n.registerGlobal)(s, this._proxyTracerProvider, c.DiagAPI.instance());\n                    if (t) {\n                        this._proxyTracerProvider.setDelegate(e);\n                    }\n                    return t;\n                }\n                getTracerProvider() {\n                    return (0, n.getGlobal)(s) || this._proxyTracerProvider;\n                }\n                getTracer(e, t) {\n                    return this.getTracerProvider().getTracer(e, t);\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(s, c.DiagAPI.instance());\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                }\n            }\n            t.TraceAPI = TraceAPI;\n        },\n        277: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.deleteBaggage = t.setBaggage = t.getActiveBaggage = t.getBaggage = void 0;\n            const n = r(491);\n            const a = r(780);\n            const o = (0, a.createContextKey)(\"OpenTelemetry Baggage Key\");\n            function getBaggage(e) {\n                return e.getValue(o) || undefined;\n            }\n            t.getBaggage = getBaggage;\n            function getActiveBaggage() {\n                return getBaggage(n.ContextAPI.getInstance().active());\n            }\n            t.getActiveBaggage = getActiveBaggage;\n            function setBaggage(e, t) {\n                return e.setValue(o, t);\n            }\n            t.setBaggage = setBaggage;\n            function deleteBaggage(e) {\n                return e.deleteValue(o);\n            }\n            t.deleteBaggage = deleteBaggage;\n        },\n        993: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.BaggageImpl = void 0;\n            class BaggageImpl {\n                constructor(e){\n                    this._entries = e ? new Map(e) : new Map;\n                }\n                getEntry(e) {\n                    const t = this._entries.get(e);\n                    if (!t) {\n                        return undefined;\n                    }\n                    return Object.assign({}, t);\n                }\n                getAllEntries() {\n                    return Array.from(this._entries.entries()).map(([e, t])=>[\n                            e,\n                            t\n                        ]);\n                }\n                setEntry(e, t) {\n                    const r = new BaggageImpl(this._entries);\n                    r._entries.set(e, t);\n                    return r;\n                }\n                removeEntry(e) {\n                    const t = new BaggageImpl(this._entries);\n                    t._entries.delete(e);\n                    return t;\n                }\n                removeEntries(...e) {\n                    const t = new BaggageImpl(this._entries);\n                    for (const r of e){\n                        t._entries.delete(r);\n                    }\n                    return t;\n                }\n                clear() {\n                    return new BaggageImpl;\n                }\n            }\n            t.BaggageImpl = BaggageImpl;\n        },\n        830: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataSymbol = void 0;\n            t.baggageEntryMetadataSymbol = Symbol(\"BaggageEntryMetadata\");\n        },\n        369: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataFromString = t.createBaggage = void 0;\n            const n = r(930);\n            const a = r(993);\n            const o = r(830);\n            const i = n.DiagAPI.instance();\n            function createBaggage(e = {}) {\n                return new a.BaggageImpl(new Map(Object.entries(e)));\n            }\n            t.createBaggage = createBaggage;\n            function baggageEntryMetadataFromString(e) {\n                if (typeof e !== \"string\") {\n                    i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);\n                    e = \"\";\n                }\n                return {\n                    __TYPE__: o.baggageEntryMetadataSymbol,\n                    toString () {\n                        return e;\n                    }\n                };\n            }\n            t.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n        },\n        67: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.context = void 0;\n            const n = r(491);\n            t.context = n.ContextAPI.getInstance();\n        },\n        223: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopContextManager = void 0;\n            const n = r(780);\n            class NoopContextManager {\n                active() {\n                    return n.ROOT_CONTEXT;\n                }\n                with(e, t, r, ...n) {\n                    return t.call(r, ...n);\n                }\n                bind(e, t) {\n                    return t;\n                }\n                enable() {\n                    return this;\n                }\n                disable() {\n                    return this;\n                }\n            }\n            t.NoopContextManager = NoopContextManager;\n        },\n        780: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ROOT_CONTEXT = t.createContextKey = void 0;\n            function createContextKey(e) {\n                return Symbol.for(e);\n            }\n            t.createContextKey = createContextKey;\n            class BaseContext {\n                constructor(e){\n                    const t = this;\n                    t._currentContext = e ? new Map(e) : new Map;\n                    t.getValue = (e)=>t._currentContext.get(e);\n                    t.setValue = (e, r)=>{\n                        const n = new BaseContext(t._currentContext);\n                        n._currentContext.set(e, r);\n                        return n;\n                    };\n                    t.deleteValue = (e)=>{\n                        const r = new BaseContext(t._currentContext);\n                        r._currentContext.delete(e);\n                        return r;\n                    };\n                }\n            }\n            t.ROOT_CONTEXT = new BaseContext;\n        },\n        506: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.diag = void 0;\n            const n = r(930);\n            t.diag = n.DiagAPI.instance();\n        },\n        56: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagComponentLogger = void 0;\n            const n = r(172);\n            class DiagComponentLogger {\n                constructor(e){\n                    this._namespace = e.namespace || \"DiagComponentLogger\";\n                }\n                debug(...e) {\n                    return logProxy(\"debug\", this._namespace, e);\n                }\n                error(...e) {\n                    return logProxy(\"error\", this._namespace, e);\n                }\n                info(...e) {\n                    return logProxy(\"info\", this._namespace, e);\n                }\n                warn(...e) {\n                    return logProxy(\"warn\", this._namespace, e);\n                }\n                verbose(...e) {\n                    return logProxy(\"verbose\", this._namespace, e);\n                }\n            }\n            t.DiagComponentLogger = DiagComponentLogger;\n            function logProxy(e, t, r) {\n                const a = (0, n.getGlobal)(\"diag\");\n                if (!a) {\n                    return;\n                }\n                r.unshift(t);\n                return a[e](...r);\n            }\n        },\n        972: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagConsoleLogger = void 0;\n            const r = [\n                {\n                    n: \"error\",\n                    c: \"error\"\n                },\n                {\n                    n: \"warn\",\n                    c: \"warn\"\n                },\n                {\n                    n: \"info\",\n                    c: \"info\"\n                },\n                {\n                    n: \"debug\",\n                    c: \"debug\"\n                },\n                {\n                    n: \"verbose\",\n                    c: \"trace\"\n                }\n            ];\n            class DiagConsoleLogger {\n                constructor(){\n                    function _consoleFunc(e) {\n                        return function(...t) {\n                            if (console) {\n                                let r = console[e];\n                                if (typeof r !== \"function\") {\n                                    r = console.log;\n                                }\n                                if (typeof r === \"function\") {\n                                    return r.apply(console, t);\n                                }\n                            }\n                        };\n                    }\n                    for(let e = 0; e < r.length; e++){\n                        this[r[e].n] = _consoleFunc(r[e].c);\n                    }\n                }\n            }\n            t.DiagConsoleLogger = DiagConsoleLogger;\n        },\n        912: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createLogLevelDiagLogger = void 0;\n            const n = r(957);\n            function createLogLevelDiagLogger(e, t) {\n                if (e < n.DiagLogLevel.NONE) {\n                    e = n.DiagLogLevel.NONE;\n                } else if (e > n.DiagLogLevel.ALL) {\n                    e = n.DiagLogLevel.ALL;\n                }\n                t = t || {};\n                function _filterFunc(r, n) {\n                    const a = t[r];\n                    if (typeof a === \"function\" && e >= n) {\n                        return a.bind(t);\n                    }\n                    return function() {};\n                }\n                return {\n                    error: _filterFunc(\"error\", n.DiagLogLevel.ERROR),\n                    warn: _filterFunc(\"warn\", n.DiagLogLevel.WARN),\n                    info: _filterFunc(\"info\", n.DiagLogLevel.INFO),\n                    debug: _filterFunc(\"debug\", n.DiagLogLevel.DEBUG),\n                    verbose: _filterFunc(\"verbose\", n.DiagLogLevel.VERBOSE)\n                };\n            }\n            t.createLogLevelDiagLogger = createLogLevelDiagLogger;\n        },\n        957: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagLogLevel = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"ERROR\"] = 30] = \"ERROR\";\n                e[e[\"WARN\"] = 50] = \"WARN\";\n                e[e[\"INFO\"] = 60] = \"INFO\";\n                e[e[\"DEBUG\"] = 70] = \"DEBUG\";\n                e[e[\"VERBOSE\"] = 80] = \"VERBOSE\";\n                e[e[\"ALL\"] = 9999] = \"ALL\";\n            })(r = t.DiagLogLevel || (t.DiagLogLevel = {}));\n        },\n        172: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.unregisterGlobal = t.getGlobal = t.registerGlobal = void 0;\n            const n = r(200);\n            const a = r(521);\n            const o = r(130);\n            const i = a.VERSION.split(\".\")[0];\n            const c = Symbol.for(`opentelemetry.js.api.${i}`);\n            const s = n._globalThis;\n            function registerGlobal(e, t, r, n = false) {\n                var o;\n                const i = s[c] = (o = s[c]) !== null && o !== void 0 ? o : {\n                    version: a.VERSION\n                };\n                if (!n && i[e]) {\n                    const t = new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                if (i.version !== a.VERSION) {\n                    const t = new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                i[e] = t;\n                r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);\n                return true;\n            }\n            t.registerGlobal = registerGlobal;\n            function getGlobal(e) {\n                var t, r;\n                const n = (t = s[c]) === null || t === void 0 ? void 0 : t.version;\n                if (!n || !(0, o.isCompatible)(n)) {\n                    return;\n                }\n                return (r = s[c]) === null || r === void 0 ? void 0 : r[e];\n            }\n            t.getGlobal = getGlobal;\n            function unregisterGlobal(e, t) {\n                t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);\n                const r = s[c];\n                if (r) {\n                    delete r[e];\n                }\n            }\n            t.unregisterGlobal = unregisterGlobal;\n        },\n        130: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.isCompatible = t._makeCompatibilityCheck = void 0;\n            const n = r(521);\n            const a = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n            function _makeCompatibilityCheck(e) {\n                const t = new Set([\n                    e\n                ]);\n                const r = new Set;\n                const n = e.match(a);\n                if (!n) {\n                    return ()=>false;\n                }\n                const o = {\n                    major: +n[1],\n                    minor: +n[2],\n                    patch: +n[3],\n                    prerelease: n[4]\n                };\n                if (o.prerelease != null) {\n                    return function isExactmatch(t) {\n                        return t === e;\n                    };\n                }\n                function _reject(e) {\n                    r.add(e);\n                    return false;\n                }\n                function _accept(e) {\n                    t.add(e);\n                    return true;\n                }\n                return function isCompatible(e) {\n                    if (t.has(e)) {\n                        return true;\n                    }\n                    if (r.has(e)) {\n                        return false;\n                    }\n                    const n = e.match(a);\n                    if (!n) {\n                        return _reject(e);\n                    }\n                    const i = {\n                        major: +n[1],\n                        minor: +n[2],\n                        patch: +n[3],\n                        prerelease: n[4]\n                    };\n                    if (i.prerelease != null) {\n                        return _reject(e);\n                    }\n                    if (o.major !== i.major) {\n                        return _reject(e);\n                    }\n                    if (o.major === 0) {\n                        if (o.minor === i.minor && o.patch <= i.patch) {\n                            return _accept(e);\n                        }\n                        return _reject(e);\n                    }\n                    if (o.minor <= i.minor) {\n                        return _accept(e);\n                    }\n                    return _reject(e);\n                };\n            }\n            t._makeCompatibilityCheck = _makeCompatibilityCheck;\n            t.isCompatible = _makeCompatibilityCheck(n.VERSION);\n        },\n        886: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.metrics = void 0;\n            const n = r(653);\n            t.metrics = n.MetricsAPI.getInstance();\n        },\n        901: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ValueType = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INT\"] = 0] = \"INT\";\n                e[e[\"DOUBLE\"] = 1] = \"DOUBLE\";\n            })(r = t.ValueType || (t.ValueType = {}));\n        },\n        102: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createNoopMeter = t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = t.NOOP_OBSERVABLE_GAUGE_METRIC = t.NOOP_OBSERVABLE_COUNTER_METRIC = t.NOOP_UP_DOWN_COUNTER_METRIC = t.NOOP_HISTOGRAM_METRIC = t.NOOP_COUNTER_METRIC = t.NOOP_METER = t.NoopObservableUpDownCounterMetric = t.NoopObservableGaugeMetric = t.NoopObservableCounterMetric = t.NoopObservableMetric = t.NoopHistogramMetric = t.NoopUpDownCounterMetric = t.NoopCounterMetric = t.NoopMetric = t.NoopMeter = void 0;\n            class NoopMeter {\n                constructor(){}\n                createHistogram(e, r) {\n                    return t.NOOP_HISTOGRAM_METRIC;\n                }\n                createCounter(e, r) {\n                    return t.NOOP_COUNTER_METRIC;\n                }\n                createUpDownCounter(e, r) {\n                    return t.NOOP_UP_DOWN_COUNTER_METRIC;\n                }\n                createObservableGauge(e, r) {\n                    return t.NOOP_OBSERVABLE_GAUGE_METRIC;\n                }\n                createObservableCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_COUNTER_METRIC;\n                }\n                createObservableUpDownCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n                }\n                addBatchObservableCallback(e, t) {}\n                removeBatchObservableCallback(e) {}\n            }\n            t.NoopMeter = NoopMeter;\n            class NoopMetric {\n            }\n            t.NoopMetric = NoopMetric;\n            class NoopCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopCounterMetric = NoopCounterMetric;\n            class NoopUpDownCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopUpDownCounterMetric = NoopUpDownCounterMetric;\n            class NoopHistogramMetric extends NoopMetric {\n                record(e, t) {}\n            }\n            t.NoopHistogramMetric = NoopHistogramMetric;\n            class NoopObservableMetric {\n                addCallback(e) {}\n                removeCallback(e) {}\n            }\n            t.NoopObservableMetric = NoopObservableMetric;\n            class NoopObservableCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableCounterMetric = NoopObservableCounterMetric;\n            class NoopObservableGaugeMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableGaugeMetric = NoopObservableGaugeMetric;\n            class NoopObservableUpDownCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableUpDownCounterMetric = NoopObservableUpDownCounterMetric;\n            t.NOOP_METER = new NoopMeter;\n            t.NOOP_COUNTER_METRIC = new NoopCounterMetric;\n            t.NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric;\n            t.NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric;\n            t.NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric;\n            t.NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric;\n            t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric;\n            function createNoopMeter() {\n                return t.NOOP_METER;\n            }\n            t.createNoopMeter = createNoopMeter;\n        },\n        660: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NOOP_METER_PROVIDER = t.NoopMeterProvider = void 0;\n            const n = r(102);\n            class NoopMeterProvider {\n                getMeter(e, t, r) {\n                    return n.NOOP_METER;\n                }\n            }\n            t.NoopMeterProvider = NoopMeterProvider;\n            t.NOOP_METER_PROVIDER = new NoopMeterProvider;\n        },\n        200: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(46), t);\n        },\n        651: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t._globalThis = void 0;\n            t._globalThis = typeof globalThis === \"object\" ? globalThis : global;\n        },\n        46: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(651), t);\n        },\n        939: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.propagation = void 0;\n            const n = r(181);\n            t.propagation = n.PropagationAPI.getInstance();\n        },\n        874: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTextMapPropagator = void 0;\n            class NoopTextMapPropagator {\n                inject(e, t) {}\n                extract(e, t) {\n                    return e;\n                }\n                fields() {\n                    return [];\n                }\n            }\n            t.NoopTextMapPropagator = NoopTextMapPropagator;\n        },\n        194: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.defaultTextMapSetter = t.defaultTextMapGetter = void 0;\n            t.defaultTextMapGetter = {\n                get (e, t) {\n                    if (e == null) {\n                        return undefined;\n                    }\n                    return e[t];\n                },\n                keys (e) {\n                    if (e == null) {\n                        return [];\n                    }\n                    return Object.keys(e);\n                }\n            };\n            t.defaultTextMapSetter = {\n                set (e, t, r) {\n                    if (e == null) {\n                        return;\n                    }\n                    e[t] = r;\n                }\n            };\n        },\n        845: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.trace = void 0;\n            const n = r(997);\n            t.trace = n.TraceAPI.getInstance();\n        },\n        403: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NonRecordingSpan = void 0;\n            const n = r(476);\n            class NonRecordingSpan {\n                constructor(e = n.INVALID_SPAN_CONTEXT){\n                    this._spanContext = e;\n                }\n                spanContext() {\n                    return this._spanContext;\n                }\n                setAttribute(e, t) {\n                    return this;\n                }\n                setAttributes(e) {\n                    return this;\n                }\n                addEvent(e, t) {\n                    return this;\n                }\n                setStatus(e) {\n                    return this;\n                }\n                updateName(e) {\n                    return this;\n                }\n                end(e) {}\n                isRecording() {\n                    return false;\n                }\n                recordException(e, t) {}\n            }\n            t.NonRecordingSpan = NonRecordingSpan;\n        },\n        614: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracer = void 0;\n            const n = r(491);\n            const a = r(607);\n            const o = r(403);\n            const i = r(139);\n            const c = n.ContextAPI.getInstance();\n            class NoopTracer {\n                startSpan(e, t, r = c.active()) {\n                    const n = Boolean(t === null || t === void 0 ? void 0 : t.root);\n                    if (n) {\n                        return new o.NonRecordingSpan;\n                    }\n                    const s = r && (0, a.getSpanContext)(r);\n                    if (isSpanContext(s) && (0, i.isSpanContextValid)(s)) {\n                        return new o.NonRecordingSpan(s);\n                    } else {\n                        return new o.NonRecordingSpan;\n                    }\n                }\n                startActiveSpan(e, t, r, n) {\n                    let o;\n                    let i;\n                    let s;\n                    if (arguments.length < 2) {\n                        return;\n                    } else if (arguments.length === 2) {\n                        s = t;\n                    } else if (arguments.length === 3) {\n                        o = t;\n                        s = r;\n                    } else {\n                        o = t;\n                        i = r;\n                        s = n;\n                    }\n                    const u = i !== null && i !== void 0 ? i : c.active();\n                    const l = this.startSpan(e, o, u);\n                    const g = (0, a.setSpan)(u, l);\n                    return c.with(g, s, undefined, l);\n                }\n            }\n            t.NoopTracer = NoopTracer;\n            function isSpanContext(e) {\n                return typeof e === \"object\" && typeof e[\"spanId\"] === \"string\" && typeof e[\"traceId\"] === \"string\" && typeof e[\"traceFlags\"] === \"number\";\n            }\n        },\n        124: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracerProvider = void 0;\n            const n = r(614);\n            class NoopTracerProvider {\n                getTracer(e, t, r) {\n                    return new n.NoopTracer;\n                }\n            }\n            t.NoopTracerProvider = NoopTracerProvider;\n        },\n        125: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracer = void 0;\n            const n = r(614);\n            const a = new n.NoopTracer;\n            class ProxyTracer {\n                constructor(e, t, r, n){\n                    this._provider = e;\n                    this.name = t;\n                    this.version = r;\n                    this.options = n;\n                }\n                startSpan(e, t, r) {\n                    return this._getTracer().startSpan(e, t, r);\n                }\n                startActiveSpan(e, t, r, n) {\n                    const a = this._getTracer();\n                    return Reflect.apply(a.startActiveSpan, a, arguments);\n                }\n                _getTracer() {\n                    if (this._delegate) {\n                        return this._delegate;\n                    }\n                    const e = this._provider.getDelegateTracer(this.name, this.version, this.options);\n                    if (!e) {\n                        return a;\n                    }\n                    this._delegate = e;\n                    return this._delegate;\n                }\n            }\n            t.ProxyTracer = ProxyTracer;\n        },\n        846: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracerProvider = void 0;\n            const n = r(125);\n            const a = r(124);\n            const o = new a.NoopTracerProvider;\n            class ProxyTracerProvider {\n                getTracer(e, t, r) {\n                    var a;\n                    return (a = this.getDelegateTracer(e, t, r)) !== null && a !== void 0 ? a : new n.ProxyTracer(this, e, t, r);\n                }\n                getDelegate() {\n                    var e;\n                    return (e = this._delegate) !== null && e !== void 0 ? e : o;\n                }\n                setDelegate(e) {\n                    this._delegate = e;\n                }\n                getDelegateTracer(e, t, r) {\n                    var n;\n                    return (n = this._delegate) === null || n === void 0 ? void 0 : n.getTracer(e, t, r);\n                }\n            }\n            t.ProxyTracerProvider = ProxyTracerProvider;\n        },\n        996: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SamplingDecision = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n                e[e[\"RECORD\"] = 1] = \"RECORD\";\n                e[e[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n            })(r = t.SamplingDecision || (t.SamplingDecision = {}));\n        },\n        607: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.getSpanContext = t.setSpanContext = t.deleteSpan = t.setSpan = t.getActiveSpan = t.getSpan = void 0;\n            const n = r(780);\n            const a = r(403);\n            const o = r(491);\n            const i = (0, n.createContextKey)(\"OpenTelemetry Context Key SPAN\");\n            function getSpan(e) {\n                return e.getValue(i) || undefined;\n            }\n            t.getSpan = getSpan;\n            function getActiveSpan() {\n                return getSpan(o.ContextAPI.getInstance().active());\n            }\n            t.getActiveSpan = getActiveSpan;\n            function setSpan(e, t) {\n                return e.setValue(i, t);\n            }\n            t.setSpan = setSpan;\n            function deleteSpan(e) {\n                return e.deleteValue(i);\n            }\n            t.deleteSpan = deleteSpan;\n            function setSpanContext(e, t) {\n                return setSpan(e, new a.NonRecordingSpan(t));\n            }\n            t.setSpanContext = setSpanContext;\n            function getSpanContext(e) {\n                var t;\n                return (t = getSpan(e)) === null || t === void 0 ? void 0 : t.spanContext();\n            }\n            t.getSpanContext = getSpanContext;\n        },\n        325: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceStateImpl = void 0;\n            const n = r(564);\n            const a = 32;\n            const o = 512;\n            const i = \",\";\n            const c = \"=\";\n            class TraceStateImpl {\n                constructor(e){\n                    this._internalState = new Map;\n                    if (e) this._parse(e);\n                }\n                set(e, t) {\n                    const r = this._clone();\n                    if (r._internalState.has(e)) {\n                        r._internalState.delete(e);\n                    }\n                    r._internalState.set(e, t);\n                    return r;\n                }\n                unset(e) {\n                    const t = this._clone();\n                    t._internalState.delete(e);\n                    return t;\n                }\n                get(e) {\n                    return this._internalState.get(e);\n                }\n                serialize() {\n                    return this._keys().reduce((e, t)=>{\n                        e.push(t + c + this.get(t));\n                        return e;\n                    }, []).join(i);\n                }\n                _parse(e) {\n                    if (e.length > o) return;\n                    this._internalState = e.split(i).reverse().reduce((e, t)=>{\n                        const r = t.trim();\n                        const a = r.indexOf(c);\n                        if (a !== -1) {\n                            const o = r.slice(0, a);\n                            const i = r.slice(a + 1, t.length);\n                            if ((0, n.validateKey)(o) && (0, n.validateValue)(i)) {\n                                e.set(o, i);\n                            } else {}\n                        }\n                        return e;\n                    }, new Map);\n                    if (this._internalState.size > a) {\n                        this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, a));\n                    }\n                }\n                _keys() {\n                    return Array.from(this._internalState.keys()).reverse();\n                }\n                _clone() {\n                    const e = new TraceStateImpl;\n                    e._internalState = new Map(this._internalState);\n                    return e;\n                }\n            }\n            t.TraceStateImpl = TraceStateImpl;\n        },\n        564: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.validateValue = t.validateKey = void 0;\n            const r = \"[_0-9a-z-*/]\";\n            const n = `[a-z]${r}{0,255}`;\n            const a = `[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;\n            const o = new RegExp(`^(?:${n}|${a})$`);\n            const i = /^[ -~]{0,255}[!-~]$/;\n            const c = /,|=/;\n            function validateKey(e) {\n                return o.test(e);\n            }\n            t.validateKey = validateKey;\n            function validateValue(e) {\n                return i.test(e) && !c.test(e);\n            }\n            t.validateValue = validateValue;\n        },\n        98: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createTraceState = void 0;\n            const n = r(325);\n            function createTraceState(e) {\n                return new n.TraceStateImpl(e);\n            }\n            t.createTraceState = createTraceState;\n        },\n        476: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.INVALID_SPAN_CONTEXT = t.INVALID_TRACEID = t.INVALID_SPANID = void 0;\n            const n = r(475);\n            t.INVALID_SPANID = \"0000000000000000\";\n            t.INVALID_TRACEID = \"00000000000000000000000000000000\";\n            t.INVALID_SPAN_CONTEXT = {\n                traceId: t.INVALID_TRACEID,\n                spanId: t.INVALID_SPANID,\n                traceFlags: n.TraceFlags.NONE\n            };\n        },\n        357: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanKind = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INTERNAL\"] = 0] = \"INTERNAL\";\n                e[e[\"SERVER\"] = 1] = \"SERVER\";\n                e[e[\"CLIENT\"] = 2] = \"CLIENT\";\n                e[e[\"PRODUCER\"] = 3] = \"PRODUCER\";\n                e[e[\"CONSUMER\"] = 4] = \"CONSUMER\";\n            })(r = t.SpanKind || (t.SpanKind = {}));\n        },\n        139: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.wrapSpanContext = t.isSpanContextValid = t.isValidSpanId = t.isValidTraceId = void 0;\n            const n = r(476);\n            const a = r(403);\n            const o = /^([0-9a-f]{32})$/i;\n            const i = /^[0-9a-f]{16}$/i;\n            function isValidTraceId(e) {\n                return o.test(e) && e !== n.INVALID_TRACEID;\n            }\n            t.isValidTraceId = isValidTraceId;\n            function isValidSpanId(e) {\n                return i.test(e) && e !== n.INVALID_SPANID;\n            }\n            t.isValidSpanId = isValidSpanId;\n            function isSpanContextValid(e) {\n                return isValidTraceId(e.traceId) && isValidSpanId(e.spanId);\n            }\n            t.isSpanContextValid = isSpanContextValid;\n            function wrapSpanContext(e) {\n                return new a.NonRecordingSpan(e);\n            }\n            t.wrapSpanContext = wrapSpanContext;\n        },\n        847: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanStatusCode = void 0;\n            var r;\n            (function(e) {\n                e[e[\"UNSET\"] = 0] = \"UNSET\";\n                e[e[\"OK\"] = 1] = \"OK\";\n                e[e[\"ERROR\"] = 2] = \"ERROR\";\n            })(r = t.SpanStatusCode || (t.SpanStatusCode = {}));\n        },\n        475: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceFlags = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"SAMPLED\"] = 1] = \"SAMPLED\";\n            })(r = t.TraceFlags || (t.TraceFlags = {}));\n        },\n        521: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.VERSION = void 0;\n            t.VERSION = \"1.6.0\";\n        }\n    };\n    var t = {};\n    function __nccwpck_require__(r) {\n        var n = t[r];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var a = t[r] = {\n            exports: {}\n        };\n        var o = true;\n        try {\n            e[r].call(a.exports, a, a.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete t[r];\n        }\n        return a.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var r = {};\n    (()=>{\n        var e = r;\n        Object.defineProperty(e, \"__esModule\", {\n            value: true\n        });\n        e.trace = e.propagation = e.metrics = e.diag = e.context = e.INVALID_SPAN_CONTEXT = e.INVALID_TRACEID = e.INVALID_SPANID = e.isValidSpanId = e.isValidTraceId = e.isSpanContextValid = e.createTraceState = e.TraceFlags = e.SpanStatusCode = e.SpanKind = e.SamplingDecision = e.ProxyTracerProvider = e.ProxyTracer = e.defaultTextMapSetter = e.defaultTextMapGetter = e.ValueType = e.createNoopMeter = e.DiagLogLevel = e.DiagConsoleLogger = e.ROOT_CONTEXT = e.createContextKey = e.baggageEntryMetadataFromString = void 0;\n        var t = __nccwpck_require__(369);\n        Object.defineProperty(e, \"baggageEntryMetadataFromString\", {\n            enumerable: true,\n            get: function() {\n                return t.baggageEntryMetadataFromString;\n            }\n        });\n        var n = __nccwpck_require__(780);\n        Object.defineProperty(e, \"createContextKey\", {\n            enumerable: true,\n            get: function() {\n                return n.createContextKey;\n            }\n        });\n        Object.defineProperty(e, \"ROOT_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return n.ROOT_CONTEXT;\n            }\n        });\n        var a = __nccwpck_require__(972);\n        Object.defineProperty(e, \"DiagConsoleLogger\", {\n            enumerable: true,\n            get: function() {\n                return a.DiagConsoleLogger;\n            }\n        });\n        var o = __nccwpck_require__(957);\n        Object.defineProperty(e, \"DiagLogLevel\", {\n            enumerable: true,\n            get: function() {\n                return o.DiagLogLevel;\n            }\n        });\n        var i = __nccwpck_require__(102);\n        Object.defineProperty(e, \"createNoopMeter\", {\n            enumerable: true,\n            get: function() {\n                return i.createNoopMeter;\n            }\n        });\n        var c = __nccwpck_require__(901);\n        Object.defineProperty(e, \"ValueType\", {\n            enumerable: true,\n            get: function() {\n                return c.ValueType;\n            }\n        });\n        var s = __nccwpck_require__(194);\n        Object.defineProperty(e, \"defaultTextMapGetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapGetter;\n            }\n        });\n        Object.defineProperty(e, \"defaultTextMapSetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapSetter;\n            }\n        });\n        var u = __nccwpck_require__(125);\n        Object.defineProperty(e, \"ProxyTracer\", {\n            enumerable: true,\n            get: function() {\n                return u.ProxyTracer;\n            }\n        });\n        var l = __nccwpck_require__(846);\n        Object.defineProperty(e, \"ProxyTracerProvider\", {\n            enumerable: true,\n            get: function() {\n                return l.ProxyTracerProvider;\n            }\n        });\n        var g = __nccwpck_require__(996);\n        Object.defineProperty(e, \"SamplingDecision\", {\n            enumerable: true,\n            get: function() {\n                return g.SamplingDecision;\n            }\n        });\n        var p = __nccwpck_require__(357);\n        Object.defineProperty(e, \"SpanKind\", {\n            enumerable: true,\n            get: function() {\n                return p.SpanKind;\n            }\n        });\n        var d = __nccwpck_require__(847);\n        Object.defineProperty(e, \"SpanStatusCode\", {\n            enumerable: true,\n            get: function() {\n                return d.SpanStatusCode;\n            }\n        });\n        var _ = __nccwpck_require__(475);\n        Object.defineProperty(e, \"TraceFlags\", {\n            enumerable: true,\n            get: function() {\n                return _.TraceFlags;\n            }\n        });\n        var f = __nccwpck_require__(98);\n        Object.defineProperty(e, \"createTraceState\", {\n            enumerable: true,\n            get: function() {\n                return f.createTraceState;\n            }\n        });\n        var b = __nccwpck_require__(139);\n        Object.defineProperty(e, \"isSpanContextValid\", {\n            enumerable: true,\n            get: function() {\n                return b.isSpanContextValid;\n            }\n        });\n        Object.defineProperty(e, \"isValidTraceId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidTraceId;\n            }\n        });\n        Object.defineProperty(e, \"isValidSpanId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidSpanId;\n            }\n        });\n        var v = __nccwpck_require__(476);\n        Object.defineProperty(e, \"INVALID_SPANID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPANID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_TRACEID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_TRACEID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_SPAN_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPAN_CONTEXT;\n            }\n        });\n        const O = __nccwpck_require__(67);\n        Object.defineProperty(e, \"context\", {\n            enumerable: true,\n            get: function() {\n                return O.context;\n            }\n        });\n        const P = __nccwpck_require__(506);\n        Object.defineProperty(e, \"diag\", {\n            enumerable: true,\n            get: function() {\n                return P.diag;\n            }\n        });\n        const N = __nccwpck_require__(886);\n        Object.defineProperty(e, \"metrics\", {\n            enumerable: true,\n            get: function() {\n                return N.metrics;\n            }\n        });\n        const S = __nccwpck_require__(939);\n        Object.defineProperty(e, \"propagation\", {\n            enumerable: true,\n            get: function() {\n                return S.propagation;\n            }\n        });\n        const C = __nccwpck_require__(845);\n        Object.defineProperty(e, \"trace\", {\n            enumerable: true,\n            get: function() {\n                return C.trace;\n            }\n        });\n        e[\"default\"] = {\n            context: O.context,\n            diag: P.diag,\n            metrics: N.metrics,\n            propagation: S.propagation,\n            trace: C.trace\n        };\n    })();\n    module.exports = r;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9Ab3BlbnRlbGVtZXRyeS9hcGkvaW5kZXguanM/YjQ2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIoKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgZT17NDkxOihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuQ29udGV4dEFQST12b2lkIDA7Y29uc3Qgbj1yKDIyMyk7Y29uc3QgYT1yKDE3Mik7Y29uc3Qgbz1yKDkzMCk7Y29uc3QgaT1cImNvbnRleHRcIjtjb25zdCBjPW5ldyBuLk5vb3BDb250ZXh0TWFuYWdlcjtjbGFzcyBDb250ZXh0QVBJe2NvbnN0cnVjdG9yKCl7fXN0YXRpYyBnZXRJbnN0YW5jZSgpe2lmKCF0aGlzLl9pbnN0YW5jZSl7dGhpcy5faW5zdGFuY2U9bmV3IENvbnRleHRBUEl9cmV0dXJuIHRoaXMuX2luc3RhbmNlfXNldEdsb2JhbENvbnRleHRNYW5hZ2VyKGUpe3JldHVybigwLGEucmVnaXN0ZXJHbG9iYWwpKGksZSxvLkRpYWdBUEkuaW5zdGFuY2UoKSl9YWN0aXZlKCl7cmV0dXJuIHRoaXMuX2dldENvbnRleHRNYW5hZ2VyKCkuYWN0aXZlKCl9d2l0aChlLHQsciwuLi5uKXtyZXR1cm4gdGhpcy5fZ2V0Q29udGV4dE1hbmFnZXIoKS53aXRoKGUsdCxyLC4uLm4pfWJpbmQoZSx0KXtyZXR1cm4gdGhpcy5fZ2V0Q29udGV4dE1hbmFnZXIoKS5iaW5kKGUsdCl9X2dldENvbnRleHRNYW5hZ2VyKCl7cmV0dXJuKDAsYS5nZXRHbG9iYWwpKGkpfHxjfWRpc2FibGUoKXt0aGlzLl9nZXRDb250ZXh0TWFuYWdlcigpLmRpc2FibGUoKTsoMCxhLnVucmVnaXN0ZXJHbG9iYWwpKGksby5EaWFnQVBJLmluc3RhbmNlKCkpfX10LkNvbnRleHRBUEk9Q29udGV4dEFQSX0sOTMwOihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuRGlhZ0FQST12b2lkIDA7Y29uc3Qgbj1yKDU2KTtjb25zdCBhPXIoOTEyKTtjb25zdCBvPXIoOTU3KTtjb25zdCBpPXIoMTcyKTtjb25zdCBjPVwiZGlhZ1wiO2NsYXNzIERpYWdBUEl7Y29uc3RydWN0b3IoKXtmdW5jdGlvbiBfbG9nUHJveHkoZSl7cmV0dXJuIGZ1bmN0aW9uKC4uLnQpe2NvbnN0IHI9KDAsaS5nZXRHbG9iYWwpKFwiZGlhZ1wiKTtpZighcilyZXR1cm47cmV0dXJuIHJbZV0oLi4udCl9fWNvbnN0IGU9dGhpcztjb25zdCBzZXRMb2dnZXI9KHQscj17bG9nTGV2ZWw6by5EaWFnTG9nTGV2ZWwuSU5GT30pPT57dmFyIG4sYyxzO2lmKHQ9PT1lKXtjb25zdCB0PW5ldyBFcnJvcihcIkNhbm5vdCB1c2UgZGlhZyBhcyB0aGUgbG9nZ2VyIGZvciBpdHNlbGYuIFBsZWFzZSB1c2UgYSBEaWFnTG9nZ2VyIGltcGxlbWVudGF0aW9uIGxpa2UgQ29uc29sZURpYWdMb2dnZXIgb3IgYSBjdXN0b20gaW1wbGVtZW50YXRpb25cIik7ZS5lcnJvcigobj10LnN0YWNrKSE9PW51bGwmJm4hPT12b2lkIDA/bjp0Lm1lc3NhZ2UpO3JldHVybiBmYWxzZX1pZih0eXBlb2Ygcj09PVwibnVtYmVyXCIpe3I9e2xvZ0xldmVsOnJ9fWNvbnN0IHU9KDAsaS5nZXRHbG9iYWwpKFwiZGlhZ1wiKTtjb25zdCBsPSgwLGEuY3JlYXRlTG9nTGV2ZWxEaWFnTG9nZ2VyKSgoYz1yLmxvZ0xldmVsKSE9PW51bGwmJmMhPT12b2lkIDA/YzpvLkRpYWdMb2dMZXZlbC5JTkZPLHQpO2lmKHUmJiFyLnN1cHByZXNzT3ZlcnJpZGVNZXNzYWdlKXtjb25zdCBlPShzPShuZXcgRXJyb3IpLnN0YWNrKSE9PW51bGwmJnMhPT12b2lkIDA/czpcIjxmYWlsZWQgdG8gZ2VuZXJhdGUgc3RhY2t0cmFjZT5cIjt1Lndhcm4oYEN1cnJlbnQgbG9nZ2VyIHdpbGwgYmUgb3ZlcndyaXR0ZW4gZnJvbSAke2V9YCk7bC53YXJuKGBDdXJyZW50IGxvZ2dlciB3aWxsIG92ZXJ3cml0ZSBvbmUgYWxyZWFkeSByZWdpc3RlcmVkIGZyb20gJHtlfWApfXJldHVybigwLGkucmVnaXN0ZXJHbG9iYWwpKFwiZGlhZ1wiLGwsZSx0cnVlKX07ZS5zZXRMb2dnZXI9c2V0TG9nZ2VyO2UuZGlzYWJsZT0oKT0+eygwLGkudW5yZWdpc3Rlckdsb2JhbCkoYyxlKX07ZS5jcmVhdGVDb21wb25lbnRMb2dnZXI9ZT0+bmV3IG4uRGlhZ0NvbXBvbmVudExvZ2dlcihlKTtlLnZlcmJvc2U9X2xvZ1Byb3h5KFwidmVyYm9zZVwiKTtlLmRlYnVnPV9sb2dQcm94eShcImRlYnVnXCIpO2UuaW5mbz1fbG9nUHJveHkoXCJpbmZvXCIpO2Uud2Fybj1fbG9nUHJveHkoXCJ3YXJuXCIpO2UuZXJyb3I9X2xvZ1Byb3h5KFwiZXJyb3JcIil9c3RhdGljIGluc3RhbmNlKCl7aWYoIXRoaXMuX2luc3RhbmNlKXt0aGlzLl9pbnN0YW5jZT1uZXcgRGlhZ0FQSX1yZXR1cm4gdGhpcy5faW5zdGFuY2V9fXQuRGlhZ0FQST1EaWFnQVBJfSw2NTM6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5NZXRyaWNzQVBJPXZvaWQgMDtjb25zdCBuPXIoNjYwKTtjb25zdCBhPXIoMTcyKTtjb25zdCBvPXIoOTMwKTtjb25zdCBpPVwibWV0cmljc1wiO2NsYXNzIE1ldHJpY3NBUEl7Y29uc3RydWN0b3IoKXt9c3RhdGljIGdldEluc3RhbmNlKCl7aWYoIXRoaXMuX2luc3RhbmNlKXt0aGlzLl9pbnN0YW5jZT1uZXcgTWV0cmljc0FQSX1yZXR1cm4gdGhpcy5faW5zdGFuY2V9c2V0R2xvYmFsTWV0ZXJQcm92aWRlcihlKXtyZXR1cm4oMCxhLnJlZ2lzdGVyR2xvYmFsKShpLGUsby5EaWFnQVBJLmluc3RhbmNlKCkpfWdldE1ldGVyUHJvdmlkZXIoKXtyZXR1cm4oMCxhLmdldEdsb2JhbCkoaSl8fG4uTk9PUF9NRVRFUl9QUk9WSURFUn1nZXRNZXRlcihlLHQscil7cmV0dXJuIHRoaXMuZ2V0TWV0ZXJQcm92aWRlcigpLmdldE1ldGVyKGUsdCxyKX1kaXNhYmxlKCl7KDAsYS51bnJlZ2lzdGVyR2xvYmFsKShpLG8uRGlhZ0FQSS5pbnN0YW5jZSgpKX19dC5NZXRyaWNzQVBJPU1ldHJpY3NBUEl9LDE4MTooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlByb3BhZ2F0aW9uQVBJPXZvaWQgMDtjb25zdCBuPXIoMTcyKTtjb25zdCBhPXIoODc0KTtjb25zdCBvPXIoMTk0KTtjb25zdCBpPXIoMjc3KTtjb25zdCBjPXIoMzY5KTtjb25zdCBzPXIoOTMwKTtjb25zdCB1PVwicHJvcGFnYXRpb25cIjtjb25zdCBsPW5ldyBhLk5vb3BUZXh0TWFwUHJvcGFnYXRvcjtjbGFzcyBQcm9wYWdhdGlvbkFQSXtjb25zdHJ1Y3Rvcigpe3RoaXMuY3JlYXRlQmFnZ2FnZT1jLmNyZWF0ZUJhZ2dhZ2U7dGhpcy5nZXRCYWdnYWdlPWkuZ2V0QmFnZ2FnZTt0aGlzLmdldEFjdGl2ZUJhZ2dhZ2U9aS5nZXRBY3RpdmVCYWdnYWdlO3RoaXMuc2V0QmFnZ2FnZT1pLnNldEJhZ2dhZ2U7dGhpcy5kZWxldGVCYWdnYWdlPWkuZGVsZXRlQmFnZ2FnZX1zdGF0aWMgZ2V0SW5zdGFuY2UoKXtpZighdGhpcy5faW5zdGFuY2Upe3RoaXMuX2luc3RhbmNlPW5ldyBQcm9wYWdhdGlvbkFQSX1yZXR1cm4gdGhpcy5faW5zdGFuY2V9c2V0R2xvYmFsUHJvcGFnYXRvcihlKXtyZXR1cm4oMCxuLnJlZ2lzdGVyR2xvYmFsKSh1LGUscy5EaWFnQVBJLmluc3RhbmNlKCkpfWluamVjdChlLHQscj1vLmRlZmF1bHRUZXh0TWFwU2V0dGVyKXtyZXR1cm4gdGhpcy5fZ2V0R2xvYmFsUHJvcGFnYXRvcigpLmluamVjdChlLHQscil9ZXh0cmFjdChlLHQscj1vLmRlZmF1bHRUZXh0TWFwR2V0dGVyKXtyZXR1cm4gdGhpcy5fZ2V0R2xvYmFsUHJvcGFnYXRvcigpLmV4dHJhY3QoZSx0LHIpfWZpZWxkcygpe3JldHVybiB0aGlzLl9nZXRHbG9iYWxQcm9wYWdhdG9yKCkuZmllbGRzKCl9ZGlzYWJsZSgpeygwLG4udW5yZWdpc3Rlckdsb2JhbCkodSxzLkRpYWdBUEkuaW5zdGFuY2UoKSl9X2dldEdsb2JhbFByb3BhZ2F0b3IoKXtyZXR1cm4oMCxuLmdldEdsb2JhbCkodSl8fGx9fXQuUHJvcGFnYXRpb25BUEk9UHJvcGFnYXRpb25BUEl9LDk5NzooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlRyYWNlQVBJPXZvaWQgMDtjb25zdCBuPXIoMTcyKTtjb25zdCBhPXIoODQ2KTtjb25zdCBvPXIoMTM5KTtjb25zdCBpPXIoNjA3KTtjb25zdCBjPXIoOTMwKTtjb25zdCBzPVwidHJhY2VcIjtjbGFzcyBUcmFjZUFQSXtjb25zdHJ1Y3Rvcigpe3RoaXMuX3Byb3h5VHJhY2VyUHJvdmlkZXI9bmV3IGEuUHJveHlUcmFjZXJQcm92aWRlcjt0aGlzLndyYXBTcGFuQ29udGV4dD1vLndyYXBTcGFuQ29udGV4dDt0aGlzLmlzU3BhbkNvbnRleHRWYWxpZD1vLmlzU3BhbkNvbnRleHRWYWxpZDt0aGlzLmRlbGV0ZVNwYW49aS5kZWxldGVTcGFuO3RoaXMuZ2V0U3Bhbj1pLmdldFNwYW47dGhpcy5nZXRBY3RpdmVTcGFuPWkuZ2V0QWN0aXZlU3Bhbjt0aGlzLmdldFNwYW5Db250ZXh0PWkuZ2V0U3BhbkNvbnRleHQ7dGhpcy5zZXRTcGFuPWkuc2V0U3Bhbjt0aGlzLnNldFNwYW5Db250ZXh0PWkuc2V0U3BhbkNvbnRleHR9c3RhdGljIGdldEluc3RhbmNlKCl7aWYoIXRoaXMuX2luc3RhbmNlKXt0aGlzLl9pbnN0YW5jZT1uZXcgVHJhY2VBUEl9cmV0dXJuIHRoaXMuX2luc3RhbmNlfXNldEdsb2JhbFRyYWNlclByb3ZpZGVyKGUpe2NvbnN0IHQ9KDAsbi5yZWdpc3Rlckdsb2JhbCkocyx0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyLGMuRGlhZ0FQSS5pbnN0YW5jZSgpKTtpZih0KXt0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyLnNldERlbGVnYXRlKGUpfXJldHVybiB0fWdldFRyYWNlclByb3ZpZGVyKCl7cmV0dXJuKDAsbi5nZXRHbG9iYWwpKHMpfHx0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyfWdldFRyYWNlcihlLHQpe3JldHVybiB0aGlzLmdldFRyYWNlclByb3ZpZGVyKCkuZ2V0VHJhY2VyKGUsdCl9ZGlzYWJsZSgpeygwLG4udW5yZWdpc3Rlckdsb2JhbCkocyxjLkRpYWdBUEkuaW5zdGFuY2UoKSk7dGhpcy5fcHJveHlUcmFjZXJQcm92aWRlcj1uZXcgYS5Qcm94eVRyYWNlclByb3ZpZGVyfX10LlRyYWNlQVBJPVRyYWNlQVBJfSwyNzc6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5kZWxldGVCYWdnYWdlPXQuc2V0QmFnZ2FnZT10LmdldEFjdGl2ZUJhZ2dhZ2U9dC5nZXRCYWdnYWdlPXZvaWQgMDtjb25zdCBuPXIoNDkxKTtjb25zdCBhPXIoNzgwKTtjb25zdCBvPSgwLGEuY3JlYXRlQ29udGV4dEtleSkoXCJPcGVuVGVsZW1ldHJ5IEJhZ2dhZ2UgS2V5XCIpO2Z1bmN0aW9uIGdldEJhZ2dhZ2UoZSl7cmV0dXJuIGUuZ2V0VmFsdWUobyl8fHVuZGVmaW5lZH10LmdldEJhZ2dhZ2U9Z2V0QmFnZ2FnZTtmdW5jdGlvbiBnZXRBY3RpdmVCYWdnYWdlKCl7cmV0dXJuIGdldEJhZ2dhZ2Uobi5Db250ZXh0QVBJLmdldEluc3RhbmNlKCkuYWN0aXZlKCkpfXQuZ2V0QWN0aXZlQmFnZ2FnZT1nZXRBY3RpdmVCYWdnYWdlO2Z1bmN0aW9uIHNldEJhZ2dhZ2UoZSx0KXtyZXR1cm4gZS5zZXRWYWx1ZShvLHQpfXQuc2V0QmFnZ2FnZT1zZXRCYWdnYWdlO2Z1bmN0aW9uIGRlbGV0ZUJhZ2dhZ2UoZSl7cmV0dXJuIGUuZGVsZXRlVmFsdWUobyl9dC5kZWxldGVCYWdnYWdlPWRlbGV0ZUJhZ2dhZ2V9LDk5MzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5CYWdnYWdlSW1wbD12b2lkIDA7Y2xhc3MgQmFnZ2FnZUltcGx7Y29uc3RydWN0b3IoZSl7dGhpcy5fZW50cmllcz1lP25ldyBNYXAoZSk6bmV3IE1hcH1nZXRFbnRyeShlKXtjb25zdCB0PXRoaXMuX2VudHJpZXMuZ2V0KGUpO2lmKCF0KXtyZXR1cm4gdW5kZWZpbmVkfXJldHVybiBPYmplY3QuYXNzaWduKHt9LHQpfWdldEFsbEVudHJpZXMoKXtyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9lbnRyaWVzLmVudHJpZXMoKSkubWFwKCgoW2UsdF0pPT5bZSx0XSkpfXNldEVudHJ5KGUsdCl7Y29uc3Qgcj1uZXcgQmFnZ2FnZUltcGwodGhpcy5fZW50cmllcyk7ci5fZW50cmllcy5zZXQoZSx0KTtyZXR1cm4gcn1yZW1vdmVFbnRyeShlKXtjb25zdCB0PW5ldyBCYWdnYWdlSW1wbCh0aGlzLl9lbnRyaWVzKTt0Ll9lbnRyaWVzLmRlbGV0ZShlKTtyZXR1cm4gdH1yZW1vdmVFbnRyaWVzKC4uLmUpe2NvbnN0IHQ9bmV3IEJhZ2dhZ2VJbXBsKHRoaXMuX2VudHJpZXMpO2Zvcihjb25zdCByIG9mIGUpe3QuX2VudHJpZXMuZGVsZXRlKHIpfXJldHVybiB0fWNsZWFyKCl7cmV0dXJuIG5ldyBCYWdnYWdlSW1wbH19dC5CYWdnYWdlSW1wbD1CYWdnYWdlSW1wbH0sODMwOihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmJhZ2dhZ2VFbnRyeU1ldGFkYXRhU3ltYm9sPXZvaWQgMDt0LmJhZ2dhZ2VFbnRyeU1ldGFkYXRhU3ltYm9sPVN5bWJvbChcIkJhZ2dhZ2VFbnRyeU1ldGFkYXRhXCIpfSwzNjk6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5iYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmc9dC5jcmVhdGVCYWdnYWdlPXZvaWQgMDtjb25zdCBuPXIoOTMwKTtjb25zdCBhPXIoOTkzKTtjb25zdCBvPXIoODMwKTtjb25zdCBpPW4uRGlhZ0FQSS5pbnN0YW5jZSgpO2Z1bmN0aW9uIGNyZWF0ZUJhZ2dhZ2UoZT17fSl7cmV0dXJuIG5ldyBhLkJhZ2dhZ2VJbXBsKG5ldyBNYXAoT2JqZWN0LmVudHJpZXMoZSkpKX10LmNyZWF0ZUJhZ2dhZ2U9Y3JlYXRlQmFnZ2FnZTtmdW5jdGlvbiBiYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmcoZSl7aWYodHlwZW9mIGUhPT1cInN0cmluZ1wiKXtpLmVycm9yKGBDYW5ub3QgY3JlYXRlIGJhZ2dhZ2UgbWV0YWRhdGEgZnJvbSB1bmtub3duIHR5cGU6ICR7dHlwZW9mIGV9YCk7ZT1cIlwifXJldHVybntfX1RZUEVfXzpvLmJhZ2dhZ2VFbnRyeU1ldGFkYXRhU3ltYm9sLHRvU3RyaW5nKCl7cmV0dXJuIGV9fX10LmJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZz1iYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmd9LDY3OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuY29udGV4dD12b2lkIDA7Y29uc3Qgbj1yKDQ5MSk7dC5jb250ZXh0PW4uQ29udGV4dEFQSS5nZXRJbnN0YW5jZSgpfSwyMjM6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5Ob29wQ29udGV4dE1hbmFnZXI9dm9pZCAwO2NvbnN0IG49cig3ODApO2NsYXNzIE5vb3BDb250ZXh0TWFuYWdlcnthY3RpdmUoKXtyZXR1cm4gbi5ST09UX0NPTlRFWFR9d2l0aChlLHQsciwuLi5uKXtyZXR1cm4gdC5jYWxsKHIsLi4ubil9YmluZChlLHQpe3JldHVybiB0fWVuYWJsZSgpe3JldHVybiB0aGlzfWRpc2FibGUoKXtyZXR1cm4gdGhpc319dC5Ob29wQ29udGV4dE1hbmFnZXI9Tm9vcENvbnRleHRNYW5hZ2VyfSw3ODA6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuUk9PVF9DT05URVhUPXQuY3JlYXRlQ29udGV4dEtleT12b2lkIDA7ZnVuY3Rpb24gY3JlYXRlQ29udGV4dEtleShlKXtyZXR1cm4gU3ltYm9sLmZvcihlKX10LmNyZWF0ZUNvbnRleHRLZXk9Y3JlYXRlQ29udGV4dEtleTtjbGFzcyBCYXNlQ29udGV4dHtjb25zdHJ1Y3RvcihlKXtjb25zdCB0PXRoaXM7dC5fY3VycmVudENvbnRleHQ9ZT9uZXcgTWFwKGUpOm5ldyBNYXA7dC5nZXRWYWx1ZT1lPT50Ll9jdXJyZW50Q29udGV4dC5nZXQoZSk7dC5zZXRWYWx1ZT0oZSxyKT0+e2NvbnN0IG49bmV3IEJhc2VDb250ZXh0KHQuX2N1cnJlbnRDb250ZXh0KTtuLl9jdXJyZW50Q29udGV4dC5zZXQoZSxyKTtyZXR1cm4gbn07dC5kZWxldGVWYWx1ZT1lPT57Y29uc3Qgcj1uZXcgQmFzZUNvbnRleHQodC5fY3VycmVudENvbnRleHQpO3IuX2N1cnJlbnRDb250ZXh0LmRlbGV0ZShlKTtyZXR1cm4gcn19fXQuUk9PVF9DT05URVhUPW5ldyBCYXNlQ29udGV4dH0sNTA2OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuZGlhZz12b2lkIDA7Y29uc3Qgbj1yKDkzMCk7dC5kaWFnPW4uRGlhZ0FQSS5pbnN0YW5jZSgpfSw1NjooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LkRpYWdDb21wb25lbnRMb2dnZXI9dm9pZCAwO2NvbnN0IG49cigxNzIpO2NsYXNzIERpYWdDb21wb25lbnRMb2dnZXJ7Y29uc3RydWN0b3IoZSl7dGhpcy5fbmFtZXNwYWNlPWUubmFtZXNwYWNlfHxcIkRpYWdDb21wb25lbnRMb2dnZXJcIn1kZWJ1ZyguLi5lKXtyZXR1cm4gbG9nUHJveHkoXCJkZWJ1Z1wiLHRoaXMuX25hbWVzcGFjZSxlKX1lcnJvciguLi5lKXtyZXR1cm4gbG9nUHJveHkoXCJlcnJvclwiLHRoaXMuX25hbWVzcGFjZSxlKX1pbmZvKC4uLmUpe3JldHVybiBsb2dQcm94eShcImluZm9cIix0aGlzLl9uYW1lc3BhY2UsZSl9d2FybiguLi5lKXtyZXR1cm4gbG9nUHJveHkoXCJ3YXJuXCIsdGhpcy5fbmFtZXNwYWNlLGUpfXZlcmJvc2UoLi4uZSl7cmV0dXJuIGxvZ1Byb3h5KFwidmVyYm9zZVwiLHRoaXMuX25hbWVzcGFjZSxlKX19dC5EaWFnQ29tcG9uZW50TG9nZ2VyPURpYWdDb21wb25lbnRMb2dnZXI7ZnVuY3Rpb24gbG9nUHJveHkoZSx0LHIpe2NvbnN0IGE9KDAsbi5nZXRHbG9iYWwpKFwiZGlhZ1wiKTtpZighYSl7cmV0dXJufXIudW5zaGlmdCh0KTtyZXR1cm4gYVtlXSguLi5yKX19LDk3MjooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5EaWFnQ29uc29sZUxvZ2dlcj12b2lkIDA7Y29uc3Qgcj1be246XCJlcnJvclwiLGM6XCJlcnJvclwifSx7bjpcIndhcm5cIixjOlwid2FyblwifSx7bjpcImluZm9cIixjOlwiaW5mb1wifSx7bjpcImRlYnVnXCIsYzpcImRlYnVnXCJ9LHtuOlwidmVyYm9zZVwiLGM6XCJ0cmFjZVwifV07Y2xhc3MgRGlhZ0NvbnNvbGVMb2dnZXJ7Y29uc3RydWN0b3IoKXtmdW5jdGlvbiBfY29uc29sZUZ1bmMoZSl7cmV0dXJuIGZ1bmN0aW9uKC4uLnQpe2lmKGNvbnNvbGUpe2xldCByPWNvbnNvbGVbZV07aWYodHlwZW9mIHIhPT1cImZ1bmN0aW9uXCIpe3I9Y29uc29sZS5sb2d9aWYodHlwZW9mIHI9PT1cImZ1bmN0aW9uXCIpe3JldHVybiByLmFwcGx5KGNvbnNvbGUsdCl9fX19Zm9yKGxldCBlPTA7ZTxyLmxlbmd0aDtlKyspe3RoaXNbcltlXS5uXT1fY29uc29sZUZ1bmMocltlXS5jKX19fXQuRGlhZ0NvbnNvbGVMb2dnZXI9RGlhZ0NvbnNvbGVMb2dnZXJ9LDkxMjooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmNyZWF0ZUxvZ0xldmVsRGlhZ0xvZ2dlcj12b2lkIDA7Y29uc3Qgbj1yKDk1Nyk7ZnVuY3Rpb24gY3JlYXRlTG9nTGV2ZWxEaWFnTG9nZ2VyKGUsdCl7aWYoZTxuLkRpYWdMb2dMZXZlbC5OT05FKXtlPW4uRGlhZ0xvZ0xldmVsLk5PTkV9ZWxzZSBpZihlPm4uRGlhZ0xvZ0xldmVsLkFMTCl7ZT1uLkRpYWdMb2dMZXZlbC5BTEx9dD10fHx7fTtmdW5jdGlvbiBfZmlsdGVyRnVuYyhyLG4pe2NvbnN0IGE9dFtyXTtpZih0eXBlb2YgYT09PVwiZnVuY3Rpb25cIiYmZT49bil7cmV0dXJuIGEuYmluZCh0KX1yZXR1cm4gZnVuY3Rpb24oKXt9fXJldHVybntlcnJvcjpfZmlsdGVyRnVuYyhcImVycm9yXCIsbi5EaWFnTG9nTGV2ZWwuRVJST1IpLHdhcm46X2ZpbHRlckZ1bmMoXCJ3YXJuXCIsbi5EaWFnTG9nTGV2ZWwuV0FSTiksaW5mbzpfZmlsdGVyRnVuYyhcImluZm9cIixuLkRpYWdMb2dMZXZlbC5JTkZPKSxkZWJ1ZzpfZmlsdGVyRnVuYyhcImRlYnVnXCIsbi5EaWFnTG9nTGV2ZWwuREVCVUcpLHZlcmJvc2U6X2ZpbHRlckZ1bmMoXCJ2ZXJib3NlXCIsbi5EaWFnTG9nTGV2ZWwuVkVSQk9TRSl9fXQuY3JlYXRlTG9nTGV2ZWxEaWFnTG9nZ2VyPWNyZWF0ZUxvZ0xldmVsRGlhZ0xvZ2dlcn0sOTU3OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LkRpYWdMb2dMZXZlbD12b2lkIDA7dmFyIHI7KGZ1bmN0aW9uKGUpe2VbZVtcIk5PTkVcIl09MF09XCJOT05FXCI7ZVtlW1wiRVJST1JcIl09MzBdPVwiRVJST1JcIjtlW2VbXCJXQVJOXCJdPTUwXT1cIldBUk5cIjtlW2VbXCJJTkZPXCJdPTYwXT1cIklORk9cIjtlW2VbXCJERUJVR1wiXT03MF09XCJERUJVR1wiO2VbZVtcIlZFUkJPU0VcIl09ODBdPVwiVkVSQk9TRVwiO2VbZVtcIkFMTFwiXT05OTk5XT1cIkFMTFwifSkocj10LkRpYWdMb2dMZXZlbHx8KHQuRGlhZ0xvZ0xldmVsPXt9KSl9LDE3MjooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LnVucmVnaXN0ZXJHbG9iYWw9dC5nZXRHbG9iYWw9dC5yZWdpc3Rlckdsb2JhbD12b2lkIDA7Y29uc3Qgbj1yKDIwMCk7Y29uc3QgYT1yKDUyMSk7Y29uc3Qgbz1yKDEzMCk7Y29uc3QgaT1hLlZFUlNJT04uc3BsaXQoXCIuXCIpWzBdO2NvbnN0IGM9U3ltYm9sLmZvcihgb3BlbnRlbGVtZXRyeS5qcy5hcGkuJHtpfWApO2NvbnN0IHM9bi5fZ2xvYmFsVGhpcztmdW5jdGlvbiByZWdpc3Rlckdsb2JhbChlLHQscixuPWZhbHNlKXt2YXIgbztjb25zdCBpPXNbY109KG89c1tjXSkhPT1udWxsJiZvIT09dm9pZCAwP286e3ZlcnNpb246YS5WRVJTSU9OfTtpZighbiYmaVtlXSl7Y29uc3QgdD1uZXcgRXJyb3IoYEBvcGVudGVsZW1ldHJ5L2FwaTogQXR0ZW1wdGVkIGR1cGxpY2F0ZSByZWdpc3RyYXRpb24gb2YgQVBJOiAke2V9YCk7ci5lcnJvcih0LnN0YWNrfHx0Lm1lc3NhZ2UpO3JldHVybiBmYWxzZX1pZihpLnZlcnNpb24hPT1hLlZFUlNJT04pe2NvbnN0IHQ9bmV3IEVycm9yKGBAb3BlbnRlbGVtZXRyeS9hcGk6IFJlZ2lzdHJhdGlvbiBvZiB2ZXJzaW9uIHYke2kudmVyc2lvbn0gZm9yICR7ZX0gZG9lcyBub3QgbWF0Y2ggcHJldmlvdXNseSByZWdpc3RlcmVkIEFQSSB2JHthLlZFUlNJT059YCk7ci5lcnJvcih0LnN0YWNrfHx0Lm1lc3NhZ2UpO3JldHVybiBmYWxzZX1pW2VdPXQ7ci5kZWJ1ZyhgQG9wZW50ZWxlbWV0cnkvYXBpOiBSZWdpc3RlcmVkIGEgZ2xvYmFsIGZvciAke2V9IHYke2EuVkVSU0lPTn0uYCk7cmV0dXJuIHRydWV9dC5yZWdpc3Rlckdsb2JhbD1yZWdpc3Rlckdsb2JhbDtmdW5jdGlvbiBnZXRHbG9iYWwoZSl7dmFyIHQscjtjb25zdCBuPSh0PXNbY10pPT09bnVsbHx8dD09PXZvaWQgMD92b2lkIDA6dC52ZXJzaW9uO2lmKCFufHwhKDAsby5pc0NvbXBhdGlibGUpKG4pKXtyZXR1cm59cmV0dXJuKHI9c1tjXSk9PT1udWxsfHxyPT09dm9pZCAwP3ZvaWQgMDpyW2VdfXQuZ2V0R2xvYmFsPWdldEdsb2JhbDtmdW5jdGlvbiB1bnJlZ2lzdGVyR2xvYmFsKGUsdCl7dC5kZWJ1ZyhgQG9wZW50ZWxlbWV0cnkvYXBpOiBVbnJlZ2lzdGVyaW5nIGEgZ2xvYmFsIGZvciAke2V9IHYke2EuVkVSU0lPTn0uYCk7Y29uc3Qgcj1zW2NdO2lmKHIpe2RlbGV0ZSByW2VdfX10LnVucmVnaXN0ZXJHbG9iYWw9dW5yZWdpc3Rlckdsb2JhbH0sMTMwOihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuaXNDb21wYXRpYmxlPXQuX21ha2VDb21wYXRpYmlsaXR5Q2hlY2s9dm9pZCAwO2NvbnN0IG49cig1MjEpO2NvbnN0IGE9L14oXFxkKylcXC4oXFxkKylcXC4oXFxkKykoLSguKykpPyQvO2Z1bmN0aW9uIF9tYWtlQ29tcGF0aWJpbGl0eUNoZWNrKGUpe2NvbnN0IHQ9bmV3IFNldChbZV0pO2NvbnN0IHI9bmV3IFNldDtjb25zdCBuPWUubWF0Y2goYSk7aWYoIW4pe3JldHVybigpPT5mYWxzZX1jb25zdCBvPXttYWpvcjorblsxXSxtaW5vcjorblsyXSxwYXRjaDorblszXSxwcmVyZWxlYXNlOm5bNF19O2lmKG8ucHJlcmVsZWFzZSE9bnVsbCl7cmV0dXJuIGZ1bmN0aW9uIGlzRXhhY3RtYXRjaCh0KXtyZXR1cm4gdD09PWV9fWZ1bmN0aW9uIF9yZWplY3QoZSl7ci5hZGQoZSk7cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIF9hY2NlcHQoZSl7dC5hZGQoZSk7cmV0dXJuIHRydWV9cmV0dXJuIGZ1bmN0aW9uIGlzQ29tcGF0aWJsZShlKXtpZih0LmhhcyhlKSl7cmV0dXJuIHRydWV9aWYoci5oYXMoZSkpe3JldHVybiBmYWxzZX1jb25zdCBuPWUubWF0Y2goYSk7aWYoIW4pe3JldHVybiBfcmVqZWN0KGUpfWNvbnN0IGk9e21ham9yOituWzFdLG1pbm9yOituWzJdLHBhdGNoOituWzNdLHByZXJlbGVhc2U6bls0XX07aWYoaS5wcmVyZWxlYXNlIT1udWxsKXtyZXR1cm4gX3JlamVjdChlKX1pZihvLm1ham9yIT09aS5tYWpvcil7cmV0dXJuIF9yZWplY3QoZSl9aWYoby5tYWpvcj09PTApe2lmKG8ubWlub3I9PT1pLm1pbm9yJiZvLnBhdGNoPD1pLnBhdGNoKXtyZXR1cm4gX2FjY2VwdChlKX1yZXR1cm4gX3JlamVjdChlKX1pZihvLm1pbm9yPD1pLm1pbm9yKXtyZXR1cm4gX2FjY2VwdChlKX1yZXR1cm4gX3JlamVjdChlKX19dC5fbWFrZUNvbXBhdGliaWxpdHlDaGVjaz1fbWFrZUNvbXBhdGliaWxpdHlDaGVjazt0LmlzQ29tcGF0aWJsZT1fbWFrZUNvbXBhdGliaWxpdHlDaGVjayhuLlZFUlNJT04pfSw4ODY6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5tZXRyaWNzPXZvaWQgMDtjb25zdCBuPXIoNjUzKTt0Lm1ldHJpY3M9bi5NZXRyaWNzQVBJLmdldEluc3RhbmNlKCl9LDkwMTooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5WYWx1ZVR5cGU9dm9pZCAwO3ZhciByOyhmdW5jdGlvbihlKXtlW2VbXCJJTlRcIl09MF09XCJJTlRcIjtlW2VbXCJET1VCTEVcIl09MV09XCJET1VCTEVcIn0pKHI9dC5WYWx1ZVR5cGV8fCh0LlZhbHVlVHlwZT17fSkpfSwxMDI6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuY3JlYXRlTm9vcE1ldGVyPXQuTk9PUF9PQlNFUlZBQkxFX1VQX0RPV05fQ09VTlRFUl9NRVRSSUM9dC5OT09QX09CU0VSVkFCTEVfR0FVR0VfTUVUUklDPXQuTk9PUF9PQlNFUlZBQkxFX0NPVU5URVJfTUVUUklDPXQuTk9PUF9VUF9ET1dOX0NPVU5URVJfTUVUUklDPXQuTk9PUF9ISVNUT0dSQU1fTUVUUklDPXQuTk9PUF9DT1VOVEVSX01FVFJJQz10Lk5PT1BfTUVURVI9dC5Ob29wT2JzZXJ2YWJsZVVwRG93bkNvdW50ZXJNZXRyaWM9dC5Ob29wT2JzZXJ2YWJsZUdhdWdlTWV0cmljPXQuTm9vcE9ic2VydmFibGVDb3VudGVyTWV0cmljPXQuTm9vcE9ic2VydmFibGVNZXRyaWM9dC5Ob29wSGlzdG9ncmFtTWV0cmljPXQuTm9vcFVwRG93bkNvdW50ZXJNZXRyaWM9dC5Ob29wQ291bnRlck1ldHJpYz10Lk5vb3BNZXRyaWM9dC5Ob29wTWV0ZXI9dm9pZCAwO2NsYXNzIE5vb3BNZXRlcntjb25zdHJ1Y3Rvcigpe31jcmVhdGVIaXN0b2dyYW0oZSxyKXtyZXR1cm4gdC5OT09QX0hJU1RPR1JBTV9NRVRSSUN9Y3JlYXRlQ291bnRlcihlLHIpe3JldHVybiB0Lk5PT1BfQ09VTlRFUl9NRVRSSUN9Y3JlYXRlVXBEb3duQ291bnRlcihlLHIpe3JldHVybiB0Lk5PT1BfVVBfRE9XTl9DT1VOVEVSX01FVFJJQ31jcmVhdGVPYnNlcnZhYmxlR2F1Z2UoZSxyKXtyZXR1cm4gdC5OT09QX09CU0VSVkFCTEVfR0FVR0VfTUVUUklDfWNyZWF0ZU9ic2VydmFibGVDb3VudGVyKGUscil7cmV0dXJuIHQuTk9PUF9PQlNFUlZBQkxFX0NPVU5URVJfTUVUUklDfWNyZWF0ZU9ic2VydmFibGVVcERvd25Db3VudGVyKGUscil7cmV0dXJuIHQuTk9PUF9PQlNFUlZBQkxFX1VQX0RPV05fQ09VTlRFUl9NRVRSSUN9YWRkQmF0Y2hPYnNlcnZhYmxlQ2FsbGJhY2soZSx0KXt9cmVtb3ZlQmF0Y2hPYnNlcnZhYmxlQ2FsbGJhY2soZSl7fX10Lk5vb3BNZXRlcj1Ob29wTWV0ZXI7Y2xhc3MgTm9vcE1ldHJpY3t9dC5Ob29wTWV0cmljPU5vb3BNZXRyaWM7Y2xhc3MgTm9vcENvdW50ZXJNZXRyaWMgZXh0ZW5kcyBOb29wTWV0cmlje2FkZChlLHQpe319dC5Ob29wQ291bnRlck1ldHJpYz1Ob29wQ291bnRlck1ldHJpYztjbGFzcyBOb29wVXBEb3duQ291bnRlck1ldHJpYyBleHRlbmRzIE5vb3BNZXRyaWN7YWRkKGUsdCl7fX10Lk5vb3BVcERvd25Db3VudGVyTWV0cmljPU5vb3BVcERvd25Db3VudGVyTWV0cmljO2NsYXNzIE5vb3BIaXN0b2dyYW1NZXRyaWMgZXh0ZW5kcyBOb29wTWV0cmlje3JlY29yZChlLHQpe319dC5Ob29wSGlzdG9ncmFtTWV0cmljPU5vb3BIaXN0b2dyYW1NZXRyaWM7Y2xhc3MgTm9vcE9ic2VydmFibGVNZXRyaWN7YWRkQ2FsbGJhY2soZSl7fXJlbW92ZUNhbGxiYWNrKGUpe319dC5Ob29wT2JzZXJ2YWJsZU1ldHJpYz1Ob29wT2JzZXJ2YWJsZU1ldHJpYztjbGFzcyBOb29wT2JzZXJ2YWJsZUNvdW50ZXJNZXRyaWMgZXh0ZW5kcyBOb29wT2JzZXJ2YWJsZU1ldHJpY3t9dC5Ob29wT2JzZXJ2YWJsZUNvdW50ZXJNZXRyaWM9Tm9vcE9ic2VydmFibGVDb3VudGVyTWV0cmljO2NsYXNzIE5vb3BPYnNlcnZhYmxlR2F1Z2VNZXRyaWMgZXh0ZW5kcyBOb29wT2JzZXJ2YWJsZU1ldHJpY3t9dC5Ob29wT2JzZXJ2YWJsZUdhdWdlTWV0cmljPU5vb3BPYnNlcnZhYmxlR2F1Z2VNZXRyaWM7Y2xhc3MgTm9vcE9ic2VydmFibGVVcERvd25Db3VudGVyTWV0cmljIGV4dGVuZHMgTm9vcE9ic2VydmFibGVNZXRyaWN7fXQuTm9vcE9ic2VydmFibGVVcERvd25Db3VudGVyTWV0cmljPU5vb3BPYnNlcnZhYmxlVXBEb3duQ291bnRlck1ldHJpYzt0Lk5PT1BfTUVURVI9bmV3IE5vb3BNZXRlcjt0Lk5PT1BfQ09VTlRFUl9NRVRSSUM9bmV3IE5vb3BDb3VudGVyTWV0cmljO3QuTk9PUF9ISVNUT0dSQU1fTUVUUklDPW5ldyBOb29wSGlzdG9ncmFtTWV0cmljO3QuTk9PUF9VUF9ET1dOX0NPVU5URVJfTUVUUklDPW5ldyBOb29wVXBEb3duQ291bnRlck1ldHJpYzt0Lk5PT1BfT0JTRVJWQUJMRV9DT1VOVEVSX01FVFJJQz1uZXcgTm9vcE9ic2VydmFibGVDb3VudGVyTWV0cmljO3QuTk9PUF9PQlNFUlZBQkxFX0dBVUdFX01FVFJJQz1uZXcgTm9vcE9ic2VydmFibGVHYXVnZU1ldHJpYzt0Lk5PT1BfT0JTRVJWQUJMRV9VUF9ET1dOX0NPVU5URVJfTUVUUklDPW5ldyBOb29wT2JzZXJ2YWJsZVVwRG93bkNvdW50ZXJNZXRyaWM7ZnVuY3Rpb24gY3JlYXRlTm9vcE1ldGVyKCl7cmV0dXJuIHQuTk9PUF9NRVRFUn10LmNyZWF0ZU5vb3BNZXRlcj1jcmVhdGVOb29wTWV0ZXJ9LDY2MDooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0Lk5PT1BfTUVURVJfUFJPVklERVI9dC5Ob29wTWV0ZXJQcm92aWRlcj12b2lkIDA7Y29uc3Qgbj1yKDEwMik7Y2xhc3MgTm9vcE1ldGVyUHJvdmlkZXJ7Z2V0TWV0ZXIoZSx0LHIpe3JldHVybiBuLk5PT1BfTUVURVJ9fXQuTm9vcE1ldGVyUHJvdmlkZXI9Tm9vcE1ldGVyUHJvdmlkZXI7dC5OT09QX01FVEVSX1BST1ZJREVSPW5ldyBOb29wTWV0ZXJQcm92aWRlcn0sMjAwOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzJiZ0aGlzLl9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24oZSx0LHIsbil7aWYobj09PXVuZGVmaW5lZCluPXI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiB0W3JdfX0pfTpmdW5jdGlvbihlLHQscixuKXtpZihuPT09dW5kZWZpbmVkKW49cjtlW25dPXRbcl19KTt2YXIgYT10aGlzJiZ0aGlzLl9fZXhwb3J0U3Rhcnx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gZSlpZihyIT09XCJkZWZhdWx0XCImJiFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSluKHQsZSxyKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTthKHIoNDYpLHQpfSw2NTE6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuX2dsb2JhbFRoaXM9dm9pZCAwO3QuX2dsb2JhbFRoaXM9dHlwZW9mIGdsb2JhbFRoaXM9PT1cIm9iamVjdFwiP2dsb2JhbFRoaXM6Z2xvYmFsfSw0NjpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxyLG4pe2lmKG49PT11bmRlZmluZWQpbj1yO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4se2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtyXX19KX06ZnVuY3Rpb24oZSx0LHIsbil7aWYobj09PXVuZGVmaW5lZCluPXI7ZVtuXT10W3JdfSk7dmFyIGE9dGhpcyYmdGhpcy5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIGUpaWYociE9PVwiZGVmYXVsdFwiJiYhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikpbih0LGUscil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7YShyKDY1MSksdCl9LDkzOTooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LnByb3BhZ2F0aW9uPXZvaWQgMDtjb25zdCBuPXIoMTgxKTt0LnByb3BhZ2F0aW9uPW4uUHJvcGFnYXRpb25BUEkuZ2V0SW5zdGFuY2UoKX0sODc0OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0Lk5vb3BUZXh0TWFwUHJvcGFnYXRvcj12b2lkIDA7Y2xhc3MgTm9vcFRleHRNYXBQcm9wYWdhdG9ye2luamVjdChlLHQpe31leHRyYWN0KGUsdCl7cmV0dXJuIGV9ZmllbGRzKCl7cmV0dXJuW119fXQuTm9vcFRleHRNYXBQcm9wYWdhdG9yPU5vb3BUZXh0TWFwUHJvcGFnYXRvcn0sMTk0OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LmRlZmF1bHRUZXh0TWFwU2V0dGVyPXQuZGVmYXVsdFRleHRNYXBHZXR0ZXI9dm9pZCAwO3QuZGVmYXVsdFRleHRNYXBHZXR0ZXI9e2dldChlLHQpe2lmKGU9PW51bGwpe3JldHVybiB1bmRlZmluZWR9cmV0dXJuIGVbdF19LGtleXMoZSl7aWYoZT09bnVsbCl7cmV0dXJuW119cmV0dXJuIE9iamVjdC5rZXlzKGUpfX07dC5kZWZhdWx0VGV4dE1hcFNldHRlcj17c2V0KGUsdCxyKXtpZihlPT1udWxsKXtyZXR1cm59ZVt0XT1yfX19LDg0NTooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LnRyYWNlPXZvaWQgMDtjb25zdCBuPXIoOTk3KTt0LnRyYWNlPW4uVHJhY2VBUEkuZ2V0SW5zdGFuY2UoKX0sNDAzOihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuTm9uUmVjb3JkaW5nU3Bhbj12b2lkIDA7Y29uc3Qgbj1yKDQ3Nik7Y2xhc3MgTm9uUmVjb3JkaW5nU3Bhbntjb25zdHJ1Y3RvcihlPW4uSU5WQUxJRF9TUEFOX0NPTlRFWFQpe3RoaXMuX3NwYW5Db250ZXh0PWV9c3BhbkNvbnRleHQoKXtyZXR1cm4gdGhpcy5fc3BhbkNvbnRleHR9c2V0QXR0cmlidXRlKGUsdCl7cmV0dXJuIHRoaXN9c2V0QXR0cmlidXRlcyhlKXtyZXR1cm4gdGhpc31hZGRFdmVudChlLHQpe3JldHVybiB0aGlzfXNldFN0YXR1cyhlKXtyZXR1cm4gdGhpc311cGRhdGVOYW1lKGUpe3JldHVybiB0aGlzfWVuZChlKXt9aXNSZWNvcmRpbmcoKXtyZXR1cm4gZmFsc2V9cmVjb3JkRXhjZXB0aW9uKGUsdCl7fX10Lk5vblJlY29yZGluZ1NwYW49Tm9uUmVjb3JkaW5nU3Bhbn0sNjE0OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuTm9vcFRyYWNlcj12b2lkIDA7Y29uc3Qgbj1yKDQ5MSk7Y29uc3QgYT1yKDYwNyk7Y29uc3Qgbz1yKDQwMyk7Y29uc3QgaT1yKDEzOSk7Y29uc3QgYz1uLkNvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKTtjbGFzcyBOb29wVHJhY2Vye3N0YXJ0U3BhbihlLHQscj1jLmFjdGl2ZSgpKXtjb25zdCBuPUJvb2xlYW4odD09PW51bGx8fHQ9PT12b2lkIDA/dm9pZCAwOnQucm9vdCk7aWYobil7cmV0dXJuIG5ldyBvLk5vblJlY29yZGluZ1NwYW59Y29uc3Qgcz1yJiYoMCxhLmdldFNwYW5Db250ZXh0KShyKTtpZihpc1NwYW5Db250ZXh0KHMpJiYoMCxpLmlzU3BhbkNvbnRleHRWYWxpZCkocykpe3JldHVybiBuZXcgby5Ob25SZWNvcmRpbmdTcGFuKHMpfWVsc2V7cmV0dXJuIG5ldyBvLk5vblJlY29yZGluZ1NwYW59fXN0YXJ0QWN0aXZlU3BhbihlLHQscixuKXtsZXQgbztsZXQgaTtsZXQgcztpZihhcmd1bWVudHMubGVuZ3RoPDIpe3JldHVybn1lbHNlIGlmKGFyZ3VtZW50cy5sZW5ndGg9PT0yKXtzPXR9ZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoPT09Myl7bz10O3M9cn1lbHNle289dDtpPXI7cz1ufWNvbnN0IHU9aSE9PW51bGwmJmkhPT12b2lkIDA/aTpjLmFjdGl2ZSgpO2NvbnN0IGw9dGhpcy5zdGFydFNwYW4oZSxvLHUpO2NvbnN0IGc9KDAsYS5zZXRTcGFuKSh1LGwpO3JldHVybiBjLndpdGgoZyxzLHVuZGVmaW5lZCxsKX19dC5Ob29wVHJhY2VyPU5vb3BUcmFjZXI7ZnVuY3Rpb24gaXNTcGFuQ29udGV4dChlKXtyZXR1cm4gdHlwZW9mIGU9PT1cIm9iamVjdFwiJiZ0eXBlb2YgZVtcInNwYW5JZFwiXT09PVwic3RyaW5nXCImJnR5cGVvZiBlW1widHJhY2VJZFwiXT09PVwic3RyaW5nXCImJnR5cGVvZiBlW1widHJhY2VGbGFnc1wiXT09PVwibnVtYmVyXCJ9fSwxMjQ6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5Ob29wVHJhY2VyUHJvdmlkZXI9dm9pZCAwO2NvbnN0IG49cig2MTQpO2NsYXNzIE5vb3BUcmFjZXJQcm92aWRlcntnZXRUcmFjZXIoZSx0LHIpe3JldHVybiBuZXcgbi5Ob29wVHJhY2VyfX10Lk5vb3BUcmFjZXJQcm92aWRlcj1Ob29wVHJhY2VyUHJvdmlkZXJ9LDEyNTooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlByb3h5VHJhY2VyPXZvaWQgMDtjb25zdCBuPXIoNjE0KTtjb25zdCBhPW5ldyBuLk5vb3BUcmFjZXI7Y2xhc3MgUHJveHlUcmFjZXJ7Y29uc3RydWN0b3IoZSx0LHIsbil7dGhpcy5fcHJvdmlkZXI9ZTt0aGlzLm5hbWU9dDt0aGlzLnZlcnNpb249cjt0aGlzLm9wdGlvbnM9bn1zdGFydFNwYW4oZSx0LHIpe3JldHVybiB0aGlzLl9nZXRUcmFjZXIoKS5zdGFydFNwYW4oZSx0LHIpfXN0YXJ0QWN0aXZlU3BhbihlLHQscixuKXtjb25zdCBhPXRoaXMuX2dldFRyYWNlcigpO3JldHVybiBSZWZsZWN0LmFwcGx5KGEuc3RhcnRBY3RpdmVTcGFuLGEsYXJndW1lbnRzKX1fZ2V0VHJhY2VyKCl7aWYodGhpcy5fZGVsZWdhdGUpe3JldHVybiB0aGlzLl9kZWxlZ2F0ZX1jb25zdCBlPXRoaXMuX3Byb3ZpZGVyLmdldERlbGVnYXRlVHJhY2VyKHRoaXMubmFtZSx0aGlzLnZlcnNpb24sdGhpcy5vcHRpb25zKTtpZighZSl7cmV0dXJuIGF9dGhpcy5fZGVsZWdhdGU9ZTtyZXR1cm4gdGhpcy5fZGVsZWdhdGV9fXQuUHJveHlUcmFjZXI9UHJveHlUcmFjZXJ9LDg0NjooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlByb3h5VHJhY2VyUHJvdmlkZXI9dm9pZCAwO2NvbnN0IG49cigxMjUpO2NvbnN0IGE9cigxMjQpO2NvbnN0IG89bmV3IGEuTm9vcFRyYWNlclByb3ZpZGVyO2NsYXNzIFByb3h5VHJhY2VyUHJvdmlkZXJ7Z2V0VHJhY2VyKGUsdCxyKXt2YXIgYTtyZXR1cm4oYT10aGlzLmdldERlbGVnYXRlVHJhY2VyKGUsdCxyKSkhPT1udWxsJiZhIT09dm9pZCAwP2E6bmV3IG4uUHJveHlUcmFjZXIodGhpcyxlLHQscil9Z2V0RGVsZWdhdGUoKXt2YXIgZTtyZXR1cm4oZT10aGlzLl9kZWxlZ2F0ZSkhPT1udWxsJiZlIT09dm9pZCAwP2U6b31zZXREZWxlZ2F0ZShlKXt0aGlzLl9kZWxlZ2F0ZT1lfWdldERlbGVnYXRlVHJhY2VyKGUsdCxyKXt2YXIgbjtyZXR1cm4obj10aGlzLl9kZWxlZ2F0ZSk9PT1udWxsfHxuPT09dm9pZCAwP3ZvaWQgMDpuLmdldFRyYWNlcihlLHQscil9fXQuUHJveHlUcmFjZXJQcm92aWRlcj1Qcm94eVRyYWNlclByb3ZpZGVyfSw5OTY6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuU2FtcGxpbmdEZWNpc2lvbj12b2lkIDA7dmFyIHI7KGZ1bmN0aW9uKGUpe2VbZVtcIk5PVF9SRUNPUkRcIl09MF09XCJOT1RfUkVDT1JEXCI7ZVtlW1wiUkVDT1JEXCJdPTFdPVwiUkVDT1JEXCI7ZVtlW1wiUkVDT1JEX0FORF9TQU1QTEVEXCJdPTJdPVwiUkVDT1JEX0FORF9TQU1QTEVEXCJ9KShyPXQuU2FtcGxpbmdEZWNpc2lvbnx8KHQuU2FtcGxpbmdEZWNpc2lvbj17fSkpfSw2MDc6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5nZXRTcGFuQ29udGV4dD10LnNldFNwYW5Db250ZXh0PXQuZGVsZXRlU3Bhbj10LnNldFNwYW49dC5nZXRBY3RpdmVTcGFuPXQuZ2V0U3Bhbj12b2lkIDA7Y29uc3Qgbj1yKDc4MCk7Y29uc3QgYT1yKDQwMyk7Y29uc3Qgbz1yKDQ5MSk7Y29uc3QgaT0oMCxuLmNyZWF0ZUNvbnRleHRLZXkpKFwiT3BlblRlbGVtZXRyeSBDb250ZXh0IEtleSBTUEFOXCIpO2Z1bmN0aW9uIGdldFNwYW4oZSl7cmV0dXJuIGUuZ2V0VmFsdWUoaSl8fHVuZGVmaW5lZH10LmdldFNwYW49Z2V0U3BhbjtmdW5jdGlvbiBnZXRBY3RpdmVTcGFuKCl7cmV0dXJuIGdldFNwYW4oby5Db250ZXh0QVBJLmdldEluc3RhbmNlKCkuYWN0aXZlKCkpfXQuZ2V0QWN0aXZlU3Bhbj1nZXRBY3RpdmVTcGFuO2Z1bmN0aW9uIHNldFNwYW4oZSx0KXtyZXR1cm4gZS5zZXRWYWx1ZShpLHQpfXQuc2V0U3Bhbj1zZXRTcGFuO2Z1bmN0aW9uIGRlbGV0ZVNwYW4oZSl7cmV0dXJuIGUuZGVsZXRlVmFsdWUoaSl9dC5kZWxldGVTcGFuPWRlbGV0ZVNwYW47ZnVuY3Rpb24gc2V0U3BhbkNvbnRleHQoZSx0KXtyZXR1cm4gc2V0U3BhbihlLG5ldyBhLk5vblJlY29yZGluZ1NwYW4odCkpfXQuc2V0U3BhbkNvbnRleHQ9c2V0U3BhbkNvbnRleHQ7ZnVuY3Rpb24gZ2V0U3BhbkNvbnRleHQoZSl7dmFyIHQ7cmV0dXJuKHQ9Z2V0U3BhbihlKSk9PT1udWxsfHx0PT09dm9pZCAwP3ZvaWQgMDp0LnNwYW5Db250ZXh0KCl9dC5nZXRTcGFuQ29udGV4dD1nZXRTcGFuQ29udGV4dH0sMzI1OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuVHJhY2VTdGF0ZUltcGw9dm9pZCAwO2NvbnN0IG49cig1NjQpO2NvbnN0IGE9MzI7Y29uc3Qgbz01MTI7Y29uc3QgaT1cIixcIjtjb25zdCBjPVwiPVwiO2NsYXNzIFRyYWNlU3RhdGVJbXBse2NvbnN0cnVjdG9yKGUpe3RoaXMuX2ludGVybmFsU3RhdGU9bmV3IE1hcDtpZihlKXRoaXMuX3BhcnNlKGUpfXNldChlLHQpe2NvbnN0IHI9dGhpcy5fY2xvbmUoKTtpZihyLl9pbnRlcm5hbFN0YXRlLmhhcyhlKSl7ci5faW50ZXJuYWxTdGF0ZS5kZWxldGUoZSl9ci5faW50ZXJuYWxTdGF0ZS5zZXQoZSx0KTtyZXR1cm4gcn11bnNldChlKXtjb25zdCB0PXRoaXMuX2Nsb25lKCk7dC5faW50ZXJuYWxTdGF0ZS5kZWxldGUoZSk7cmV0dXJuIHR9Z2V0KGUpe3JldHVybiB0aGlzLl9pbnRlcm5hbFN0YXRlLmdldChlKX1zZXJpYWxpemUoKXtyZXR1cm4gdGhpcy5fa2V5cygpLnJlZHVjZSgoKGUsdCk9PntlLnB1c2godCtjK3RoaXMuZ2V0KHQpKTtyZXR1cm4gZX0pLFtdKS5qb2luKGkpfV9wYXJzZShlKXtpZihlLmxlbmd0aD5vKXJldHVybjt0aGlzLl9pbnRlcm5hbFN0YXRlPWUuc3BsaXQoaSkucmV2ZXJzZSgpLnJlZHVjZSgoKGUsdCk9Pntjb25zdCByPXQudHJpbSgpO2NvbnN0IGE9ci5pbmRleE9mKGMpO2lmKGEhPT0tMSl7Y29uc3Qgbz1yLnNsaWNlKDAsYSk7Y29uc3QgaT1yLnNsaWNlKGErMSx0Lmxlbmd0aCk7aWYoKDAsbi52YWxpZGF0ZUtleSkobykmJigwLG4udmFsaWRhdGVWYWx1ZSkoaSkpe2Uuc2V0KG8saSl9ZWxzZXt9fXJldHVybiBlfSksbmV3IE1hcCk7aWYodGhpcy5faW50ZXJuYWxTdGF0ZS5zaXplPmEpe3RoaXMuX2ludGVybmFsU3RhdGU9bmV3IE1hcChBcnJheS5mcm9tKHRoaXMuX2ludGVybmFsU3RhdGUuZW50cmllcygpKS5yZXZlcnNlKCkuc2xpY2UoMCxhKSl9fV9rZXlzKCl7cmV0dXJuIEFycmF5LmZyb20odGhpcy5faW50ZXJuYWxTdGF0ZS5rZXlzKCkpLnJldmVyc2UoKX1fY2xvbmUoKXtjb25zdCBlPW5ldyBUcmFjZVN0YXRlSW1wbDtlLl9pbnRlcm5hbFN0YXRlPW5ldyBNYXAodGhpcy5faW50ZXJuYWxTdGF0ZSk7cmV0dXJuIGV9fXQuVHJhY2VTdGF0ZUltcGw9VHJhY2VTdGF0ZUltcGx9LDU2NDooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC52YWxpZGF0ZVZhbHVlPXQudmFsaWRhdGVLZXk9dm9pZCAwO2NvbnN0IHI9XCJbXzAtOWEtei0qL11cIjtjb25zdCBuPWBbYS16XSR7cn17MCwyNTV9YDtjb25zdCBhPWBbYS16MC05XSR7cn17MCwyNDB9QFthLXpdJHtyfXswLDEzfWA7Y29uc3Qgbz1uZXcgUmVnRXhwKGBeKD86JHtufXwke2F9KSRgKTtjb25zdCBpPS9eWyAtfl17MCwyNTV9WyEtfl0kLztjb25zdCBjPS8sfD0vO2Z1bmN0aW9uIHZhbGlkYXRlS2V5KGUpe3JldHVybiBvLnRlc3QoZSl9dC52YWxpZGF0ZUtleT12YWxpZGF0ZUtleTtmdW5jdGlvbiB2YWxpZGF0ZVZhbHVlKGUpe3JldHVybiBpLnRlc3QoZSkmJiFjLnRlc3QoZSl9dC52YWxpZGF0ZVZhbHVlPXZhbGlkYXRlVmFsdWV9LDk4OihlLHQscik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3QuY3JlYXRlVHJhY2VTdGF0ZT12b2lkIDA7Y29uc3Qgbj1yKDMyNSk7ZnVuY3Rpb24gY3JlYXRlVHJhY2VTdGF0ZShlKXtyZXR1cm4gbmV3IG4uVHJhY2VTdGF0ZUltcGwoZSl9dC5jcmVhdGVUcmFjZVN0YXRlPWNyZWF0ZVRyYWNlU3RhdGV9LDQ3NjooZSx0LHIpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LklOVkFMSURfU1BBTl9DT05URVhUPXQuSU5WQUxJRF9UUkFDRUlEPXQuSU5WQUxJRF9TUEFOSUQ9dm9pZCAwO2NvbnN0IG49cig0NzUpO3QuSU5WQUxJRF9TUEFOSUQ9XCIwMDAwMDAwMDAwMDAwMDAwXCI7dC5JTlZBTElEX1RSQUNFSUQ9XCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO3QuSU5WQUxJRF9TUEFOX0NPTlRFWFQ9e3RyYWNlSWQ6dC5JTlZBTElEX1RSQUNFSUQsc3BhbklkOnQuSU5WQUxJRF9TUEFOSUQsdHJhY2VGbGFnczpuLlRyYWNlRmxhZ3MuTk9ORX19LDM1NzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5TcGFuS2luZD12b2lkIDA7dmFyIHI7KGZ1bmN0aW9uKGUpe2VbZVtcIklOVEVSTkFMXCJdPTBdPVwiSU5URVJOQUxcIjtlW2VbXCJTRVJWRVJcIl09MV09XCJTRVJWRVJcIjtlW2VbXCJDTElFTlRcIl09Ml09XCJDTElFTlRcIjtlW2VbXCJQUk9EVUNFUlwiXT0zXT1cIlBST0RVQ0VSXCI7ZVtlW1wiQ09OU1VNRVJcIl09NF09XCJDT05TVU1FUlwifSkocj10LlNwYW5LaW5kfHwodC5TcGFuS2luZD17fSkpfSwxMzk6KGUsdCxyKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC53cmFwU3BhbkNvbnRleHQ9dC5pc1NwYW5Db250ZXh0VmFsaWQ9dC5pc1ZhbGlkU3BhbklkPXQuaXNWYWxpZFRyYWNlSWQ9dm9pZCAwO2NvbnN0IG49cig0NzYpO2NvbnN0IGE9cig0MDMpO2NvbnN0IG89L14oWzAtOWEtZl17MzJ9KSQvaTtjb25zdCBpPS9eWzAtOWEtZl17MTZ9JC9pO2Z1bmN0aW9uIGlzVmFsaWRUcmFjZUlkKGUpe3JldHVybiBvLnRlc3QoZSkmJmUhPT1uLklOVkFMSURfVFJBQ0VJRH10LmlzVmFsaWRUcmFjZUlkPWlzVmFsaWRUcmFjZUlkO2Z1bmN0aW9uIGlzVmFsaWRTcGFuSWQoZSl7cmV0dXJuIGkudGVzdChlKSYmZSE9PW4uSU5WQUxJRF9TUEFOSUR9dC5pc1ZhbGlkU3BhbklkPWlzVmFsaWRTcGFuSWQ7ZnVuY3Rpb24gaXNTcGFuQ29udGV4dFZhbGlkKGUpe3JldHVybiBpc1ZhbGlkVHJhY2VJZChlLnRyYWNlSWQpJiZpc1ZhbGlkU3BhbklkKGUuc3BhbklkKX10LmlzU3BhbkNvbnRleHRWYWxpZD1pc1NwYW5Db250ZXh0VmFsaWQ7ZnVuY3Rpb24gd3JhcFNwYW5Db250ZXh0KGUpe3JldHVybiBuZXcgYS5Ob25SZWNvcmRpbmdTcGFuKGUpfXQud3JhcFNwYW5Db250ZXh0PXdyYXBTcGFuQ29udGV4dH0sODQ3OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlNwYW5TdGF0dXNDb2RlPXZvaWQgMDt2YXIgcjsoZnVuY3Rpb24oZSl7ZVtlW1wiVU5TRVRcIl09MF09XCJVTlNFVFwiO2VbZVtcIk9LXCJdPTFdPVwiT0tcIjtlW2VbXCJFUlJPUlwiXT0yXT1cIkVSUk9SXCJ9KShyPXQuU3BhblN0YXR1c0NvZGV8fCh0LlNwYW5TdGF0dXNDb2RlPXt9KSl9LDQ3NTooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dC5UcmFjZUZsYWdzPXZvaWQgMDt2YXIgcjsoZnVuY3Rpb24oZSl7ZVtlW1wiTk9ORVwiXT0wXT1cIk5PTkVcIjtlW2VbXCJTQU1QTEVEXCJdPTFdPVwiU0FNUExFRFwifSkocj10LlRyYWNlRmxhZ3N8fCh0LlRyYWNlRmxhZ3M9e30pKX0sNTIxOihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt0LlZFUlNJT049dm9pZCAwO3QuVkVSU0lPTj1cIjEuNi4wXCJ9fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgYT10W3JdPXtleHBvcnRzOnt9fTt2YXIgbz10cnVlO3RyeXtlW3JdLmNhbGwoYS5leHBvcnRzLGEsYS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO289ZmFsc2V9ZmluYWxseXtpZihvKWRlbGV0ZSB0W3JdfXJldHVybiBhLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPXt9OygoKT0+e3ZhciBlPXI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtlLnRyYWNlPWUucHJvcGFnYXRpb249ZS5tZXRyaWNzPWUuZGlhZz1lLmNvbnRleHQ9ZS5JTlZBTElEX1NQQU5fQ09OVEVYVD1lLklOVkFMSURfVFJBQ0VJRD1lLklOVkFMSURfU1BBTklEPWUuaXNWYWxpZFNwYW5JZD1lLmlzVmFsaWRUcmFjZUlkPWUuaXNTcGFuQ29udGV4dFZhbGlkPWUuY3JlYXRlVHJhY2VTdGF0ZT1lLlRyYWNlRmxhZ3M9ZS5TcGFuU3RhdHVzQ29kZT1lLlNwYW5LaW5kPWUuU2FtcGxpbmdEZWNpc2lvbj1lLlByb3h5VHJhY2VyUHJvdmlkZXI9ZS5Qcm94eVRyYWNlcj1lLmRlZmF1bHRUZXh0TWFwU2V0dGVyPWUuZGVmYXVsdFRleHRNYXBHZXR0ZXI9ZS5WYWx1ZVR5cGU9ZS5jcmVhdGVOb29wTWV0ZXI9ZS5EaWFnTG9nTGV2ZWw9ZS5EaWFnQ29uc29sZUxvZ2dlcj1lLlJPT1RfQ09OVEVYVD1lLmNyZWF0ZUNvbnRleHRLZXk9ZS5iYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmc9dm9pZCAwO3ZhciB0PV9fbmNjd3Bja19yZXF1aXJlX18oMzY5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZ1wiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuYmFnZ2FnZUVudHJ5TWV0YWRhdGFGcm9tU3RyaW5nfX0pO3ZhciBuPV9fbmNjd3Bja19yZXF1aXJlX18oNzgwKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImNyZWF0ZUNvbnRleHRLZXlcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBuLmNyZWF0ZUNvbnRleHRLZXl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJST09UX0NPTlRFWFRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBuLlJPT1RfQ09OVEVYVH19KTt2YXIgYT1fX25jY3dwY2tfcmVxdWlyZV9fKDk3Mik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJEaWFnQ29uc29sZUxvZ2dlclwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEuRGlhZ0NvbnNvbGVMb2dnZXJ9fSk7dmFyIG89X19uY2N3cGNrX3JlcXVpcmVfXyg5NTcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiRGlhZ0xvZ0xldmVsXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5EaWFnTG9nTGV2ZWx9fSk7dmFyIGk9X19uY2N3cGNrX3JlcXVpcmVfXygxMDIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiY3JlYXRlTm9vcE1ldGVyXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5jcmVhdGVOb29wTWV0ZXJ9fSk7dmFyIGM9X19uY2N3cGNrX3JlcXVpcmVfXyg5MDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiVmFsdWVUeXBlXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5WYWx1ZVR5cGV9fSk7dmFyIHM9X19uY2N3cGNrX3JlcXVpcmVfXygxOTQpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZGVmYXVsdFRleHRNYXBHZXR0ZXJcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBzLmRlZmF1bHRUZXh0TWFwR2V0dGVyfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZGVmYXVsdFRleHRNYXBTZXR0ZXJcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBzLmRlZmF1bHRUZXh0TWFwU2V0dGVyfX0pO3ZhciB1PV9fbmNjd3Bja19yZXF1aXJlX18oMTI1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlByb3h5VHJhY2VyXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdS5Qcm94eVRyYWNlcn19KTt2YXIgbD1fX25jY3dwY2tfcmVxdWlyZV9fKDg0Nik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJQcm94eVRyYWNlclByb3ZpZGVyXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5Qcm94eVRyYWNlclByb3ZpZGVyfX0pO3ZhciBnPV9fbmNjd3Bja19yZXF1aXJlX18oOTk2KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNhbXBsaW5nRGVjaXNpb25cIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBnLlNhbXBsaW5nRGVjaXNpb259fSk7dmFyIHA9X19uY2N3cGNrX3JlcXVpcmVfXygzNTcpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiU3BhbktpbmRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBwLlNwYW5LaW5kfX0pO3ZhciBkPV9fbmNjd3Bja19yZXF1aXJlX18oODQ3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlNwYW5TdGF0dXNDb2RlXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZC5TcGFuU3RhdHVzQ29kZX19KTt2YXIgXz1fX25jY3dwY2tfcmVxdWlyZV9fKDQ3NSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJUcmFjZUZsYWdzXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gXy5UcmFjZUZsYWdzfX0pO3ZhciBmPV9fbmNjd3Bja19yZXF1aXJlX18oOTgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiY3JlYXRlVHJhY2VTdGF0ZVwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGYuY3JlYXRlVHJhY2VTdGF0ZX19KTt2YXIgYj1fX25jY3dwY2tfcmVxdWlyZV9fKDEzOSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpc1NwYW5Db250ZXh0VmFsaWRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBiLmlzU3BhbkNvbnRleHRWYWxpZH19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImlzVmFsaWRUcmFjZUlkXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYi5pc1ZhbGlkVHJhY2VJZH19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImlzVmFsaWRTcGFuSWRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBiLmlzVmFsaWRTcGFuSWR9fSk7dmFyIHY9X19uY2N3cGNrX3JlcXVpcmVfXyg0NzYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiSU5WQUxJRF9TUEFOSURcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiB2LklOVkFMSURfU1BBTklEfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiSU5WQUxJRF9UUkFDRUlEXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdi5JTlZBTElEX1RSQUNFSUR9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJJTlZBTElEX1NQQU5fQ09OVEVYVFwiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYuSU5WQUxJRF9TUEFOX0NPTlRFWFR9fSk7Y29uc3QgTz1fX25jY3dwY2tfcmVxdWlyZV9fKDY3KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImNvbnRleHRcIix7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBPLmNvbnRleHR9fSk7Y29uc3QgUD1fX25jY3dwY2tfcmVxdWlyZV9fKDUwNik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJkaWFnXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUC5kaWFnfX0pO2NvbnN0IE49X19uY2N3cGNrX3JlcXVpcmVfXyg4ODYpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibWV0cmljc1wiLHtlbnVtZXJhYmxlOnRydWUsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIE4ubWV0cmljc319KTtjb25zdCBTPV9fbmNjd3Bja19yZXF1aXJlX18oOTM5KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3BhZ2F0aW9uXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUy5wcm9wYWdhdGlvbn19KTtjb25zdCBDPV9fbmNjd3Bja19yZXF1aXJlX18oODQ1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInRyYWNlXCIse2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQy50cmFjZX19KTtlW1wiZGVmYXVsdFwiXT17Y29udGV4dDpPLmNvbnRleHQsZGlhZzpQLmRpYWcsbWV0cmljczpOLm1ldHJpY3MscHJvcGFnYXRpb246Uy5wcm9wYWdhdGlvbix0cmFjZTpDLnRyYWNlfX0pKCk7bW9kdWxlLmV4cG9ydHM9cn0pKCk7Il0sIm5hbWVzIjpbImUiLCJ0IiwiciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJDb250ZXh0QVBJIiwibiIsImEiLCJvIiwiaSIsImMiLCJOb29wQ29udGV4dE1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsImdldEluc3RhbmNlIiwiX2luc3RhbmNlIiwic2V0R2xvYmFsQ29udGV4dE1hbmFnZXIiLCJyZWdpc3Rlckdsb2JhbCIsIkRpYWdBUEkiLCJpbnN0YW5jZSIsImFjdGl2ZSIsIl9nZXRDb250ZXh0TWFuYWdlciIsIndpdGgiLCJiaW5kIiwiZ2V0R2xvYmFsIiwiZGlzYWJsZSIsInVucmVnaXN0ZXJHbG9iYWwiLCJfbG9nUHJveHkiLCJzZXRMb2dnZXIiLCJsb2dMZXZlbCIsIkRpYWdMb2dMZXZlbCIsIklORk8iLCJzIiwiRXJyb3IiLCJlcnJvciIsInN0YWNrIiwibWVzc2FnZSIsInUiLCJsIiwiY3JlYXRlTG9nTGV2ZWxEaWFnTG9nZ2VyIiwic3VwcHJlc3NPdmVycmlkZU1lc3NhZ2UiLCJ3YXJuIiwiY3JlYXRlQ29tcG9uZW50TG9nZ2VyIiwiRGlhZ0NvbXBvbmVudExvZ2dlciIsInZlcmJvc2UiLCJkZWJ1ZyIsImluZm8iLCJNZXRyaWNzQVBJIiwic2V0R2xvYmFsTWV0ZXJQcm92aWRlciIsImdldE1ldGVyUHJvdmlkZXIiLCJOT09QX01FVEVSX1BST1ZJREVSIiwiZ2V0TWV0ZXIiLCJQcm9wYWdhdGlvbkFQSSIsIk5vb3BUZXh0TWFwUHJvcGFnYXRvciIsImNyZWF0ZUJhZ2dhZ2UiLCJnZXRCYWdnYWdlIiwiZ2V0QWN0aXZlQmFnZ2FnZSIsInNldEJhZ2dhZ2UiLCJkZWxldGVCYWdnYWdlIiwic2V0R2xvYmFsUHJvcGFnYXRvciIsImluamVjdCIsImRlZmF1bHRUZXh0TWFwU2V0dGVyIiwiX2dldEdsb2JhbFByb3BhZ2F0b3IiLCJleHRyYWN0IiwiZGVmYXVsdFRleHRNYXBHZXR0ZXIiLCJmaWVsZHMiLCJUcmFjZUFQSSIsIl9wcm94eVRyYWNlclByb3ZpZGVyIiwiUHJveHlUcmFjZXJQcm92aWRlciIsIndyYXBTcGFuQ29udGV4dCIsImlzU3BhbkNvbnRleHRWYWxpZCIsImRlbGV0ZVNwYW4iLCJnZXRTcGFuIiwiZ2V0QWN0aXZlU3BhbiIsImdldFNwYW5Db250ZXh0Iiwic2V0U3BhbiIsInNldFNwYW5Db250ZXh0Iiwic2V0R2xvYmFsVHJhY2VyUHJvdmlkZXIiLCJzZXREZWxlZ2F0ZSIsImdldFRyYWNlclByb3ZpZGVyIiwiZ2V0VHJhY2VyIiwiY3JlYXRlQ29udGV4dEtleSIsImdldFZhbHVlIiwidW5kZWZpbmVkIiwic2V0VmFsdWUiLCJkZWxldGVWYWx1ZSIsIkJhZ2dhZ2VJbXBsIiwiX2VudHJpZXMiLCJNYXAiLCJnZXRFbnRyeSIsImdldCIsImFzc2lnbiIsImdldEFsbEVudHJpZXMiLCJBcnJheSIsImZyb20iLCJlbnRyaWVzIiwibWFwIiwic2V0RW50cnkiLCJzZXQiLCJyZW1vdmVFbnRyeSIsImRlbGV0ZSIsInJlbW92ZUVudHJpZXMiLCJjbGVhciIsImJhZ2dhZ2VFbnRyeU1ldGFkYXRhU3ltYm9sIiwiU3ltYm9sIiwiYmFnZ2FnZUVudHJ5TWV0YWRhdGFGcm9tU3RyaW5nIiwiX19UWVBFX18iLCJ0b1N0cmluZyIsImNvbnRleHQiLCJST09UX0NPTlRFWFQiLCJjYWxsIiwiZW5hYmxlIiwiZm9yIiwiQmFzZUNvbnRleHQiLCJfY3VycmVudENvbnRleHQiLCJkaWFnIiwiX25hbWVzcGFjZSIsIm5hbWVzcGFjZSIsImxvZ1Byb3h5IiwidW5zaGlmdCIsIkRpYWdDb25zb2xlTG9nZ2VyIiwiX2NvbnNvbGVGdW5jIiwiY29uc29sZSIsImxvZyIsImFwcGx5IiwibGVuZ3RoIiwiTk9ORSIsIkFMTCIsIl9maWx0ZXJGdW5jIiwiRVJST1IiLCJXQVJOIiwiREVCVUciLCJWRVJCT1NFIiwiVkVSU0lPTiIsInNwbGl0IiwiX2dsb2JhbFRoaXMiLCJ2ZXJzaW9uIiwiaXNDb21wYXRpYmxlIiwiX21ha2VDb21wYXRpYmlsaXR5Q2hlY2siLCJTZXQiLCJtYXRjaCIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsInByZXJlbGVhc2UiLCJpc0V4YWN0bWF0Y2giLCJfcmVqZWN0IiwiYWRkIiwiX2FjY2VwdCIsImhhcyIsIm1ldHJpY3MiLCJWYWx1ZVR5cGUiLCJjcmVhdGVOb29wTWV0ZXIiLCJOT09QX09CU0VSVkFCTEVfVVBfRE9XTl9DT1VOVEVSX01FVFJJQyIsIk5PT1BfT0JTRVJWQUJMRV9HQVVHRV9NRVRSSUMiLCJOT09QX09CU0VSVkFCTEVfQ09VTlRFUl9NRVRSSUMiLCJOT09QX1VQX0RPV05fQ09VTlRFUl9NRVRSSUMiLCJOT09QX0hJU1RPR1JBTV9NRVRSSUMiLCJOT09QX0NPVU5URVJfTUVUUklDIiwiTk9PUF9NRVRFUiIsIk5vb3BPYnNlcnZhYmxlVXBEb3duQ291bnRlck1ldHJpYyIsIk5vb3BPYnNlcnZhYmxlR2F1Z2VNZXRyaWMiLCJOb29wT2JzZXJ2YWJsZUNvdW50ZXJNZXRyaWMiLCJOb29wT2JzZXJ2YWJsZU1ldHJpYyIsIk5vb3BIaXN0b2dyYW1NZXRyaWMiLCJOb29wVXBEb3duQ291bnRlck1ldHJpYyIsIk5vb3BDb3VudGVyTWV0cmljIiwiTm9vcE1ldHJpYyIsIk5vb3BNZXRlciIsImNyZWF0ZUhpc3RvZ3JhbSIsImNyZWF0ZUNvdW50ZXIiLCJjcmVhdGVVcERvd25Db3VudGVyIiwiY3JlYXRlT2JzZXJ2YWJsZUdhdWdlIiwiY3JlYXRlT2JzZXJ2YWJsZUNvdW50ZXIiLCJjcmVhdGVPYnNlcnZhYmxlVXBEb3duQ291bnRlciIsImFkZEJhdGNoT2JzZXJ2YWJsZUNhbGxiYWNrIiwicmVtb3ZlQmF0Y2hPYnNlcnZhYmxlQ2FsbGJhY2siLCJyZWNvcmQiLCJhZGRDYWxsYmFjayIsInJlbW92ZUNhbGxiYWNrIiwiTm9vcE1ldGVyUHJvdmlkZXIiLCJfX2NyZWF0ZUJpbmRpbmciLCJjcmVhdGUiLCJlbnVtZXJhYmxlIiwiX19leHBvcnRTdGFyIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwicHJvcGFnYXRpb24iLCJrZXlzIiwidHJhY2UiLCJOb25SZWNvcmRpbmdTcGFuIiwiSU5WQUxJRF9TUEFOX0NPTlRFWFQiLCJfc3BhbkNvbnRleHQiLCJzcGFuQ29udGV4dCIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZXMiLCJhZGRFdmVudCIsInNldFN0YXR1cyIsInVwZGF0ZU5hbWUiLCJlbmQiLCJpc1JlY29yZGluZyIsInJlY29yZEV4Y2VwdGlvbiIsIk5vb3BUcmFjZXIiLCJzdGFydFNwYW4iLCJCb29sZWFuIiwicm9vdCIsImlzU3BhbkNvbnRleHQiLCJzdGFydEFjdGl2ZVNwYW4iLCJhcmd1bWVudHMiLCJnIiwiTm9vcFRyYWNlclByb3ZpZGVyIiwiUHJveHlUcmFjZXIiLCJfcHJvdmlkZXIiLCJuYW1lIiwib3B0aW9ucyIsIl9nZXRUcmFjZXIiLCJSZWZsZWN0IiwiX2RlbGVnYXRlIiwiZ2V0RGVsZWdhdGVUcmFjZXIiLCJnZXREZWxlZ2F0ZSIsIlNhbXBsaW5nRGVjaXNpb24iLCJUcmFjZVN0YXRlSW1wbCIsIl9pbnRlcm5hbFN0YXRlIiwiX3BhcnNlIiwiX2Nsb25lIiwidW5zZXQiLCJzZXJpYWxpemUiLCJfa2V5cyIsInJlZHVjZSIsInB1c2giLCJqb2luIiwicmV2ZXJzZSIsInRyaW0iLCJpbmRleE9mIiwic2xpY2UiLCJ2YWxpZGF0ZUtleSIsInZhbGlkYXRlVmFsdWUiLCJzaXplIiwiUmVnRXhwIiwidGVzdCIsImNyZWF0ZVRyYWNlU3RhdGUiLCJJTlZBTElEX1RSQUNFSUQiLCJJTlZBTElEX1NQQU5JRCIsInRyYWNlSWQiLCJzcGFuSWQiLCJ0cmFjZUZsYWdzIiwiVHJhY2VGbGFncyIsIlNwYW5LaW5kIiwiaXNWYWxpZFNwYW5JZCIsImlzVmFsaWRUcmFjZUlkIiwiU3BhblN0YXR1c0NvZGUiLCJfX25jY3dwY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImFiIiwiX19kaXJuYW1lIiwicCIsImQiLCJfIiwiZiIsImIiLCJ2IiwiTyIsIlAiLCJOIiwiUyIsIkMiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFDLENBQUE7SUFBSztJQUFhLElBQUlBLElBQUU7UUFBQyxLQUFJLENBQUNBLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRUssVUFBVSxHQUFDLEtBQUs7WUFBRSxNQUFNQyxJQUFFTCxFQUFFO1lBQUssTUFBTU0sSUFBRU4sRUFBRTtZQUFLLE1BQU1PLElBQUVQLEVBQUU7WUFBSyxNQUFNUSxJQUFFO1lBQVUsTUFBTUMsSUFBRSxJQUFJSixFQUFFSyxrQkFBa0I7WUFBQyxNQUFNTjtnQkFBV08sYUFBYSxDQUFDO2dCQUFDLE9BQU9DLGNBQWE7b0JBQUMsSUFBRyxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFDO3dCQUFDLElBQUksQ0FBQ0EsU0FBUyxHQUFDLElBQUlUO29CQUFVO29CQUFDLE9BQU8sSUFBSSxDQUFDUyxTQUFTO2dCQUFBO2dCQUFDQyx3QkFBd0JoQixDQUFDLEVBQUM7b0JBQUMsT0FBTSxBQUFDLENBQUEsR0FBRVEsRUFBRVMsY0FBYyxBQUFELEVBQUdQLEdBQUVWLEdBQUVTLEVBQUVTLE9BQU8sQ0FBQ0MsUUFBUTtnQkFBRztnQkFBQ0MsU0FBUTtvQkFBQyxPQUFPLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUdELE1BQU07Z0JBQUU7Z0JBQUNFLEtBQUt0QixDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDLEdBQUdLLENBQUMsRUFBQztvQkFBQyxPQUFPLElBQUksQ0FBQ2Msa0JBQWtCLEdBQUdDLElBQUksQ0FBQ3RCLEdBQUVDLEdBQUVDLE1BQUtLO2dCQUFFO2dCQUFDZ0IsS0FBS3ZCLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO29CQUFDLE9BQU8sSUFBSSxDQUFDb0Isa0JBQWtCLEdBQUdFLElBQUksQ0FBQ3ZCLEdBQUVDO2dCQUFFO2dCQUFDb0IscUJBQW9CO29CQUFDLE9BQU0sQUFBQyxDQUFBLEdBQUViLEVBQUVnQixTQUFTLEFBQUQsRUFBR2QsTUFBSUM7Z0JBQUM7Z0JBQUNjLFVBQVM7b0JBQUMsSUFBSSxDQUFDSixrQkFBa0IsR0FBR0ksT0FBTztvQkFBSSxDQUFBLEdBQUVqQixFQUFFa0IsZ0JBQWdCLEFBQUQsRUFBR2hCLEdBQUVELEVBQUVTLE9BQU8sQ0FBQ0MsUUFBUTtnQkFBRztZQUFDO1lBQUNsQixFQUFFSyxVQUFVLEdBQUNBO1FBQVU7UUFBRSxLQUFJLENBQUNOLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRWlCLE9BQU8sR0FBQyxLQUFLO1lBQUUsTUFBTVgsSUFBRUwsRUFBRTtZQUFJLE1BQU1NLElBQUVOLEVBQUU7WUFBSyxNQUFNTyxJQUFFUCxFQUFFO1lBQUssTUFBTVEsSUFBRVIsRUFBRTtZQUFLLE1BQU1TLElBQUU7WUFBTyxNQUFNTztnQkFBUUwsYUFBYTtvQkFBQyxTQUFTYyxVQUFVM0IsQ0FBQzt3QkFBRSxPQUFPLFNBQVMsR0FBR0MsQ0FBQzs0QkFBRSxNQUFNQyxJQUFFLEFBQUMsQ0FBQSxHQUFFUSxFQUFFYyxTQUFTLEFBQUQsRUFBRzs0QkFBUSxJQUFHLENBQUN0QixHQUFFOzRCQUFPLE9BQU9BLENBQUMsQ0FBQ0YsRUFBRSxJQUFJQzt3QkFBRTtvQkFBQztvQkFBQyxNQUFNRCxJQUFFLElBQUk7b0JBQUMsTUFBTTRCLFlBQVUsQ0FBQzNCLEdBQUVDLElBQUU7d0JBQUMyQixVQUFTcEIsRUFBRXFCLFlBQVksQ0FBQ0MsSUFBSTtvQkFBQSxDQUFDO3dCQUFJLElBQUl4QixHQUFFSSxHQUFFcUI7d0JBQUUsSUFBRy9CLE1BQUlELEdBQUU7NEJBQUMsTUFBTUMsSUFBRSxJQUFJZ0MsTUFBTTs0QkFBc0lqQyxFQUFFa0MsS0FBSyxDQUFDLEFBQUMzQixDQUFBQSxJQUFFTixFQUFFa0MsS0FBSyxBQUFELE1BQUssUUFBTTVCLE1BQUksS0FBSyxJQUFFQSxJQUFFTixFQUFFbUMsT0FBTzs0QkFBRSxPQUFPO3dCQUFLO3dCQUFDLElBQUcsT0FBT2xDLE1BQUksVUFBUzs0QkFBQ0EsSUFBRTtnQ0FBQzJCLFVBQVMzQjs0QkFBQzt3QkFBQzt3QkFBQyxNQUFNbUMsSUFBRSxBQUFDLENBQUEsR0FBRTNCLEVBQUVjLFNBQVMsQUFBRCxFQUFHO3dCQUFRLE1BQU1jLElBQUUsQUFBQyxDQUFBLEdBQUU5QixFQUFFK0Isd0JBQXdCLEFBQUQsRUFBRyxBQUFDNUIsQ0FBQUEsSUFBRVQsRUFBRTJCLFFBQVEsQUFBRCxNQUFLLFFBQU1sQixNQUFJLEtBQUssSUFBRUEsSUFBRUYsRUFBRXFCLFlBQVksQ0FBQ0MsSUFBSSxFQUFDOUI7d0JBQUcsSUFBR29DLEtBQUcsQ0FBQ25DLEVBQUVzQyx1QkFBdUIsRUFBQzs0QkFBQyxNQUFNeEMsSUFBRSxBQUFDZ0MsQ0FBQUEsSUFBRSxBQUFDLENBQUEsSUFBSUMsS0FBSSxFQUFHRSxLQUFLLEFBQUQsTUFBSyxRQUFNSCxNQUFJLEtBQUssSUFBRUEsSUFBRTs0QkFBa0NLLEVBQUVJLElBQUksQ0FBQyxDQUFDLHdDQUF3QyxFQUFFekMsRUFBRSxDQUFDOzRCQUFFc0MsRUFBRUcsSUFBSSxDQUFDLENBQUMsMERBQTBELEVBQUV6QyxFQUFFLENBQUM7d0JBQUM7d0JBQUMsT0FBTSxBQUFDLENBQUEsR0FBRVUsRUFBRU8sY0FBYyxBQUFELEVBQUcsUUFBT3FCLEdBQUV0QyxHQUFFO29CQUFLO29CQUFFQSxFQUFFNEIsU0FBUyxHQUFDQTtvQkFBVTVCLEVBQUV5QixPQUFPLEdBQUM7d0JBQU0sQ0FBQSxHQUFFZixFQUFFZ0IsZ0JBQWdCLEFBQUQsRUFBR2YsR0FBRVg7b0JBQUU7b0JBQUVBLEVBQUUwQyxxQkFBcUIsR0FBQzFDLENBQUFBLElBQUcsSUFBSU8sRUFBRW9DLG1CQUFtQixDQUFDM0M7b0JBQUdBLEVBQUU0QyxPQUFPLEdBQUNqQixVQUFVO29CQUFXM0IsRUFBRTZDLEtBQUssR0FBQ2xCLFVBQVU7b0JBQVMzQixFQUFFOEMsSUFBSSxHQUFDbkIsVUFBVTtvQkFBUTNCLEVBQUV5QyxJQUFJLEdBQUNkLFVBQVU7b0JBQVEzQixFQUFFa0MsS0FBSyxHQUFDUCxVQUFVO2dCQUFRO2dCQUFDLE9BQU9SLFdBQVU7b0JBQUMsSUFBRyxDQUFDLElBQUksQ0FBQ0osU0FBUyxFQUFDO3dCQUFDLElBQUksQ0FBQ0EsU0FBUyxHQUFDLElBQUlHO29CQUFPO29CQUFDLE9BQU8sSUFBSSxDQUFDSCxTQUFTO2dCQUFBO1lBQUM7WUFBQ2QsRUFBRWlCLE9BQU8sR0FBQ0E7UUFBTztRQUFFLEtBQUksQ0FBQ2xCLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRThDLFVBQVUsR0FBQyxLQUFLO1lBQUUsTUFBTXhDLElBQUVMLEVBQUU7WUFBSyxNQUFNTSxJQUFFTixFQUFFO1lBQUssTUFBTU8sSUFBRVAsRUFBRTtZQUFLLE1BQU1RLElBQUU7WUFBVSxNQUFNcUM7Z0JBQVdsQyxhQUFhLENBQUM7Z0JBQUMsT0FBT0MsY0FBYTtvQkFBQyxJQUFHLENBQUMsSUFBSSxDQUFDQyxTQUFTLEVBQUM7d0JBQUMsSUFBSSxDQUFDQSxTQUFTLEdBQUMsSUFBSWdDO29CQUFVO29CQUFDLE9BQU8sSUFBSSxDQUFDaEMsU0FBUztnQkFBQTtnQkFBQ2lDLHVCQUF1QmhELENBQUMsRUFBQztvQkFBQyxPQUFNLEFBQUMsQ0FBQSxHQUFFUSxFQUFFUyxjQUFjLEFBQUQsRUFBR1AsR0FBRVYsR0FBRVMsRUFBRVMsT0FBTyxDQUFDQyxRQUFRO2dCQUFHO2dCQUFDOEIsbUJBQWtCO29CQUFDLE9BQU0sQUFBQyxDQUFBLEdBQUV6QyxFQUFFZ0IsU0FBUyxBQUFELEVBQUdkLE1BQUlILEVBQUUyQyxtQkFBbUI7Z0JBQUE7Z0JBQUNDLFNBQVNuRCxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO29CQUFDLE9BQU8sSUFBSSxDQUFDK0MsZ0JBQWdCLEdBQUdFLFFBQVEsQ0FBQ25ELEdBQUVDLEdBQUVDO2dCQUFFO2dCQUFDdUIsVUFBUztvQkFBRSxDQUFBLEdBQUVqQixFQUFFa0IsZ0JBQWdCLEFBQUQsRUFBR2hCLEdBQUVELEVBQUVTLE9BQU8sQ0FBQ0MsUUFBUTtnQkFBRztZQUFDO1lBQUNsQixFQUFFOEMsVUFBVSxHQUFDQTtRQUFVO1FBQUUsS0FBSSxDQUFDL0MsR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFbUQsY0FBYyxHQUFDLEtBQUs7WUFBRSxNQUFNN0MsSUFBRUwsRUFBRTtZQUFLLE1BQU1NLElBQUVOLEVBQUU7WUFBSyxNQUFNTyxJQUFFUCxFQUFFO1lBQUssTUFBTVEsSUFBRVIsRUFBRTtZQUFLLE1BQU1TLElBQUVULEVBQUU7WUFBSyxNQUFNOEIsSUFBRTlCLEVBQUU7WUFBSyxNQUFNbUMsSUFBRTtZQUFjLE1BQU1DLElBQUUsSUFBSTlCLEVBQUU2QyxxQkFBcUI7WUFBQyxNQUFNRDtnQkFBZXZDLGFBQWE7b0JBQUMsSUFBSSxDQUFDeUMsYUFBYSxHQUFDM0MsRUFBRTJDLGFBQWE7b0JBQUMsSUFBSSxDQUFDQyxVQUFVLEdBQUM3QyxFQUFFNkMsVUFBVTtvQkFBQyxJQUFJLENBQUNDLGdCQUFnQixHQUFDOUMsRUFBRThDLGdCQUFnQjtvQkFBQyxJQUFJLENBQUNDLFVBQVUsR0FBQy9DLEVBQUUrQyxVQUFVO29CQUFDLElBQUksQ0FBQ0MsYUFBYSxHQUFDaEQsRUFBRWdELGFBQWE7Z0JBQUE7Z0JBQUMsT0FBTzVDLGNBQWE7b0JBQUMsSUFBRyxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFDO3dCQUFDLElBQUksQ0FBQ0EsU0FBUyxHQUFDLElBQUlxQztvQkFBYztvQkFBQyxPQUFPLElBQUksQ0FBQ3JDLFNBQVM7Z0JBQUE7Z0JBQUM0QyxvQkFBb0IzRCxDQUFDLEVBQUM7b0JBQUMsT0FBTSxBQUFDLENBQUEsR0FBRU8sRUFBRVUsY0FBYyxBQUFELEVBQUdvQixHQUFFckMsR0FBRWdDLEVBQUVkLE9BQU8sQ0FBQ0MsUUFBUTtnQkFBRztnQkFBQ3lDLE9BQU81RCxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsSUFBRU8sRUFBRW9ELG9CQUFvQixFQUFDO29CQUFDLE9BQU8sSUFBSSxDQUFDQyxvQkFBb0IsR0FBR0YsTUFBTSxDQUFDNUQsR0FBRUMsR0FBRUM7Z0JBQUU7Z0JBQUM2RCxRQUFRL0QsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLElBQUVPLEVBQUV1RCxvQkFBb0IsRUFBQztvQkFBQyxPQUFPLElBQUksQ0FBQ0Ysb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQy9ELEdBQUVDLEdBQUVDO2dCQUFFO2dCQUFDK0QsU0FBUTtvQkFBQyxPQUFPLElBQUksQ0FBQ0gsb0JBQW9CLEdBQUdHLE1BQU07Z0JBQUU7Z0JBQUN4QyxVQUFTO29CQUFFLENBQUEsR0FBRWxCLEVBQUVtQixnQkFBZ0IsQUFBRCxFQUFHVyxHQUFFTCxFQUFFZCxPQUFPLENBQUNDLFFBQVE7Z0JBQUc7Z0JBQUMyQyx1QkFBc0I7b0JBQUMsT0FBTSxBQUFDLENBQUEsR0FBRXZELEVBQUVpQixTQUFTLEFBQUQsRUFBR2EsTUFBSUM7Z0JBQUM7WUFBQztZQUFDckMsRUFBRW1ELGNBQWMsR0FBQ0E7UUFBYztRQUFFLEtBQUksQ0FBQ3BELEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRWlFLFFBQVEsR0FBQyxLQUFLO1lBQUUsTUFBTTNELElBQUVMLEVBQUU7WUFBSyxNQUFNTSxJQUFFTixFQUFFO1lBQUssTUFBTU8sSUFBRVAsRUFBRTtZQUFLLE1BQU1RLElBQUVSLEVBQUU7WUFBSyxNQUFNUyxJQUFFVCxFQUFFO1lBQUssTUFBTThCLElBQUU7WUFBUSxNQUFNa0M7Z0JBQVNyRCxhQUFhO29CQUFDLElBQUksQ0FBQ3NELG9CQUFvQixHQUFDLElBQUkzRCxFQUFFNEQsbUJBQW1CO29CQUFDLElBQUksQ0FBQ0MsZUFBZSxHQUFDNUQsRUFBRTRELGVBQWU7b0JBQUMsSUFBSSxDQUFDQyxrQkFBa0IsR0FBQzdELEVBQUU2RCxrQkFBa0I7b0JBQUMsSUFBSSxDQUFDQyxVQUFVLEdBQUM3RCxFQUFFNkQsVUFBVTtvQkFBQyxJQUFJLENBQUNDLE9BQU8sR0FBQzlELEVBQUU4RCxPQUFPO29CQUFDLElBQUksQ0FBQ0MsYUFBYSxHQUFDL0QsRUFBRStELGFBQWE7b0JBQUMsSUFBSSxDQUFDQyxjQUFjLEdBQUNoRSxFQUFFZ0UsY0FBYztvQkFBQyxJQUFJLENBQUNDLE9BQU8sR0FBQ2pFLEVBQUVpRSxPQUFPO29CQUFDLElBQUksQ0FBQ0MsY0FBYyxHQUFDbEUsRUFBRWtFLGNBQWM7Z0JBQUE7Z0JBQUMsT0FBTzlELGNBQWE7b0JBQUMsSUFBRyxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFDO3dCQUFDLElBQUksQ0FBQ0EsU0FBUyxHQUFDLElBQUltRDtvQkFBUTtvQkFBQyxPQUFPLElBQUksQ0FBQ25ELFNBQVM7Z0JBQUE7Z0JBQUM4RCx3QkFBd0I3RSxDQUFDLEVBQUM7b0JBQUMsTUFBTUMsSUFBRSxBQUFDLENBQUEsR0FBRU0sRUFBRVUsY0FBYyxBQUFELEVBQUdlLEdBQUUsSUFBSSxDQUFDbUMsb0JBQW9CLEVBQUN4RCxFQUFFTyxPQUFPLENBQUNDLFFBQVE7b0JBQUksSUFBR2xCLEdBQUU7d0JBQUMsSUFBSSxDQUFDa0Usb0JBQW9CLENBQUNXLFdBQVcsQ0FBQzlFO29CQUFFO29CQUFDLE9BQU9DO2dCQUFDO2dCQUFDOEUsb0JBQW1CO29CQUFDLE9BQU0sQUFBQyxDQUFBLEdBQUV4RSxFQUFFaUIsU0FBUyxBQUFELEVBQUdRLE1BQUksSUFBSSxDQUFDbUMsb0JBQW9CO2dCQUFBO2dCQUFDYSxVQUFVaEYsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7b0JBQUMsT0FBTyxJQUFJLENBQUM4RSxpQkFBaUIsR0FBR0MsU0FBUyxDQUFDaEYsR0FBRUM7Z0JBQUU7Z0JBQUN3QixVQUFTO29CQUFFLENBQUEsR0FBRWxCLEVBQUVtQixnQkFBZ0IsQUFBRCxFQUFHTSxHQUFFckIsRUFBRU8sT0FBTyxDQUFDQyxRQUFRO29CQUFJLElBQUksQ0FBQ2dELG9CQUFvQixHQUFDLElBQUkzRCxFQUFFNEQsbUJBQW1CO2dCQUFBO1lBQUM7WUFBQ25FLEVBQUVpRSxRQUFRLEdBQUNBO1FBQVE7UUFBRSxLQUFJLENBQUNsRSxHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUV5RCxhQUFhLEdBQUN6RCxFQUFFd0QsVUFBVSxHQUFDeEQsRUFBRXVELGdCQUFnQixHQUFDdkQsRUFBRXNELFVBQVUsR0FBQyxLQUFLO1lBQUUsTUFBTWhELElBQUVMLEVBQUU7WUFBSyxNQUFNTSxJQUFFTixFQUFFO1lBQUssTUFBTU8sSUFBRSxBQUFDLENBQUEsR0FBRUQsRUFBRXlFLGdCQUFnQixBQUFELEVBQUc7WUFBNkIsU0FBUzFCLFdBQVd2RCxDQUFDO2dCQUFFLE9BQU9BLEVBQUVrRixRQUFRLENBQUN6RSxNQUFJMEU7WUFBUztZQUFDbEYsRUFBRXNELFVBQVUsR0FBQ0E7WUFBVyxTQUFTQztnQkFBbUIsT0FBT0QsV0FBV2hELEVBQUVELFVBQVUsQ0FBQ1EsV0FBVyxHQUFHTSxNQUFNO1lBQUc7WUFBQ25CLEVBQUV1RCxnQkFBZ0IsR0FBQ0E7WUFBaUIsU0FBU0MsV0FBV3pELENBQUMsRUFBQ0MsQ0FBQztnQkFBRSxPQUFPRCxFQUFFb0YsUUFBUSxDQUFDM0UsR0FBRVI7WUFBRTtZQUFDQSxFQUFFd0QsVUFBVSxHQUFDQTtZQUFXLFNBQVNDLGNBQWMxRCxDQUFDO2dCQUFFLE9BQU9BLEVBQUVxRixXQUFXLENBQUM1RTtZQUFFO1lBQUNSLEVBQUV5RCxhQUFhLEdBQUNBO1FBQWE7UUFBRSxLQUFJLENBQUMxRCxHQUFFQztZQUFLRSxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUVxRixXQUFXLEdBQUMsS0FBSztZQUFFLE1BQU1BO2dCQUFZekUsWUFBWWIsQ0FBQyxDQUFDO29CQUFDLElBQUksQ0FBQ3VGLFFBQVEsR0FBQ3ZGLElBQUUsSUFBSXdGLElBQUl4RixLQUFHLElBQUl3RjtnQkFBRztnQkFBQ0MsU0FBU3pGLENBQUMsRUFBQztvQkFBQyxNQUFNQyxJQUFFLElBQUksQ0FBQ3NGLFFBQVEsQ0FBQ0csR0FBRyxDQUFDMUY7b0JBQUcsSUFBRyxDQUFDQyxHQUFFO3dCQUFDLE9BQU9rRjtvQkFBUztvQkFBQyxPQUFPaEYsT0FBT3dGLE1BQU0sQ0FBQyxDQUFDLEdBQUUxRjtnQkFBRTtnQkFBQzJGLGdCQUFlO29CQUFDLE9BQU9DLE1BQU1DLElBQUksQ0FBQyxJQUFJLENBQUNQLFFBQVEsQ0FBQ1EsT0FBTyxJQUFJQyxHQUFHLENBQUUsQ0FBQyxDQUFDaEcsR0FBRUMsRUFBRSxHQUFHOzRCQUFDRDs0QkFBRUM7eUJBQUU7Z0JBQUU7Z0JBQUNnRyxTQUFTakcsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7b0JBQUMsTUFBTUMsSUFBRSxJQUFJb0YsWUFBWSxJQUFJLENBQUNDLFFBQVE7b0JBQUVyRixFQUFFcUYsUUFBUSxDQUFDVyxHQUFHLENBQUNsRyxHQUFFQztvQkFBRyxPQUFPQztnQkFBQztnQkFBQ2lHLFlBQVluRyxDQUFDLEVBQUM7b0JBQUMsTUFBTUMsSUFBRSxJQUFJcUYsWUFBWSxJQUFJLENBQUNDLFFBQVE7b0JBQUV0RixFQUFFc0YsUUFBUSxDQUFDYSxNQUFNLENBQUNwRztvQkFBRyxPQUFPQztnQkFBQztnQkFBQ29HLGNBQWMsR0FBR3JHLENBQUMsRUFBQztvQkFBQyxNQUFNQyxJQUFFLElBQUlxRixZQUFZLElBQUksQ0FBQ0MsUUFBUTtvQkFBRSxLQUFJLE1BQU1yRixLQUFLRixFQUFFO3dCQUFDQyxFQUFFc0YsUUFBUSxDQUFDYSxNQUFNLENBQUNsRztvQkFBRTtvQkFBQyxPQUFPRDtnQkFBQztnQkFBQ3FHLFFBQU87b0JBQUMsT0FBTyxJQUFJaEI7Z0JBQVc7WUFBQztZQUFDckYsRUFBRXFGLFdBQVcsR0FBQ0E7UUFBVztRQUFFLEtBQUksQ0FBQ3RGLEdBQUVDO1lBQUtFLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXNHLDBCQUEwQixHQUFDLEtBQUs7WUFBRXRHLEVBQUVzRywwQkFBMEIsR0FBQ0MsT0FBTztRQUF1QjtRQUFFLEtBQUksQ0FBQ3hHLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXdHLDhCQUE4QixHQUFDeEcsRUFBRXFELGFBQWEsR0FBQyxLQUFLO1lBQUUsTUFBTS9DLElBQUVMLEVBQUU7WUFBSyxNQUFNTSxJQUFFTixFQUFFO1lBQUssTUFBTU8sSUFBRVAsRUFBRTtZQUFLLE1BQU1RLElBQUVILEVBQUVXLE9BQU8sQ0FBQ0MsUUFBUTtZQUFHLFNBQVNtQyxjQUFjdEQsSUFBRSxDQUFDLENBQUM7Z0JBQUUsT0FBTyxJQUFJUSxFQUFFOEUsV0FBVyxDQUFDLElBQUlFLElBQUlyRixPQUFPNEYsT0FBTyxDQUFDL0Y7WUFBSTtZQUFDQyxFQUFFcUQsYUFBYSxHQUFDQTtZQUFjLFNBQVNtRCwrQkFBK0J6RyxDQUFDO2dCQUFFLElBQUcsT0FBT0EsTUFBSSxVQUFTO29CQUFDVSxFQUFFd0IsS0FBSyxDQUFDLENBQUMsa0RBQWtELEVBQUUsT0FBT2xDLEVBQUUsQ0FBQztvQkFBRUEsSUFBRTtnQkFBRTtnQkFBQyxPQUFNO29CQUFDMEcsVUFBU2pHLEVBQUU4RiwwQkFBMEI7b0JBQUNJO3dCQUFXLE9BQU8zRztvQkFBQztnQkFBQztZQUFDO1lBQUNDLEVBQUV3Ryw4QkFBOEIsR0FBQ0E7UUFBOEI7UUFBRSxJQUFHLENBQUN6RyxHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUUyRyxPQUFPLEdBQUMsS0FBSztZQUFFLE1BQU1yRyxJQUFFTCxFQUFFO1lBQUtELEVBQUUyRyxPQUFPLEdBQUNyRyxFQUFFRCxVQUFVLENBQUNRLFdBQVc7UUFBRTtRQUFFLEtBQUksQ0FBQ2QsR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFVyxrQkFBa0IsR0FBQyxLQUFLO1lBQUUsTUFBTUwsSUFBRUwsRUFBRTtZQUFLLE1BQU1VO2dCQUFtQlEsU0FBUTtvQkFBQyxPQUFPYixFQUFFc0csWUFBWTtnQkFBQTtnQkFBQ3ZGLEtBQUt0QixDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDLEdBQUdLLENBQUMsRUFBQztvQkFBQyxPQUFPTixFQUFFNkcsSUFBSSxDQUFDNUcsTUFBS0s7Z0JBQUU7Z0JBQUNnQixLQUFLdkIsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7b0JBQUMsT0FBT0E7Z0JBQUM7Z0JBQUM4RyxTQUFRO29CQUFDLE9BQU8sSUFBSTtnQkFBQTtnQkFBQ3RGLFVBQVM7b0JBQUMsT0FBTyxJQUFJO2dCQUFBO1lBQUM7WUFBQ3hCLEVBQUVXLGtCQUFrQixHQUFDQTtRQUFrQjtRQUFFLEtBQUksQ0FBQ1osR0FBRUM7WUFBS0UsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFNEcsWUFBWSxHQUFDNUcsRUFBRWdGLGdCQUFnQixHQUFDLEtBQUs7WUFBRSxTQUFTQSxpQkFBaUJqRixDQUFDO2dCQUFFLE9BQU93RyxPQUFPUSxHQUFHLENBQUNoSDtZQUFFO1lBQUNDLEVBQUVnRixnQkFBZ0IsR0FBQ0E7WUFBaUIsTUFBTWdDO2dCQUFZcEcsWUFBWWIsQ0FBQyxDQUFDO29CQUFDLE1BQU1DLElBQUUsSUFBSTtvQkFBQ0EsRUFBRWlILGVBQWUsR0FBQ2xILElBQUUsSUFBSXdGLElBQUl4RixLQUFHLElBQUl3RjtvQkFBSXZGLEVBQUVpRixRQUFRLEdBQUNsRixDQUFBQSxJQUFHQyxFQUFFaUgsZUFBZSxDQUFDeEIsR0FBRyxDQUFDMUY7b0JBQUdDLEVBQUVtRixRQUFRLEdBQUMsQ0FBQ3BGLEdBQUVFO3dCQUFLLE1BQU1LLElBQUUsSUFBSTBHLFlBQVloSCxFQUFFaUgsZUFBZTt3QkFBRTNHLEVBQUUyRyxlQUFlLENBQUNoQixHQUFHLENBQUNsRyxHQUFFRTt3QkFBRyxPQUFPSztvQkFBQztvQkFBRU4sRUFBRW9GLFdBQVcsR0FBQ3JGLENBQUFBO3dCQUFJLE1BQU1FLElBQUUsSUFBSStHLFlBQVloSCxFQUFFaUgsZUFBZTt3QkFBRWhILEVBQUVnSCxlQUFlLENBQUNkLE1BQU0sQ0FBQ3BHO3dCQUFHLE9BQU9FO29CQUFDO2dCQUFDO1lBQUM7WUFBQ0QsRUFBRTRHLFlBQVksR0FBQyxJQUFJSTtRQUFXO1FBQUUsS0FBSSxDQUFDakgsR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFa0gsSUFBSSxHQUFDLEtBQUs7WUFBRSxNQUFNNUcsSUFBRUwsRUFBRTtZQUFLRCxFQUFFa0gsSUFBSSxHQUFDNUcsRUFBRVcsT0FBTyxDQUFDQyxRQUFRO1FBQUU7UUFBRSxJQUFHLENBQUNuQixHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUUwQyxtQkFBbUIsR0FBQyxLQUFLO1lBQUUsTUFBTXBDLElBQUVMLEVBQUU7WUFBSyxNQUFNeUM7Z0JBQW9COUIsWUFBWWIsQ0FBQyxDQUFDO29CQUFDLElBQUksQ0FBQ29ILFVBQVUsR0FBQ3BILEVBQUVxSCxTQUFTLElBQUU7Z0JBQXFCO2dCQUFDeEUsTUFBTSxHQUFHN0MsQ0FBQyxFQUFDO29CQUFDLE9BQU9zSCxTQUFTLFNBQVEsSUFBSSxDQUFDRixVQUFVLEVBQUNwSDtnQkFBRTtnQkFBQ2tDLE1BQU0sR0FBR2xDLENBQUMsRUFBQztvQkFBQyxPQUFPc0gsU0FBUyxTQUFRLElBQUksQ0FBQ0YsVUFBVSxFQUFDcEg7Z0JBQUU7Z0JBQUM4QyxLQUFLLEdBQUc5QyxDQUFDLEVBQUM7b0JBQUMsT0FBT3NILFNBQVMsUUFBTyxJQUFJLENBQUNGLFVBQVUsRUFBQ3BIO2dCQUFFO2dCQUFDeUMsS0FBSyxHQUFHekMsQ0FBQyxFQUFDO29CQUFDLE9BQU9zSCxTQUFTLFFBQU8sSUFBSSxDQUFDRixVQUFVLEVBQUNwSDtnQkFBRTtnQkFBQzRDLFFBQVEsR0FBRzVDLENBQUMsRUFBQztvQkFBQyxPQUFPc0gsU0FBUyxXQUFVLElBQUksQ0FBQ0YsVUFBVSxFQUFDcEg7Z0JBQUU7WUFBQztZQUFDQyxFQUFFMEMsbUJBQW1CLEdBQUNBO1lBQW9CLFNBQVMyRSxTQUFTdEgsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUM7Z0JBQUUsTUFBTU0sSUFBRSxBQUFDLENBQUEsR0FBRUQsRUFBRWlCLFNBQVMsQUFBRCxFQUFHO2dCQUFRLElBQUcsQ0FBQ2hCLEdBQUU7b0JBQUM7Z0JBQU07Z0JBQUNOLEVBQUVxSCxPQUFPLENBQUN0SDtnQkFBRyxPQUFPTyxDQUFDLENBQUNSLEVBQUUsSUFBSUU7WUFBRTtRQUFDO1FBQUUsS0FBSSxDQUFDRixHQUFFQztZQUFLRSxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUV1SCxpQkFBaUIsR0FBQyxLQUFLO1lBQUUsTUFBTXRILElBQUU7Z0JBQUM7b0JBQUNLLEdBQUU7b0JBQVFJLEdBQUU7Z0JBQU87Z0JBQUU7b0JBQUNKLEdBQUU7b0JBQU9JLEdBQUU7Z0JBQU07Z0JBQUU7b0JBQUNKLEdBQUU7b0JBQU9JLEdBQUU7Z0JBQU07Z0JBQUU7b0JBQUNKLEdBQUU7b0JBQVFJLEdBQUU7Z0JBQU87Z0JBQUU7b0JBQUNKLEdBQUU7b0JBQVVJLEdBQUU7Z0JBQU87YUFBRTtZQUFDLE1BQU02RztnQkFBa0IzRyxhQUFhO29CQUFDLFNBQVM0RyxhQUFhekgsQ0FBQzt3QkFBRSxPQUFPLFNBQVMsR0FBR0MsQ0FBQzs0QkFBRSxJQUFHeUgsU0FBUTtnQ0FBQyxJQUFJeEgsSUFBRXdILE9BQU8sQ0FBQzFILEVBQUU7Z0NBQUMsSUFBRyxPQUFPRSxNQUFJLFlBQVc7b0NBQUNBLElBQUV3SCxRQUFRQyxHQUFHO2dDQUFBO2dDQUFDLElBQUcsT0FBT3pILE1BQUksWUFBVztvQ0FBQyxPQUFPQSxFQUFFMEgsS0FBSyxDQUFDRixTQUFRekg7Z0NBQUU7NEJBQUM7d0JBQUM7b0JBQUM7b0JBQUMsSUFBSSxJQUFJRCxJQUFFLEdBQUVBLElBQUVFLEVBQUUySCxNQUFNLEVBQUM3SCxJQUFJO3dCQUFDLElBQUksQ0FBQ0UsQ0FBQyxDQUFDRixFQUFFLENBQUNPLENBQUMsQ0FBQyxHQUFDa0gsYUFBYXZILENBQUMsQ0FBQ0YsRUFBRSxDQUFDVyxDQUFDO29CQUFDO2dCQUFDO1lBQUM7WUFBQ1YsRUFBRXVILGlCQUFpQixHQUFDQTtRQUFpQjtRQUFFLEtBQUksQ0FBQ3hILEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXNDLHdCQUF3QixHQUFDLEtBQUs7WUFBRSxNQUFNaEMsSUFBRUwsRUFBRTtZQUFLLFNBQVNxQyx5QkFBeUJ2QyxDQUFDLEVBQUNDLENBQUM7Z0JBQUUsSUFBR0QsSUFBRU8sRUFBRXVCLFlBQVksQ0FBQ2dHLElBQUksRUFBQztvQkFBQzlILElBQUVPLEVBQUV1QixZQUFZLENBQUNnRyxJQUFJO2dCQUFBLE9BQU0sSUFBRzlILElBQUVPLEVBQUV1QixZQUFZLENBQUNpRyxHQUFHLEVBQUM7b0JBQUMvSCxJQUFFTyxFQUFFdUIsWUFBWSxDQUFDaUcsR0FBRztnQkFBQTtnQkFBQzlILElBQUVBLEtBQUcsQ0FBQztnQkFBRSxTQUFTK0gsWUFBWTlILENBQUMsRUFBQ0ssQ0FBQztvQkFBRSxNQUFNQyxJQUFFUCxDQUFDLENBQUNDLEVBQUU7b0JBQUMsSUFBRyxPQUFPTSxNQUFJLGNBQVlSLEtBQUdPLEdBQUU7d0JBQUMsT0FBT0MsRUFBRWUsSUFBSSxDQUFDdEI7b0JBQUU7b0JBQUMsT0FBTyxZQUFXO2dCQUFDO2dCQUFDLE9BQU07b0JBQUNpQyxPQUFNOEYsWUFBWSxTQUFRekgsRUFBRXVCLFlBQVksQ0FBQ21HLEtBQUs7b0JBQUV4RixNQUFLdUYsWUFBWSxRQUFPekgsRUFBRXVCLFlBQVksQ0FBQ29HLElBQUk7b0JBQUVwRixNQUFLa0YsWUFBWSxRQUFPekgsRUFBRXVCLFlBQVksQ0FBQ0MsSUFBSTtvQkFBRWMsT0FBTW1GLFlBQVksU0FBUXpILEVBQUV1QixZQUFZLENBQUNxRyxLQUFLO29CQUFFdkYsU0FBUW9GLFlBQVksV0FBVXpILEVBQUV1QixZQUFZLENBQUNzRyxPQUFPO2dCQUFDO1lBQUM7WUFBQ25JLEVBQUVzQyx3QkFBd0IsR0FBQ0E7UUFBd0I7UUFBRSxLQUFJLENBQUN2QyxHQUFFQztZQUFLRSxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUU2QixZQUFZLEdBQUMsS0FBSztZQUFFLElBQUk1QjtZQUFHLENBQUEsU0FBU0YsQ0FBQztnQkFBRUEsQ0FBQyxDQUFDQSxDQUFDLENBQUMsT0FBTyxHQUFDLEVBQUUsR0FBQztnQkFBT0EsQ0FBQyxDQUFDQSxDQUFDLENBQUMsUUFBUSxHQUFDLEdBQUcsR0FBQztnQkFBUUEsQ0FBQyxDQUFDQSxDQUFDLENBQUMsT0FBTyxHQUFDLEdBQUcsR0FBQztnQkFBT0EsQ0FBQyxDQUFDQSxDQUFDLENBQUMsT0FBTyxHQUFDLEdBQUcsR0FBQztnQkFBT0EsQ0FBQyxDQUFDQSxDQUFDLENBQUMsUUFBUSxHQUFDLEdBQUcsR0FBQztnQkFBUUEsQ0FBQyxDQUFDQSxDQUFDLENBQUMsVUFBVSxHQUFDLEdBQUcsR0FBQztnQkFBVUEsQ0FBQyxDQUFDQSxDQUFDLENBQUMsTUFBTSxHQUFDLEtBQUssR0FBQztZQUFLLENBQUEsRUFBR0UsSUFBRUQsRUFBRTZCLFlBQVksSUFBRzdCLENBQUFBLEVBQUU2QixZQUFZLEdBQUMsQ0FBQyxDQUFBO1FBQUc7UUFBRSxLQUFJLENBQUM5QixHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUV5QixnQkFBZ0IsR0FBQ3pCLEVBQUV1QixTQUFTLEdBQUN2QixFQUFFZ0IsY0FBYyxHQUFDLEtBQUs7WUFBRSxNQUFNVixJQUFFTCxFQUFFO1lBQUssTUFBTU0sSUFBRU4sRUFBRTtZQUFLLE1BQU1PLElBQUVQLEVBQUU7WUFBSyxNQUFNUSxJQUFFRixFQUFFNkgsT0FBTyxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFBQyxNQUFNM0gsSUFBRTZGLE9BQU9RLEdBQUcsQ0FBQyxDQUFDLHFCQUFxQixFQUFFdEcsRUFBRSxDQUFDO1lBQUUsTUFBTXNCLElBQUV6QixFQUFFZ0ksV0FBVztZQUFDLFNBQVN0SCxlQUFlakIsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0ssSUFBRSxLQUFLO2dCQUFFLElBQUlFO2dCQUFFLE1BQU1DLElBQUVzQixDQUFDLENBQUNyQixFQUFFLEdBQUMsQUFBQ0YsQ0FBQUEsSUFBRXVCLENBQUMsQ0FBQ3JCLEVBQUUsQUFBRCxNQUFLLFFBQU1GLE1BQUksS0FBSyxJQUFFQSxJQUFFO29CQUFDK0gsU0FBUWhJLEVBQUU2SCxPQUFPO2dCQUFBO2dCQUFFLElBQUcsQ0FBQzlILEtBQUdHLENBQUMsQ0FBQ1YsRUFBRSxFQUFDO29CQUFDLE1BQU1DLElBQUUsSUFBSWdDLE1BQU0sQ0FBQyw2REFBNkQsRUFBRWpDLEVBQUUsQ0FBQztvQkFBRUUsRUFBRWdDLEtBQUssQ0FBQ2pDLEVBQUVrQyxLQUFLLElBQUVsQyxFQUFFbUMsT0FBTztvQkFBRSxPQUFPO2dCQUFLO2dCQUFDLElBQUcxQixFQUFFOEgsT0FBTyxLQUFHaEksRUFBRTZILE9BQU8sRUFBQztvQkFBQyxNQUFNcEksSUFBRSxJQUFJZ0MsTUFBTSxDQUFDLDZDQUE2QyxFQUFFdkIsRUFBRThILE9BQU8sQ0FBQyxLQUFLLEVBQUV4SSxFQUFFLDJDQUEyQyxFQUFFUSxFQUFFNkgsT0FBTyxDQUFDLENBQUM7b0JBQUVuSSxFQUFFZ0MsS0FBSyxDQUFDakMsRUFBRWtDLEtBQUssSUFBRWxDLEVBQUVtQyxPQUFPO29CQUFFLE9BQU87Z0JBQUs7Z0JBQUMxQixDQUFDLENBQUNWLEVBQUUsR0FBQ0M7Z0JBQUVDLEVBQUUyQyxLQUFLLENBQUMsQ0FBQyw0Q0FBNEMsRUFBRTdDLEVBQUUsRUFBRSxFQUFFUSxFQUFFNkgsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFBRSxPQUFPO1lBQUk7WUFBQ3BJLEVBQUVnQixjQUFjLEdBQUNBO1lBQWUsU0FBU08sVUFBVXhCLENBQUM7Z0JBQUUsSUFBSUMsR0FBRUM7Z0JBQUUsTUFBTUssSUFBRSxBQUFDTixDQUFBQSxJQUFFK0IsQ0FBQyxDQUFDckIsRUFBRSxBQUFELE1BQUssUUFBTVYsTUFBSSxLQUFLLElBQUUsS0FBSyxJQUFFQSxFQUFFdUksT0FBTztnQkFBQyxJQUFHLENBQUNqSSxLQUFHLENBQUMsQUFBQyxDQUFBLEdBQUVFLEVBQUVnSSxZQUFZLEFBQUQsRUFBR2xJLElBQUc7b0JBQUM7Z0JBQU07Z0JBQUMsT0FBTSxBQUFDTCxDQUFBQSxJQUFFOEIsQ0FBQyxDQUFDckIsRUFBRSxBQUFELE1BQUssUUFBTVQsTUFBSSxLQUFLLElBQUUsS0FBSyxJQUFFQSxDQUFDLENBQUNGLEVBQUU7WUFBQTtZQUFDQyxFQUFFdUIsU0FBUyxHQUFDQTtZQUFVLFNBQVNFLGlCQUFpQjFCLENBQUMsRUFBQ0MsQ0FBQztnQkFBRUEsRUFBRTRDLEtBQUssQ0FBQyxDQUFDLCtDQUErQyxFQUFFN0MsRUFBRSxFQUFFLEVBQUVRLEVBQUU2SCxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUFFLE1BQU1uSSxJQUFFOEIsQ0FBQyxDQUFDckIsRUFBRTtnQkFBQyxJQUFHVCxHQUFFO29CQUFDLE9BQU9BLENBQUMsQ0FBQ0YsRUFBRTtnQkFBQTtZQUFDO1lBQUNDLEVBQUV5QixnQkFBZ0IsR0FBQ0E7UUFBZ0I7UUFBRSxLQUFJLENBQUMxQixHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUV3SSxZQUFZLEdBQUN4SSxFQUFFeUksdUJBQXVCLEdBQUMsS0FBSztZQUFFLE1BQU1uSSxJQUFFTCxFQUFFO1lBQUssTUFBTU0sSUFBRTtZQUFnQyxTQUFTa0ksd0JBQXdCMUksQ0FBQztnQkFBRSxNQUFNQyxJQUFFLElBQUkwSSxJQUFJO29CQUFDM0k7aUJBQUU7Z0JBQUUsTUFBTUUsSUFBRSxJQUFJeUk7Z0JBQUksTUFBTXBJLElBQUVQLEVBQUU0SSxLQUFLLENBQUNwSTtnQkFBRyxJQUFHLENBQUNELEdBQUU7b0JBQUMsT0FBTSxJQUFJO2dCQUFLO2dCQUFDLE1BQU1FLElBQUU7b0JBQUNvSSxPQUFNLENBQUN0SSxDQUFDLENBQUMsRUFBRTtvQkFBQ3VJLE9BQU0sQ0FBQ3ZJLENBQUMsQ0FBQyxFQUFFO29CQUFDd0ksT0FBTSxDQUFDeEksQ0FBQyxDQUFDLEVBQUU7b0JBQUN5SSxZQUFXekksQ0FBQyxDQUFDLEVBQUU7Z0JBQUE7Z0JBQUUsSUFBR0UsRUFBRXVJLFVBQVUsSUFBRSxNQUFLO29CQUFDLE9BQU8sU0FBU0MsYUFBYWhKLENBQUM7d0JBQUUsT0FBT0EsTUFBSUQ7b0JBQUM7Z0JBQUM7Z0JBQUMsU0FBU2tKLFFBQVFsSixDQUFDO29CQUFFRSxFQUFFaUosR0FBRyxDQUFDbko7b0JBQUcsT0FBTztnQkFBSztnQkFBQyxTQUFTb0osUUFBUXBKLENBQUM7b0JBQUVDLEVBQUVrSixHQUFHLENBQUNuSjtvQkFBRyxPQUFPO2dCQUFJO2dCQUFDLE9BQU8sU0FBU3lJLGFBQWF6SSxDQUFDO29CQUFFLElBQUdDLEVBQUVvSixHQUFHLENBQUNySixJQUFHO3dCQUFDLE9BQU87b0JBQUk7b0JBQUMsSUFBR0UsRUFBRW1KLEdBQUcsQ0FBQ3JKLElBQUc7d0JBQUMsT0FBTztvQkFBSztvQkFBQyxNQUFNTyxJQUFFUCxFQUFFNEksS0FBSyxDQUFDcEk7b0JBQUcsSUFBRyxDQUFDRCxHQUFFO3dCQUFDLE9BQU8ySSxRQUFRbEo7b0JBQUU7b0JBQUMsTUFBTVUsSUFBRTt3QkFBQ21JLE9BQU0sQ0FBQ3RJLENBQUMsQ0FBQyxFQUFFO3dCQUFDdUksT0FBTSxDQUFDdkksQ0FBQyxDQUFDLEVBQUU7d0JBQUN3SSxPQUFNLENBQUN4SSxDQUFDLENBQUMsRUFBRTt3QkFBQ3lJLFlBQVd6SSxDQUFDLENBQUMsRUFBRTtvQkFBQTtvQkFBRSxJQUFHRyxFQUFFc0ksVUFBVSxJQUFFLE1BQUs7d0JBQUMsT0FBT0UsUUFBUWxKO29CQUFFO29CQUFDLElBQUdTLEVBQUVvSSxLQUFLLEtBQUduSSxFQUFFbUksS0FBSyxFQUFDO3dCQUFDLE9BQU9LLFFBQVFsSjtvQkFBRTtvQkFBQyxJQUFHUyxFQUFFb0ksS0FBSyxLQUFHLEdBQUU7d0JBQUMsSUFBR3BJLEVBQUVxSSxLQUFLLEtBQUdwSSxFQUFFb0ksS0FBSyxJQUFFckksRUFBRXNJLEtBQUssSUFBRXJJLEVBQUVxSSxLQUFLLEVBQUM7NEJBQUMsT0FBT0ssUUFBUXBKO3dCQUFFO3dCQUFDLE9BQU9rSixRQUFRbEo7b0JBQUU7b0JBQUMsSUFBR1MsRUFBRXFJLEtBQUssSUFBRXBJLEVBQUVvSSxLQUFLLEVBQUM7d0JBQUMsT0FBT00sUUFBUXBKO29CQUFFO29CQUFDLE9BQU9rSixRQUFRbEo7Z0JBQUU7WUFBQztZQUFDQyxFQUFFeUksdUJBQXVCLEdBQUNBO1lBQXdCekksRUFBRXdJLFlBQVksR0FBQ0Msd0JBQXdCbkksRUFBRThILE9BQU87UUFBQztRQUFFLEtBQUksQ0FBQ3JJLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXFKLE9BQU8sR0FBQyxLQUFLO1lBQUUsTUFBTS9JLElBQUVMLEVBQUU7WUFBS0QsRUFBRXFKLE9BQU8sR0FBQy9JLEVBQUV3QyxVQUFVLENBQUNqQyxXQUFXO1FBQUU7UUFBRSxLQUFJLENBQUNkLEdBQUVDO1lBQUtFLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXNKLFNBQVMsR0FBQyxLQUFLO1lBQUUsSUFBSXJKO1lBQUcsQ0FBQSxTQUFTRixDQUFDO2dCQUFFQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxNQUFNLEdBQUMsRUFBRSxHQUFDO2dCQUFNQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxTQUFTLEdBQUMsRUFBRSxHQUFDO1lBQVEsQ0FBQSxFQUFHRSxJQUFFRCxFQUFFc0osU0FBUyxJQUFHdEosQ0FBQUEsRUFBRXNKLFNBQVMsR0FBQyxDQUFDLENBQUE7UUFBRztRQUFFLEtBQUksQ0FBQ3ZKLEdBQUVDO1lBQUtFLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXVKLGVBQWUsR0FBQ3ZKLEVBQUV3SixzQ0FBc0MsR0FBQ3hKLEVBQUV5Siw0QkFBNEIsR0FBQ3pKLEVBQUUwSiw4QkFBOEIsR0FBQzFKLEVBQUUySiwyQkFBMkIsR0FBQzNKLEVBQUU0SixxQkFBcUIsR0FBQzVKLEVBQUU2SixtQkFBbUIsR0FBQzdKLEVBQUU4SixVQUFVLEdBQUM5SixFQUFFK0osaUNBQWlDLEdBQUMvSixFQUFFZ0sseUJBQXlCLEdBQUNoSyxFQUFFaUssMkJBQTJCLEdBQUNqSyxFQUFFa0ssb0JBQW9CLEdBQUNsSyxFQUFFbUssbUJBQW1CLEdBQUNuSyxFQUFFb0ssdUJBQXVCLEdBQUNwSyxFQUFFcUssaUJBQWlCLEdBQUNySyxFQUFFc0ssVUFBVSxHQUFDdEssRUFBRXVLLFNBQVMsR0FBQyxLQUFLO1lBQUUsTUFBTUE7Z0JBQVUzSixhQUFhLENBQUM7Z0JBQUM0SixnQkFBZ0J6SyxDQUFDLEVBQUNFLENBQUMsRUFBQztvQkFBQyxPQUFPRCxFQUFFNEoscUJBQXFCO2dCQUFBO2dCQUFDYSxjQUFjMUssQ0FBQyxFQUFDRSxDQUFDLEVBQUM7b0JBQUMsT0FBT0QsRUFBRTZKLG1CQUFtQjtnQkFBQTtnQkFBQ2Esb0JBQW9CM0ssQ0FBQyxFQUFDRSxDQUFDLEVBQUM7b0JBQUMsT0FBT0QsRUFBRTJKLDJCQUEyQjtnQkFBQTtnQkFBQ2dCLHNCQUFzQjVLLENBQUMsRUFBQ0UsQ0FBQyxFQUFDO29CQUFDLE9BQU9ELEVBQUV5Siw0QkFBNEI7Z0JBQUE7Z0JBQUNtQix3QkFBd0I3SyxDQUFDLEVBQUNFLENBQUMsRUFBQztvQkFBQyxPQUFPRCxFQUFFMEosOEJBQThCO2dCQUFBO2dCQUFDbUIsOEJBQThCOUssQ0FBQyxFQUFDRSxDQUFDLEVBQUM7b0JBQUMsT0FBT0QsRUFBRXdKLHNDQUFzQztnQkFBQTtnQkFBQ3NCLDJCQUEyQi9LLENBQUMsRUFBQ0MsQ0FBQyxFQUFDLENBQUM7Z0JBQUMrSyw4QkFBOEJoTCxDQUFDLEVBQUMsQ0FBQztZQUFDO1lBQUNDLEVBQUV1SyxTQUFTLEdBQUNBO1lBQVUsTUFBTUQ7WUFBVztZQUFDdEssRUFBRXNLLFVBQVUsR0FBQ0E7WUFBVyxNQUFNRCwwQkFBMEJDO2dCQUFXcEIsSUFBSW5KLENBQUMsRUFBQ0MsQ0FBQyxFQUFDLENBQUM7WUFBQztZQUFDQSxFQUFFcUssaUJBQWlCLEdBQUNBO1lBQWtCLE1BQU1ELGdDQUFnQ0U7Z0JBQVdwQixJQUFJbkosQ0FBQyxFQUFDQyxDQUFDLEVBQUMsQ0FBQztZQUFDO1lBQUNBLEVBQUVvSyx1QkFBdUIsR0FBQ0E7WUFBd0IsTUFBTUQsNEJBQTRCRztnQkFBV1UsT0FBT2pMLENBQUMsRUFBQ0MsQ0FBQyxFQUFDLENBQUM7WUFBQztZQUFDQSxFQUFFbUssbUJBQW1CLEdBQUNBO1lBQW9CLE1BQU1EO2dCQUFxQmUsWUFBWWxMLENBQUMsRUFBQyxDQUFDO2dCQUFDbUwsZUFBZW5MLENBQUMsRUFBQyxDQUFDO1lBQUM7WUFBQ0MsRUFBRWtLLG9CQUFvQixHQUFDQTtZQUFxQixNQUFNRCxvQ0FBb0NDO1lBQXFCO1lBQUNsSyxFQUFFaUssMkJBQTJCLEdBQUNBO1lBQTRCLE1BQU1ELGtDQUFrQ0U7WUFBcUI7WUFBQ2xLLEVBQUVnSyx5QkFBeUIsR0FBQ0E7WUFBMEIsTUFBTUQsMENBQTBDRztZQUFxQjtZQUFDbEssRUFBRStKLGlDQUFpQyxHQUFDQTtZQUFrQy9KLEVBQUU4SixVQUFVLEdBQUMsSUFBSVM7WUFBVXZLLEVBQUU2SixtQkFBbUIsR0FBQyxJQUFJUTtZQUFrQnJLLEVBQUU0SixxQkFBcUIsR0FBQyxJQUFJTztZQUFvQm5LLEVBQUUySiwyQkFBMkIsR0FBQyxJQUFJUztZQUF3QnBLLEVBQUUwSiw4QkFBOEIsR0FBQyxJQUFJTztZQUE0QmpLLEVBQUV5Siw0QkFBNEIsR0FBQyxJQUFJTztZQUEwQmhLLEVBQUV3SixzQ0FBc0MsR0FBQyxJQUFJTztZQUFrQyxTQUFTUjtnQkFBa0IsT0FBT3ZKLEVBQUU4SixVQUFVO1lBQUE7WUFBQzlKLEVBQUV1SixlQUFlLEdBQUNBO1FBQWU7UUFBRSxLQUFJLENBQUN4SixHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUVpRCxtQkFBbUIsR0FBQ2pELEVBQUVtTCxpQkFBaUIsR0FBQyxLQUFLO1lBQUUsTUFBTTdLLElBQUVMLEVBQUU7WUFBSyxNQUFNa0w7Z0JBQWtCakksU0FBU25ELENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7b0JBQUMsT0FBT0ssRUFBRXdKLFVBQVU7Z0JBQUE7WUFBQztZQUFDOUosRUFBRW1MLGlCQUFpQixHQUFDQTtZQUFrQm5MLEVBQUVpRCxtQkFBbUIsR0FBQyxJQUFJa0k7UUFBaUI7UUFBRSxLQUFJLFNBQVNwTCxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQztZQUFFLElBQUlLLElBQUUsSUFBSSxJQUFFLElBQUksQ0FBQzhLLGVBQWUsSUFBR2xMLENBQUFBLE9BQU9tTCxNQUFNLEdBQUMsU0FBU3RMLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUNLLENBQUM7Z0JBQUUsSUFBR0EsTUFBSTRFLFdBQVU1RSxJQUFFTDtnQkFBRUMsT0FBT0MsY0FBYyxDQUFDSixHQUFFTyxHQUFFO29CQUFDZ0wsWUFBVztvQkFBSzdGLEtBQUk7d0JBQVcsT0FBT3pGLENBQUMsQ0FBQ0MsRUFBRTtvQkFBQTtnQkFBQztZQUFFLElBQUUsU0FBU0YsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0ssQ0FBQztnQkFBRSxJQUFHQSxNQUFJNEUsV0FBVTVFLElBQUVMO2dCQUFFRixDQUFDLENBQUNPLEVBQUUsR0FBQ04sQ0FBQyxDQUFDQyxFQUFFO1lBQUEsQ0FBQTtZQUFHLElBQUlNLElBQUUsSUFBSSxJQUFFLElBQUksQ0FBQ2dMLFlBQVksSUFBRSxTQUFTeEwsQ0FBQyxFQUFDQyxDQUFDO2dCQUFFLElBQUksSUFBSUMsS0FBS0YsRUFBRSxJQUFHRSxNQUFJLGFBQVcsQ0FBQ0MsT0FBT3NMLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDNUUsSUFBSSxDQUFDN0csR0FBRUMsSUFBR0ssRUFBRU4sR0FBRUQsR0FBRUU7WUFBRTtZQUFFQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdHLEVBQUVOLEVBQUUsS0FBSUQ7UUFBRTtRQUFFLEtBQUksQ0FBQ0QsR0FBRUM7WUFBS0UsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFc0ksV0FBVyxHQUFDLEtBQUs7WUFBRXRJLEVBQUVzSSxXQUFXLEdBQUMsT0FBT29ELGVBQWEsV0FBU0EsYUFBV0M7UUFBTTtRQUFFLElBQUcsU0FBUzVMLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDO1lBQUUsSUFBSUssSUFBRSxJQUFJLElBQUUsSUFBSSxDQUFDOEssZUFBZSxJQUFHbEwsQ0FBQUEsT0FBT21MLE1BQU0sR0FBQyxTQUFTdEwsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0ssQ0FBQztnQkFBRSxJQUFHQSxNQUFJNEUsV0FBVTVFLElBQUVMO2dCQUFFQyxPQUFPQyxjQUFjLENBQUNKLEdBQUVPLEdBQUU7b0JBQUNnTCxZQUFXO29CQUFLN0YsS0FBSTt3QkFBVyxPQUFPekYsQ0FBQyxDQUFDQyxFQUFFO29CQUFBO2dCQUFDO1lBQUUsSUFBRSxTQUFTRixDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDSyxDQUFDO2dCQUFFLElBQUdBLE1BQUk0RSxXQUFVNUUsSUFBRUw7Z0JBQUVGLENBQUMsQ0FBQ08sRUFBRSxHQUFDTixDQUFDLENBQUNDLEVBQUU7WUFBQSxDQUFBO1lBQUcsSUFBSU0sSUFBRSxJQUFJLElBQUUsSUFBSSxDQUFDZ0wsWUFBWSxJQUFFLFNBQVN4TCxDQUFDLEVBQUNDLENBQUM7Z0JBQUUsSUFBSSxJQUFJQyxLQUFLRixFQUFFLElBQUdFLE1BQUksYUFBVyxDQUFDQyxPQUFPc0wsU0FBUyxDQUFDQyxjQUFjLENBQUM1RSxJQUFJLENBQUM3RyxHQUFFQyxJQUFHSyxFQUFFTixHQUFFRCxHQUFFRTtZQUFFO1lBQUVDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0csRUFBRU4sRUFBRSxNQUFLRDtRQUFFO1FBQUUsS0FBSSxDQUFDRCxHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUU0TCxXQUFXLEdBQUMsS0FBSztZQUFFLE1BQU10TCxJQUFFTCxFQUFFO1lBQUtELEVBQUU0TCxXQUFXLEdBQUN0TCxFQUFFNkMsY0FBYyxDQUFDdEMsV0FBVztRQUFFO1FBQUUsS0FBSSxDQUFDZCxHQUFFQztZQUFLRSxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUVvRCxxQkFBcUIsR0FBQyxLQUFLO1lBQUUsTUFBTUE7Z0JBQXNCTyxPQUFPNUQsQ0FBQyxFQUFDQyxDQUFDLEVBQUMsQ0FBQztnQkFBQzhELFFBQVEvRCxDQUFDLEVBQUNDLENBQUMsRUFBQztvQkFBQyxPQUFPRDtnQkFBQztnQkFBQ2lFLFNBQVE7b0JBQUMsT0FBTSxFQUFFO2dCQUFBO1lBQUM7WUFBQ2hFLEVBQUVvRCxxQkFBcUIsR0FBQ0E7UUFBcUI7UUFBRSxLQUFJLENBQUNyRCxHQUFFQztZQUFLRSxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUU0RCxvQkFBb0IsR0FBQzVELEVBQUUrRCxvQkFBb0IsR0FBQyxLQUFLO1lBQUUvRCxFQUFFK0Qsb0JBQW9CLEdBQUM7Z0JBQUMwQixLQUFJMUYsQ0FBQyxFQUFDQyxDQUFDO29CQUFFLElBQUdELEtBQUcsTUFBSzt3QkFBQyxPQUFPbUY7b0JBQVM7b0JBQUMsT0FBT25GLENBQUMsQ0FBQ0MsRUFBRTtnQkFBQTtnQkFBRTZMLE1BQUs5TCxDQUFDO29CQUFFLElBQUdBLEtBQUcsTUFBSzt3QkFBQyxPQUFNLEVBQUU7b0JBQUE7b0JBQUMsT0FBT0csT0FBTzJMLElBQUksQ0FBQzlMO2dCQUFFO1lBQUM7WUFBRUMsRUFBRTRELG9CQUFvQixHQUFDO2dCQUFDcUMsS0FBSWxHLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDO29CQUFFLElBQUdGLEtBQUcsTUFBSzt3QkFBQztvQkFBTTtvQkFBQ0EsQ0FBQyxDQUFDQyxFQUFFLEdBQUNDO2dCQUFDO1lBQUM7UUFBQztRQUFFLEtBQUksQ0FBQ0YsR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFOEwsS0FBSyxHQUFDLEtBQUs7WUFBRSxNQUFNeEwsSUFBRUwsRUFBRTtZQUFLRCxFQUFFOEwsS0FBSyxHQUFDeEwsRUFBRTJELFFBQVEsQ0FBQ3BELFdBQVc7UUFBRTtRQUFFLEtBQUksQ0FBQ2QsR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFK0wsZ0JBQWdCLEdBQUMsS0FBSztZQUFFLE1BQU16TCxJQUFFTCxFQUFFO1lBQUssTUFBTThMO2dCQUFpQm5MLFlBQVliLElBQUVPLEVBQUUwTCxvQkFBb0IsQ0FBQztvQkFBQyxJQUFJLENBQUNDLFlBQVksR0FBQ2xNO2dCQUFDO2dCQUFDbU0sY0FBYTtvQkFBQyxPQUFPLElBQUksQ0FBQ0QsWUFBWTtnQkFBQTtnQkFBQ0UsYUFBYXBNLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO29CQUFDLE9BQU8sSUFBSTtnQkFBQTtnQkFBQ29NLGNBQWNyTSxDQUFDLEVBQUM7b0JBQUMsT0FBTyxJQUFJO2dCQUFBO2dCQUFDc00sU0FBU3RNLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO29CQUFDLE9BQU8sSUFBSTtnQkFBQTtnQkFBQ3NNLFVBQVV2TSxDQUFDLEVBQUM7b0JBQUMsT0FBTyxJQUFJO2dCQUFBO2dCQUFDd00sV0FBV3hNLENBQUMsRUFBQztvQkFBQyxPQUFPLElBQUk7Z0JBQUE7Z0JBQUN5TSxJQUFJek0sQ0FBQyxFQUFDLENBQUM7Z0JBQUMwTSxjQUFhO29CQUFDLE9BQU87Z0JBQUs7Z0JBQUNDLGdCQUFnQjNNLENBQUMsRUFBQ0MsQ0FBQyxFQUFDLENBQUM7WUFBQztZQUFDQSxFQUFFK0wsZ0JBQWdCLEdBQUNBO1FBQWdCO1FBQUUsS0FBSSxDQUFDaE0sR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFMk0sVUFBVSxHQUFDLEtBQUs7WUFBRSxNQUFNck0sSUFBRUwsRUFBRTtZQUFLLE1BQU1NLElBQUVOLEVBQUU7WUFBSyxNQUFNTyxJQUFFUCxFQUFFO1lBQUssTUFBTVEsSUFBRVIsRUFBRTtZQUFLLE1BQU1TLElBQUVKLEVBQUVELFVBQVUsQ0FBQ1EsV0FBVztZQUFHLE1BQU04TDtnQkFBV0MsVUFBVTdNLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxJQUFFUyxFQUFFUyxNQUFNLEVBQUUsRUFBQztvQkFBQyxNQUFNYixJQUFFdU0sUUFBUTdNLE1BQUksUUFBTUEsTUFBSSxLQUFLLElBQUUsS0FBSyxJQUFFQSxFQUFFOE0sSUFBSTtvQkFBRSxJQUFHeE0sR0FBRTt3QkFBQyxPQUFPLElBQUlFLEVBQUV1TCxnQkFBZ0I7b0JBQUE7b0JBQUMsTUFBTWhLLElBQUU5QixLQUFHLEFBQUMsQ0FBQSxHQUFFTSxFQUFFa0UsY0FBYyxBQUFELEVBQUd4RTtvQkFBRyxJQUFHOE0sY0FBY2hMLE1BQUksQUFBQyxDQUFBLEdBQUV0QixFQUFFNEQsa0JBQWtCLEFBQUQsRUFBR3RDLElBQUc7d0JBQUMsT0FBTyxJQUFJdkIsRUFBRXVMLGdCQUFnQixDQUFDaEs7b0JBQUUsT0FBSzt3QkFBQyxPQUFPLElBQUl2QixFQUFFdUwsZ0JBQWdCO29CQUFBO2dCQUFDO2dCQUFDaUIsZ0JBQWdCak4sQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDO29CQUFDLElBQUlFO29CQUFFLElBQUlDO29CQUFFLElBQUlzQjtvQkFBRSxJQUFHa0wsVUFBVXJGLE1BQU0sR0FBQyxHQUFFO3dCQUFDO29CQUFNLE9BQU0sSUFBR3FGLFVBQVVyRixNQUFNLEtBQUcsR0FBRTt3QkFBQzdGLElBQUUvQjtvQkFBQyxPQUFNLElBQUdpTixVQUFVckYsTUFBTSxLQUFHLEdBQUU7d0JBQUNwSCxJQUFFUjt3QkFBRStCLElBQUU5QjtvQkFBQyxPQUFLO3dCQUFDTyxJQUFFUjt3QkFBRVMsSUFBRVI7d0JBQUU4QixJQUFFekI7b0JBQUM7b0JBQUMsTUFBTThCLElBQUUzQixNQUFJLFFBQU1BLE1BQUksS0FBSyxJQUFFQSxJQUFFQyxFQUFFUyxNQUFNO29CQUFHLE1BQU1rQixJQUFFLElBQUksQ0FBQ3VLLFNBQVMsQ0FBQzdNLEdBQUVTLEdBQUU0QjtvQkFBRyxNQUFNOEssSUFBRSxBQUFDLENBQUEsR0FBRTNNLEVBQUVtRSxPQUFPLEFBQUQsRUFBR3RDLEdBQUVDO29CQUFHLE9BQU8zQixFQUFFVyxJQUFJLENBQUM2TCxHQUFFbkwsR0FBRW1ELFdBQVU3QztnQkFBRTtZQUFDO1lBQUNyQyxFQUFFMk0sVUFBVSxHQUFDQTtZQUFXLFNBQVNJLGNBQWNoTixDQUFDO2dCQUFFLE9BQU8sT0FBT0EsTUFBSSxZQUFVLE9BQU9BLENBQUMsQ0FBQyxTQUFTLEtBQUcsWUFBVSxPQUFPQSxDQUFDLENBQUMsVUFBVSxLQUFHLFlBQVUsT0FBT0EsQ0FBQyxDQUFDLGFBQWEsS0FBRztZQUFRO1FBQUM7UUFBRSxLQUFJLENBQUNBLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRW1OLGtCQUFrQixHQUFDLEtBQUs7WUFBRSxNQUFNN00sSUFBRUwsRUFBRTtZQUFLLE1BQU1rTjtnQkFBbUJwSSxVQUFVaEYsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQztvQkFBQyxPQUFPLElBQUlLLEVBQUVxTSxVQUFVO2dCQUFBO1lBQUM7WUFBQzNNLEVBQUVtTixrQkFBa0IsR0FBQ0E7UUFBa0I7UUFBRSxLQUFJLENBQUNwTixHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUVvTixXQUFXLEdBQUMsS0FBSztZQUFFLE1BQU05TSxJQUFFTCxFQUFFO1lBQUssTUFBTU0sSUFBRSxJQUFJRCxFQUFFcU0sVUFBVTtZQUFDLE1BQU1TO2dCQUFZeE0sWUFBWWIsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO29CQUFDLElBQUksQ0FBQytNLFNBQVMsR0FBQ3ROO29CQUFFLElBQUksQ0FBQ3VOLElBQUksR0FBQ3ROO29CQUFFLElBQUksQ0FBQ3VJLE9BQU8sR0FBQ3RJO29CQUFFLElBQUksQ0FBQ3NOLE9BQU8sR0FBQ2pOO2dCQUFDO2dCQUFDc00sVUFBVTdNLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7b0JBQUMsT0FBTyxJQUFJLENBQUN1TixVQUFVLEdBQUdaLFNBQVMsQ0FBQzdNLEdBQUVDLEdBQUVDO2dCQUFFO2dCQUFDK00sZ0JBQWdCak4sQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDO29CQUFDLE1BQU1DLElBQUUsSUFBSSxDQUFDaU4sVUFBVTtvQkFBRyxPQUFPQyxRQUFROUYsS0FBSyxDQUFDcEgsRUFBRXlNLGVBQWUsRUFBQ3pNLEdBQUUwTTtnQkFBVTtnQkFBQ08sYUFBWTtvQkFBQyxJQUFHLElBQUksQ0FBQ0UsU0FBUyxFQUFDO3dCQUFDLE9BQU8sSUFBSSxDQUFDQSxTQUFTO29CQUFBO29CQUFDLE1BQU0zTixJQUFFLElBQUksQ0FBQ3NOLFNBQVMsQ0FBQ00saUJBQWlCLENBQUMsSUFBSSxDQUFDTCxJQUFJLEVBQUMsSUFBSSxDQUFDL0UsT0FBTyxFQUFDLElBQUksQ0FBQ2dGLE9BQU87b0JBQUUsSUFBRyxDQUFDeE4sR0FBRTt3QkFBQyxPQUFPUTtvQkFBQztvQkFBQyxJQUFJLENBQUNtTixTQUFTLEdBQUMzTjtvQkFBRSxPQUFPLElBQUksQ0FBQzJOLFNBQVM7Z0JBQUE7WUFBQztZQUFDMU4sRUFBRW9OLFdBQVcsR0FBQ0E7UUFBVztRQUFFLEtBQUksQ0FBQ3JOLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRW1FLG1CQUFtQixHQUFDLEtBQUs7WUFBRSxNQUFNN0QsSUFBRUwsRUFBRTtZQUFLLE1BQU1NLElBQUVOLEVBQUU7WUFBSyxNQUFNTyxJQUFFLElBQUlELEVBQUU0TSxrQkFBa0I7WUFBQyxNQUFNaEo7Z0JBQW9CWSxVQUFVaEYsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQztvQkFBQyxJQUFJTTtvQkFBRSxPQUFNLEFBQUNBLENBQUFBLElBQUUsSUFBSSxDQUFDb04saUJBQWlCLENBQUM1TixHQUFFQyxHQUFFQyxFQUFDLE1BQUssUUFBTU0sTUFBSSxLQUFLLElBQUVBLElBQUUsSUFBSUQsRUFBRThNLFdBQVcsQ0FBQyxJQUFJLEVBQUNyTixHQUFFQyxHQUFFQztnQkFBRTtnQkFBQzJOLGNBQWE7b0JBQUMsSUFBSTdOO29CQUFFLE9BQU0sQUFBQ0EsQ0FBQUEsSUFBRSxJQUFJLENBQUMyTixTQUFTLEFBQUQsTUFBSyxRQUFNM04sTUFBSSxLQUFLLElBQUVBLElBQUVTO2dCQUFDO2dCQUFDcUUsWUFBWTlFLENBQUMsRUFBQztvQkFBQyxJQUFJLENBQUMyTixTQUFTLEdBQUMzTjtnQkFBQztnQkFBQzROLGtCQUFrQjVOLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7b0JBQUMsSUFBSUs7b0JBQUUsT0FBTSxBQUFDQSxDQUFBQSxJQUFFLElBQUksQ0FBQ29OLFNBQVMsQUFBRCxNQUFLLFFBQU1wTixNQUFJLEtBQUssSUFBRSxLQUFLLElBQUVBLEVBQUV5RSxTQUFTLENBQUNoRixHQUFFQyxHQUFFQztnQkFBRTtZQUFDO1lBQUNELEVBQUVtRSxtQkFBbUIsR0FBQ0E7UUFBbUI7UUFBRSxLQUFJLENBQUNwRSxHQUFFQztZQUFLRSxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUU2TixnQkFBZ0IsR0FBQyxLQUFLO1lBQUUsSUFBSTVOO1lBQUcsQ0FBQSxTQUFTRixDQUFDO2dCQUFFQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxhQUFhLEdBQUMsRUFBRSxHQUFDO2dCQUFhQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxTQUFTLEdBQUMsRUFBRSxHQUFDO2dCQUFTQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxxQkFBcUIsR0FBQyxFQUFFLEdBQUM7WUFBb0IsQ0FBQSxFQUFHRSxJQUFFRCxFQUFFNk4sZ0JBQWdCLElBQUc3TixDQUFBQSxFQUFFNk4sZ0JBQWdCLEdBQUMsQ0FBQyxDQUFBO1FBQUc7UUFBRSxLQUFJLENBQUM5TixHQUFFQyxHQUFFQztZQUFLQyxPQUFPQyxjQUFjLENBQUNILEdBQUUsY0FBYTtnQkFBQ0ksT0FBTTtZQUFJO1lBQUdKLEVBQUV5RSxjQUFjLEdBQUN6RSxFQUFFMkUsY0FBYyxHQUFDM0UsRUFBRXNFLFVBQVUsR0FBQ3RFLEVBQUUwRSxPQUFPLEdBQUMxRSxFQUFFd0UsYUFBYSxHQUFDeEUsRUFBRXVFLE9BQU8sR0FBQyxLQUFLO1lBQUUsTUFBTWpFLElBQUVMLEVBQUU7WUFBSyxNQUFNTSxJQUFFTixFQUFFO1lBQUssTUFBTU8sSUFBRVAsRUFBRTtZQUFLLE1BQU1RLElBQUUsQUFBQyxDQUFBLEdBQUVILEVBQUUwRSxnQkFBZ0IsQUFBRCxFQUFHO1lBQWtDLFNBQVNULFFBQVF4RSxDQUFDO2dCQUFFLE9BQU9BLEVBQUVrRixRQUFRLENBQUN4RSxNQUFJeUU7WUFBUztZQUFDbEYsRUFBRXVFLE9BQU8sR0FBQ0E7WUFBUSxTQUFTQztnQkFBZ0IsT0FBT0QsUUFBUS9ELEVBQUVILFVBQVUsQ0FBQ1EsV0FBVyxHQUFHTSxNQUFNO1lBQUc7WUFBQ25CLEVBQUV3RSxhQUFhLEdBQUNBO1lBQWMsU0FBU0UsUUFBUTNFLENBQUMsRUFBQ0MsQ0FBQztnQkFBRSxPQUFPRCxFQUFFb0YsUUFBUSxDQUFDMUUsR0FBRVQ7WUFBRTtZQUFDQSxFQUFFMEUsT0FBTyxHQUFDQTtZQUFRLFNBQVNKLFdBQVd2RSxDQUFDO2dCQUFFLE9BQU9BLEVBQUVxRixXQUFXLENBQUMzRTtZQUFFO1lBQUNULEVBQUVzRSxVQUFVLEdBQUNBO1lBQVcsU0FBU0ssZUFBZTVFLENBQUMsRUFBQ0MsQ0FBQztnQkFBRSxPQUFPMEUsUUFBUTNFLEdBQUUsSUFBSVEsRUFBRXdMLGdCQUFnQixDQUFDL0w7WUFBRztZQUFDQSxFQUFFMkUsY0FBYyxHQUFDQTtZQUFlLFNBQVNGLGVBQWUxRSxDQUFDO2dCQUFFLElBQUlDO2dCQUFFLE9BQU0sQUFBQ0EsQ0FBQUEsSUFBRXVFLFFBQVF4RSxFQUFDLE1BQUssUUFBTUMsTUFBSSxLQUFLLElBQUUsS0FBSyxJQUFFQSxFQUFFa00sV0FBVztZQUFFO1lBQUNsTSxFQUFFeUUsY0FBYyxHQUFDQTtRQUFjO1FBQUUsS0FBSSxDQUFDMUUsR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFOE4sY0FBYyxHQUFDLEtBQUs7WUFBRSxNQUFNeE4sSUFBRUwsRUFBRTtZQUFLLE1BQU1NLElBQUU7WUFBRyxNQUFNQyxJQUFFO1lBQUksTUFBTUMsSUFBRTtZQUFJLE1BQU1DLElBQUU7WUFBSSxNQUFNb047Z0JBQWVsTixZQUFZYixDQUFDLENBQUM7b0JBQUMsSUFBSSxDQUFDZ08sY0FBYyxHQUFDLElBQUl4STtvQkFBSSxJQUFHeEYsR0FBRSxJQUFJLENBQUNpTyxNQUFNLENBQUNqTztnQkFBRTtnQkFBQ2tHLElBQUlsRyxDQUFDLEVBQUNDLENBQUMsRUFBQztvQkFBQyxNQUFNQyxJQUFFLElBQUksQ0FBQ2dPLE1BQU07b0JBQUcsSUFBR2hPLEVBQUU4TixjQUFjLENBQUMzRSxHQUFHLENBQUNySixJQUFHO3dCQUFDRSxFQUFFOE4sY0FBYyxDQUFDNUgsTUFBTSxDQUFDcEc7b0JBQUU7b0JBQUNFLEVBQUU4TixjQUFjLENBQUM5SCxHQUFHLENBQUNsRyxHQUFFQztvQkFBRyxPQUFPQztnQkFBQztnQkFBQ2lPLE1BQU1uTyxDQUFDLEVBQUM7b0JBQUMsTUFBTUMsSUFBRSxJQUFJLENBQUNpTyxNQUFNO29CQUFHak8sRUFBRStOLGNBQWMsQ0FBQzVILE1BQU0sQ0FBQ3BHO29CQUFHLE9BQU9DO2dCQUFDO2dCQUFDeUYsSUFBSTFGLENBQUMsRUFBQztvQkFBQyxPQUFPLElBQUksQ0FBQ2dPLGNBQWMsQ0FBQ3RJLEdBQUcsQ0FBQzFGO2dCQUFFO2dCQUFDb08sWUFBVztvQkFBQyxPQUFPLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxNQUFNLENBQUUsQ0FBQ3RPLEdBQUVDO3dCQUFLRCxFQUFFdU8sSUFBSSxDQUFDdE8sSUFBRVUsSUFBRSxJQUFJLENBQUMrRSxHQUFHLENBQUN6Rjt3QkFBSSxPQUFPRDtvQkFBQyxHQUFHLEVBQUUsRUFBRXdPLElBQUksQ0FBQzlOO2dCQUFFO2dCQUFDdU4sT0FBT2pPLENBQUMsRUFBQztvQkFBQyxJQUFHQSxFQUFFNkgsTUFBTSxHQUFDcEgsR0FBRTtvQkFBTyxJQUFJLENBQUN1TixjQUFjLEdBQUNoTyxFQUFFc0ksS0FBSyxDQUFDNUgsR0FBRytOLE9BQU8sR0FBR0gsTUFBTSxDQUFFLENBQUN0TyxHQUFFQzt3QkFBSyxNQUFNQyxJQUFFRCxFQUFFeU8sSUFBSTt3QkFBRyxNQUFNbE8sSUFBRU4sRUFBRXlPLE9BQU8sQ0FBQ2hPO3dCQUFHLElBQUdILE1BQUksQ0FBQyxHQUFFOzRCQUFDLE1BQU1DLElBQUVQLEVBQUUwTyxLQUFLLENBQUMsR0FBRXBPOzRCQUFHLE1BQU1FLElBQUVSLEVBQUUwTyxLQUFLLENBQUNwTyxJQUFFLEdBQUVQLEVBQUU0SCxNQUFNOzRCQUFFLElBQUcsQUFBQyxDQUFBLEdBQUV0SCxFQUFFc08sV0FBVyxBQUFELEVBQUdwTyxNQUFJLEFBQUMsQ0FBQSxHQUFFRixFQUFFdU8sYUFBYSxBQUFELEVBQUdwTyxJQUFHO2dDQUFDVixFQUFFa0csR0FBRyxDQUFDekYsR0FBRUM7NEJBQUUsT0FBSyxDQUFDO3dCQUFDO3dCQUFDLE9BQU9WO29CQUFDLEdBQUcsSUFBSXdGO29CQUFLLElBQUcsSUFBSSxDQUFDd0ksY0FBYyxDQUFDZSxJQUFJLEdBQUN2TyxHQUFFO3dCQUFDLElBQUksQ0FBQ3dOLGNBQWMsR0FBQyxJQUFJeEksSUFBSUssTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQ2tJLGNBQWMsQ0FBQ2pJLE9BQU8sSUFBSTBJLE9BQU8sR0FBR0csS0FBSyxDQUFDLEdBQUVwTztvQkFBRztnQkFBQztnQkFBQzZOLFFBQU87b0JBQUMsT0FBT3hJLE1BQU1DLElBQUksQ0FBQyxJQUFJLENBQUNrSSxjQUFjLENBQUNsQyxJQUFJLElBQUkyQyxPQUFPO2dCQUFFO2dCQUFDUCxTQUFRO29CQUFDLE1BQU1sTyxJQUFFLElBQUkrTjtvQkFBZS9OLEVBQUVnTyxjQUFjLEdBQUMsSUFBSXhJLElBQUksSUFBSSxDQUFDd0ksY0FBYztvQkFBRSxPQUFPaE87Z0JBQUM7WUFBQztZQUFDQyxFQUFFOE4sY0FBYyxHQUFDQTtRQUFjO1FBQUUsS0FBSSxDQUFDL04sR0FBRUM7WUFBS0UsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFNk8sYUFBYSxHQUFDN08sRUFBRTRPLFdBQVcsR0FBQyxLQUFLO1lBQUUsTUFBTTNPLElBQUU7WUFBZSxNQUFNSyxJQUFFLENBQUMsS0FBSyxFQUFFTCxFQUFFLE9BQU8sQ0FBQztZQUFDLE1BQU1NLElBQUUsQ0FBQyxRQUFRLEVBQUVOLEVBQUUsYUFBYSxFQUFFQSxFQUFFLE1BQU0sQ0FBQztZQUFDLE1BQU1PLElBQUUsSUFBSXVPLE9BQU8sQ0FBQyxJQUFJLEVBQUV6TyxFQUFFLENBQUMsRUFBRUMsRUFBRSxFQUFFLENBQUM7WUFBRSxNQUFNRSxJQUFFO1lBQXNCLE1BQU1DLElBQUU7WUFBTSxTQUFTa08sWUFBWTdPLENBQUM7Z0JBQUUsT0FBT1MsRUFBRXdPLElBQUksQ0FBQ2pQO1lBQUU7WUFBQ0MsRUFBRTRPLFdBQVcsR0FBQ0E7WUFBWSxTQUFTQyxjQUFjOU8sQ0FBQztnQkFBRSxPQUFPVSxFQUFFdU8sSUFBSSxDQUFDalAsTUFBSSxDQUFDVyxFQUFFc08sSUFBSSxDQUFDalA7WUFBRTtZQUFDQyxFQUFFNk8sYUFBYSxHQUFDQTtRQUFhO1FBQUUsSUFBRyxDQUFDOU8sR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFaVAsZ0JBQWdCLEdBQUMsS0FBSztZQUFFLE1BQU0zTyxJQUFFTCxFQUFFO1lBQUssU0FBU2dQLGlCQUFpQmxQLENBQUM7Z0JBQUUsT0FBTyxJQUFJTyxFQUFFd04sY0FBYyxDQUFDL047WUFBRTtZQUFDQyxFQUFFaVAsZ0JBQWdCLEdBQUNBO1FBQWdCO1FBQUUsS0FBSSxDQUFDbFAsR0FBRUMsR0FBRUM7WUFBS0MsT0FBT0MsY0FBYyxDQUFDSCxHQUFFLGNBQWE7Z0JBQUNJLE9BQU07WUFBSTtZQUFHSixFQUFFZ00sb0JBQW9CLEdBQUNoTSxFQUFFa1AsZUFBZSxHQUFDbFAsRUFBRW1QLGNBQWMsR0FBQyxLQUFLO1lBQUUsTUFBTTdPLElBQUVMLEVBQUU7WUFBS0QsRUFBRW1QLGNBQWMsR0FBQztZQUFtQm5QLEVBQUVrUCxlQUFlLEdBQUM7WUFBbUNsUCxFQUFFZ00sb0JBQW9CLEdBQUM7Z0JBQUNvRCxTQUFRcFAsRUFBRWtQLGVBQWU7Z0JBQUNHLFFBQU9yUCxFQUFFbVAsY0FBYztnQkFBQ0csWUFBV2hQLEVBQUVpUCxVQUFVLENBQUMxSCxJQUFJO1lBQUE7UUFBQztRQUFFLEtBQUksQ0FBQzlILEdBQUVDO1lBQUtFLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXdQLFFBQVEsR0FBQyxLQUFLO1lBQUUsSUFBSXZQO1lBQUcsQ0FBQSxTQUFTRixDQUFDO2dCQUFFQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxXQUFXLEdBQUMsRUFBRSxHQUFDO2dCQUFXQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxTQUFTLEdBQUMsRUFBRSxHQUFDO2dCQUFTQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxTQUFTLEdBQUMsRUFBRSxHQUFDO2dCQUFTQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxXQUFXLEdBQUMsRUFBRSxHQUFDO2dCQUFXQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxXQUFXLEdBQUMsRUFBRSxHQUFDO1lBQVUsQ0FBQSxFQUFHRSxJQUFFRCxFQUFFd1AsUUFBUSxJQUFHeFAsQ0FBQUEsRUFBRXdQLFFBQVEsR0FBQyxDQUFDLENBQUE7UUFBRztRQUFFLEtBQUksQ0FBQ3pQLEdBQUVDLEdBQUVDO1lBQUtDLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRW9FLGVBQWUsR0FBQ3BFLEVBQUVxRSxrQkFBa0IsR0FBQ3JFLEVBQUV5UCxhQUFhLEdBQUN6UCxFQUFFMFAsY0FBYyxHQUFDLEtBQUs7WUFBRSxNQUFNcFAsSUFBRUwsRUFBRTtZQUFLLE1BQU1NLElBQUVOLEVBQUU7WUFBSyxNQUFNTyxJQUFFO1lBQW9CLE1BQU1DLElBQUU7WUFBa0IsU0FBU2lQLGVBQWUzUCxDQUFDO2dCQUFFLE9BQU9TLEVBQUV3TyxJQUFJLENBQUNqUCxNQUFJQSxNQUFJTyxFQUFFNE8sZUFBZTtZQUFBO1lBQUNsUCxFQUFFMFAsY0FBYyxHQUFDQTtZQUFlLFNBQVNELGNBQWMxUCxDQUFDO2dCQUFFLE9BQU9VLEVBQUV1TyxJQUFJLENBQUNqUCxNQUFJQSxNQUFJTyxFQUFFNk8sY0FBYztZQUFBO1lBQUNuUCxFQUFFeVAsYUFBYSxHQUFDQTtZQUFjLFNBQVNwTCxtQkFBbUJ0RSxDQUFDO2dCQUFFLE9BQU8yUCxlQUFlM1AsRUFBRXFQLE9BQU8sS0FBR0ssY0FBYzFQLEVBQUVzUCxNQUFNO1lBQUM7WUFBQ3JQLEVBQUVxRSxrQkFBa0IsR0FBQ0E7WUFBbUIsU0FBU0QsZ0JBQWdCckUsQ0FBQztnQkFBRSxPQUFPLElBQUlRLEVBQUV3TCxnQkFBZ0IsQ0FBQ2hNO1lBQUU7WUFBQ0MsRUFBRW9FLGVBQWUsR0FBQ0E7UUFBZTtRQUFFLEtBQUksQ0FBQ3JFLEdBQUVDO1lBQUtFLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRTJQLGNBQWMsR0FBQyxLQUFLO1lBQUUsSUFBSTFQO1lBQUcsQ0FBQSxTQUFTRixDQUFDO2dCQUFFQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxRQUFRLEdBQUMsRUFBRSxHQUFDO2dCQUFRQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxLQUFLLEdBQUMsRUFBRSxHQUFDO2dCQUFLQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxRQUFRLEdBQUMsRUFBRSxHQUFDO1lBQU8sQ0FBQSxFQUFHRSxJQUFFRCxFQUFFMlAsY0FBYyxJQUFHM1AsQ0FBQUEsRUFBRTJQLGNBQWMsR0FBQyxDQUFDLENBQUE7UUFBRztRQUFFLEtBQUksQ0FBQzVQLEdBQUVDO1lBQUtFLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRXVQLFVBQVUsR0FBQyxLQUFLO1lBQUUsSUFBSXRQO1lBQUcsQ0FBQSxTQUFTRixDQUFDO2dCQUFFQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxPQUFPLEdBQUMsRUFBRSxHQUFDO2dCQUFPQSxDQUFDLENBQUNBLENBQUMsQ0FBQyxVQUFVLEdBQUMsRUFBRSxHQUFDO1lBQVMsQ0FBQSxFQUFHRSxJQUFFRCxFQUFFdVAsVUFBVSxJQUFHdlAsQ0FBQUEsRUFBRXVQLFVBQVUsR0FBQyxDQUFDLENBQUE7UUFBRztRQUFFLEtBQUksQ0FBQ3hQLEdBQUVDO1lBQUtFLE9BQU9DLGNBQWMsQ0FBQ0gsR0FBRSxjQUFhO2dCQUFDSSxPQUFNO1lBQUk7WUFBR0osRUFBRW9JLE9BQU8sR0FBQyxLQUFLO1lBQUVwSSxFQUFFb0ksT0FBTyxHQUFDO1FBQU87SUFBQztJQUFFLElBQUlwSSxJQUFFLENBQUM7SUFBRSxTQUFTNFAsb0JBQW9CM1AsQ0FBQztRQUFFLElBQUlLLElBQUVOLENBQUMsQ0FBQ0MsRUFBRTtRQUFDLElBQUdLLE1BQUk0RSxXQUFVO1lBQUMsT0FBTzVFLEVBQUV1UCxPQUFPO1FBQUE7UUFBQyxJQUFJdFAsSUFBRVAsQ0FBQyxDQUFDQyxFQUFFLEdBQUM7WUFBQzRQLFNBQVEsQ0FBQztRQUFDO1FBQUUsSUFBSXJQLElBQUU7UUFBSyxJQUFHO1lBQUNULENBQUMsQ0FBQ0UsRUFBRSxDQUFDNEcsSUFBSSxDQUFDdEcsRUFBRXNQLE9BQU8sRUFBQ3RQLEdBQUVBLEVBQUVzUCxPQUFPLEVBQUNEO1lBQXFCcFAsSUFBRTtRQUFLLFNBQVE7WUFBQyxJQUFHQSxHQUFFLE9BQU9SLENBQUMsQ0FBQ0MsRUFBRTtRQUFBO1FBQUMsT0FBT00sRUFBRXNQLE9BQU87SUFBQTtJQUFDLElBQUcsT0FBT0Qsd0JBQXNCLGFBQVlBLG9CQUFvQkUsRUFBRSxHQUFDQyxZQUFVO0lBQUksSUFBSTlQLElBQUUsQ0FBQztJQUFHLENBQUE7UUFBSyxJQUFJRixJQUFFRTtRQUFFQyxPQUFPQyxjQUFjLENBQUNKLEdBQUUsY0FBYTtZQUFDSyxPQUFNO1FBQUk7UUFBR0wsRUFBRStMLEtBQUssR0FBQy9MLEVBQUU2TCxXQUFXLEdBQUM3TCxFQUFFc0osT0FBTyxHQUFDdEosRUFBRW1ILElBQUksR0FBQ25ILEVBQUU0RyxPQUFPLEdBQUM1RyxFQUFFaU0sb0JBQW9CLEdBQUNqTSxFQUFFbVAsZUFBZSxHQUFDblAsRUFBRW9QLGNBQWMsR0FBQ3BQLEVBQUUwUCxhQUFhLEdBQUMxUCxFQUFFMlAsY0FBYyxHQUFDM1AsRUFBRXNFLGtCQUFrQixHQUFDdEUsRUFBRWtQLGdCQUFnQixHQUFDbFAsRUFBRXdQLFVBQVUsR0FBQ3hQLEVBQUU0UCxjQUFjLEdBQUM1UCxFQUFFeVAsUUFBUSxHQUFDelAsRUFBRThOLGdCQUFnQixHQUFDOU4sRUFBRW9FLG1CQUFtQixHQUFDcEUsRUFBRXFOLFdBQVcsR0FBQ3JOLEVBQUU2RCxvQkFBb0IsR0FBQzdELEVBQUVnRSxvQkFBb0IsR0FBQ2hFLEVBQUV1SixTQUFTLEdBQUN2SixFQUFFd0osZUFBZSxHQUFDeEosRUFBRThCLFlBQVksR0FBQzlCLEVBQUV3SCxpQkFBaUIsR0FBQ3hILEVBQUU2RyxZQUFZLEdBQUM3RyxFQUFFaUYsZ0JBQWdCLEdBQUNqRixFQUFFeUcsOEJBQThCLEdBQUMsS0FBSztRQUFFLElBQUl4RyxJQUFFNFAsb0JBQW9CO1FBQUsxUCxPQUFPQyxjQUFjLENBQUNKLEdBQUUsa0NBQWlDO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU96RixFQUFFd0csOEJBQThCO1lBQUE7UUFBQztRQUFHLElBQUlsRyxJQUFFc1Asb0JBQW9CO1FBQUsxUCxPQUFPQyxjQUFjLENBQUNKLEdBQUUsb0JBQW1CO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU9uRixFQUFFMEUsZ0JBQWdCO1lBQUE7UUFBQztRQUFHOUUsT0FBT0MsY0FBYyxDQUFDSixHQUFFLGdCQUFlO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU9uRixFQUFFc0csWUFBWTtZQUFBO1FBQUM7UUFBRyxJQUFJckcsSUFBRXFQLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLHFCQUFvQjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPbEYsRUFBRWdILGlCQUFpQjtZQUFBO1FBQUM7UUFBRyxJQUFJL0csSUFBRW9QLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLGdCQUFlO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU9qRixFQUFFcUIsWUFBWTtZQUFBO1FBQUM7UUFBRyxJQUFJcEIsSUFBRW1QLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLG1CQUFrQjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPaEYsRUFBRThJLGVBQWU7WUFBQTtRQUFDO1FBQUcsSUFBSTdJLElBQUVrUCxvQkFBb0I7UUFBSzFQLE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSxhQUFZO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU8vRSxFQUFFNEksU0FBUztZQUFBO1FBQUM7UUFBRyxJQUFJdkgsSUFBRTZOLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLHdCQUF1QjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPMUQsRUFBRWdDLG9CQUFvQjtZQUFBO1FBQUM7UUFBRzdELE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSx3QkFBdUI7WUFBQ3VMLFlBQVc7WUFBSzdGLEtBQUk7Z0JBQVcsT0FBTzFELEVBQUU2QixvQkFBb0I7WUFBQTtRQUFDO1FBQUcsSUFBSXhCLElBQUV3TixvQkFBb0I7UUFBSzFQLE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSxlQUFjO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU9yRCxFQUFFZ0wsV0FBVztZQUFBO1FBQUM7UUFBRyxJQUFJL0ssSUFBRXVOLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLHVCQUFzQjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPcEQsRUFBRThCLG1CQUFtQjtZQUFBO1FBQUM7UUFBRyxJQUFJK0ksSUFBRTBDLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLG9CQUFtQjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPeUgsRUFBRVcsZ0JBQWdCO1lBQUE7UUFBQztRQUFHLElBQUltQyxJQUFFSixvQkFBb0I7UUFBSzFQLE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSxZQUFXO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU91SyxFQUFFUixRQUFRO1lBQUE7UUFBQztRQUFHLElBQUlTLElBQUVMLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLGtCQUFpQjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPd0ssRUFBRU4sY0FBYztZQUFBO1FBQUM7UUFBRyxJQUFJTyxJQUFFTixvQkFBb0I7UUFBSzFQLE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSxjQUFhO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU95SyxFQUFFWCxVQUFVO1lBQUE7UUFBQztRQUFHLElBQUlZLElBQUVQLG9CQUFvQjtRQUFJMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLG9CQUFtQjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPMEssRUFBRWxCLGdCQUFnQjtZQUFBO1FBQUM7UUFBRyxJQUFJbUIsSUFBRVIsb0JBQW9CO1FBQUsxUCxPQUFPQyxjQUFjLENBQUNKLEdBQUUsc0JBQXFCO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU8ySyxFQUFFL0wsa0JBQWtCO1lBQUE7UUFBQztRQUFHbkUsT0FBT0MsY0FBYyxDQUFDSixHQUFFLGtCQUFpQjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPMkssRUFBRVYsY0FBYztZQUFBO1FBQUM7UUFBR3hQLE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSxpQkFBZ0I7WUFBQ3VMLFlBQVc7WUFBSzdGLEtBQUk7Z0JBQVcsT0FBTzJLLEVBQUVYLGFBQWE7WUFBQTtRQUFDO1FBQUcsSUFBSVksSUFBRVQsb0JBQW9CO1FBQUsxUCxPQUFPQyxjQUFjLENBQUNKLEdBQUUsa0JBQWlCO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU80SyxFQUFFbEIsY0FBYztZQUFBO1FBQUM7UUFBR2pQLE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSxtQkFBa0I7WUFBQ3VMLFlBQVc7WUFBSzdGLEtBQUk7Z0JBQVcsT0FBTzRLLEVBQUVuQixlQUFlO1lBQUE7UUFBQztRQUFHaFAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLHdCQUF1QjtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPNEssRUFBRXJFLG9CQUFvQjtZQUFBO1FBQUM7UUFBRyxNQUFNc0UsSUFBRVYsb0JBQW9CO1FBQUkxUCxPQUFPQyxjQUFjLENBQUNKLEdBQUUsV0FBVTtZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPNkssRUFBRTNKLE9BQU87WUFBQTtRQUFDO1FBQUcsTUFBTTRKLElBQUVYLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLFFBQU87WUFBQ3VMLFlBQVc7WUFBSzdGLEtBQUk7Z0JBQVcsT0FBTzhLLEVBQUVySixJQUFJO1lBQUE7UUFBQztRQUFHLE1BQU1zSixJQUFFWixvQkFBb0I7UUFBSzFQLE9BQU9DLGNBQWMsQ0FBQ0osR0FBRSxXQUFVO1lBQUN1TCxZQUFXO1lBQUs3RixLQUFJO2dCQUFXLE9BQU8rSyxFQUFFbkgsT0FBTztZQUFBO1FBQUM7UUFBRyxNQUFNb0gsSUFBRWIsb0JBQW9CO1FBQUsxUCxPQUFPQyxjQUFjLENBQUNKLEdBQUUsZUFBYztZQUFDdUwsWUFBVztZQUFLN0YsS0FBSTtnQkFBVyxPQUFPZ0wsRUFBRTdFLFdBQVc7WUFBQTtRQUFDO1FBQUcsTUFBTThFLElBQUVkLG9CQUFvQjtRQUFLMVAsT0FBT0MsY0FBYyxDQUFDSixHQUFFLFNBQVE7WUFBQ3VMLFlBQVc7WUFBSzdGLEtBQUk7Z0JBQVcsT0FBT2lMLEVBQUU1RSxLQUFLO1lBQUE7UUFBQztRQUFHL0wsQ0FBQyxDQUFDLFVBQVUsR0FBQztZQUFDNEcsU0FBUTJKLEVBQUUzSixPQUFPO1lBQUNPLE1BQUtxSixFQUFFckosSUFBSTtZQUFDbUMsU0FBUW1ILEVBQUVuSCxPQUFPO1lBQUN1QyxhQUFZNkUsRUFBRTdFLFdBQVc7WUFBQ0UsT0FBTTRFLEVBQUU1RSxLQUFLO1FBQUE7SUFBQyxDQUFBO0lBQUs2RSxPQUFPZCxPQUFPLEdBQUM1UDtBQUFDLENBQUEiLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9Ab3BlbnRlbGVtZXRyeS9hcGkvaW5kZXguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/@opentelemetry/api/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom-server-legacy.node.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(rsc)/../node_modules/next/dist/compiled/react/index.js\");\n        var ReactDOM = __webpack_require__(/*! react-dom */ \"(rsc)/../node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js\");\n        var stream = __webpack_require__(/*! stream */ \"stream\");\n        var ReactVersion = \"18.3.0-canary-2c338b16f-20231116\";\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // A pure JS implementation of a string hashing function. We do not use it for\n        // security or obfuscation purposes, only to create compact hashes. So we\n        // prioritize speed over collision avoidance. For example, we use this to hash\n        // the component key path used by useFormState for MPA-style submissions.\n        //\n        // In environments where built-in hashing functions are available, we prefer\n        // those instead. Like Node's crypto module, or Bun.hash. Unfortunately this\n        // does not include the web standard crypto API because those methods are all\n        // async. For our purposes, we need it to be sync because the cost of context\n        // switching is too high to be worth it.\n        //\n        // The most popular hashing algorithm that meets these requirements in the JS\n        // ecosystem is MurmurHash3, and almost all implementations I could find used\n        // some version of the implementation by Gary Court inlined below.\n        function createFastHashJS(key) {\n            return murmurhash3_32_gc(key, 0);\n        }\n        /* eslint-disable prefer-const, no-fallthrough */ /**\n * @license\n *\n * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n *\n * Copyright (c) 2011 Gary Court\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */ function murmurhash3_32_gc(key, seed) {\n            var remainder, bytes, h1, h1b, c1, c2, k1, i;\n            remainder = key.length & 3; // key.length % 4\n            bytes = key.length - remainder;\n            h1 = seed;\n            c1 = 0xcc9e2d51;\n            c2 = 0x1b873593;\n            i = 0;\n            while(i < bytes){\n                k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n                ++i;\n                k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n                k1 = k1 << 15 | k1 >>> 17;\n                k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n                h1 ^= k1;\n                h1 = h1 << 13 | h1 >>> 19;\n                h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n                h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n            }\n            k1 = 0;\n            switch(remainder){\n                case 3:\n                    k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n                case 2:\n                    k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n                case 1:\n                    k1 ^= key.charCodeAt(i) & 0xff;\n                    k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n                    k1 = k1 << 15 | k1 >>> 17;\n                    k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n                    h1 ^= k1;\n            }\n            h1 ^= key.length;\n            h1 ^= h1 >>> 16;\n            h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n            h1 ^= h1 >>> 13;\n            h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n            h1 ^= h1 >>> 16;\n            return h1 >>> 0;\n        }\n        function scheduleWork(callback) {\n            callback();\n        }\n        function beginWriting(destination) {}\n        function writeChunk(destination, chunk) {\n            writeChunkAndReturn(destination, chunk);\n        }\n        function writeChunkAndReturn(destination, chunk) {\n            return destination.push(chunk);\n        }\n        function completeWriting(destination) {}\n        function close(destination) {\n            destination.push(null);\n        }\n        function stringToChunk(content) {\n            return content;\n        }\n        function stringToPrecomputedChunk(content) {\n            return content;\n        }\n        function clonePrecomputedChunk(chunk) {\n            return chunk;\n        }\n        function closeWithError(destination, error) {\n            // $FlowFixMe[incompatible-call]: This is an Error object or the destination accepts other types.\n            destination.destroy(error);\n        }\n        var assign = Object.assign;\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkAttributeStringCoercion(value, attributeName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` attribute is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", attributeName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkOptionStringCoercion(value, propName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` option is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", propName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkCSSPropertyStringCoercion(value, propName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` CSS property is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", propName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkHtmlStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided HTML markup uses a value of unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableFloat = true; // Enables unstable_useMemoCache hook, intended as a compilation target for\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n        /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(\"^[\" + ATTRIBUTE_NAME_START_CHAR + \"][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var illegalAttributeNameCache = {};\n        var validatedAttributeNameCache = {};\n        function isAttributeNameSafe(attributeName) {\n            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n                return true;\n            }\n            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n                return false;\n            }\n            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n                validatedAttributeNameCache[attributeName] = true;\n                return true;\n            }\n            illegalAttributeNameCache[attributeName] = true;\n            {\n                error(\"Invalid attribute name: `%s`\", attributeName);\n            }\n            return false;\n        }\n        /**\n * CSS properties which accept numbers but are not in units of \"px\".\n */ var unitlessNumbers = new Set([\n            \"animationIterationCount\",\n            \"aspectRatio\",\n            \"borderImageOutset\",\n            \"borderImageSlice\",\n            \"borderImageWidth\",\n            \"boxFlex\",\n            \"boxFlexGroup\",\n            \"boxOrdinalGroup\",\n            \"columnCount\",\n            \"columns\",\n            \"flex\",\n            \"flexGrow\",\n            \"flexPositive\",\n            \"flexShrink\",\n            \"flexNegative\",\n            \"flexOrder\",\n            \"gridArea\",\n            \"gridRow\",\n            \"gridRowEnd\",\n            \"gridRowSpan\",\n            \"gridRowStart\",\n            \"gridColumn\",\n            \"gridColumnEnd\",\n            \"gridColumnSpan\",\n            \"gridColumnStart\",\n            \"fontWeight\",\n            \"lineClamp\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"scale\",\n            \"tabSize\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\",\n            \"fillOpacity\",\n            \"floodOpacity\",\n            \"stopOpacity\",\n            \"strokeDasharray\",\n            \"strokeDashoffset\",\n            \"strokeMiterlimit\",\n            \"strokeOpacity\",\n            \"strokeWidth\",\n            \"MozAnimationIterationCount\",\n            \"MozBoxFlex\",\n            \"MozBoxFlexGroup\",\n            \"MozLineClamp\",\n            \"msAnimationIterationCount\",\n            \"msFlex\",\n            \"msZoom\",\n            \"msFlexGrow\",\n            \"msFlexNegative\",\n            \"msFlexOrder\",\n            \"msFlexPositive\",\n            \"msFlexShrink\",\n            \"msGridColumn\",\n            \"msGridColumnSpan\",\n            \"msGridRow\",\n            \"msGridRowSpan\",\n            \"WebkitAnimationIterationCount\",\n            \"WebkitBoxFlex\",\n            \"WebKitBoxFlexGroup\",\n            \"WebkitBoxOrdinalGroup\",\n            \"WebkitColumnCount\",\n            \"WebkitColumns\",\n            \"WebkitFlex\",\n            \"WebkitFlexGrow\",\n            \"WebkitFlexPositive\",\n            \"WebkitFlexShrink\",\n            \"WebkitLineClamp\"\n        ]);\n        function isUnitlessNumber(name) {\n            return unitlessNumbers.has(name);\n        }\n        var aliases = new Map([\n            [\n                \"acceptCharset\",\n                \"accept-charset\"\n            ],\n            [\n                \"htmlFor\",\n                \"for\"\n            ],\n            [\n                \"httpEquiv\",\n                \"http-equiv\"\n            ],\n            [\n                \"crossOrigin\",\n                \"crossorigin\"\n            ],\n            // Regular attributes that just accept strings.],\n            [\n                \"accentHeight\",\n                \"accent-height\"\n            ],\n            [\n                \"alignmentBaseline\",\n                \"alignment-baseline\"\n            ],\n            [\n                \"arabicForm\",\n                \"arabic-form\"\n            ],\n            [\n                \"baselineShift\",\n                \"baseline-shift\"\n            ],\n            [\n                \"capHeight\",\n                \"cap-height\"\n            ],\n            [\n                \"clipPath\",\n                \"clip-path\"\n            ],\n            [\n                \"clipRule\",\n                \"clip-rule\"\n            ],\n            [\n                \"colorInterpolation\",\n                \"color-interpolation\"\n            ],\n            [\n                \"colorInterpolationFilters\",\n                \"color-interpolation-filters\"\n            ],\n            [\n                \"colorProfile\",\n                \"color-profile\"\n            ],\n            [\n                \"colorRendering\",\n                \"color-rendering\"\n            ],\n            [\n                \"dominantBaseline\",\n                \"dominant-baseline\"\n            ],\n            [\n                \"enableBackground\",\n                \"enable-background\"\n            ],\n            [\n                \"fillOpacity\",\n                \"fill-opacity\"\n            ],\n            [\n                \"fillRule\",\n                \"fill-rule\"\n            ],\n            [\n                \"floodColor\",\n                \"flood-color\"\n            ],\n            [\n                \"floodOpacity\",\n                \"flood-opacity\"\n            ],\n            [\n                \"fontFamily\",\n                \"font-family\"\n            ],\n            [\n                \"fontSize\",\n                \"font-size\"\n            ],\n            [\n                \"fontSizeAdjust\",\n                \"font-size-adjust\"\n            ],\n            [\n                \"fontStretch\",\n                \"font-stretch\"\n            ],\n            [\n                \"fontStyle\",\n                \"font-style\"\n            ],\n            [\n                \"fontVariant\",\n                \"font-variant\"\n            ],\n            [\n                \"fontWeight\",\n                \"font-weight\"\n            ],\n            [\n                \"glyphName\",\n                \"glyph-name\"\n            ],\n            [\n                \"glyphOrientationHorizontal\",\n                \"glyph-orientation-horizontal\"\n            ],\n            [\n                \"glyphOrientationVertical\",\n                \"glyph-orientation-vertical\"\n            ],\n            [\n                \"horizAdvX\",\n                \"horiz-adv-x\"\n            ],\n            [\n                \"horizOriginX\",\n                \"horiz-origin-x\"\n            ],\n            [\n                \"imageRendering\",\n                \"image-rendering\"\n            ],\n            [\n                \"letterSpacing\",\n                \"letter-spacing\"\n            ],\n            [\n                \"lightingColor\",\n                \"lighting-color\"\n            ],\n            [\n                \"markerEnd\",\n                \"marker-end\"\n            ],\n            [\n                \"markerMid\",\n                \"marker-mid\"\n            ],\n            [\n                \"markerStart\",\n                \"marker-start\"\n            ],\n            [\n                \"overlinePosition\",\n                \"overline-position\"\n            ],\n            [\n                \"overlineThickness\",\n                \"overline-thickness\"\n            ],\n            [\n                \"paintOrder\",\n                \"paint-order\"\n            ],\n            [\n                \"panose-1\",\n                \"panose-1\"\n            ],\n            [\n                \"pointerEvents\",\n                \"pointer-events\"\n            ],\n            [\n                \"renderingIntent\",\n                \"rendering-intent\"\n            ],\n            [\n                \"shapeRendering\",\n                \"shape-rendering\"\n            ],\n            [\n                \"stopColor\",\n                \"stop-color\"\n            ],\n            [\n                \"stopOpacity\",\n                \"stop-opacity\"\n            ],\n            [\n                \"strikethroughPosition\",\n                \"strikethrough-position\"\n            ],\n            [\n                \"strikethroughThickness\",\n                \"strikethrough-thickness\"\n            ],\n            [\n                \"strokeDasharray\",\n                \"stroke-dasharray\"\n            ],\n            [\n                \"strokeDashoffset\",\n                \"stroke-dashoffset\"\n            ],\n            [\n                \"strokeLinecap\",\n                \"stroke-linecap\"\n            ],\n            [\n                \"strokeLinejoin\",\n                \"stroke-linejoin\"\n            ],\n            [\n                \"strokeMiterlimit\",\n                \"stroke-miterlimit\"\n            ],\n            [\n                \"strokeOpacity\",\n                \"stroke-opacity\"\n            ],\n            [\n                \"strokeWidth\",\n                \"stroke-width\"\n            ],\n            [\n                \"textAnchor\",\n                \"text-anchor\"\n            ],\n            [\n                \"textDecoration\",\n                \"text-decoration\"\n            ],\n            [\n                \"textRendering\",\n                \"text-rendering\"\n            ],\n            [\n                \"transformOrigin\",\n                \"transform-origin\"\n            ],\n            [\n                \"underlinePosition\",\n                \"underline-position\"\n            ],\n            [\n                \"underlineThickness\",\n                \"underline-thickness\"\n            ],\n            [\n                \"unicodeBidi\",\n                \"unicode-bidi\"\n            ],\n            [\n                \"unicodeRange\",\n                \"unicode-range\"\n            ],\n            [\n                \"unitsPerEm\",\n                \"units-per-em\"\n            ],\n            [\n                \"vAlphabetic\",\n                \"v-alphabetic\"\n            ],\n            [\n                \"vHanging\",\n                \"v-hanging\"\n            ],\n            [\n                \"vIdeographic\",\n                \"v-ideographic\"\n            ],\n            [\n                \"vMathematical\",\n                \"v-mathematical\"\n            ],\n            [\n                \"vectorEffect\",\n                \"vector-effect\"\n            ],\n            [\n                \"vertAdvY\",\n                \"vert-adv-y\"\n            ],\n            [\n                \"vertOriginX\",\n                \"vert-origin-x\"\n            ],\n            [\n                \"vertOriginY\",\n                \"vert-origin-y\"\n            ],\n            [\n                \"wordSpacing\",\n                \"word-spacing\"\n            ],\n            [\n                \"writingMode\",\n                \"writing-mode\"\n            ],\n            [\n                \"xmlnsXlink\",\n                \"xmlns:xlink\"\n            ],\n            [\n                \"xHeight\",\n                \"x-height\"\n            ]\n        ]);\n        function getAttributeAlias(name) {\n            return aliases.get(name) || name;\n        }\n        var hasReadOnlyValue = {\n            button: true,\n            checkbox: true,\n            image: true,\n            hidden: true,\n            radio: true,\n            reset: true,\n            submit: true\n        };\n        function checkControlledValueProps(tagName, props) {\n            {\n                if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n                    error(\"You provided a `value` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultValue`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n                if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n                    error(\"You provided a `checked` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultChecked`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n            }\n        }\n        var ariaProperties = {\n            \"aria-current\": 0,\n            // state\n            \"aria-description\": 0,\n            \"aria-details\": 0,\n            \"aria-disabled\": 0,\n            // state\n            \"aria-hidden\": 0,\n            // state\n            \"aria-invalid\": 0,\n            // state\n            \"aria-keyshortcuts\": 0,\n            \"aria-label\": 0,\n            \"aria-roledescription\": 0,\n            // Widget Attributes\n            \"aria-autocomplete\": 0,\n            \"aria-checked\": 0,\n            \"aria-expanded\": 0,\n            \"aria-haspopup\": 0,\n            \"aria-level\": 0,\n            \"aria-modal\": 0,\n            \"aria-multiline\": 0,\n            \"aria-multiselectable\": 0,\n            \"aria-orientation\": 0,\n            \"aria-placeholder\": 0,\n            \"aria-pressed\": 0,\n            \"aria-readonly\": 0,\n            \"aria-required\": 0,\n            \"aria-selected\": 0,\n            \"aria-sort\": 0,\n            \"aria-valuemax\": 0,\n            \"aria-valuemin\": 0,\n            \"aria-valuenow\": 0,\n            \"aria-valuetext\": 0,\n            // Live Region Attributes\n            \"aria-atomic\": 0,\n            \"aria-busy\": 0,\n            \"aria-live\": 0,\n            \"aria-relevant\": 0,\n            // Drag-and-Drop Attributes\n            \"aria-dropeffect\": 0,\n            \"aria-grabbed\": 0,\n            // Relationship Attributes\n            \"aria-activedescendant\": 0,\n            \"aria-colcount\": 0,\n            \"aria-colindex\": 0,\n            \"aria-colspan\": 0,\n            \"aria-controls\": 0,\n            \"aria-describedby\": 0,\n            \"aria-errormessage\": 0,\n            \"aria-flowto\": 0,\n            \"aria-labelledby\": 0,\n            \"aria-owns\": 0,\n            \"aria-posinset\": 0,\n            \"aria-rowcount\": 0,\n            \"aria-rowindex\": 0,\n            \"aria-rowspan\": 0,\n            \"aria-setsize\": 0\n        };\n        var warnedProperties$1 = {};\n        var rARIA$1 = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel$1 = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty$1(tagName, name) {\n            {\n                if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n                    return true;\n                }\n                if (rARIACamel$1.test(name)) {\n                    var ariaName = \"aria-\" + name.slice(4).toLowerCase();\n                    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (correctName == null) {\n                        error(\"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.\", name);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== correctName) {\n                        error(\"Invalid ARIA attribute `%s`. Did you mean `%s`?\", name, correctName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n                if (rARIA$1.test(name)) {\n                    var lowerCasedName = name.toLowerCase();\n                    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (standardName == null) {\n                        warnedProperties$1[name] = true;\n                        return false;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== standardName) {\n                        error(\"Unknown ARIA attribute `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n            }\n            return true;\n        }\n        function validateProperties$2(type, props) {\n            {\n                var invalidProps = [];\n                for(var key in props){\n                    var isValid = validateProperty$1(type, key);\n                    if (!isValid) {\n                        invalidProps.push(key);\n                    }\n                }\n                var unknownPropString = invalidProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (invalidProps.length === 1) {\n                    error(\"Invalid aria prop %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                } else if (invalidProps.length > 1) {\n                    error(\"Invalid aria props %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                }\n            }\n        }\n        var didWarnValueNull = false;\n        function validateProperties$1(type, props) {\n            {\n                if (type !== \"input\" && type !== \"textarea\" && type !== \"select\") {\n                    return;\n                }\n                if (props != null && props.value === null && !didWarnValueNull) {\n                    didWarnValueNull = true;\n                    if (type === \"select\" && props.multiple) {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty array when `multiple` is set to `true` \" + \"to clear the component or `undefined` for uncontrolled components.\", type);\n                    } else {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty string to clear the component or `undefined` \" + \"for uncontrolled components.\", type);\n                    }\n                }\n            }\n        }\n        function isCustomElement(tagName, props) {\n            if (tagName.indexOf(\"-\") === -1) {\n                return false;\n            }\n            switch(tagName){\n                // These are reserved SVG and MathML elements.\n                // We don't mind this list too much because we expect it to never grow.\n                // The alternative is to track the namespace in a few places which is convoluted.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    return false;\n                default:\n                    return true;\n            }\n        }\n        // When adding attributes to the HTML or SVG allowed attribute list, be sure to\n        // also add them to this module to ensure casing and incorrect name\n        // warnings.\n        var possibleStandardNames = {\n            // HTML\n            accept: \"accept\",\n            acceptcharset: \"acceptCharset\",\n            \"accept-charset\": \"acceptCharset\",\n            accesskey: \"accessKey\",\n            action: \"action\",\n            allowfullscreen: \"allowFullScreen\",\n            alt: \"alt\",\n            as: \"as\",\n            async: \"async\",\n            autocapitalize: \"autoCapitalize\",\n            autocomplete: \"autoComplete\",\n            autocorrect: \"autoCorrect\",\n            autofocus: \"autoFocus\",\n            autoplay: \"autoPlay\",\n            autosave: \"autoSave\",\n            capture: \"capture\",\n            cellpadding: \"cellPadding\",\n            cellspacing: \"cellSpacing\",\n            challenge: \"challenge\",\n            charset: \"charSet\",\n            checked: \"checked\",\n            children: \"children\",\n            cite: \"cite\",\n            class: \"className\",\n            classid: \"classID\",\n            classname: \"className\",\n            cols: \"cols\",\n            colspan: \"colSpan\",\n            content: \"content\",\n            contenteditable: \"contentEditable\",\n            contextmenu: \"contextMenu\",\n            controls: \"controls\",\n            controlslist: \"controlsList\",\n            coords: \"coords\",\n            crossorigin: \"crossOrigin\",\n            dangerouslysetinnerhtml: \"dangerouslySetInnerHTML\",\n            data: \"data\",\n            datetime: \"dateTime\",\n            default: \"default\",\n            defaultchecked: \"defaultChecked\",\n            defaultvalue: \"defaultValue\",\n            defer: \"defer\",\n            dir: \"dir\",\n            disabled: \"disabled\",\n            disablepictureinpicture: \"disablePictureInPicture\",\n            disableremoteplayback: \"disableRemotePlayback\",\n            download: \"download\",\n            draggable: \"draggable\",\n            enctype: \"encType\",\n            enterkeyhint: \"enterKeyHint\",\n            fetchpriority: \"fetchPriority\",\n            for: \"htmlFor\",\n            form: \"form\",\n            formmethod: \"formMethod\",\n            formaction: \"formAction\",\n            formenctype: \"formEncType\",\n            formnovalidate: \"formNoValidate\",\n            formtarget: \"formTarget\",\n            frameborder: \"frameBorder\",\n            headers: \"headers\",\n            height: \"height\",\n            hidden: \"hidden\",\n            high: \"high\",\n            href: \"href\",\n            hreflang: \"hrefLang\",\n            htmlfor: \"htmlFor\",\n            httpequiv: \"httpEquiv\",\n            \"http-equiv\": \"httpEquiv\",\n            icon: \"icon\",\n            id: \"id\",\n            imagesizes: \"imageSizes\",\n            imagesrcset: \"imageSrcSet\",\n            innerhtml: \"innerHTML\",\n            inputmode: \"inputMode\",\n            integrity: \"integrity\",\n            is: \"is\",\n            itemid: \"itemID\",\n            itemprop: \"itemProp\",\n            itemref: \"itemRef\",\n            itemscope: \"itemScope\",\n            itemtype: \"itemType\",\n            keyparams: \"keyParams\",\n            keytype: \"keyType\",\n            kind: \"kind\",\n            label: \"label\",\n            lang: \"lang\",\n            list: \"list\",\n            loop: \"loop\",\n            low: \"low\",\n            manifest: \"manifest\",\n            marginwidth: \"marginWidth\",\n            marginheight: \"marginHeight\",\n            max: \"max\",\n            maxlength: \"maxLength\",\n            media: \"media\",\n            mediagroup: \"mediaGroup\",\n            method: \"method\",\n            min: \"min\",\n            minlength: \"minLength\",\n            multiple: \"multiple\",\n            muted: \"muted\",\n            name: \"name\",\n            nomodule: \"noModule\",\n            nonce: \"nonce\",\n            novalidate: \"noValidate\",\n            open: \"open\",\n            optimum: \"optimum\",\n            pattern: \"pattern\",\n            placeholder: \"placeholder\",\n            playsinline: \"playsInline\",\n            poster: \"poster\",\n            preload: \"preload\",\n            profile: \"profile\",\n            radiogroup: \"radioGroup\",\n            readonly: \"readOnly\",\n            referrerpolicy: \"referrerPolicy\",\n            rel: \"rel\",\n            required: \"required\",\n            reversed: \"reversed\",\n            role: \"role\",\n            rows: \"rows\",\n            rowspan: \"rowSpan\",\n            sandbox: \"sandbox\",\n            scope: \"scope\",\n            scoped: \"scoped\",\n            scrolling: \"scrolling\",\n            seamless: \"seamless\",\n            selected: \"selected\",\n            shape: \"shape\",\n            size: \"size\",\n            sizes: \"sizes\",\n            span: \"span\",\n            spellcheck: \"spellCheck\",\n            src: \"src\",\n            srcdoc: \"srcDoc\",\n            srclang: \"srcLang\",\n            srcset: \"srcSet\",\n            start: \"start\",\n            step: \"step\",\n            style: \"style\",\n            summary: \"summary\",\n            tabindex: \"tabIndex\",\n            target: \"target\",\n            title: \"title\",\n            type: \"type\",\n            usemap: \"useMap\",\n            value: \"value\",\n            width: \"width\",\n            wmode: \"wmode\",\n            wrap: \"wrap\",\n            // SVG\n            about: \"about\",\n            accentheight: \"accentHeight\",\n            \"accent-height\": \"accentHeight\",\n            accumulate: \"accumulate\",\n            additive: \"additive\",\n            alignmentbaseline: \"alignmentBaseline\",\n            \"alignment-baseline\": \"alignmentBaseline\",\n            allowreorder: \"allowReorder\",\n            alphabetic: \"alphabetic\",\n            amplitude: \"amplitude\",\n            arabicform: \"arabicForm\",\n            \"arabic-form\": \"arabicForm\",\n            ascent: \"ascent\",\n            attributename: \"attributeName\",\n            attributetype: \"attributeType\",\n            autoreverse: \"autoReverse\",\n            azimuth: \"azimuth\",\n            basefrequency: \"baseFrequency\",\n            baselineshift: \"baselineShift\",\n            \"baseline-shift\": \"baselineShift\",\n            baseprofile: \"baseProfile\",\n            bbox: \"bbox\",\n            begin: \"begin\",\n            bias: \"bias\",\n            by: \"by\",\n            calcmode: \"calcMode\",\n            capheight: \"capHeight\",\n            \"cap-height\": \"capHeight\",\n            clip: \"clip\",\n            clippath: \"clipPath\",\n            \"clip-path\": \"clipPath\",\n            clippathunits: \"clipPathUnits\",\n            cliprule: \"clipRule\",\n            \"clip-rule\": \"clipRule\",\n            color: \"color\",\n            colorinterpolation: \"colorInterpolation\",\n            \"color-interpolation\": \"colorInterpolation\",\n            colorinterpolationfilters: \"colorInterpolationFilters\",\n            \"color-interpolation-filters\": \"colorInterpolationFilters\",\n            colorprofile: \"colorProfile\",\n            \"color-profile\": \"colorProfile\",\n            colorrendering: \"colorRendering\",\n            \"color-rendering\": \"colorRendering\",\n            contentscripttype: \"contentScriptType\",\n            contentstyletype: \"contentStyleType\",\n            cursor: \"cursor\",\n            cx: \"cx\",\n            cy: \"cy\",\n            d: \"d\",\n            datatype: \"datatype\",\n            decelerate: \"decelerate\",\n            descent: \"descent\",\n            diffuseconstant: \"diffuseConstant\",\n            direction: \"direction\",\n            display: \"display\",\n            divisor: \"divisor\",\n            dominantbaseline: \"dominantBaseline\",\n            \"dominant-baseline\": \"dominantBaseline\",\n            dur: \"dur\",\n            dx: \"dx\",\n            dy: \"dy\",\n            edgemode: \"edgeMode\",\n            elevation: \"elevation\",\n            enablebackground: \"enableBackground\",\n            \"enable-background\": \"enableBackground\",\n            end: \"end\",\n            exponent: \"exponent\",\n            externalresourcesrequired: \"externalResourcesRequired\",\n            fill: \"fill\",\n            fillopacity: \"fillOpacity\",\n            \"fill-opacity\": \"fillOpacity\",\n            fillrule: \"fillRule\",\n            \"fill-rule\": \"fillRule\",\n            filter: \"filter\",\n            filterres: \"filterRes\",\n            filterunits: \"filterUnits\",\n            floodopacity: \"floodOpacity\",\n            \"flood-opacity\": \"floodOpacity\",\n            floodcolor: \"floodColor\",\n            \"flood-color\": \"floodColor\",\n            focusable: \"focusable\",\n            fontfamily: \"fontFamily\",\n            \"font-family\": \"fontFamily\",\n            fontsize: \"fontSize\",\n            \"font-size\": \"fontSize\",\n            fontsizeadjust: \"fontSizeAdjust\",\n            \"font-size-adjust\": \"fontSizeAdjust\",\n            fontstretch: \"fontStretch\",\n            \"font-stretch\": \"fontStretch\",\n            fontstyle: \"fontStyle\",\n            \"font-style\": \"fontStyle\",\n            fontvariant: \"fontVariant\",\n            \"font-variant\": \"fontVariant\",\n            fontweight: \"fontWeight\",\n            \"font-weight\": \"fontWeight\",\n            format: \"format\",\n            from: \"from\",\n            fx: \"fx\",\n            fy: \"fy\",\n            g1: \"g1\",\n            g2: \"g2\",\n            glyphname: \"glyphName\",\n            \"glyph-name\": \"glyphName\",\n            glyphorientationhorizontal: \"glyphOrientationHorizontal\",\n            \"glyph-orientation-horizontal\": \"glyphOrientationHorizontal\",\n            glyphorientationvertical: \"glyphOrientationVertical\",\n            \"glyph-orientation-vertical\": \"glyphOrientationVertical\",\n            glyphref: \"glyphRef\",\n            gradienttransform: \"gradientTransform\",\n            gradientunits: \"gradientUnits\",\n            hanging: \"hanging\",\n            horizadvx: \"horizAdvX\",\n            \"horiz-adv-x\": \"horizAdvX\",\n            horizoriginx: \"horizOriginX\",\n            \"horiz-origin-x\": \"horizOriginX\",\n            ideographic: \"ideographic\",\n            imagerendering: \"imageRendering\",\n            \"image-rendering\": \"imageRendering\",\n            in2: \"in2\",\n            in: \"in\",\n            inlist: \"inlist\",\n            intercept: \"intercept\",\n            k1: \"k1\",\n            k2: \"k2\",\n            k3: \"k3\",\n            k4: \"k4\",\n            k: \"k\",\n            kernelmatrix: \"kernelMatrix\",\n            kernelunitlength: \"kernelUnitLength\",\n            kerning: \"kerning\",\n            keypoints: \"keyPoints\",\n            keysplines: \"keySplines\",\n            keytimes: \"keyTimes\",\n            lengthadjust: \"lengthAdjust\",\n            letterspacing: \"letterSpacing\",\n            \"letter-spacing\": \"letterSpacing\",\n            lightingcolor: \"lightingColor\",\n            \"lighting-color\": \"lightingColor\",\n            limitingconeangle: \"limitingConeAngle\",\n            local: \"local\",\n            markerend: \"markerEnd\",\n            \"marker-end\": \"markerEnd\",\n            markerheight: \"markerHeight\",\n            markermid: \"markerMid\",\n            \"marker-mid\": \"markerMid\",\n            markerstart: \"markerStart\",\n            \"marker-start\": \"markerStart\",\n            markerunits: \"markerUnits\",\n            markerwidth: \"markerWidth\",\n            mask: \"mask\",\n            maskcontentunits: \"maskContentUnits\",\n            maskunits: \"maskUnits\",\n            mathematical: \"mathematical\",\n            mode: \"mode\",\n            numoctaves: \"numOctaves\",\n            offset: \"offset\",\n            opacity: \"opacity\",\n            operator: \"operator\",\n            order: \"order\",\n            orient: \"orient\",\n            orientation: \"orientation\",\n            origin: \"origin\",\n            overflow: \"overflow\",\n            overlineposition: \"overlinePosition\",\n            \"overline-position\": \"overlinePosition\",\n            overlinethickness: \"overlineThickness\",\n            \"overline-thickness\": \"overlineThickness\",\n            paintorder: \"paintOrder\",\n            \"paint-order\": \"paintOrder\",\n            panose1: \"panose1\",\n            \"panose-1\": \"panose1\",\n            pathlength: \"pathLength\",\n            patterncontentunits: \"patternContentUnits\",\n            patterntransform: \"patternTransform\",\n            patternunits: \"patternUnits\",\n            pointerevents: \"pointerEvents\",\n            \"pointer-events\": \"pointerEvents\",\n            points: \"points\",\n            pointsatx: \"pointsAtX\",\n            pointsaty: \"pointsAtY\",\n            pointsatz: \"pointsAtZ\",\n            prefix: \"prefix\",\n            preservealpha: \"preserveAlpha\",\n            preserveaspectratio: \"preserveAspectRatio\",\n            primitiveunits: \"primitiveUnits\",\n            property: \"property\",\n            r: \"r\",\n            radius: \"radius\",\n            refx: \"refX\",\n            refy: \"refY\",\n            renderingintent: \"renderingIntent\",\n            \"rendering-intent\": \"renderingIntent\",\n            repeatcount: \"repeatCount\",\n            repeatdur: \"repeatDur\",\n            requiredextensions: \"requiredExtensions\",\n            requiredfeatures: \"requiredFeatures\",\n            resource: \"resource\",\n            restart: \"restart\",\n            result: \"result\",\n            results: \"results\",\n            rotate: \"rotate\",\n            rx: \"rx\",\n            ry: \"ry\",\n            scale: \"scale\",\n            security: \"security\",\n            seed: \"seed\",\n            shaperendering: \"shapeRendering\",\n            \"shape-rendering\": \"shapeRendering\",\n            slope: \"slope\",\n            spacing: \"spacing\",\n            specularconstant: \"specularConstant\",\n            specularexponent: \"specularExponent\",\n            speed: \"speed\",\n            spreadmethod: \"spreadMethod\",\n            startoffset: \"startOffset\",\n            stddeviation: \"stdDeviation\",\n            stemh: \"stemh\",\n            stemv: \"stemv\",\n            stitchtiles: \"stitchTiles\",\n            stopcolor: \"stopColor\",\n            \"stop-color\": \"stopColor\",\n            stopopacity: \"stopOpacity\",\n            \"stop-opacity\": \"stopOpacity\",\n            strikethroughposition: \"strikethroughPosition\",\n            \"strikethrough-position\": \"strikethroughPosition\",\n            strikethroughthickness: \"strikethroughThickness\",\n            \"strikethrough-thickness\": \"strikethroughThickness\",\n            string: \"string\",\n            stroke: \"stroke\",\n            strokedasharray: \"strokeDasharray\",\n            \"stroke-dasharray\": \"strokeDasharray\",\n            strokedashoffset: \"strokeDashoffset\",\n            \"stroke-dashoffset\": \"strokeDashoffset\",\n            strokelinecap: \"strokeLinecap\",\n            \"stroke-linecap\": \"strokeLinecap\",\n            strokelinejoin: \"strokeLinejoin\",\n            \"stroke-linejoin\": \"strokeLinejoin\",\n            strokemiterlimit: \"strokeMiterlimit\",\n            \"stroke-miterlimit\": \"strokeMiterlimit\",\n            strokewidth: \"strokeWidth\",\n            \"stroke-width\": \"strokeWidth\",\n            strokeopacity: \"strokeOpacity\",\n            \"stroke-opacity\": \"strokeOpacity\",\n            suppresscontenteditablewarning: \"suppressContentEditableWarning\",\n            suppresshydrationwarning: \"suppressHydrationWarning\",\n            surfacescale: \"surfaceScale\",\n            systemlanguage: \"systemLanguage\",\n            tablevalues: \"tableValues\",\n            targetx: \"targetX\",\n            targety: \"targetY\",\n            textanchor: \"textAnchor\",\n            \"text-anchor\": \"textAnchor\",\n            textdecoration: \"textDecoration\",\n            \"text-decoration\": \"textDecoration\",\n            textlength: \"textLength\",\n            textrendering: \"textRendering\",\n            \"text-rendering\": \"textRendering\",\n            to: \"to\",\n            transform: \"transform\",\n            transformorigin: \"transformOrigin\",\n            \"transform-origin\": \"transformOrigin\",\n            typeof: \"typeof\",\n            u1: \"u1\",\n            u2: \"u2\",\n            underlineposition: \"underlinePosition\",\n            \"underline-position\": \"underlinePosition\",\n            underlinethickness: \"underlineThickness\",\n            \"underline-thickness\": \"underlineThickness\",\n            unicode: \"unicode\",\n            unicodebidi: \"unicodeBidi\",\n            \"unicode-bidi\": \"unicodeBidi\",\n            unicoderange: \"unicodeRange\",\n            \"unicode-range\": \"unicodeRange\",\n            unitsperem: \"unitsPerEm\",\n            \"units-per-em\": \"unitsPerEm\",\n            unselectable: \"unselectable\",\n            valphabetic: \"vAlphabetic\",\n            \"v-alphabetic\": \"vAlphabetic\",\n            values: \"values\",\n            vectoreffect: \"vectorEffect\",\n            \"vector-effect\": \"vectorEffect\",\n            version: \"version\",\n            vertadvy: \"vertAdvY\",\n            \"vert-adv-y\": \"vertAdvY\",\n            vertoriginx: \"vertOriginX\",\n            \"vert-origin-x\": \"vertOriginX\",\n            vertoriginy: \"vertOriginY\",\n            \"vert-origin-y\": \"vertOriginY\",\n            vhanging: \"vHanging\",\n            \"v-hanging\": \"vHanging\",\n            videographic: \"vIdeographic\",\n            \"v-ideographic\": \"vIdeographic\",\n            viewbox: \"viewBox\",\n            viewtarget: \"viewTarget\",\n            visibility: \"visibility\",\n            vmathematical: \"vMathematical\",\n            \"v-mathematical\": \"vMathematical\",\n            vocab: \"vocab\",\n            widths: \"widths\",\n            wordspacing: \"wordSpacing\",\n            \"word-spacing\": \"wordSpacing\",\n            writingmode: \"writingMode\",\n            \"writing-mode\": \"writingMode\",\n            x1: \"x1\",\n            x2: \"x2\",\n            x: \"x\",\n            xchannelselector: \"xChannelSelector\",\n            xheight: \"xHeight\",\n            \"x-height\": \"xHeight\",\n            xlinkactuate: \"xlinkActuate\",\n            \"xlink:actuate\": \"xlinkActuate\",\n            xlinkarcrole: \"xlinkArcrole\",\n            \"xlink:arcrole\": \"xlinkArcrole\",\n            xlinkhref: \"xlinkHref\",\n            \"xlink:href\": \"xlinkHref\",\n            xlinkrole: \"xlinkRole\",\n            \"xlink:role\": \"xlinkRole\",\n            xlinkshow: \"xlinkShow\",\n            \"xlink:show\": \"xlinkShow\",\n            xlinktitle: \"xlinkTitle\",\n            \"xlink:title\": \"xlinkTitle\",\n            xlinktype: \"xlinkType\",\n            \"xlink:type\": \"xlinkType\",\n            xmlbase: \"xmlBase\",\n            \"xml:base\": \"xmlBase\",\n            xmllang: \"xmlLang\",\n            \"xml:lang\": \"xmlLang\",\n            xmlns: \"xmlns\",\n            \"xml:space\": \"xmlSpace\",\n            xmlnsxlink: \"xmlnsXlink\",\n            \"xmlns:xlink\": \"xmlnsXlink\",\n            xmlspace: \"xmlSpace\",\n            y1: \"y1\",\n            y2: \"y2\",\n            y: \"y\",\n            ychannelselector: \"yChannelSelector\",\n            z: \"z\",\n            zoomandpan: \"zoomAndPan\"\n        };\n        var warnedProperties = {};\n        var EVENT_NAME_REGEX = /^on./;\n        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n        var rARIA = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty(tagName, name, value, eventRegistry) {\n            {\n                if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n                    return true;\n                }\n                var lowerCasedName = name.toLowerCase();\n                if (lowerCasedName === \"onfocusin\" || lowerCasedName === \"onfocusout\") {\n                    error(\"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. \" + \"All React events are normalized to bubble, so onFocusIn and onFocusOut \" + \"are not needed/supported by React.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                {\n                    // Actions are special because unlike events they can have other value types.\n                    if (typeof value === \"function\") {\n                        if (tagName === \"form\" && name === \"action\") {\n                            return true;\n                        }\n                        if (tagName === \"input\" && name === \"formAction\") {\n                            return true;\n                        }\n                        if (tagName === \"button\" && name === \"formAction\") {\n                            return true;\n                        }\n                    }\n                }\n                if (eventRegistry != null) {\n                    var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n                    if (registrationNameDependencies.hasOwnProperty(name)) {\n                        return true;\n                    }\n                    var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n                    if (registrationName != null) {\n                        error(\"Invalid event handler property `%s`. Did you mean `%s`?\", name, registrationName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                    if (EVENT_NAME_REGEX.test(name)) {\n                        error(\"Unknown event handler property `%s`. It will be ignored.\", name);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (EVENT_NAME_REGEX.test(name)) {\n                    // If no event plugins have been injected, we are in a server environment.\n                    // So we can't tell if the event name is correct for sure, but we can filter\n                    // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n                    if (INVALID_EVENT_NAME_REGEX.test(name)) {\n                        error(\"Invalid event handler property `%s`. \" + \"React events use the camelCase naming convention, for example `onClick`.\", name);\n                    }\n                    warnedProperties[name] = true;\n                    return true;\n                } // Let the ARIA attribute hook validate ARIA attributes\n                if (rARIA.test(name) || rARIACamel.test(name)) {\n                    return true;\n                }\n                if (lowerCasedName === \"innerhtml\") {\n                    error(\"Directly setting property `innerHTML` is not permitted. \" + \"For more information, lookup documentation on `dangerouslySetInnerHTML`.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"aria\") {\n                    error(\"The `aria` attribute is reserved for future use in React. \" + \"Pass individual `aria-` attributes instead.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"is\" && value !== null && value !== undefined && typeof value !== \"string\") {\n                    error(\"Received a `%s` for a string attribute `is`. If this is expected, cast \" + \"the value to a string.\", typeof value);\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (typeof value === \"number\" && isNaN(value)) {\n                    error(\"Received NaN for the `%s` attribute. If this is expected, cast \" + \"the value to a string.\", name);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Known attributes should match the casing specified in the property config.\n                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n                    var standardName = possibleStandardNames[lowerCasedName];\n                    if (standardName !== name) {\n                        error(\"Invalid DOM property `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (name !== lowerCasedName) {\n                    // Unknown attributes should have lowercase casing since that's how they\n                    // will be cased anyway with server rendering.\n                    error(\"React does not recognize the `%s` prop on a DOM element. If you \" + \"intentionally want it to appear in the DOM as a custom \" + \"attribute, spell it as lowercase `%s` instead. \" + \"If you accidentally passed it from a parent component, remove \" + \"it from the DOM element.\", name, lowerCasedName);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Now that we've validated casing, do not validate\n                // data types for reserved props\n                switch(name){\n                    case \"dangerouslySetInnerHTML\":\n                    case \"children\":\n                    case \"style\":\n                    case \"suppressContentEditableWarning\":\n                    case \"suppressHydrationWarning\":\n                    case \"defaultValue\":\n                    case \"defaultChecked\":\n                    case \"innerHTML\":\n                        {\n                            return true;\n                        }\n                }\n                switch(typeof value){\n                    case \"boolean\":\n                        {\n                            switch(name){\n                                case \"autoFocus\":\n                                case \"checked\":\n                                case \"multiple\":\n                                case \"muted\":\n                                case \"selected\":\n                                case \"contentEditable\":\n                                case \"spellCheck\":\n                                case \"draggable\":\n                                case \"value\":\n                                case \"autoReverse\":\n                                case \"externalResourcesRequired\":\n                                case \"focusable\":\n                                case \"preserveAlpha\":\n                                case \"allowFullScreen\":\n                                case \"async\":\n                                case \"autoPlay\":\n                                case \"controls\":\n                                case \"default\":\n                                case \"defer\":\n                                case \"disabled\":\n                                case \"disablePictureInPicture\":\n                                case \"disableRemotePlayback\":\n                                case \"formNoValidate\":\n                                case \"hidden\":\n                                case \"loop\":\n                                case \"noModule\":\n                                case \"noValidate\":\n                                case \"open\":\n                                case \"playsInline\":\n                                case \"readOnly\":\n                                case \"required\":\n                                case \"reversed\":\n                                case \"scoped\":\n                                case \"seamless\":\n                                case \"itemScope\":\n                                case \"capture\":\n                                case \"download\":\n                                    {\n                                        // Boolean properties can accept boolean values\n                                        return true;\n                                    }\n                                default:\n                                    {\n                                        var prefix = name.toLowerCase().slice(0, 5);\n                                        if (prefix === \"data-\" || prefix === \"aria-\") {\n                                            return true;\n                                        }\n                                        if (value) {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n                                        } else {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + \"If you used to conditionally omit it with %s={condition && value}, \" + \"pass %s={condition ? value : undefined} instead.\", value, name, name, value, name, name, name);\n                                        }\n                                        warnedProperties[name] = true;\n                                        return true;\n                                    }\n                            }\n                        }\n                    case \"function\":\n                    case \"symbol\":\n                        // eslint-disable-line\n                        // Warn when a known attribute is a bad type\n                        warnedProperties[name] = true;\n                        return false;\n                    case \"string\":\n                        {\n                            // Warn when passing the strings 'false' or 'true' into a boolean prop\n                            if (value === \"false\" || value === \"true\") {\n                                switch(name){\n                                    case \"checked\":\n                                    case \"selected\":\n                                    case \"multiple\":\n                                    case \"muted\":\n                                    case \"allowFullScreen\":\n                                    case \"async\":\n                                    case \"autoPlay\":\n                                    case \"controls\":\n                                    case \"default\":\n                                    case \"defer\":\n                                    case \"disabled\":\n                                    case \"disablePictureInPicture\":\n                                    case \"disableRemotePlayback\":\n                                    case \"formNoValidate\":\n                                    case \"hidden\":\n                                    case \"loop\":\n                                    case \"noModule\":\n                                    case \"noValidate\":\n                                    case \"open\":\n                                    case \"playsInline\":\n                                    case \"readOnly\":\n                                    case \"required\":\n                                    case \"reversed\":\n                                    case \"scoped\":\n                                    case \"seamless\":\n                                    case \"itemScope\":\n                                        {\n                                            break;\n                                        }\n                                    default:\n                                        {\n                                            return true;\n                                        }\n                                }\n                                error(\"Received the string `%s` for the boolean attribute `%s`. \" + \"%s \" + \"Did you mean %s={%s}?\", value, name, value === \"false\" ? \"The browser will interpret it as a truthy value.\" : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n                                warnedProperties[name] = true;\n                                return true;\n                            }\n                        }\n                }\n                return true;\n            }\n        }\n        function warnUnknownProperties(type, props, eventRegistry) {\n            {\n                var unknownProps = [];\n                for(var key in props){\n                    var isValid = validateProperty(type, key, props[key], eventRegistry);\n                    if (!isValid) {\n                        unknownProps.push(key);\n                    }\n                }\n                var unknownPropString = unknownProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (unknownProps.length === 1) {\n                    error(\"Invalid value for prop %s on <%s> tag. Either remove it from the element, \" + \"or pass a string or number value to keep it in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                } else if (unknownProps.length > 1) {\n                    error(\"Invalid values for props %s on <%s> tag. Either remove them from the element, \" + \"or pass a string or number value to keep them in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                }\n            }\n        }\n        function validateProperties(type, props, eventRegistry) {\n            if (isCustomElement(type) || typeof props.is === \"string\") {\n                return;\n            }\n            warnUnknownProperties(type, props, eventRegistry);\n        }\n        // 'msTransform' is correct, but the other prefixes should be capitalized\n        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n        var msPattern$1 = /^-ms-/;\n        var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n        var badStyleValueWithSemicolonPattern = /;\\s*$/;\n        var warnedStyleNames = {};\n        var warnedStyleValues = {};\n        var warnedForNaNValue = false;\n        var warnedForInfinityValue = false;\n        function camelize(string) {\n            return string.replace(hyphenPattern, function(_, character) {\n                return character.toUpperCase();\n            });\n        }\n        function warnHyphenatedStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported style property %s. Did you mean %s?\", name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n                // is converted to lowercase `ms`.\n                camelize(name.replace(msPattern$1, \"ms-\")));\n            }\n        }\n        function warnBadVendoredStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported vendor-prefixed style property %s. Did you mean %s?\", name, name.charAt(0).toUpperCase() + name.slice(1));\n            }\n        }\n        function warnStyleValueWithSemicolon(name, value) {\n            {\n                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n                    return;\n                }\n                warnedStyleValues[value] = true;\n                error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, \"\"));\n            }\n        }\n        function warnStyleValueIsNaN(name, value) {\n            {\n                if (warnedForNaNValue) {\n                    return;\n                }\n                warnedForNaNValue = true;\n                error(\"`NaN` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnStyleValueIsInfinity(name, value) {\n            {\n                if (warnedForInfinityValue) {\n                    return;\n                }\n                warnedForInfinityValue = true;\n                error(\"`Infinity` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnValidStyle(name, value) {\n            {\n                if (name.indexOf(\"-\") > -1) {\n                    warnHyphenatedStyleName(name);\n                } else if (badVendoredStyleNamePattern.test(name)) {\n                    warnBadVendoredStyleName(name);\n                } else if (badStyleValueWithSemicolonPattern.test(value)) {\n                    warnStyleValueWithSemicolon(name, value);\n                }\n                if (typeof value === \"number\") {\n                    if (isNaN(value)) {\n                        warnStyleValueIsNaN(name);\n                    } else if (!isFinite(value)) {\n                        warnStyleValueIsInfinity(name);\n                    }\n                }\n            }\n        }\n        function getCrossOriginString(input) {\n            if (typeof input === \"string\") {\n                return input === \"use-credentials\" ? input : \"\";\n            }\n            return undefined;\n        }\n        // code copied and modified from escape-html\n        var matchHtmlRegExp = /[\"'&<>]/;\n        /**\n * Escapes special characters and HTML entities in a given html string.\n *\n * @param  {string} string HTML string to escape for later insertion\n * @return {string}\n * @public\n */ function escapeHtml(string) {\n            {\n                checkHtmlStringCoercion(string);\n            }\n            var str = \"\" + string;\n            var match = matchHtmlRegExp.exec(str);\n            if (!match) {\n                return str;\n            }\n            var escape;\n            var html = \"\";\n            var index;\n            var lastIndex = 0;\n            for(index = match.index; index < str.length; index++){\n                switch(str.charCodeAt(index)){\n                    case 34:\n                        // \"\n                        escape = \"&quot;\";\n                        break;\n                    case 38:\n                        // &\n                        escape = \"&amp;\";\n                        break;\n                    case 39:\n                        // '\n                        escape = \"&#x27;\"; // modified from escape-html; used to be '&#39'\n                        break;\n                    case 60:\n                        // <\n                        escape = \"&lt;\";\n                        break;\n                    case 62:\n                        // >\n                        escape = \"&gt;\";\n                        break;\n                    default:\n                        continue;\n                }\n                if (lastIndex !== index) {\n                    html += str.slice(lastIndex, index);\n                }\n                lastIndex = index + 1;\n                html += escape;\n            }\n            return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n        } // end code copied and modified from escape-html\n        /**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */ function escapeTextForBrowser(text) {\n            if (typeof text === \"boolean\" || typeof text === \"number\") {\n                // this shortcircuit helps perf for types that we know will never have\n                // special characters, especially given that this function is used often\n                // for numeric dom ids.\n                return \"\" + text;\n            }\n            return escapeHtml(text);\n        }\n        var uppercasePattern = /([A-Z])/g;\n        var msPattern = /^ms-/;\n        /**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */ function hyphenateStyleName(name) {\n            return name.replace(uppercasePattern, \"-$1\").toLowerCase().replace(msPattern, \"-ms-\");\n        }\n        // and any newline or tab are filtered out as if they're not part of the URL.\n        // https://url.spec.whatwg.org/#url-parsing\n        // Tab or newline are defined as \\r\\n\\t:\n        // https://infra.spec.whatwg.org/#ascii-tab-or-newline\n        // A C0 control is a code point in the range \\u0000 NULL to \\u001F\n        // INFORMATION SEPARATOR ONE, inclusive:\n        // https://infra.spec.whatwg.org/#c0-control-or-space\n        /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n        var didWarn = false;\n        function sanitizeURL(url) {\n            // We should never have symbols here because they get filtered out elsewhere.\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var stringifiedURL = \"\" + url;\n            {\n                if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {\n                    didWarn = true;\n                    error(\"A future version of React will block javascript: URLs as a security precaution. \" + \"Use event handlers instead if you can. If you need to generate unsafe HTML try \" + \"using dangerouslySetInnerHTML instead. React was passed %s.\", JSON.stringify(stringifiedURL));\n                }\n            }\n            return url;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        // The build script is at scripts/rollup/generate-inline-fizz-runtime.js.\n        // Run `yarn generate-inline-fizz-runtime` to generate.\n        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data=\"$!\",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';\n        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=\"$!\",a.setAttribute(\"data-dgst\",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(\"/$\"===d)if(0===f)break;else f--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=\"$\"}b._reactRetry&&b._reactRetry()}};';\n        var completeBoundaryWithStyles = '$RM=new Map;\\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll(\"link[data-precedence],style[data-precedence]\"),v=[],k=0;b=h[k++];)\"not all\"===b.getAttribute(\"media\")?v.push(b):(\"LINK\"===b.tagName&&n.set(b.getAttribute(\"href\"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement(\"link\");a.href=d;a.rel=\"stylesheet\";for(a.dataset.precedence=\\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute(\"media\");!e||\"l\"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute(\"data-precedence\");a.removeAttribute(\"media\")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,\"\"),u.bind(null,r,t,\"Resource failed to load\"))};';\n        var completeSegment = \"$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};\";\n        var formReplaying = 'addEventListener(\"submit\",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute(\"formAction\");null!=f&&(e=f,b=null)}\"javascript:throw new Error(\\'A React form was unexpectedly submitted.\\')\"===e&&(a.preventDefault(),b?(a=document.createElement(\"input\"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,\\nd,b))}});';\n        function getValueDescriptorExpectingObjectForWarning(thing) {\n            return thing === null ? \"`null`\" : thing === undefined ? \"`undefined`\" : thing === \"\" ? \"an empty string\" : 'something with type \"' + typeof thing + '\"';\n        }\n        // same object across all transitions.\n        var sharedNotPendingObject = {\n            pending: false,\n            data: null,\n            method: null,\n            action: null\n        };\n        var NotPending = Object.freeze(sharedNotPendingObject);\n        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\n        var ReactDOMServerDispatcher = {\n            prefetchDNS: prefetchDNS,\n            preconnect: preconnect,\n            preload: preload,\n            preloadModule: preloadModule,\n            preinitStyle: preinitStyle,\n            preinitScript: preinitScript,\n            preinitModuleScript: preinitModuleScript\n        };\n        function prepareHostDispatcher() {\n            ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;\n        } // We make every property of the descriptor optional because it is not a contract that\n        var ScriptStreamingFormat = 0;\n        var DataStreamingFormat = 1;\n        var NothingSent = 0;\n        var SentCompleteSegmentFunction = 1;\n        var SentCompleteBoundaryFunction = 2;\n        var SentClientRenderFunction = 4;\n        var SentStyleInsertionFunction = 8;\n        var SentFormReplayingRuntime = 16; // Per request, global state that is not contextual to the rendering subtree.\n        // This cannot be resumed and therefore should only contain things that are\n        // temporary working state or are never used in the prerender pass.\n        // Credentials here are things that affect whether a browser will make a request\n        // as well as things that affect which connection the browser will use for that request.\n        // We want these to be aligned across preloads and resources because otherwise the preload\n        // will be wasted.\n        // We investigated whether referrerPolicy should be included here but from experimentation\n        // it seems that browsers do not treat this as part of the http cache key and does not affect\n        // which connection is used.\n        var EXISTS = null; // This constant is to mark preloads that have no unique credentials\n        // to convey. It should never be checked by identity and we should not\n        // assume Preload values in ResumableState equal this value because they\n        // will have come from some parsed input.\n        var PRELOAD_NO_CREDS = [];\n        {\n            Object.freeze(PRELOAD_NO_CREDS);\n        }\n        // This is resumable and therefore should be serializable.\n        var dataElementQuotedEnd = stringToPrecomputedChunk('\"></template>');\n        var startInlineScript = stringToPrecomputedChunk(\"<script>\");\n        var endInlineScript = stringToPrecomputedChunk(\"</script>\");\n        var startScriptSrc = stringToPrecomputedChunk('<script src=\"');\n        var startModuleSrc = stringToPrecomputedChunk('<script type=\"module\" src=\"');\n        var scriptNonce = stringToPrecomputedChunk('\" nonce=\"');\n        var scriptIntegirty = stringToPrecomputedChunk('\" integrity=\"');\n        var scriptCrossOrigin = stringToPrecomputedChunk('\" crossorigin=\"');\n        var endAsyncScript = stringToPrecomputedChunk('\" async=\"\"></script>');\n        /**\n * This escaping function is designed to work with bootstrapScriptContent and importMap only.\n * because we know we are escaping the entire script. We can avoid for instance\n * escaping html comment string sequences that are valid javascript as well because\n * if there are no sebsequent <script sequences the html parser will never enter\n * script data double escaped state (see: https://www.w3.org/TR/html53/syntax.html#script-data-double-escaped-state)\n *\n * While untrusted script content should be made safe before using this api it will\n * ensure that the script cannot be early terminated or never terminated state\n */ function escapeBootstrapAndImportMapScriptContent(scriptText) {\n            {\n                checkHtmlStringCoercion(scriptText);\n            }\n            return (\"\" + scriptText).replace(scriptRegex, scriptReplacer);\n        }\n        var scriptRegex = /(<\\/|<)(s)(cript)/gi;\n        var scriptReplacer = function(match, prefix, s, suffix) {\n            return \"\" + prefix + (s === \"s\" ? \"\\\\u0073\" : \"\\\\u0053\") + suffix;\n        };\n        var importMapScriptStart = stringToPrecomputedChunk('<script type=\"importmap\">');\n        var importMapScriptEnd = stringToPrecomputedChunk(\"</script>\"); // Since we store headers as strings we deal with their length in utf16 code units\n        // rather than visual characters or the utf8 encoding that is used for most binary\n        // serialization. Some common HTTP servers only allow for headers to be 4kB in length.\n        // We choose a default length that is likely to be well under this already limited length however\n        // pathological cases may still cause the utf-8 encoding of the headers to approach this limit.\n        // It should also be noted that this maximum is a soft maximum. we have not reached the limit we will\n        // allow one more header to be captured which means in practice if the limit is approached it will be exceeded\n        var DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2000; // Allows us to keep track of what we've already written so we can refer back to it.\n        // if passed externalRuntimeConfig and the enableFizzExternalRuntime feature flag\n        // is set, the server will send instructions via data attributes (instead of inline scripts)\n        function createRenderState$1(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {\n            var inlineScriptWithNonce = nonce === undefined ? startInlineScript : stringToPrecomputedChunk('<script nonce=\"' + escapeTextForBrowser(nonce) + '\">');\n            var idPrefix = resumableState.idPrefix;\n            var bootstrapChunks = [];\n            var externalRuntimeScript = null;\n            var bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;\n            if (bootstrapScriptContent !== undefined) {\n                bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapAndImportMapScriptContent(bootstrapScriptContent)), endInlineScript);\n            }\n            {\n                if (externalRuntimeConfig !== undefined) {\n                    if (typeof externalRuntimeConfig === \"string\") {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig,\n                            async: true,\n                            integrity: undefined,\n                            nonce: nonce\n                        });\n                    } else {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig.src,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig.src,\n                            async: true,\n                            integrity: externalRuntimeConfig.integrity,\n                            nonce: nonce\n                        });\n                    }\n                }\n            }\n            var importMapChunks = [];\n            if (importMap !== undefined) {\n                var map = importMap;\n                importMapChunks.push(importMapScriptStart);\n                importMapChunks.push(stringToChunk(escapeBootstrapAndImportMapScriptContent(JSON.stringify(map))));\n                importMapChunks.push(importMapScriptEnd);\n            }\n            {\n                if (onHeaders && typeof maxHeadersLength === \"number\") {\n                    if (maxHeadersLength <= 0) {\n                        error(\"React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.\", maxHeadersLength === 0 ? \"zero\" : maxHeadersLength);\n                    }\n                }\n            }\n            var headers = onHeaders ? {\n                preconnects: \"\",\n                fontPreloads: \"\",\n                highImagePreloads: \"\",\n                remainingCapacity: typeof maxHeadersLength === \"number\" ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS\n            } : null;\n            var renderState = {\n                placeholderPrefix: stringToPrecomputedChunk(idPrefix + \"P:\"),\n                segmentPrefix: stringToPrecomputedChunk(idPrefix + \"S:\"),\n                boundaryPrefix: stringToPrecomputedChunk(idPrefix + \"B:\"),\n                startInlineScript: inlineScriptWithNonce,\n                htmlChunks: null,\n                headChunks: null,\n                externalRuntimeScript: externalRuntimeScript,\n                bootstrapChunks: bootstrapChunks,\n                onHeaders: onHeaders,\n                headers: headers,\n                resets: {\n                    font: {},\n                    dns: {},\n                    connect: {\n                        default: {},\n                        anonymous: {},\n                        credentials: {}\n                    },\n                    image: {},\n                    style: {}\n                },\n                charsetChunks: [],\n                preconnectChunks: [],\n                importMapChunks: importMapChunks,\n                preloadChunks: [],\n                hoistableChunks: [],\n                // cleared on flush\n                preconnects: new Set(),\n                fontPreloads: new Set(),\n                highImagePreloads: new Set(),\n                // usedImagePreloads: new Set(),\n                styles: new Map(),\n                bootstrapScripts: new Set(),\n                scripts: new Set(),\n                bulkPreloads: new Set(),\n                preloads: {\n                    images: new Map(),\n                    stylesheets: new Map(),\n                    scripts: new Map(),\n                    moduleScripts: new Map()\n                },\n                nonce: nonce,\n                // like a module global for currently rendering boundary\n                boundaryResources: null,\n                stylesToHoist: false\n            };\n            if (bootstrapScripts !== undefined) {\n                for(var i = 0; i < bootstrapScripts.length; i++){\n                    var scriptConfig = bootstrapScripts[i];\n                    var src = void 0, crossOrigin = void 0, integrity = void 0;\n                    var props = {\n                        rel: \"preload\",\n                        as: \"script\",\n                        fetchPriority: \"low\",\n                        nonce: nonce\n                    };\n                    if (typeof scriptConfig === \"string\") {\n                        props.href = src = scriptConfig;\n                    } else {\n                        props.href = src = scriptConfig.src;\n                        props.integrity = integrity = typeof scriptConfig.integrity === \"string\" ? scriptConfig.integrity : undefined;\n                        props.crossOrigin = crossOrigin = typeof scriptConfig === \"string\" || scriptConfig.crossOrigin == null ? undefined : scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    }\n                    preloadBootstrapScriptOrModule(resumableState, renderState, src, props);\n                    bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (typeof integrity === \"string\") {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));\n                    }\n                    if (typeof crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            if (bootstrapModules !== undefined) {\n                for(var _i = 0; _i < bootstrapModules.length; _i++){\n                    var _scriptConfig = bootstrapModules[_i];\n                    var _src = void 0, _crossOrigin = void 0, _integrity = void 0;\n                    var _props = {\n                        rel: \"modulepreload\",\n                        fetchPriority: \"low\",\n                        nonce: nonce\n                    };\n                    if (typeof _scriptConfig === \"string\") {\n                        _props.href = _src = _scriptConfig;\n                    } else {\n                        _props.href = _src = _scriptConfig.src;\n                        _props.integrity = _integrity = typeof _scriptConfig.integrity === \"string\" ? _scriptConfig.integrity : undefined;\n                        _props.crossOrigin = _crossOrigin = typeof _scriptConfig === \"string\" || _scriptConfig.crossOrigin == null ? undefined : _scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    }\n                    preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);\n                    bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (typeof _integrity === \"string\") {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));\n                    }\n                    if (typeof _crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            return renderState;\n        }\n        function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {\n            var idPrefix = identifierPrefix === undefined ? \"\" : identifierPrefix;\n            var streamingFormat = ScriptStreamingFormat;\n            {\n                if (externalRuntimeConfig !== undefined) {\n                    streamingFormat = DataStreamingFormat;\n                }\n            }\n            return {\n                idPrefix: idPrefix,\n                nextFormID: 0,\n                streamingFormat: streamingFormat,\n                bootstrapScriptContent: bootstrapScriptContent,\n                bootstrapScripts: bootstrapScripts,\n                bootstrapModules: bootstrapModules,\n                instructions: NothingSent,\n                hasBody: false,\n                hasHtml: false,\n                // @TODO add bootstrap script to implicit preloads\n                // persistent\n                unknownResources: {},\n                dnsResources: {},\n                connectResources: {\n                    default: {},\n                    anonymous: {},\n                    credentials: {}\n                },\n                imageResources: {},\n                styleResources: {},\n                scriptResources: {},\n                moduleUnknownResources: {},\n                moduleScriptResources: {}\n            };\n        }\n        // modes. We only include the variants as they matter for the sake of our purposes.\n        // We don't actually provide the namespace therefore we use constants instead of the string.\n        var ROOT_HTML_MODE = 0; // Used for the root most element tag.\n        // We have a less than HTML_HTML_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        var HTML_HTML_MODE = 1; // Used for the <html> if it is at the top level.\n        var HTML_MODE = 2;\n        var SVG_MODE = 3;\n        var MATHML_MODE = 4;\n        var HTML_TABLE_MODE = 5;\n        var HTML_TABLE_BODY_MODE = 6;\n        var HTML_TABLE_ROW_MODE = 7;\n        var HTML_COLGROUP_MODE = 8; // We have a greater than HTML_TABLE_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        var NO_SCOPE = /*         */ 0;\n        var NOSCRIPT_SCOPE = /*   */ 1;\n        var PICTURE_SCOPE = /*    */ 2; // Lets us keep track of contextual state and pick it back up after suspending.\n        function createFormatContext(insertionMode, selectedValue, tagScope) {\n            return {\n                insertionMode: insertionMode,\n                selectedValue: selectedValue,\n                tagScope: tagScope\n            };\n        }\n        function createRootFormatContext(namespaceURI) {\n            var insertionMode = namespaceURI === \"http://www.w3.org/2000/svg\" ? SVG_MODE : namespaceURI === \"http://www.w3.org/1998/Math/MathML\" ? MATHML_MODE : ROOT_HTML_MODE;\n            return createFormatContext(insertionMode, null, NO_SCOPE);\n        }\n        function getChildFormatContext(parentContext, type, props) {\n            switch(type){\n                case \"noscript\":\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);\n                case \"select\":\n                    return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);\n                case \"svg\":\n                    return createFormatContext(SVG_MODE, null, parentContext.tagScope);\n                case \"picture\":\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);\n                case \"math\":\n                    return createFormatContext(MATHML_MODE, null, parentContext.tagScope);\n                case \"foreignObject\":\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n                // Table parents are special in that their children can only be created at all if they're\n                // wrapped in a table parent. So we need to encode that we're entering this mode.\n                case \"table\":\n                    return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);\n                case \"thead\":\n                case \"tbody\":\n                case \"tfoot\":\n                    return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);\n                case \"colgroup\":\n                    return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);\n                case \"tr\":\n                    return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);\n            }\n            if (parentContext.insertionMode >= HTML_TABLE_MODE) {\n                // Whatever tag this was, it wasn't a table parent or other special parent, so we must have\n                // entered plain HTML again.\n                return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n            }\n            if (parentContext.insertionMode === ROOT_HTML_MODE) {\n                if (type === \"html\") {\n                    // We've emitted the root and is now in <html> mode.\n                    return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);\n                } else {\n                    // We've emitted the root and is now in plain HTML mode.\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n                }\n            } else if (parentContext.insertionMode === HTML_HTML_MODE) {\n                // We've emitted the document element and is now in plain HTML mode.\n                return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n            }\n            return parentContext;\n        }\n        function makeId(resumableState, treeId, localId) {\n            var idPrefix = resumableState.idPrefix;\n            var id = \":\" + idPrefix + \"R\" + treeId; // Unless this is the first id at this level, append a number at the end\n            // that represents the position of this useId hook among all the useId\n            // hooks for this fiber.\n            if (localId > 0) {\n                id += \"H\" + localId.toString(32);\n            }\n            return id + \":\";\n        }\n        function encodeHTMLTextNode(text) {\n            return escapeTextForBrowser(text);\n        }\n        var textSeparator = stringToPrecomputedChunk(\"<!-- -->\");\n        function pushTextInstance$1(target, text, renderState, textEmbedded) {\n            if (text === \"\") {\n                // Empty text doesn't have a DOM node representation and the hydration is aware of this.\n                return textEmbedded;\n            }\n            if (textEmbedded) {\n                target.push(textSeparator);\n            }\n            target.push(stringToChunk(encodeHTMLTextNode(text)));\n            return true;\n        } // Called when Fizz is done with a Segment. Currently the only purpose is to conditionally\n        // emit a text separator when we don't know for sure it is safe to omit\n        function pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded) {\n            if (lastPushedText && textEmbedded) {\n                target.push(textSeparator);\n            }\n        }\n        var styleNameCache = new Map();\n        function processStyleName(styleName) {\n            var chunk = styleNameCache.get(styleName);\n            if (chunk !== undefined) {\n                return chunk;\n            }\n            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));\n            styleNameCache.set(styleName, result);\n            return result;\n        }\n        var styleAttributeStart = stringToPrecomputedChunk(' style=\"');\n        var styleAssign = stringToPrecomputedChunk(\":\");\n        var styleSeparator = stringToPrecomputedChunk(\";\");\n        function pushStyleAttribute(target, style) {\n            if (typeof style !== \"object\") {\n                throw new Error(\"The `style` prop expects a mapping from style properties to values, \" + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + \"using JSX.\");\n            }\n            var isFirst = true;\n            for(var styleName in style){\n                if (!hasOwnProperty.call(style, styleName)) {\n                    continue;\n                } // If you provide unsafe user data here they can inject arbitrary CSS\n                // which may be problematic (I couldn't repro this):\n                // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n                // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n                // This is not an XSS hole but instead a potential CSS injection issue\n                // which has lead to a greater discussion about how we're going to\n                // trust URLs moving forward. See #2115901\n                var styleValue = style[styleName];\n                if (styleValue == null || typeof styleValue === \"boolean\" || styleValue === \"\") {\n                    continue;\n                }\n                var nameChunk = void 0;\n                var valueChunk = void 0;\n                var isCustomProperty = styleName.indexOf(\"--\") === 0;\n                if (isCustomProperty) {\n                    nameChunk = stringToChunk(escapeTextForBrowser(styleName));\n                    {\n                        checkCSSPropertyStringCoercion(styleValue, styleName);\n                    }\n                    valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                } else {\n                    {\n                        warnValidStyle(styleName, styleValue);\n                    }\n                    nameChunk = processStyleName(styleName);\n                    if (typeof styleValue === \"number\") {\n                        if (styleValue !== 0 && !isUnitlessNumber(styleName)) {\n                            valueChunk = stringToChunk(styleValue + \"px\"); // Presumes implicit 'px' suffix for unitless numbers\n                        } else {\n                            valueChunk = stringToChunk(\"\" + styleValue);\n                        }\n                    } else {\n                        {\n                            checkCSSPropertyStringCoercion(styleValue, styleName);\n                        }\n                        valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                    }\n                }\n                if (isFirst) {\n                    isFirst = false; // If it's first, we don't need any separators prefixed.\n                    target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);\n                } else {\n                    target.push(styleSeparator, nameChunk, styleAssign, valueChunk);\n                }\n            }\n            if (!isFirst) {\n                target.push(attributeEnd);\n            }\n        }\n        var attributeSeparator = stringToPrecomputedChunk(\" \");\n        var attributeAssign = stringToPrecomputedChunk('=\"');\n        var attributeEnd = stringToPrecomputedChunk('\"');\n        var attributeEmptyString = stringToPrecomputedChunk('=\"\"');\n        function pushBooleanAttribute(target, name, value) {\n            if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n            }\n        }\n        function pushStringAttribute(target, name, value) {\n            if (typeof value !== \"function\" && typeof value !== \"symbol\" && typeof value !== \"boolean\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n            }\n        }\n        function makeFormFieldPrefix(resumableState) {\n            var id = resumableState.nextFormID++;\n            return resumableState.idPrefix + id;\n        } // Since this will likely be repeated a lot in the HTML, we use a more concise message\n        // than on the client and hopefully it's googleable.\n        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(\"javascript:throw new Error('A React form was unexpectedly submitted.')\"));\n        var startHiddenInputChunk = stringToPrecomputedChunk('<input type=\"hidden\"');\n        function pushAdditionalFormField(value, key) {\n            var target = this;\n            target.push(startHiddenInputChunk);\n            if (typeof value !== \"string\") {\n                throw new Error(\"File/Blob fields are not yet supported in progressive forms. \" + \"It probably means you are closing over binary data or FormData in a Server Action.\");\n            }\n            pushStringAttribute(target, \"name\", key);\n            pushStringAttribute(target, \"value\", value);\n            target.push(endOfStartTagSelfClosing);\n        }\n        function pushAdditionalFormFields(target, formData) {\n            if (formData !== null) {\n                // $FlowFixMe[prop-missing]: FormData has forEach.\n                formData.forEach(pushAdditionalFormField, target);\n            }\n        }\n        function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {\n            var formData = null;\n            if (typeof formAction === \"function\") {\n                // Function form actions cannot control the form properties\n                {\n                    if (name !== null && !didWarnFormActionName) {\n                        didWarnFormActionName = true;\n                        error('Cannot specify a \"name\" prop for a button that specifies a function as a formAction. ' + \"React needs it to encode which action should be invoked. It will get overridden.\");\n                    }\n                    if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n                        didWarnFormActionMethod = true;\n                        error(\"Cannot specify a formEncType or formMethod for a button that specifies a \" + \"function as a formAction. React provides those automatically. They will get overridden.\");\n                    }\n                    if (formTarget !== null && !didWarnFormActionTarget) {\n                        didWarnFormActionTarget = true;\n                        error(\"Cannot specify a formTarget for a button that specifies a function as a formAction. \" + \"The function will always be executed in the same window.\");\n                    }\n                }\n                var customAction = formAction.$$FORM_ACTION;\n                if (typeof customAction === \"function\") {\n                    // This action has a custom progressive enhancement form that can submit the form\n                    // back to the server if it's invoked before hydration. Such as a Server Action.\n                    var prefix = makeFormFieldPrefix(resumableState);\n                    var customFields = formAction.$$FORM_ACTION(prefix);\n                    name = customFields.name;\n                    formAction = customFields.action || \"\";\n                    formEncType = customFields.encType;\n                    formMethod = customFields.method;\n                    formTarget = customFields.target;\n                    formData = customFields.data;\n                } else {\n                    // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n                    // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n                    // manually submitted or if someone calls stopPropagation before React gets the event.\n                    // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n                    // error message but the URL will be logged.\n                    target.push(attributeSeparator, stringToChunk(\"formAction\"), attributeAssign, actionJavaScriptURL, attributeEnd);\n                    name = null;\n                    formAction = null;\n                    formEncType = null;\n                    formMethod = null;\n                    formTarget = null;\n                    injectFormReplayingRuntime(resumableState, renderState);\n                }\n            }\n            if (name != null) {\n                pushAttribute(target, \"name\", name);\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"formAction\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"formEncType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"formMethod\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"formTarget\", formTarget);\n            }\n            return formData;\n        }\n        function pushAttribute(target, name, value) {\n            switch(name){\n                // These are very common props and therefore are in the beginning of the switch.\n                // TODO: aria-label is a very common prop but allows booleans so is not like the others\n                // but should ideally go in this list too.\n                case \"className\":\n                    {\n                        pushStringAttribute(target, \"class\", value);\n                        break;\n                    }\n                case \"tabIndex\":\n                    {\n                        pushStringAttribute(target, \"tabindex\", value);\n                        break;\n                    }\n                case \"dir\":\n                case \"role\":\n                case \"viewBox\":\n                case \"width\":\n                case \"height\":\n                    {\n                        pushStringAttribute(target, name, value);\n                        break;\n                    }\n                case \"style\":\n                    {\n                        pushStyleAttribute(target, value);\n                        return;\n                    }\n                case \"src\":\n                case \"href\":\n                // Fall through to the last case which shouldn't remove empty strings.\n                case \"action\":\n                case \"formAction\":\n                    {\n                        // TODO: Consider only special casing these for each tag.\n                        if (value == null || typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"defaultValue\":\n                case \"defaultChecked\":\n                case \"innerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                    // Ignored. These are built-in to React on the client.\n                    return;\n                case \"autoFocus\":\n                case \"multiple\":\n                case \"muted\":\n                    {\n                        pushBooleanAttribute(target, name.toLowerCase(), value);\n                        return;\n                    }\n                case \"xlinkHref\":\n                    {\n                        if (typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var _sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(\"xlink:href\"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"contentEditable\":\n                case \"spellCheck\":\n                case \"draggable\":\n                case \"value\":\n                case \"autoReverse\":\n                case \"externalResourcesRequired\":\n                case \"focusable\":\n                case \"preserveAlpha\":\n                    {\n                        // Booleanish String\n                        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n                        // In React, we let users pass `true` and `false` even though technically\n                        // these aren't boolean attributes (they are coerced to strings).\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"allowFullScreen\":\n                case \"async\":\n                case \"autoPlay\":\n                case \"controls\":\n                case \"default\":\n                case \"defer\":\n                case \"disabled\":\n                case \"disablePictureInPicture\":\n                case \"disableRemotePlayback\":\n                case \"formNoValidate\":\n                case \"hidden\":\n                case \"loop\":\n                case \"noModule\":\n                case \"noValidate\":\n                case \"open\":\n                case \"playsInline\":\n                case \"readOnly\":\n                case \"required\":\n                case \"reversed\":\n                case \"scoped\":\n                case \"seamless\":\n                case \"itemScope\":\n                    {\n                        // Boolean\n                        if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        }\n                        return;\n                    }\n                case \"capture\":\n                case \"download\":\n                    {\n                        // Overloaded Boolean\n                        if (value === true) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        } else if (value === false) ;\n                        else if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"cols\":\n                case \"rows\":\n                case \"size\":\n                case \"span\":\n                    {\n                        // These are HTML attributes that must be positive numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value) && value >= 1) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"rowSpan\":\n                case \"start\":\n                    {\n                        // These are HTML attributes that must be numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value)) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"xlinkActuate\":\n                    pushStringAttribute(target, \"xlink:actuate\", value);\n                    return;\n                case \"xlinkArcrole\":\n                    pushStringAttribute(target, \"xlink:arcrole\", value);\n                    return;\n                case \"xlinkRole\":\n                    pushStringAttribute(target, \"xlink:role\", value);\n                    return;\n                case \"xlinkShow\":\n                    pushStringAttribute(target, \"xlink:show\", value);\n                    return;\n                case \"xlinkTitle\":\n                    pushStringAttribute(target, \"xlink:title\", value);\n                    return;\n                case \"xlinkType\":\n                    pushStringAttribute(target, \"xlink:type\", value);\n                    return;\n                case \"xmlBase\":\n                    pushStringAttribute(target, \"xml:base\", value);\n                    return;\n                case \"xmlLang\":\n                    pushStringAttribute(target, \"xml:lang\", value);\n                    return;\n                case \"xmlSpace\":\n                    pushStringAttribute(target, \"xml:space\", value);\n                    return;\n                default:\n                    if (// We have already filtered out null/undefined and reserved words.\n                    name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                        return;\n                    }\n                    var attributeName = getAttributeAlias(name);\n                    if (isAttributeNameSafe(attributeName)) {\n                        // shouldRemoveAttribute\n                        switch(typeof value){\n                            case \"function\":\n                            case \"symbol\":\n                                // eslint-disable-line\n                                return;\n                            case \"boolean\":\n                                {\n                                    var prefix = attributeName.toLowerCase().slice(0, 5);\n                                    if (prefix !== \"data-\" && prefix !== \"aria-\") {\n                                        return;\n                                    }\n                                }\n                        }\n                        target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                    }\n            }\n        }\n        var endOfStartTag = stringToPrecomputedChunk(\">\");\n        var endOfStartTagSelfClosing = stringToPrecomputedChunk(\"/>\");\n        function pushInnerHTML(target, innerHTML, children) {\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    {\n                        checkHtmlStringCoercion(html);\n                    }\n                    target.push(stringToChunk(\"\" + html));\n                }\n            }\n        } // TODO: Move these to RenderState so that we warn for every request.\n        // It would help debugging in stateful servers (e.g. service worker).\n        var didWarnDefaultInputValue = false;\n        var didWarnDefaultChecked = false;\n        var didWarnDefaultSelectValue = false;\n        var didWarnDefaultTextareaValue = false;\n        var didWarnInvalidOptionChildren = false;\n        var didWarnInvalidOptionInnerHTML = false;\n        var didWarnSelectedSetOnOption = false;\n        var didWarnFormActionType = false;\n        var didWarnFormActionName = false;\n        var didWarnFormActionTarget = false;\n        var didWarnFormActionMethod = false;\n        function checkSelectProp(props, propName) {\n            {\n                var value = props[propName];\n                if (value != null) {\n                    var array = isArray(value);\n                    if (props.multiple && !array) {\n                        error(\"The `%s` prop supplied to <select> must be an array if \" + \"`multiple` is true.\", propName);\n                    } else if (!props.multiple && array) {\n                        error(\"The `%s` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\", propName);\n                    }\n                }\n            }\n        }\n        function pushStartSelect(target, props) {\n            {\n                checkControlledValueProps(\"select\", props);\n                checkSelectProp(props, \"value\");\n                checkSelectProp(props, \"defaultValue\");\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {\n                    error(\"Select elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled select \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultSelectValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"select\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            // TODO: This doesn't really make sense for select since it can't use the controlled\n                            // value in the innerHTML.\n                            innerHTML = propValue;\n                            break;\n                        case \"defaultValue\":\n                        case \"value\":\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        function flattenOptionChildren(children) {\n            var content = \"\"; // Flatten children and warn if they aren't strings or numbers;\n            // invalid types are ignored.\n            React.Children.forEach(children, function(child) {\n                if (child == null) {\n                    return;\n                }\n                content += child;\n                {\n                    if (!didWarnInvalidOptionChildren && typeof child !== \"string\" && typeof child !== \"number\") {\n                        didWarnInvalidOptionChildren = true;\n                        error(\"Cannot infer the option value of complex children. \" + \"Pass a `value` prop or use a plain string as children to <option>.\");\n                    }\n                }\n            });\n            return content;\n        }\n        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=\"\"');\n        function pushStartOption(target, props, formatContext) {\n            var selectedValue = formatContext.selectedValue;\n            target.push(startChunkForTag(\"option\"));\n            var children = null;\n            var value = null;\n            var selected = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"selected\":\n                            // ignore\n                            selected = propValue;\n                            {\n                                // TODO: Remove support for `selected` in <option>.\n                                if (!didWarnSelectedSetOnOption) {\n                                    error(\"Use the `defaultValue` or `value` props on <select> instead of \" + \"setting `selected` on <option>.\");\n                                    didWarnSelectedSetOnOption = true;\n                                }\n                            }\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                        // We intentionally fallthrough to also set the attribute on the node.\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (selectedValue != null) {\n                var stringValue;\n                if (value !== null) {\n                    {\n                        checkAttributeStringCoercion(value, \"value\");\n                    }\n                    stringValue = \"\" + value;\n                } else {\n                    {\n                        if (innerHTML !== null) {\n                            if (!didWarnInvalidOptionInnerHTML) {\n                                didWarnInvalidOptionInnerHTML = true;\n                                error(\"Pass a `value` prop if you set dangerouslyInnerHTML so React knows \" + \"which value should be selected.\");\n                            }\n                        }\n                    }\n                    stringValue = flattenOptionChildren(children);\n                }\n                if (isArray(selectedValue)) {\n                    // multiple\n                    for(var i = 0; i < selectedValue.length; i++){\n                        {\n                            checkAttributeStringCoercion(selectedValue[i], \"value\");\n                        }\n                        var v = \"\" + selectedValue[i];\n                        if (v === stringValue) {\n                            target.push(selectedMarkerAttribute);\n                            break;\n                        }\n                    }\n                } else {\n                    {\n                        checkAttributeStringCoercion(selectedValue, \"select.value\");\n                    }\n                    if (\"\" + selectedValue === stringValue) {\n                        target.push(selectedMarkerAttribute);\n                    }\n                }\n            } else if (selected) {\n                target.push(selectedMarkerAttribute);\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);\n        function injectFormReplayingRuntime(resumableState, renderState) {\n            // If we haven't sent it yet, inject the runtime that tracks submitted JS actions\n            // for later replaying by Fiber. If we use an external runtime, we don't need\n            // to emit anything. It's always used.\n            if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && !renderState.externalRuntimeScript) {\n                resumableState.instructions |= SentFormReplayingRuntime;\n                renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);\n            }\n        }\n        var formStateMarkerIsMatching = stringToPrecomputedChunk(\"<!--F!-->\");\n        var formStateMarkerIsNotMatching = stringToPrecomputedChunk(\"<!--F-->\");\n        function pushFormStateMarkerIsMatching(target) {\n            target.push(formStateMarkerIsMatching);\n        }\n        function pushFormStateMarkerIsNotMatching(target) {\n            target.push(formStateMarkerIsNotMatching);\n        }\n        function pushStartForm(target, props, resumableState, renderState) {\n            target.push(startChunkForTag(\"form\"));\n            var children = null;\n            var innerHTML = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"action\":\n                            formAction = propValue;\n                            break;\n                        case \"encType\":\n                            formEncType = propValue;\n                            break;\n                        case \"method\":\n                            formMethod = propValue;\n                            break;\n                        case \"target\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            var formData = null;\n            var formActionName = null;\n            if (typeof formAction === \"function\") {\n                // Function form actions cannot control the form properties\n                {\n                    if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n                        didWarnFormActionMethod = true;\n                        error(\"Cannot specify a encType or method for a form that specifies a \" + \"function as the action. React provides those automatically. \" + \"They will get overridden.\");\n                    }\n                    if (formTarget !== null && !didWarnFormActionTarget) {\n                        didWarnFormActionTarget = true;\n                        error(\"Cannot specify a target for a form that specifies a function as the action. \" + \"The function will always be executed in the same window.\");\n                    }\n                }\n                var customAction = formAction.$$FORM_ACTION;\n                if (typeof customAction === \"function\") {\n                    // This action has a custom progressive enhancement form that can submit the form\n                    // back to the server if it's invoked before hydration. Such as a Server Action.\n                    var prefix = makeFormFieldPrefix(resumableState);\n                    var customFields = formAction.$$FORM_ACTION(prefix);\n                    formAction = customFields.action || \"\";\n                    formEncType = customFields.encType;\n                    formMethod = customFields.method;\n                    formTarget = customFields.target;\n                    formData = customFields.data;\n                    formActionName = customFields.name;\n                } else {\n                    // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n                    // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n                    // manually submitted or if someone calls stopPropagation before React gets the event.\n                    // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n                    // error message but the URL will be logged.\n                    target.push(attributeSeparator, stringToChunk(\"action\"), attributeAssign, actionJavaScriptURL, attributeEnd);\n                    formAction = null;\n                    formEncType = null;\n                    formMethod = null;\n                    formTarget = null;\n                    injectFormReplayingRuntime(resumableState, renderState);\n                }\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"action\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"encType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"method\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"target\", formTarget);\n            }\n            target.push(endOfStartTag);\n            if (formActionName !== null) {\n                target.push(startHiddenInputChunk);\n                pushStringAttribute(target, \"name\", formActionName);\n                target.push(endOfStartTagSelfClosing);\n                pushAdditionalFormFields(target, formData);\n            }\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushInput(target, props, resumableState, renderState) {\n            {\n                checkControlledValueProps(\"input\", props);\n            }\n            target.push(startChunkForTag(\"input\"));\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            var value = null;\n            var defaultValue = null;\n            var checked = null;\n            var defaultChecked = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"input\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        case \"defaultChecked\":\n                            defaultChecked = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"checked\":\n                            checked = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type !== \"image\" && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('An input can only specify a formAction along with type=\"submit\" or type=\"image\".');\n                }\n            }\n            var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n            {\n                if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {\n                    error(\"%s contains an input of type %s with both checked and defaultChecked props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the checked prop, or the defaultChecked prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultChecked = true;\n                }\n                if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {\n                    error(\"%s contains an input of type %s with both value and defaultValue props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultInputValue = true;\n                }\n            }\n            if (checked !== null) {\n                pushBooleanAttribute(target, \"checked\", checked);\n            } else if (defaultChecked !== null) {\n                pushBooleanAttribute(target, \"checked\", defaultChecked);\n            }\n            if (value !== null) {\n                pushAttribute(target, \"value\", value);\n            } else if (defaultValue !== null) {\n                pushAttribute(target, \"value\", defaultValue);\n            }\n            target.push(endOfStartTagSelfClosing); // We place any additional hidden form fields after the input.\n            pushAdditionalFormFields(target, formData);\n            return null;\n        }\n        function pushStartButton(target, props, resumableState, renderState) {\n            target.push(startChunkForTag(\"button\"));\n            var children = null;\n            var innerHTML = null;\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type != null && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('A button can only specify a formAction along with type=\"submit\" or no type.');\n                }\n            }\n            var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n            target.push(endOfStartTag); // We place any additional hidden form fields we need to include inside the button itself.\n            pushAdditionalFormFields(target, formData);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartTextArea(target, props) {\n            {\n                checkControlledValueProps(\"textarea\", props);\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {\n                    error(\"Textarea elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled textarea \" + \"and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultTextareaValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"textarea\"));\n            var value = null;\n            var defaultValue = null;\n            var children = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"`dangerouslySetInnerHTML` does not make sense on <textarea>.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (value === null && defaultValue !== null) {\n                value = defaultValue;\n            }\n            target.push(endOfStartTag); // TODO (yungsters): Remove support for children content in <textarea>.\n            if (children != null) {\n                {\n                    error(\"Use the `defaultValue` or `value` props instead of setting \" + \"children on <textarea>.\");\n                }\n                if (value != null) {\n                    throw new Error(\"If you supply `defaultValue` on a <textarea>, do not pass children.\");\n                }\n                if (isArray(children)) {\n                    if (children.length > 1) {\n                        throw new Error(\"<textarea> can only have at most one child.\");\n                    } // TODO: remove the coercion and the DEV check below because it will\n                    // always be overwritten by the coercion several lines below it. #22309\n                    {\n                        checkHtmlStringCoercion(children[0]);\n                    }\n                    value = \"\" + children[0];\n                }\n                {\n                    checkHtmlStringCoercion(children);\n                }\n                value = \"\" + children;\n            }\n            if (typeof value === \"string\" && value[0] === \"\\n\") {\n                // text/html ignores the first character in these tags if it's a newline\n                // Prefer to break application/xml over text/html (for now) by adding\n                // a newline specifically to get eaten by the parser. (Alternately for\n                // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n                // \\r is normalized out by HTMLTextAreaElement#value.)\n                // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n                // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n                // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n                // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n                //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n                target.push(leadingNewline);\n            } // ToString and push directly instead of recurse over children.\n            // We don't really support complex children in the value anyway.\n            // This also currently avoids a trailing comment node which breaks textarea.\n            if (value !== null) {\n                {\n                    checkAttributeStringCoercion(value, \"value\");\n                }\n                target.push(stringToChunk(encodeHTMLTextNode(\"\" + value)));\n            }\n            return null;\n        }\n        function pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    return pushSelfClosing(target, props, \"meta\");\n                } else {\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    if (typeof props.charSet === \"string\") {\n                        return pushSelfClosing(renderState.charsetChunks, props, \"meta\");\n                    } else if (props.name === \"viewport\") {\n                        // \"viewport\" isn't related to preconnect but it has the right priority\n                        return pushSelfClosing(renderState.preconnectChunks, props, \"meta\");\n                    } else {\n                        return pushSelfClosing(renderState.hoistableChunks, props, \"meta\");\n                    }\n                }\n            }\n        }\n        function pushLink(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var rel = props.rel;\n                var href = props.href;\n                var precedence = props.precedence;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    {\n                        if (rel === \"stylesheet\" && typeof props.precedence === \"string\") {\n                            if (typeof href !== \"string\" || !href) {\n                                error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));\n                            }\n                        }\n                    }\n                    pushLinkImpl(target, props);\n                    return null;\n                }\n                if (props.rel === \"stylesheet\") {\n                    // This <link> may hoistable as a Stylesheet Resource, otherwise it will emit in place\n                    var key = getResourceKey(href);\n                    if (typeof precedence !== \"string\" || props.disabled != null || props.onLoad || props.onError) {\n                        // This stylesheet is either not opted into Resource semantics or has conflicting properties which\n                        // disqualify it for such. We can still create a preload resource to help it load faster on the\n                        // client\n                        {\n                            if (typeof precedence === \"string\") {\n                                if (props.disabled != null) {\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');\n                                } else if (props.onLoad || props.onError) {\n                                    var propDescription = props.onLoad && props.onError ? \"`onLoad` and `onError` props\" : props.onLoad ? \"`onLoad` prop\" : \"`onError` prop\";\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);\n                                }\n                            }\n                        }\n                        return pushLinkImpl(target, props);\n                    } else {\n                        // This stylesheet refers to a Resource and we create a new one if necessary\n                        var styleQueue = renderState.styles.get(precedence);\n                        var hasKey = resumableState.styleResources.hasOwnProperty(key);\n                        var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n                        if (resourceState !== EXISTS) {\n                            // We are going to create this resource now so it is marked as Exists\n                            resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n                            // to create a StyleQueue\n                            if (!styleQueue) {\n                                styleQueue = {\n                                    precedence: stringToChunk(escapeTextForBrowser(precedence)),\n                                    rules: [],\n                                    hrefs: [],\n                                    sheets: new Map()\n                                };\n                                renderState.styles.set(precedence, styleQueue);\n                            }\n                            var resource = {\n                                state: PENDING$1,\n                                props: stylesheetPropsFromRawProps(props)\n                            };\n                            if (resourceState) {\n                                // When resourceState is truty it is a Preload state. We cast it for clarity\n                                var preloadState = resourceState;\n                                if (preloadState.length === 2) {\n                                    adoptPreloadCredentials(resource.props, preloadState);\n                                }\n                                var preloadResource = renderState.preloads.stylesheets.get(key);\n                                if (preloadResource && preloadResource.length > 0) {\n                                    // The Preload for this resource was created in this render pass and has not flushed yet so\n                                    // we need to clear it to avoid it flushing.\n                                    preloadResource.length = 0;\n                                } else {\n                                    // Either the preload resource from this render already flushed in this render pass\n                                    // or the preload flushed in a prior pass (prerender). In either case we need to mark\n                                    // this resource as already having been preloaded.\n                                    resource.state = PRELOADED;\n                                }\n                            } // We add the newly created resource to our StyleQueue and if necessary\n                            // track the resource with the currently rendering boundary\n                            styleQueue.sheets.set(key, resource);\n                            if (renderState.boundaryResources) {\n                                renderState.boundaryResources.stylesheets.add(resource);\n                            }\n                        } else {\n                            // We need to track whether this boundary should wait on this resource or not.\n                            // Typically this resource should always exist since we either had it or just created\n                            // it. However, it's possible when you resume that the style has already been emitted\n                            // and then it wouldn't be recreated in the RenderState and there's no need to track\n                            // it again since we should've hoisted it to the shell already.\n                            if (styleQueue) {\n                                var _resource = styleQueue.sheets.get(key);\n                                if (_resource) {\n                                    if (renderState.boundaryResources) {\n                                        renderState.boundaryResources.stylesheets.add(_resource);\n                                    }\n                                }\n                            }\n                        }\n                        if (textEmbedded) {\n                            // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                            // to be safe and assume text will follow by inserting a textSeparator\n                            target.push(textSeparator);\n                        }\n                        return null;\n                    }\n                } else if (props.onLoad || props.onError) {\n                    // When using load handlers we cannot hoist and need to emit links in place\n                    return pushLinkImpl(target, props);\n                } else {\n                    // We can hoist this link so we may need to emit a text separator.\n                    // @TODO refactor text separators so we don't have to defensively add\n                    // them when we don't end up emitting a tag as a result of pushStartInstance\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    switch(props.rel){\n                        case \"preconnect\":\n                        case \"dns-prefetch\":\n                            return pushLinkImpl(renderState.preconnectChunks, props);\n                        case \"preload\":\n                            return pushLinkImpl(renderState.preloadChunks, props);\n                        default:\n                            return pushLinkImpl(renderState.hoistableChunks, props);\n                    }\n                }\n            }\n        }\n        function pushLinkImpl(target, props) {\n            target.push(startChunkForTag(\"link\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStyle(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (typeof child === \"function\" || typeof child === \"symbol\" || Array.isArray(child)) {\n                        var childType = typeof child === \"function\" ? \"a Function\" : typeof child === \"symbol\" ? \"a Sybmol\" : \"an Array\";\n                        error(\"React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. \" + \"In browsers style Elements can only have `Text` Nodes as children.\", childType);\n                    }\n                }\n            }\n            {\n                var precedence = props.precedence;\n                var href = props.href;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    // This style tag is not able to be turned into a Style Resource\n                    return pushStyleImpl(target, props);\n                }\n                {\n                    if (href.includes(\" \")) {\n                        error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is \"%s\".', href);\n                    }\n                }\n                var key = getResourceKey(href);\n                var styleQueue = renderState.styles.get(precedence);\n                var hasKey = resumableState.styleResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.styleResources[key] = EXISTS;\n                    {\n                        if (resourceState) {\n                            error('React encountered a hoistable style tag for the same href as a preload: \"%s\". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);\n                        }\n                    }\n                    if (!styleQueue) {\n                        // This is the first time we've encountered this precedence we need\n                        // to create a StyleQueue.\n                        styleQueue = {\n                            precedence: stringToChunk(escapeTextForBrowser(precedence)),\n                            rules: [],\n                            hrefs: [\n                                stringToChunk(escapeTextForBrowser(href))\n                            ],\n                            sheets: new Map()\n                        };\n                        renderState.styles.set(precedence, styleQueue);\n                    } else {\n                        // We have seen this precedence before and need to track this href\n                        styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));\n                    }\n                    pushStyleContents(styleQueue.rules, props);\n                }\n                if (styleQueue) {\n                    // We need to track whether this boundary should wait on this resource or not.\n                    // Typically this resource should always exist since we either had it or just created\n                    // it. However, it's possible when you resume that the style has already been emitted\n                    // and then it wouldn't be recreated in the RenderState and there's no need to track\n                    // it again since we should've hoisted it to the shell already.\n                    if (renderState.boundaryResources) {\n                        renderState.boundaryResources.styles.add(styleQueue);\n                    }\n                }\n                if (textEmbedded) {\n                    // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n            }\n        }\n        function pushStyleImpl(target, props) {\n            target.push(startChunkForTag(\"style\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endChunkForTag(\"style\"));\n            return null;\n        }\n        function pushStyleContents(target, props) {\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                    }\n                }\n            }\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            return;\n        }\n        function pushImg(target, props, resumableState, renderState, pictureTagInScope) {\n            var src = props.src, srcSet = props.srcSet;\n            if (props.loading !== \"lazy\" && (src || srcSet) && (typeof src === \"string\" || src == null) && (typeof srcSet === \"string\" || srcSet == null) && props.fetchPriority !== \"low\" && pictureTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded\n            !(typeof src === \"string\" && src[4] === \":\" && (src[0] === \"d\" || src[0] === \"D\") && (src[1] === \"a\" || src[1] === \"A\") && (src[2] === \"t\" || src[2] === \"T\") && (src[3] === \"a\" || src[3] === \"A\")) && !(typeof srcSet === \"string\" && srcSet[4] === \":\" && (srcSet[0] === \"d\" || srcSet[0] === \"D\") && (srcSet[1] === \"a\" || srcSet[1] === \"A\") && (srcSet[2] === \"t\" || srcSet[2] === \"T\") && (srcSet[3] === \"a\" || srcSet[3] === \"A\"))) {\n                // We have a suspensey image and ought to preload it to optimize the loading of display blocking\n                // resumableState.\n                var sizes = typeof props.sizes === \"string\" ? props.sizes : undefined;\n                var key = getImageResourceKey(src, srcSet, sizes);\n                var promotablePreloads = renderState.preloads.images;\n                var resource = promotablePreloads.get(key);\n                if (resource) {\n                    // We consider whether this preload can be promoted to higher priority flushing queue.\n                    // The only time a resource will exist here is if it was created during this render\n                    // and was not already in the high priority queue.\n                    if (props.fetchPriority === \"high\" || renderState.highImagePreloads.size < 10) {\n                        // Delete the resource from the map since we are promoting it and don't want to\n                        // reenter this branch in a second pass for duplicate img hrefs.\n                        promotablePreloads.delete(key); // $FlowFixMe - Flow should understand that this is a Resource if the condition was true\n                        renderState.highImagePreloads.add(resource);\n                    }\n                } else if (!resumableState.imageResources.hasOwnProperty(key)) {\n                    // We must construct a new preload resource\n                    resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n                    var crossOrigin = getCrossOriginString(props.crossOrigin);\n                    var headers = renderState.headers;\n                    var header;\n                    if (headers && headers.remainingCapacity > 0 && // fetchPriority=\"high\". We use length here which means it will fit fewer images when\n                    // the urls are long and more when short. arguably byte size is a better hueristic because\n                    // it directly translates to how much we send down before content is actually seen.\n                    // We could unify the counts and also make it so the total is tracked regardless of\n                    // flushing output but since the headers are likely to be go earlier than content\n                    // they don't really conflict so for now I've kept them separate\n                    (props.fetchPriority === \"high\" || headers.highImagePreloads.length < 500) && // the params list with arbitrary props and if we copied everything over as it we might get\n                    // coercion errors. We have checks for this in Dev but it seems safer to just only accept values\n                    // that are strings\n                    (header = getPreloadAsHeader(src, \"image\", {\n                        imageSrcSet: props.srcSet,\n                        imageSizes: props.sizes,\n                        crossOrigin: crossOrigin,\n                        integrity: props.integrity,\n                        nonce: props.nonce,\n                        type: props.type,\n                        fetchPriority: props.fetchPriority,\n                        referrerPolicy: props.refererPolicy\n                    }), // we assume all the rest won't as well. This is to avoid getting into a situation\n                    // where we have a very small remaining capacity but no headers will ever fit and we end\n                    // up constantly trying to see if the next resource might make it. In the future we can\n                    // make this behavior different between render and prerender since in the latter case\n                    // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                    // headers.\n                    (headers.remainingCapacity -= header.length) >= 2)) {\n                        // If we postpone in the shell we will still emit this preload so we track\n                        // it to make sure we don't reset it.\n                        renderState.resets.image[key] = PRELOAD_NO_CREDS;\n                        if (headers.highImagePreloads) {\n                            headers.highImagePreloads += \", \";\n                        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                        headers.highImagePreloads += header;\n                    } else {\n                        resource = [];\n                        pushLinkImpl(resource, {\n                            rel: \"preload\",\n                            as: \"image\",\n                            // There is a bug in Safari where imageSrcSet is not respected on preload links\n                            // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                            // This harms older browers that do not support imageSrcSet by making their preloads not work\n                            // but this population is shrinking fast and is already small so we accept this tradeoff.\n                            href: srcSet ? undefined : src,\n                            imageSrcSet: srcSet,\n                            imageSizes: sizes,\n                            crossOrigin: crossOrigin,\n                            integrity: props.integrity,\n                            type: props.type,\n                            fetchPriority: props.fetchPriority,\n                            referrerPolicy: props.referrerPolicy\n                        });\n                        if (props.fetchPriority === \"high\" || renderState.highImagePreloads.size < 10) {\n                            renderState.highImagePreloads.add(resource);\n                        } else {\n                            renderState.bulkPreloads.add(resource); // We can bump the priority up if the same img is rendered later\n                            // with fetchPriority=\"high\"\n                            promotablePreloads.set(key, resource);\n                        }\n                    }\n                }\n            }\n            return pushSelfClosing(target, props, \"img\");\n        }\n        function pushSelfClosing(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(tag + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStartMenuItem(target, props) {\n            target.push(startChunkForTag(\"menuitem\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"menuitems cannot have `children` nor `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            return null;\n        }\n        function pushTitle(target, props, renderState, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (Array.isArray(children) && children.length > 1) {\n                        error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value\" + \" which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes.\" + \" For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop\" + \" is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.\", children.length);\n                    } else if (typeof child === \"function\" || typeof child === \"symbol\") {\n                        var childType = typeof child === \"function\" ? \"a Function\" : \"a Sybmol\";\n                        error(\"React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title>\" + \" tags to a single string value.\", childType);\n                    } else if (child && child.toString === ({}).toString) {\n                        if (child.$$typeof != null) {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be\" + \" a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to\" + \" be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is\" + \" a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.\");\n                        } else {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement\" + \" a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags\" + \" to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title>\" + \" is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.\");\n                        }\n                    }\n                }\n            }\n            {\n                if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {\n                    pushTitleImpl(renderState.hoistableChunks, props);\n                    return null;\n                } else {\n                    return pushTitleImpl(target, props);\n                }\n            }\n        }\n        function pushTitleImpl(target, props) {\n            target.push(startChunkForTag(\"title\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endChunkForTag(\"title\"));\n            return null;\n        }\n        function pushStartHead(target, props, renderState, insertionMode) {\n            {\n                if (insertionMode < HTML_MODE && renderState.headChunks === null) {\n                    // This <head> is the Document.head and should be part of the preamble\n                    renderState.headChunks = [];\n                    return pushStartGenericElement(renderState.headChunks, props, \"head\");\n                } else {\n                    // This <head> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"head\");\n                }\n            }\n        }\n        function pushStartHtml(target, props, renderState, insertionMode) {\n            {\n                if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {\n                    // This <html> is the Document.documentElement and should be part of the preamble\n                    renderState.htmlChunks = [\n                        doctypeChunk\n                    ];\n                    return pushStartGenericElement(renderState.htmlChunks, props, \"html\");\n                } else {\n                    // This <html> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"html\");\n                }\n            }\n        }\n        function pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var asyncProp = props.async;\n                if (typeof props.src !== \"string\" || !props.src || !(asyncProp && typeof asyncProp !== \"function\" && typeof asyncProp !== \"symbol\") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    // This script will not be a resource, we bailout early and emit it in place.\n                    return pushScriptImpl(target, props);\n                }\n                var src = props.src;\n                var key = getResourceKey(src); // We can make this <script> into a ScriptResource\n                var resources, preloads;\n                if (props.type === \"module\") {\n                    resources = resumableState.moduleScriptResources;\n                    preloads = renderState.preloads.moduleScripts;\n                } else {\n                    resources = resumableState.scriptResources;\n                    preloads = renderState.preloads.scripts;\n                }\n                var hasKey = resources.hasOwnProperty(key);\n                var resourceState = hasKey ? resources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resources[key] = EXISTS;\n                    var scriptProps = props;\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            scriptProps = assign({}, props);\n                            adoptPreloadCredentials(scriptProps, preloadState);\n                        }\n                        var preloadResource = preloads.get(key);\n                        if (preloadResource) {\n                            // the preload resource exists was created in this render. Now that we have\n                            // a script resource which will emit earlier than a preload would if it\n                            // hasn't already flushed we prevent it from flushing by zeroing the length\n                            preloadResource.length = 0;\n                        }\n                    }\n                    var resource = []; // Add to the script flushing queue\n                    renderState.scripts.add(resource); // encode the tag as Chunks\n                    pushScriptImpl(resource, scriptProps);\n                }\n                if (textEmbedded) {\n                    // This script follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n                return null;\n            }\n        }\n        function pushScriptImpl(target, props) {\n            target.push(startChunkForTag(\"script\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            {\n                if (children != null && typeof children !== \"string\") {\n                    var descriptiveStatement = typeof children === \"number\" ? \"a number for children\" : Array.isArray(children) ? \"an array for children\" : \"something unexpected for children\";\n                    error(\"A script element was rendered with %s. If script element has children it must be a single string.\" + \" Consider using dangerouslySetInnerHTML or passing a plain string as children.\", descriptiveStatement);\n                }\n            }\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n            }\n            target.push(endChunkForTag(\"script\"));\n            return null;\n        }\n        function pushStartGenericElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartCustomElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    var attributeName = propKey;\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"style\":\n                            pushStyleAttribute(target, propValue);\n                            break;\n                        case \"suppressContentEditableWarning\":\n                        case \"suppressHydrationWarning\":\n                            break;\n                        case \"className\":\n                        // intentional fallthrough\n                        default:\n                            if (isAttributeNameSafe(propKey) && typeof propValue !== \"function\" && typeof propValue !== \"symbol\") {\n                                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);\n                            }\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        var leadingNewline = stringToPrecomputedChunk(\"\\n\");\n        function pushStartPreformattedElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag); // text/html ignores the first character in these tags if it's a newline\n            // Prefer to break application/xml over text/html (for now) by adding\n            // a newline specifically to get eaten by the parser. (Alternately for\n            // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n            // \\r is normalized out by HTMLTextAreaElement#value.)\n            // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n            // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n            // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n            // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n            //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n            // TODO: This doesn't deal with the case where the child is an array\n            // or component that returns a string.\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    if (typeof html === \"string\" && html.length > 0 && html[0] === \"\\n\") {\n                        target.push(leadingNewline, stringToChunk(html));\n                    } else {\n                        {\n                            checkHtmlStringCoercion(html);\n                        }\n                        target.push(stringToChunk(\"\" + html));\n                    }\n                }\n            }\n            if (typeof children === \"string\" && children[0] === \"\\n\") {\n                target.push(leadingNewline);\n            }\n            return children;\n        } // We accept any tag to be rendered but since this gets injected into arbitrary\n        // HTML, we want to make sure that it's a safe tag.\n        // http://www.w3.org/TR/REC-xml/#NT-Name\n        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\n        var validatedTagCache = new Map();\n        function startChunkForTag(tag) {\n            var tagStartChunk = validatedTagCache.get(tag);\n            if (tagStartChunk === undefined) {\n                if (!VALID_TAG_REGEX.test(tag)) {\n                    throw new Error(\"Invalid tag: \" + tag);\n                }\n                tagStartChunk = stringToPrecomputedChunk(\"<\" + tag);\n                validatedTagCache.set(tag, tagStartChunk);\n            }\n            return tagStartChunk;\n        }\n        function pushStartInstance(target, type, props, resumableState, renderState, formatContext, textEmbedded) {\n            {\n                validateProperties$2(type, props);\n                validateProperties$1(type, props);\n                validateProperties(type, props, null);\n                if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n                    error(\"A component is `contentEditable` and contains `children` managed by \" + \"React. It is now your responsibility to guarantee that none of \" + \"those nodes are unexpectedly modified or duplicated. This is \" + \"probably not intentional.\");\n                }\n                if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {\n                    if (type.indexOf(\"-\") === -1 && type.toLowerCase() !== type) {\n                        error(\"<%s /> is using incorrect casing. \" + \"Use PascalCase for React components, \" + \"or lowercase for HTML elements.\", type);\n                    }\n                }\n            }\n            switch(type){\n                case \"div\":\n                case \"span\":\n                case \"svg\":\n                case \"path\":\n                case \"a\":\n                case \"g\":\n                case \"p\":\n                case \"li\":\n                    break;\n                // Special tags\n                case \"select\":\n                    return pushStartSelect(target, props);\n                case \"option\":\n                    return pushStartOption(target, props, formatContext);\n                case \"textarea\":\n                    return pushStartTextArea(target, props);\n                case \"input\":\n                    return pushInput(target, props, resumableState, renderState);\n                case \"button\":\n                    return pushStartButton(target, props, resumableState, renderState);\n                case \"form\":\n                    return pushStartForm(target, props, resumableState, renderState);\n                case \"menuitem\":\n                    return pushStartMenuItem(target, props);\n                case \"title\":\n                    return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"link\":\n                    return pushLink(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"script\":\n                    return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"style\":\n                    return pushStyle(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"meta\":\n                    return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                // Newline eating tags\n                case \"listing\":\n                case \"pre\":\n                    {\n                        return pushStartPreformattedElement(target, props, type);\n                    }\n                case \"img\":\n                    {\n                        return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & PICTURE_SCOPE));\n                    }\n                // Omitted close tags\n                case \"base\":\n                case \"area\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"keygen\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        return pushSelfClosing(target, props, type);\n                    }\n                // These are reserved SVG and MathML elements, that are never custom elements.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    {\n                        break;\n                    }\n                // Preamble start tags\n                case \"head\":\n                    return pushStartHead(target, props, renderState, formatContext.insertionMode);\n                case \"html\":\n                    {\n                        return pushStartHtml(target, props, renderState, formatContext.insertionMode);\n                    }\n                default:\n                    {\n                        if (type.indexOf(\"-\") !== -1) {\n                            // Custom element\n                            return pushStartCustomElement(target, props, type);\n                        }\n                    }\n            } // Generic element\n            return pushStartGenericElement(target, props, type);\n        }\n        var endTagCache = new Map();\n        function endChunkForTag(tag) {\n            var chunk = endTagCache.get(tag);\n            if (chunk === undefined) {\n                chunk = stringToPrecomputedChunk(\"</\" + tag + \">\");\n                endTagCache.set(tag, chunk);\n            }\n            return chunk;\n        }\n        function pushEndInstance(target, type, props, resumableState, formatContext) {\n            switch(type){\n                // When float is on we expect title and script tags to always be pushed in\n                // a unit and never return children. when we end up pushing the end tag we\n                // want to ensure there is no extra closing tag pushed\n                case \"title\":\n                case \"style\":\n                case \"script\":\n                // Omitted close tags\n                // TODO: Instead of repeating this switch we could try to pass a flag from above.\n                // That would require returning a tuple. Which might be ok if it gets inlined.\n                case \"area\":\n                case \"base\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"img\":\n                case \"input\":\n                case \"keygen\":\n                case \"link\":\n                case \"meta\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        // No close tag needed.\n                        return;\n                    }\n                // Postamble end tags\n                // When float is enabled we omit the end tags for body and html when\n                // they represent the Document.body and Document.documentElement Nodes.\n                // This is so we can withhold them until the postamble when we know\n                // we won't emit any more tags\n                case \"body\":\n                    {\n                        if (formatContext.insertionMode <= HTML_HTML_MODE) {\n                            resumableState.hasBody = true;\n                            return;\n                        }\n                        break;\n                    }\n                case \"html\":\n                    if (formatContext.insertionMode === ROOT_HTML_MODE) {\n                        resumableState.hasHtml = true;\n                        return;\n                    }\n                    break;\n            }\n            target.push(endChunkForTag(type));\n        }\n        function writeBootstrap(destination, renderState) {\n            var bootstrapChunks = renderState.bootstrapChunks;\n            var i = 0;\n            for(; i < bootstrapChunks.length - 1; i++){\n                writeChunk(destination, bootstrapChunks[i]);\n            }\n            if (i < bootstrapChunks.length) {\n                var lastChunk = bootstrapChunks[i];\n                bootstrapChunks.length = 0;\n                return writeChunkAndReturn(destination, lastChunk);\n            }\n            return true;\n        }\n        function writeCompletedRoot(destination, renderState) {\n            return writeBootstrap(destination, renderState);\n        } // Structural Nodes\n        // A placeholder is a node inside a hidden partial tree that can be filled in later, but before\n        // display. It's never visible to users. We use the template tag because it can be used in every\n        // type of parent. <script> tags also work in every other tag except <colgroup>.\n        var placeholder1 = stringToPrecomputedChunk('<template id=\"');\n        var placeholder2 = stringToPrecomputedChunk('\"></template>');\n        function writePlaceholder(destination, renderState, id) {\n            writeChunk(destination, placeholder1);\n            writeChunk(destination, renderState.placeholderPrefix);\n            var formattedID = stringToChunk(id.toString(16));\n            writeChunk(destination, formattedID);\n            return writeChunkAndReturn(destination, placeholder2);\n        } // Suspense boundaries are encoded as comments.\n        var startCompletedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$-->\");\n        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id=\"');\n        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('\"></template>');\n        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$!-->\");\n        var endSuspenseBoundary = stringToPrecomputedChunk(\"<!--/$-->\");\n        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk(\"<template\");\n        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('\"');\n        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst=\"');\n        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg=\"');\n        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck=\"');\n        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk(\"></template>\");\n        function writeStartCompletedSuspenseBoundary$1(destination, renderState) {\n            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);\n        }\n        function writeStartPendingSuspenseBoundary(destination, renderState, id) {\n            writeChunk(destination, startPendingSuspenseBoundary1);\n            if (id === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            }\n            writeChunk(destination, renderState.boundaryPrefix);\n            writeChunk(destination, stringToChunk(id.toString(16)));\n            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);\n        }\n        function writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMesssage, errorComponentStack) {\n            var result;\n            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);\n            writeChunk(destination, clientRenderedSuspenseBoundaryError1);\n            if (errorDigest) {\n                writeChunk(destination, clientRenderedSuspenseBoundaryError1A);\n                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));\n                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n            }\n            {\n                if (errorMesssage) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1B);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n                if (errorComponentStack) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1C);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n            }\n            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);\n            return result;\n        }\n        function writeEndCompletedSuspenseBoundary$1(destination, renderState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndPendingSuspenseBoundary(destination, renderState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndClientRenderedSuspenseBoundary$1(destination, renderState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id=\"');\n        var startSegmentHTML2 = stringToPrecomputedChunk('\">');\n        var endSegmentHTML = stringToPrecomputedChunk(\"</div>\");\n        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentSVG2 = stringToPrecomputedChunk('\">');\n        var endSegmentSVG = stringToPrecomputedChunk(\"</svg>\");\n        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentMathML2 = stringToPrecomputedChunk('\">');\n        var endSegmentMathML = stringToPrecomputedChunk(\"</math>\");\n        var startSegmentTable = stringToPrecomputedChunk('<table hidden id=\"');\n        var startSegmentTable2 = stringToPrecomputedChunk('\">');\n        var endSegmentTable = stringToPrecomputedChunk(\"</table>\");\n        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id=\"');\n        var startSegmentTableBody2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableBody = stringToPrecomputedChunk(\"</tbody></table>\");\n        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id=\"');\n        var startSegmentTableRow2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableRow = stringToPrecomputedChunk(\"</tr></table>\");\n        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id=\"');\n        var startSegmentColGroup2 = stringToPrecomputedChunk('\">');\n        var endSegmentColGroup = stringToPrecomputedChunk(\"</colgroup></table>\");\n        function writeStartSegment(destination, renderState, formatContext, id) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        writeChunk(destination, startSegmentHTML);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentHTML2);\n                    }\n                case SVG_MODE:\n                    {\n                        writeChunk(destination, startSegmentSVG);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentSVG2);\n                    }\n                case MATHML_MODE:\n                    {\n                        writeChunk(destination, startSegmentMathML);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentMathML2);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        writeChunk(destination, startSegmentTable);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTable2);\n                    }\n                // TODO: For the rest of these, there will be extra wrapper nodes that never\n                // get deleted from the document. We need to delete the table too as part\n                // of the injected scripts. They are invisible though so it's not too terrible\n                // and it's kind of an edge case to suspend in a table. Totally supported though.\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableBody);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableBody2);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableRow);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableRow2);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        writeChunk(destination, startSegmentColGroup);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentColGroup2);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        function writeEndSegment(destination, formatContext) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentHTML);\n                    }\n                case SVG_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentSVG);\n                    }\n                case MATHML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentMathML);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTable);\n                    }\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableBody);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableRow);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentColGroup);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS(\"');\n        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS(\"');\n        var completeSegmentScript2 = stringToPrecomputedChunk('\",\"');\n        var completeSegmentScriptEnd = stringToPrecomputedChunk('\")</script>');\n        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi=\"\" data-sid=\"');\n        var completeSegmentData2 = stringToPrecomputedChunk('\" data-pid=\"');\n        var completeSegmentDataEnd = dataElementQuotedEnd;\n        function writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {\n            var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, renderState.startInlineScript);\n                if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    resumableState.instructions |= SentCompleteSegmentFunction;\n                    writeChunk(destination, completeSegmentScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, completeSegmentScript1Partial);\n                }\n            } else {\n                writeChunk(destination, completeSegmentData1);\n            } // Write function arguments, which are string literals\n            writeChunk(destination, renderState.segmentPrefix);\n            var formattedID = stringToChunk(contentSegmentID.toString(16));\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                writeChunk(destination, completeSegmentScript2);\n            } else {\n                writeChunk(destination, completeSegmentData2);\n            }\n            writeChunk(destination, renderState.placeholderPrefix);\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                return writeChunkAndReturn(destination, completeSegmentScriptEnd);\n            } else {\n                return writeChunkAndReturn(destination, completeSegmentDataEnd);\n            }\n        }\n        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC(\"');\n        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC(\"');\n        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR(\"');\n        var completeBoundaryScript2 = stringToPrecomputedChunk('\",\"');\n        var completeBoundaryScript3a = stringToPrecomputedChunk('\",');\n        var completeBoundaryScript3b = stringToPrecomputedChunk('\"');\n        var completeBoundaryScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci=\"\" data-bid=\"');\n        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri=\"\" data-bid=\"');\n        var completeBoundaryData2 = stringToPrecomputedChunk('\" data-sid=\"');\n        var completeBoundaryData3a = stringToPrecomputedChunk('\" data-sty=\"');\n        var completeBoundaryDataEnd = dataElementQuotedEnd;\n        function writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, boundaryResources) {\n            var requiresStyleInsertion;\n            {\n                requiresStyleInsertion = renderState.stylesToHoist; // If necessary stylesheets will be flushed with this instruction.\n                // Any style tags not yet hoisted in the Document will also be hoisted.\n                // We reset this state since after this instruction executes all styles\n                // up to this point will have been hoisted\n                renderState.stylesToHoist = false;\n            }\n            var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, renderState.startInlineScript);\n                if (requiresStyleInsertion) {\n                    if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;\n                        writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));\n                    } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {\n                        resumableState.instructions |= SentStyleInsertionFunction;\n                        writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);\n                    } else {\n                        writeChunk(destination, completeBoundaryWithStylesScript1Partial);\n                    }\n                } else {\n                    if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        resumableState.instructions |= SentCompleteBoundaryFunction;\n                        writeChunk(destination, completeBoundaryScript1Full);\n                    } else {\n                        writeChunk(destination, completeBoundaryScript1Partial);\n                    }\n                }\n            } else {\n                if (requiresStyleInsertion) {\n                    writeChunk(destination, completeBoundaryWithStylesData1);\n                } else {\n                    writeChunk(destination, completeBoundaryData1);\n                }\n            }\n            var idChunk = stringToChunk(id.toString(16));\n            writeChunk(destination, renderState.boundaryPrefix);\n            writeChunk(destination, idChunk); // Write function arguments, which are string and array literals\n            if (scriptFormat) {\n                writeChunk(destination, completeBoundaryScript2);\n            } else {\n                writeChunk(destination, completeBoundaryData2);\n            }\n            writeChunk(destination, renderState.segmentPrefix);\n            writeChunk(destination, idChunk);\n            if (requiresStyleInsertion) {\n                // Script and data writers must format this differently:\n                //  - script writer emits an array literal, whose string elements are\n                //    escaped for javascript  e.g. [\"A\", \"B\"]\n                //  - data writer emits a string literal, which is escaped as html\n                //    e.g. [&#34;A&#34;, &#34;B&#34;]\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3a); // boundaryResources encodes an array literal\n                    writeStyleResourceDependenciesInJS(destination, boundaryResources);\n                } else {\n                    writeChunk(destination, completeBoundaryData3a);\n                    writeStyleResourceDependenciesInAttr(destination, boundaryResources);\n                }\n            } else {\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3b);\n                }\n            }\n            var writeMore;\n            if (scriptFormat) {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);\n            } else {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);\n            }\n            return writeBootstrap(destination, renderState) && writeMore;\n        }\n        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX(\"');\n        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX(\"');\n        var clientRenderScript1A = stringToPrecomputedChunk('\"');\n        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(\",\");\n        var clientRenderScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi=\"\" data-bid=\"');\n        var clientRenderData2 = stringToPrecomputedChunk('\" data-dgst=\"');\n        var clientRenderData3 = stringToPrecomputedChunk('\" data-msg=\"');\n        var clientRenderData4 = stringToPrecomputedChunk('\" data-stck=\"');\n        var clientRenderDataEnd = dataElementQuotedEnd;\n        function writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorComponentStack) {\n            var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, renderState.startInlineScript);\n                if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    resumableState.instructions |= SentClientRenderFunction;\n                    writeChunk(destination, clientRenderScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, clientRenderScript1Partial);\n                }\n            } else {\n                // <template data-rxi=\"\" data-bid=\"\n                writeChunk(destination, clientRenderData1);\n            }\n            writeChunk(destination, renderState.boundaryPrefix);\n            writeChunk(destination, stringToChunk(id.toString(16)));\n            if (scriptFormat) {\n                // \" needs to be inserted for scripts, since ArgInterstitual does not contain\n                // leading or trailing quotes\n                writeChunk(destination, clientRenderScript1A);\n            }\n            if (errorDigest || errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || \"\")));\n                } else {\n                    // \" data-dgst=\"HTMLString\n                    writeChunk(destination, clientRenderData2);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || \"\")));\n                }\n            }\n            if (errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || \"\")));\n                } else {\n                    // \" data-msg=\"HTMLString\n                    writeChunk(destination, clientRenderData3);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || \"\")));\n                }\n            }\n            if (errorComponentStack) {\n                // ,\"JSONString\"\n                if (scriptFormat) {\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));\n                } else {\n                    // \" data-stck=\"HTMLString\n                    writeChunk(destination, clientRenderData4);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                }\n            }\n            if (scriptFormat) {\n                // ></script>\n                return writeChunkAndReturn(destination, clientRenderScriptEnd);\n            } else {\n                // \"></template>\n                return writeChunkAndReturn(destination, clientRenderDataEnd);\n            }\n        }\n        var regexForJSStringsInInstructionScripts = /[<\\u2028\\u2029]/g;\n        function escapeJSStringsForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var regexForJSStringsInScripts = /[&><\\u2028\\u2029]/g;\n        function escapeJSObjectForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"&\":\n                        return \"\\\\u0026\";\n                    case \">\":\n                        return \"\\\\u003e\";\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media=\"not all\" data-precedence=\"');\n        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var lateStyleTagTemplateClose = stringToPrecomputedChunk(\"</style>\"); // Tracks whether the boundary currently flushing is flushign style tags or has any\n        // stylesheet dependencies not flushed in the Preamble.\n        var currentlyRenderingBoundaryHasStylesToHoist = false; // Acts as a return value for the forEach execution of style tag flushing.\n        var destinationHasCapacity = true;\n        function flushStyleTagsLateForBoundary(styleQueue) {\n            var rules = styleQueue.rules;\n            var hrefs = styleQueue.hrefs;\n            {\n                if (rules.length > 0 && hrefs.length === 0) {\n                    error(\"React expected to have at least one href for an a hoistable style but found none. This is a bug in React.\");\n                }\n            }\n            var i = 0;\n            if (hrefs.length) {\n                writeChunk(this, lateStyleTagResourceOpen1);\n                writeChunk(this, styleQueue.precedence);\n                writeChunk(this, lateStyleTagResourceOpen2);\n                for(; i < hrefs.length - 1; i++){\n                    writeChunk(this, hrefs[i]);\n                    writeChunk(this, spaceSeparator);\n                }\n                writeChunk(this, hrefs[i]);\n                writeChunk(this, lateStyleTagResourceOpen3);\n                for(i = 0; i < rules.length; i++){\n                    writeChunk(this, rules[i]);\n                }\n                destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose); // We wrote style tags for this boundary and we may need to emit a script\n                // to hoist them.\n                currentlyRenderingBoundaryHasStylesToHoist = true; // style resources can flush continuously since more rules may be written into\n                // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                // and hrefs\n                rules.length = 0;\n                hrefs.length = 0;\n            }\n        }\n        function hasStylesToHoist(stylesheet) {\n            // We need to reveal boundaries with styles whenever a stylesheet it depends on is either\n            // not flushed or flushed after the preamble (shell).\n            if (stylesheet.state !== PREAMBLE) {\n                currentlyRenderingBoundaryHasStylesToHoist = true;\n                return true;\n            }\n            return false;\n        }\n        function writeResourcesForBoundary(destination, boundaryResources, renderState) {\n            // Reset these on each invocation, they are only safe to read in this function\n            currentlyRenderingBoundaryHasStylesToHoist = false;\n            destinationHasCapacity = true; // Flush style tags for each precedence this boundary depends on\n            boundaryResources.styles.forEach(flushStyleTagsLateForBoundary, destination); // Determine if this boundary has stylesheets that need to be awaited upon completion\n            boundaryResources.stylesheets.forEach(hasStylesToHoist);\n            if (currentlyRenderingBoundaryHasStylesToHoist) {\n                renderState.stylesToHoist = true;\n            }\n            return destinationHasCapacity;\n        }\n        function flushResource(resource) {\n            for(var i = 0; i < resource.length; i++){\n                writeChunk(this, resource[i]);\n            }\n            resource.length = 0;\n        }\n        var stylesheetFlushingQueue = [];\n        function flushStyleInPreamble(stylesheet, key, map) {\n            // We still need to encode stylesheet chunks\n            // because unlike most Hoistables and Resources we do not eagerly encode\n            // them during render. This is because if we flush late we have to send a\n            // different encoding and we don't want to encode multiple times\n            pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);\n            for(var i = 0; i < stylesheetFlushingQueue.length; i++){\n                writeChunk(this, stylesheetFlushingQueue[i]);\n            }\n            stylesheetFlushingQueue.length = 0;\n            stylesheet.state = PREAMBLE;\n        }\n        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence=\"');\n        var styleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var spaceSeparator = stringToPrecomputedChunk(\" \");\n        var styleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var styleTagResourceClose = stringToPrecomputedChunk(\"</style>\");\n        function flushStylesInPreamble(styleQueue, precedence) {\n            var hasStylesheets = styleQueue.sheets.size > 0;\n            styleQueue.sheets.forEach(flushStyleInPreamble, this);\n            styleQueue.sheets.clear();\n            var rules = styleQueue.rules;\n            var hrefs = styleQueue.hrefs; // If we don't emit any stylesheets at this precedence we still need to maintain the precedence\n            // order so even if there are no rules for style tags at this precedence we emit an empty style\n            // tag with the data-precedence attribute\n            if (!hasStylesheets || hrefs.length) {\n                writeChunk(this, styleTagResourceOpen1);\n                writeChunk(this, styleQueue.precedence);\n                var i = 0;\n                if (hrefs.length) {\n                    writeChunk(this, styleTagResourceOpen2);\n                    for(; i < hrefs.length - 1; i++){\n                        writeChunk(this, hrefs[i]);\n                        writeChunk(this, spaceSeparator);\n                    }\n                    writeChunk(this, hrefs[i]);\n                }\n                writeChunk(this, styleTagResourceOpen3);\n                for(i = 0; i < rules.length; i++){\n                    writeChunk(this, rules[i]);\n                }\n                writeChunk(this, styleTagResourceClose); // style resources can flush continuously since more rules may be written into\n                // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                // and hrefs\n                rules.length = 0;\n                hrefs.length = 0;\n            }\n        }\n        function preloadLateStyle(stylesheet) {\n            if (stylesheet.state === PENDING$1) {\n                stylesheet.state = PRELOADED;\n                var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);\n                pushLinkImpl(stylesheetFlushingQueue, preloadProps);\n                for(var i = 0; i < stylesheetFlushingQueue.length; i++){\n                    writeChunk(this, stylesheetFlushingQueue[i]);\n                }\n                stylesheetFlushingQueue.length = 0;\n            }\n        }\n        function preloadLateStyles(styleQueue) {\n            styleQueue.sheets.forEach(preloadLateStyle, this);\n            styleQueue.sheets.clear();\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writePreamble(destination, resumableState, renderState, willFlushAllSegments) {\n            // This function must be called exactly once on every request\n            if (!willFlushAllSegments && renderState.externalRuntimeScript) {\n                // If the root segment is incomplete due to suspended tasks\n                // (e.g. willFlushAllSegments = false) and we are using data\n                // streaming format, ensure the external runtime is sent.\n                // (User code could choose to send this even earlier by calling\n                //  preinit(...), if they know they will suspend).\n                var _renderState$external = renderState.externalRuntimeScript, src = _renderState$external.src, chunks = _renderState$external.chunks;\n                internalPreinitScript(resumableState, renderState, src, chunks);\n            }\n            var htmlChunks = renderState.htmlChunks;\n            var headChunks = renderState.headChunks;\n            var i = 0; // Emit open tags before Hoistables and Resources\n            if (htmlChunks) {\n                // We have an <html> to emit as part of the preamble\n                for(i = 0; i < htmlChunks.length; i++){\n                    writeChunk(destination, htmlChunks[i]);\n                }\n                if (headChunks) {\n                    for(i = 0; i < headChunks.length; i++){\n                        writeChunk(destination, headChunks[i]);\n                    }\n                } else {\n                    // We did not render a head but we emitted an <html> so we emit one now\n                    writeChunk(destination, startChunkForTag(\"head\"));\n                    writeChunk(destination, endOfStartTag);\n                }\n            } else if (headChunks) {\n                // We do not have an <html> but we do have a <head>\n                for(i = 0; i < headChunks.length; i++){\n                    writeChunk(destination, headChunks[i]);\n                }\n            } // Emit high priority Hoistables\n            var charsetChunks = renderState.charsetChunks;\n            for(i = 0; i < charsetChunks.length; i++){\n                writeChunk(destination, charsetChunks[i]);\n            }\n            charsetChunks.length = 0; // emit preconnect resources\n            renderState.preconnects.forEach(flushResource, destination);\n            renderState.preconnects.clear();\n            var preconnectChunks = renderState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            renderState.fontPreloads.forEach(flushResource, destination);\n            renderState.fontPreloads.clear();\n            renderState.highImagePreloads.forEach(flushResource, destination);\n            renderState.highImagePreloads.clear(); // Flush unblocked stylesheets by precedence\n            renderState.styles.forEach(flushStylesInPreamble, destination);\n            var importMapChunks = renderState.importMapChunks;\n            for(i = 0; i < importMapChunks.length; i++){\n                writeChunk(destination, importMapChunks[i]);\n            }\n            importMapChunks.length = 0;\n            renderState.bootstrapScripts.forEach(flushResource, destination);\n            renderState.scripts.forEach(flushResource, destination);\n            renderState.scripts.clear();\n            renderState.bulkPreloads.forEach(flushResource, destination);\n            renderState.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = renderState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = renderState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0; // Flush closing head if necessary\n            if (htmlChunks && headChunks === null) {\n                // We have an <html> rendered but no <head> rendered. We however inserted\n                // a <head> up above so we need to emit the </head> now. This is safe because\n                // if the main content contained the </head> it would also have provided a\n                // <head>. This means that all the content inside <html> is either <body> or\n                // invalid HTML\n                writeChunk(destination, endChunkForTag(\"head\"));\n            }\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writeHoistables(destination, resumableState, renderState) {\n            var i = 0; // Emit high priority Hoistables\n            // We omit charsetChunks because we have already sent the shell and if it wasn't\n            // already sent it is too late now.\n            renderState.preconnects.forEach(flushResource, destination);\n            renderState.preconnects.clear();\n            var preconnectChunks = renderState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            renderState.fontPreloads.forEach(flushResource, destination);\n            renderState.fontPreloads.clear();\n            renderState.highImagePreloads.forEach(flushResource, destination);\n            renderState.highImagePreloads.clear(); // Preload any stylesheets. these will emit in a render instruction that follows this\n            // but we want to kick off preloading as soon as possible\n            renderState.styles.forEach(preloadLateStyles, destination); // We only hoist importmaps that are configured through createResponse and that will\n            // always flush in the preamble. Generally we don't expect people to render them as\n            // tags when using React but if you do they are going to be treated like regular inline\n            // scripts and flush after other hoistables which is problematic\n            // bootstrap scripts should flush above script priority but these can only flush in the preamble\n            // so we elide the code here for performance\n            renderState.scripts.forEach(flushResource, destination);\n            renderState.scripts.clear();\n            renderState.bulkPreloads.forEach(flushResource, destination);\n            renderState.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = renderState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = renderState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0;\n        }\n        function writePostamble(destination, resumableState) {\n            if (resumableState.hasBody) {\n                writeChunk(destination, endChunkForTag(\"body\"));\n            }\n            if (resumableState.hasHtml) {\n                writeChunk(destination, endChunkForTag(\"html\"));\n            }\n        }\n        var arrayFirstOpenBracket = stringToPrecomputedChunk(\"[\");\n        var arraySubsequentOpenBracket = stringToPrecomputedChunk(\",[\");\n        var arrayInterstitial = stringToPrecomputedChunk(\",\");\n        var arrayCloseBracket = stringToPrecomputedChunk(\"]\"); // This function writes a 2D array of strings to be embedded in javascript.\n        // E.g.\n        //  [[\"JS_escaped_string1\", \"JS_escaped_string2\"]]\n        function writeStyleResourceDependenciesInJS(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.stylesheets.forEach(function(resource) {\n                if (resource.state === PREAMBLE) ;\n                else if (resource.state === LATE) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state = LATE;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n        }\n        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInJS(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInJS(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));\n        } // This function writes a 2D array of strings to be embedded in an attribute\n        // value and read with JSON.parse in ReactDOMServerExternalRuntime.js\n        // E.g.\n        //  [[&quot;JSON_escaped_string1&quot;, &quot;JSON_escaped_string2&quot;]]\n        function writeStyleResourceDependenciesInAttr(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.stylesheets.forEach(function(resource) {\n                if (resource.state === PREAMBLE) ;\n                else if (resource.state === LATE) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state = LATE;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n        }\n        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInAttr(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInAttr(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));\n        }\n        /**\n * Resources\n */ var PENDING$1 = 0;\n        var PRELOADED = 1;\n        var PREAMBLE = 2;\n        var LATE = 3;\n        function createBoundaryResources() {\n            return {\n                styles: new Set(),\n                stylesheets: new Set()\n            };\n        }\n        function setCurrentlyRenderingBoundaryResourcesTarget(renderState, boundaryResources) {\n            renderState.boundaryResources = boundaryResources;\n        }\n        function getResourceKey(href) {\n            return href;\n        }\n        function getImageResourceKey(href, imageSrcSet, imageSizes) {\n            if (imageSrcSet) {\n                return imageSrcSet + \"\\n\" + (imageSizes || \"\");\n            }\n            return href;\n        }\n        function prefetchDNS(href) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (typeof href === \"string\" && href) {\n                var key = getResourceKey(href);\n                if (!resumableState.dnsResources.hasOwnProperty(key)) {\n                    resumableState.dnsResources[key] = EXISTS;\n                    var headers = renderState.headers;\n                    var header;\n                    if (headers && headers.remainingCapacity > 0 && (header = getPrefetchDNSAsHeader(href), // we assume all the rest won't as well. This is to avoid getting into a situation\n                    // where we have a very small remaining capacity but no headers will ever fit and we end\n                    // up constantly trying to see if the next resource might make it. In the future we can\n                    // make this behavior different between render and prerender since in the latter case\n                    // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                    // headers.\n                    (headers.remainingCapacity -= header.length) >= 2)) {\n                        // Store this as resettable in case we are prerendering and postpone in the Shell\n                        renderState.resets.dns[key] = EXISTS;\n                        if (headers.preconnects) {\n                            headers.preconnects += \", \";\n                        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                        headers.preconnects += header;\n                    } else {\n                        // Encode as element\n                        var resource = [];\n                        pushLinkImpl(resource, {\n                            href: href,\n                            rel: \"dns-prefetch\"\n                        });\n                        renderState.preconnects.add(resource);\n                    }\n                }\n                flushResources(request);\n            }\n        }\n        function preconnect(href, crossOrigin) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (typeof href === \"string\" && href) {\n                var bucket = crossOrigin === \"use-credentials\" ? \"credentials\" : typeof crossOrigin === \"string\" ? \"anonymous\" : \"default\";\n                var key = getResourceKey(href);\n                if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {\n                    resumableState.connectResources[bucket][key] = EXISTS;\n                    var headers = renderState.headers;\n                    var header;\n                    if (headers && headers.remainingCapacity > 0 && (header = getPreconnectAsHeader(href, crossOrigin), // we assume all the rest won't as well. This is to avoid getting into a situation\n                    // where we have a very small remaining capacity but no headers will ever fit and we end\n                    // up constantly trying to see if the next resource might make it. In the future we can\n                    // make this behavior different between render and prerender since in the latter case\n                    // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                    // headers.\n                    (headers.remainingCapacity -= header.length) >= 2)) {\n                        // Store this in resettableState in case we are prerending and postpone in the Shell\n                        renderState.resets.connect[bucket][key] = EXISTS;\n                        if (headers.preconnects) {\n                            headers.preconnects += \", \";\n                        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                        headers.preconnects += header;\n                    } else {\n                        var resource = [];\n                        pushLinkImpl(resource, {\n                            rel: \"preconnect\",\n                            href: href,\n                            crossOrigin: crossOrigin\n                        });\n                        renderState.preconnects.add(resource);\n                    }\n                }\n                flushResources(request);\n            }\n        }\n        function preload(href, as, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (as && href) {\n                switch(as){\n                    case \"image\":\n                        {\n                            var imageSrcSet, imageSizes, fetchPriority;\n                            if (options) {\n                                imageSrcSet = options.imageSrcSet;\n                                imageSizes = options.imageSizes;\n                                fetchPriority = options.fetchPriority;\n                            }\n                            var key = getImageResourceKey(href, imageSrcSet, imageSizes);\n                            if (resumableState.imageResources.hasOwnProperty(key)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n                            var headers = renderState.headers;\n                            var header;\n                            if (headers && headers.remainingCapacity > 0 && fetchPriority === \"high\" && (header = getPreloadAsHeader(href, as, options), // we assume all the rest won't as well. This is to avoid getting into a situation\n                            // where we have a very small remaining capacity but no headers will ever fit and we end\n                            // up constantly trying to see if the next resource might make it. In the future we can\n                            // make this behavior different between render and prerender since in the latter case\n                            // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                            // headers.\n                            (headers.remainingCapacity -= header.length) >= 2)) {\n                                // If we postpone in the shell we will still emit a preload as a header so we\n                                // track this to make sure we don't reset it.\n                                renderState.resets.image[key] = PRELOAD_NO_CREDS;\n                                if (headers.highImagePreloads) {\n                                    headers.highImagePreloads += \", \";\n                                } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                                headers.highImagePreloads += header;\n                            } else {\n                                // If we don't have headers to write to we have to encode as elements to flush in the head\n                                // When we have imageSrcSet the browser probably cannot load the right version from headers\n                                // (this should be verified by testing). For now we assume these need to go in the head\n                                // as elements even if headers are available.\n                                var resource = [];\n                                pushLinkImpl(resource, assign({\n                                    rel: \"preload\",\n                                    // There is a bug in Safari where imageSrcSet is not respected on preload links\n                                    // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                                    // This harms older browers that do not support imageSrcSet by making their preloads not work\n                                    // but this population is shrinking fast and is already small so we accept this tradeoff.\n                                    href: imageSrcSet ? undefined : href,\n                                    as: as\n                                }, options));\n                                if (fetchPriority === \"high\") {\n                                    renderState.highImagePreloads.add(resource);\n                                } else {\n                                    renderState.bulkPreloads.add(resource); // Stash the resource in case we need to promote it to higher priority\n                                    // when an img tag is rendered\n                                    renderState.preloads.images.set(key, resource);\n                                }\n                            }\n                            break;\n                        }\n                    case \"style\":\n                        {\n                            var _key = getResourceKey(href);\n                            if (resumableState.styleResources.hasOwnProperty(_key)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            var _resource2 = [];\n                            pushLinkImpl(_resource2, assign({\n                                rel: \"preload\",\n                                href: href,\n                                as: as\n                            }, options));\n                            resumableState.styleResources[_key] = options && (typeof options.crossOrigin === \"string\" || typeof options.integrity === \"string\") ? [\n                                options.crossOrigin,\n                                options.integrity\n                            ] : PRELOAD_NO_CREDS;\n                            renderState.preloads.stylesheets.set(_key, _resource2);\n                            renderState.bulkPreloads.add(_resource2);\n                            break;\n                        }\n                    case \"script\":\n                        {\n                            var _key2 = getResourceKey(href);\n                            if (resumableState.scriptResources.hasOwnProperty(_key2)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            var _resource3 = [];\n                            renderState.preloads.scripts.set(_key2, _resource3);\n                            renderState.bulkPreloads.add(_resource3);\n                            pushLinkImpl(_resource3, assign({\n                                rel: \"preload\",\n                                href: href,\n                                as: as\n                            }, options));\n                            resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === \"string\" || typeof options.integrity === \"string\") ? [\n                                options.crossOrigin,\n                                options.integrity\n                            ] : PRELOAD_NO_CREDS;\n                            break;\n                        }\n                    default:\n                        {\n                            var _key3 = getResourceKey(href);\n                            var hasAsType = resumableState.unknownResources.hasOwnProperty(as);\n                            var resources;\n                            if (hasAsType) {\n                                resources = resumableState.unknownResources[as];\n                                if (resources.hasOwnProperty(_key3)) {\n                                    // we can return if we already have this resource\n                                    return;\n                                }\n                            } else {\n                                resources = {};\n                                resumableState.unknownResources[as] = resources;\n                            }\n                            resources[_key3] = PRELOAD_NO_CREDS;\n                            var _headers = renderState.headers;\n                            var _header;\n                            if (_headers && _headers.remainingCapacity > 0 && as === \"font\" && (_header = getPreloadAsHeader(href, as, options), // we assume all the rest won't as well. This is to avoid getting into a situation\n                            // where we have a very small remaining capacity but no headers will ever fit and we end\n                            // up constantly trying to see if the next resource might make it. In the future we can\n                            // make this behavior different between render and prerender since in the latter case\n                            // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                            // headers.\n                            (_headers.remainingCapacity -= _header.length) >= 2)) {\n                                // If we postpone in the shell we will still emit this preload so we\n                                // track it here to prevent it from being reset.\n                                renderState.resets.font[_key3] = PRELOAD_NO_CREDS;\n                                if (_headers.fontPreloads) {\n                                    _headers.fontPreloads += \", \";\n                                } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                                _headers.fontPreloads += _header;\n                            } else {\n                                // We either don't have headers or we are preloading something that does\n                                // not warrant elevated priority so we encode as an element.\n                                var _resource4 = [];\n                                var props = assign({\n                                    rel: \"preload\",\n                                    href: href,\n                                    as: as\n                                }, options);\n                                pushLinkImpl(_resource4, props);\n                                switch(as){\n                                    case \"font\":\n                                        renderState.fontPreloads.add(_resource4);\n                                        break;\n                                    // intentional fall through\n                                    default:\n                                        renderState.bulkPreloads.add(_resource4);\n                                }\n                            }\n                        }\n                } // If we got this far we created a new resource\n                flushResources(request);\n            }\n        }\n        function preloadModule(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (href) {\n                var key = getResourceKey(href);\n                var as = options && typeof options.as === \"string\" ? options.as : \"script\";\n                var resource;\n                switch(as){\n                    case \"script\":\n                        {\n                            if (resumableState.moduleScriptResources.hasOwnProperty(key)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            resource = [];\n                            resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === \"string\" || typeof options.integrity === \"string\") ? [\n                                options.crossOrigin,\n                                options.integrity\n                            ] : PRELOAD_NO_CREDS;\n                            renderState.preloads.moduleScripts.set(key, resource);\n                            break;\n                        }\n                    default:\n                        {\n                            var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);\n                            var resources;\n                            if (hasAsType) {\n                                resources = resumableState.unknownResources[as];\n                                if (resources.hasOwnProperty(key)) {\n                                    // we can return if we already have this resource\n                                    return;\n                                }\n                            } else {\n                                resources = {};\n                                resumableState.moduleUnknownResources[as] = resources;\n                            }\n                            resource = [];\n                            resources[key] = PRELOAD_NO_CREDS;\n                        }\n                }\n                pushLinkImpl(resource, assign({\n                    rel: \"modulepreload\",\n                    href: href\n                }, options));\n                renderState.bulkPreloads.add(resource); // If we got this far we created a new resource\n                flushResources(request);\n            }\n        }\n        function preinitStyle(href, precedence, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (href) {\n                precedence = precedence || \"default\";\n                var key = getResourceKey(href);\n                var styleQueue = renderState.styles.get(precedence);\n                var hasKey = resumableState.styleResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n                    // to create a StyleQueue\n                    if (!styleQueue) {\n                        styleQueue = {\n                            precedence: stringToChunk(escapeTextForBrowser(precedence)),\n                            rules: [],\n                            hrefs: [],\n                            sheets: new Map()\n                        };\n                        renderState.styles.set(precedence, styleQueue);\n                    }\n                    var resource = {\n                        state: PENDING$1,\n                        props: assign({\n                            rel: \"stylesheet\",\n                            href: href,\n                            \"data-precedence\": precedence\n                        }, options)\n                    };\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            adoptPreloadCredentials(resource.props, preloadState);\n                        }\n                        var preloadResource = renderState.preloads.stylesheets.get(key);\n                        if (preloadResource && preloadResource.length > 0) {\n                            // The Preload for this resource was created in this render pass and has not flushed yet so\n                            // we need to clear it to avoid it flushing.\n                            preloadResource.length = 0;\n                        } else {\n                            // Either the preload resource from this render already flushed in this render pass\n                            // or the preload flushed in a prior pass (prerender). In either case we need to mark\n                            // this resource as already having been preloaded.\n                            resource.state = PRELOADED;\n                        }\n                    } // We add the newly created resource to our StyleQueue and if necessary\n                    // track the resource with the currently rendering boundary\n                    styleQueue.sheets.set(key, resource); // Notify the request that there are resources to flush even if no work is currently happening\n                    flushResources(request);\n                }\n            }\n        }\n        function preinitScript(src, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (src) {\n                var key = getResourceKey(src);\n                var hasKey = resumableState.scriptResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.scriptResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.scriptResources[key] = EXISTS;\n                    var props = assign({\n                        src: src,\n                        async: true\n                    }, options);\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            adoptPreloadCredentials(props, preloadState);\n                        }\n                        var preloadResource = renderState.preloads.scripts.get(key);\n                        if (preloadResource) {\n                            // the preload resource exists was created in this render. Now that we have\n                            // a script resource which will emit earlier than a preload would if it\n                            // hasn't already flushed we prevent it from flushing by zeroing the length\n                            preloadResource.length = 0;\n                        }\n                    }\n                    var resource = []; // Add to the script flushing queue\n                    renderState.scripts.add(resource); // encode the tag as Chunks\n                    pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n                    flushResources(request);\n                }\n                return;\n            }\n        }\n        function preinitModuleScript(src, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (src) {\n                var key = getResourceKey(src);\n                var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.moduleScriptResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.moduleScriptResources[key] = EXISTS;\n                    var props = assign({\n                        src: src,\n                        type: \"module\",\n                        async: true\n                    }, options);\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            adoptPreloadCredentials(props, preloadState);\n                        }\n                        var preloadResource = renderState.preloads.moduleScripts.get(key);\n                        if (preloadResource) {\n                            // the preload resource exists was created in this render. Now that we have\n                            // a script resource which will emit earlier than a preload would if it\n                            // hasn't already flushed we prevent it from flushing by zeroing the length\n                            preloadResource.length = 0;\n                        }\n                    }\n                    var resource = []; // Add to the script flushing queue\n                    renderState.scripts.add(resource); // encode the tag as Chunks\n                    pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n                    flushResources(request);\n                }\n                return;\n            }\n        } // This function is only safe to call at Request start time since it assumes\n        // that each module has not already been preloaded. If we find a need to preload\n        // scripts at any other point in time we will need to check whether the preload\n        // already exists and not assume it\n        function preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {\n            var key = getResourceKey(href);\n            {\n                if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {\n                    // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n                    // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n                    // rather than instruct the user to not preload their bootstrap scripts themselves\n                    error('Internal React Error: React expected bootstrap script or module with src \"%s\" to not have been preloaded already. please file an issue', href);\n                }\n            }\n            // used to preinit the resource. If a script can be preinited then it shouldn't\n            // be a bootstrap script/module and if it is a bootstrap script/module then it\n            // must not be safe to emit early. To avoid possibly allowing for preinits of\n            // bootstrap scripts/modules we occlude these keys.\n            resumableState.scriptResources[key] = EXISTS;\n            resumableState.moduleScriptResources[key] = EXISTS;\n            var resource = [];\n            pushLinkImpl(resource, props);\n            renderState.bootstrapScripts.add(resource);\n        }\n        function internalPreinitScript(resumableState, renderState, src, chunks) {\n            var key = getResourceKey(src);\n            if (!resumableState.scriptResources.hasOwnProperty(key)) {\n                var resource = chunks;\n                resumableState.scriptResources[key] = EXISTS;\n                renderState.scripts.add(resource);\n            }\n            return;\n        }\n        function preloadAsStylePropsFromProps(href, props) {\n            return {\n                rel: \"preload\",\n                as: \"style\",\n                href: href,\n                crossOrigin: props.crossOrigin,\n                fetchPriority: props.fetchPriority,\n                integrity: props.integrity,\n                media: props.media,\n                hrefLang: props.hrefLang,\n                referrerPolicy: props.referrerPolicy\n            };\n        }\n        function stylesheetPropsFromRawProps(rawProps) {\n            return assign({}, rawProps, {\n                \"data-precedence\": rawProps.precedence,\n                precedence: null\n            });\n        }\n        function adoptPreloadCredentials(target, preloadState) {\n            if (target.crossOrigin == null) target.crossOrigin = preloadState[0];\n            if (target.integrity == null) target.integrity = preloadState[1];\n        }\n        function getPrefetchDNSAsHeader(href) {\n            var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n            return \"<\" + escapedHref + \">; rel=dns-prefetch\";\n        }\n        function getPreconnectAsHeader(href, crossOrigin) {\n            var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n            var value = \"<\" + escapedHref + \">; rel=preconnect\";\n            if (typeof crossOrigin === \"string\") {\n                var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, \"crossOrigin\");\n                value += '; crossorigin=\"' + escapedCrossOrigin + '\"';\n            }\n            return value;\n        }\n        function getPreloadAsHeader(href, as, params) {\n            var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n            var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, \"as\");\n            var value = \"<\" + escapedHref + '>; rel=preload; as=\"' + escapedAs + '\"';\n            for(var paramName in params){\n                if (hasOwnProperty.call(params, paramName)) {\n                    var paramValue = params[paramName];\n                    if (typeof paramValue === \"string\") {\n                        value += \"; \" + paramName.toLowerCase() + '=\"' + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + '\"';\n                    }\n                }\n            }\n            return value;\n        }\n        function getStylesheetPreloadAsHeader(stylesheet) {\n            var props = stylesheet.props;\n            var preloadOptions = {\n                crossOrigin: props.crossOrigin,\n                integrity: props.integrity,\n                nonce: props.nonce,\n                type: props.type,\n                fetchPriority: props.fetchPriority,\n                referrerPolicy: props.referrerPolicy,\n                media: props.media\n            };\n            return getPreloadAsHeader(props.href, \"style\", preloadOptions);\n        } // This escaping function is only safe to use for href values being written into\n        // a \"Link\" header in between `<` and `>` characters. The primary concern with the href is\n        // to escape the bounding characters as well as new lines. This is unsafe to use in any other\n        // context\n        var regexForHrefInLinkHeaderURLContext = /[<>\\r\\n]/g;\n        function escapeHrefForLinkHeaderURLContext(hrefInput) {\n            {\n                checkAttributeStringCoercion(hrefInput, \"href\");\n            }\n            var coercedHref = \"\" + hrefInput;\n            return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);\n        }\n        function escapeHrefForLinkHeaderURLContextReplacer(match) {\n            switch(match){\n                case \"<\":\n                    return \"%3C\";\n                case \">\":\n                    return \"%3E\";\n                case \"\\n\":\n                    return \"%0A\";\n                case \"\\r\":\n                    return \"%0D\";\n                default:\n                    {\n                        // eslint-disable-next-line react-internal/prod-error-codes\n                        throw new Error(\"escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                    }\n            }\n        } // This escaping function is only safe to use for quoted param values in an HTTP header.\n        // It is unsafe to use for any value not inside quote marks in parater value position.\n        var regexForLinkHeaderQuotedParamValueContext = /[\"';,\\r\\n]/g;\n        function escapeStringForLinkHeaderQuotedParamValueContext(value, name) {\n            {\n                checkOptionStringCoercion(value, name);\n            }\n            var coerced = \"\" + value;\n            return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);\n        }\n        function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {\n            switch(match){\n                case '\"':\n                    return \"%22\";\n                case \"'\":\n                    return \"%27\";\n                case \";\":\n                    return \"%3B\";\n                case \",\":\n                    return \"%2C\";\n                case \"\\n\":\n                    return \"%0A\";\n                case \"\\r\":\n                    return \"%0D\";\n                default:\n                    {\n                        // eslint-disable-next-line react-internal/prod-error-codes\n                        throw new Error(\"escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                    }\n            }\n        }\n        function hoistStyleQueueDependency(styleQueue) {\n            this.styles.add(styleQueue);\n        }\n        function hoistStylesheetDependency(stylesheet) {\n            this.stylesheets.add(stylesheet);\n        }\n        function hoistResources(renderState, source) {\n            var currentBoundaryResources = renderState.boundaryResources;\n            if (currentBoundaryResources) {\n                source.styles.forEach(hoistStyleQueueDependency, currentBoundaryResources);\n                source.stylesheets.forEach(hoistStylesheetDependency, currentBoundaryResources);\n            }\n        } // This function is called at various times depending on whether we are rendering\n        // or prerendering. In this implementation we only actually emit headers once and\n        // subsequent calls are ignored. We track whether the request has a completed shell\n        // to determine whether we will follow headers with a flush including stylesheets.\n        // In the context of prerrender we don't have a completed shell when the request finishes\n        // with a postpone in the shell. In the context of a render we don't have a completed shell\n        // if this is called before the shell finishes rendering which usually will happen anytime\n        // anything suspends in the shell.\n        function emitEarlyPreloads(renderState, resumableState, shellComplete) {\n            var onHeaders = renderState.onHeaders;\n            if (onHeaders) {\n                var headers = renderState.headers;\n                if (headers) {\n                    // Even if onHeaders throws we don't want to call this again so\n                    // we drop the headers state from this point onwards.\n                    renderState.headers = null;\n                    var linkHeader = headers.preconnects;\n                    if (headers.fontPreloads) {\n                        if (linkHeader) {\n                            linkHeader += \", \";\n                        }\n                        linkHeader += headers.fontPreloads;\n                    }\n                    if (headers.highImagePreloads) {\n                        if (linkHeader) {\n                            linkHeader += \", \";\n                        }\n                        linkHeader += headers.highImagePreloads;\n                    }\n                    if (!shellComplete) {\n                        // We use raw iterators because we want to be able to halt iteration\n                        // We could refactor renderState to store these dually in arrays to\n                        // make this more efficient at the cost of additional memory and\n                        // write overhead. However this code only runs once per request so\n                        // for now I consider this sufficient.\n                        var queueIter = renderState.styles.values();\n                        outer: for(var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()){\n                            var sheets = queueStep.value.sheets;\n                            var sheetIter = sheets.values();\n                            for(var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()){\n                                var sheet = sheetStep.value;\n                                var props = sheet.props;\n                                var key = getResourceKey(props.href);\n                                var header = getStylesheetPreloadAsHeader(sheet); // We mutate the capacity b/c we don't want to keep checking if later headers will fit.\n                                // This means that a particularly long header might close out the header queue where later\n                                // headers could still fit. We could in the future alter the behavior here based on prerender vs render\n                                // since during prerender we aren't as concerned with pure runtime performance.\n                                if ((headers.remainingCapacity -= header.length) >= 2) {\n                                    renderState.resets.style[key] = PRELOAD_NO_CREDS;\n                                    if (linkHeader) {\n                                        linkHeader += \", \";\n                                    }\n                                    linkHeader += header; // We already track that the resource exists in resumableState however\n                                    // if the resumableState resets because we postponed in the shell\n                                    // which is what is happening in this branch if we are prerendering\n                                    // then we will end up resetting the resumableState. When it resets we\n                                    // want to record the fact that this stylesheet was already preloaded\n                                    renderState.resets.style[key] = typeof props.crossOrigin === \"string\" || typeof props.integrity === \"string\" ? [\n                                        props.crossOrigin,\n                                        props.integrity\n                                    ] : PRELOAD_NO_CREDS;\n                                } else {\n                                    break outer;\n                                }\n                            }\n                        }\n                    }\n                    if (linkHeader) {\n                        onHeaders({\n                            Link: linkHeader\n                        });\n                    } else {\n                        // We still call this with no headers because a user may be using it as a signal that\n                        // it React will not provide any headers\n                        onHeaders({});\n                    }\n                    return;\n                }\n            }\n        }\n        function createRenderState(resumableState, generateStaticMarkup) {\n            var renderState = createRenderState$1(resumableState, undefined, undefined, undefined, undefined, undefined);\n            return {\n                // Keep this in sync with ReactFizzConfigDOM\n                placeholderPrefix: renderState.placeholderPrefix,\n                segmentPrefix: renderState.segmentPrefix,\n                boundaryPrefix: renderState.boundaryPrefix,\n                startInlineScript: renderState.startInlineScript,\n                htmlChunks: renderState.htmlChunks,\n                headChunks: renderState.headChunks,\n                externalRuntimeScript: renderState.externalRuntimeScript,\n                bootstrapChunks: renderState.bootstrapChunks,\n                onHeaders: renderState.onHeaders,\n                headers: renderState.headers,\n                resets: renderState.resets,\n                charsetChunks: renderState.charsetChunks,\n                preconnectChunks: renderState.preconnectChunks,\n                importMapChunks: renderState.importMapChunks,\n                preloadChunks: renderState.preloadChunks,\n                hoistableChunks: renderState.hoistableChunks,\n                preconnects: renderState.preconnects,\n                fontPreloads: renderState.fontPreloads,\n                highImagePreloads: renderState.highImagePreloads,\n                // usedImagePreloads: renderState.usedImagePreloads,\n                styles: renderState.styles,\n                bootstrapScripts: renderState.bootstrapScripts,\n                scripts: renderState.scripts,\n                bulkPreloads: renderState.bulkPreloads,\n                preloads: renderState.preloads,\n                boundaryResources: renderState.boundaryResources,\n                stylesToHoist: renderState.stylesToHoist,\n                // This is an extra field for the legacy renderer\n                generateStaticMarkup: generateStaticMarkup\n            };\n        }\n        var doctypeChunk = stringToPrecomputedChunk(\"\");\n        function pushTextInstance(target, text, renderState, textEmbedded) {\n            if (renderState.generateStaticMarkup) {\n                target.push(stringToChunk(escapeTextForBrowser(text)));\n                return false;\n            } else {\n                return pushTextInstance$1(target, text, renderState, textEmbedded);\n            }\n        }\n        function pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {\n            if (renderState.generateStaticMarkup) {\n                return;\n            } else {\n                return pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded);\n            }\n        }\n        function writeStartCompletedSuspenseBoundary(destination, renderState) {\n            if (renderState.generateStaticMarkup) {\n                // A completed boundary is done and doesn't need a representation in the HTML\n                // if we're not going to be hydrating it.\n                return true;\n            }\n            return writeStartCompletedSuspenseBoundary$1(destination);\n        }\n        function writeStartClientRenderedSuspenseBoundary(destination, renderState, errorDigest, errorMessage, errorComponentStack) {\n            if (renderState.generateStaticMarkup) {\n                // A client rendered boundary is done and doesn't need a representation in the HTML\n                // since we'll never hydrate it. This is arguably an error in static generation.\n                return true;\n            }\n            return writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMessage, errorComponentStack);\n        }\n        function writeEndCompletedSuspenseBoundary(destination, renderState) {\n            if (renderState.generateStaticMarkup) {\n                return true;\n            }\n            return writeEndCompletedSuspenseBoundary$1(destination);\n        }\n        function writeEndClientRenderedSuspenseBoundary(destination, renderState) {\n            if (renderState.generateStaticMarkup) {\n                return true;\n            }\n            return writeEndClientRenderedSuspenseBoundary$1(destination);\n        }\n        var NotPendingTransition = NotPending;\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher$1.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher$1.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeClassComponentFrame(ctor, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(ctor, true);\n            }\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct$1(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct$1(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement(null);\n                        }\n                    }\n                }\n            }\n        }\n        var warnedAboutMissingGetChildContext;\n        {\n            warnedAboutMissingGetChildContext = {};\n        }\n        var emptyContextObject = {};\n        {\n            Object.freeze(emptyContextObject);\n        }\n        function getMaskedContext(type, unmaskedContext) {\n            {\n                var contextTypes = type.contextTypes;\n                if (!contextTypes) {\n                    return emptyContextObject;\n                }\n                var context = {};\n                for(var key in contextTypes){\n                    context[key] = unmaskedContext[key];\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(contextTypes, context, \"context\", name);\n                }\n                return context;\n            }\n        }\n        function processChildContext(instance, type, parentContext, childContextTypes) {\n            {\n                // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n                // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n                if (typeof instance.getChildContext !== \"function\") {\n                    {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!warnedAboutMissingGetChildContext[componentName]) {\n                            warnedAboutMissingGetChildContext[componentName] = true;\n                            error(\"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName);\n                        }\n                    }\n                    return parentContext;\n                }\n                var childContext = instance.getChildContext();\n                for(var contextKey in childContext){\n                    if (!(contextKey in childContextTypes)) {\n                        throw new Error((getComponentNameFromType(type) || \"Unknown\") + '.getChildContext(): key \"' + contextKey + '\" is not defined in childContextTypes.');\n                    }\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(childContextTypes, childContext, \"child context\", name);\n                }\n                return assign({}, parentContext, childContext);\n            }\n        }\n        var rendererSigil;\n        {\n            // Use this to detect multiple renderers using the same context\n            rendererSigil = {};\n        }\n        // Forming a reverse tree.\n        // The structure of a context snapshot is an implementation of this file.\n        // Currently, it's implemented as tracking the current active node.\n        var rootContextSnapshot = null; // We assume that this runtime owns the \"current\" field on all ReactContext instances.\n        // This global (actually thread local) state represents what state all those \"current\",\n        // fields are currently in.\n        var currentActiveSnapshot = null;\n        function popNode(prev) {\n            {\n                prev.context._currentValue2 = prev.parentValue;\n            }\n        }\n        function pushNode(next) {\n            {\n                next.context._currentValue2 = next.value;\n            }\n        }\n        function popToNearestCommonAncestor(prev, next) {\n            if (prev === next) ;\n            else {\n                popNode(prev);\n                var parentPrev = prev.parent;\n                var parentNext = next.parent;\n                if (parentPrev === null) {\n                    if (parentNext !== null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                } else {\n                    if (parentNext === null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                    popToNearestCommonAncestor(parentPrev, parentNext);\n                } // On the way back, we push the new ones that weren't common.\n                pushNode(next);\n            }\n        }\n        function popAllPrevious(prev) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev !== null) {\n                popAllPrevious(parentPrev);\n            }\n        }\n        function pushAllNext(next) {\n            var parentNext = next.parent;\n            if (parentNext !== null) {\n                pushAllNext(parentNext);\n            }\n            pushNode(next);\n        }\n        function popPreviousToCommonLevel(prev, next) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (parentPrev.depth === next.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(parentPrev, next);\n            } else {\n                // We must still be deeper.\n                popPreviousToCommonLevel(parentPrev, next);\n            }\n        }\n        function popNextToCommonLevel(prev, next) {\n            var parentNext = next.parent;\n            if (parentNext === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (prev.depth === parentNext.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(prev, parentNext);\n            } else {\n                // We must still be deeper.\n                popNextToCommonLevel(prev, parentNext);\n            }\n            pushNode(next);\n        } // Perform context switching to the new snapshot.\n        // To make it cheap to read many contexts, while not suspending, we make the switch eagerly by\n        // updating all the context's current values. That way reads, always just read the current value.\n        // At the cost of updating contexts even if they're never read by this subtree.\n        function switchContext(newSnapshot) {\n            // The basic algorithm we need to do is to pop back any contexts that are no longer on the stack.\n            // We also need to update any new contexts that are now on the stack with the deepest value.\n            // The easiest way to update new contexts is to just reapply them in reverse order from the\n            // perspective of the backpointers. To avoid allocating a lot when switching, we use the stack\n            // for that. Therefore this algorithm is recursive.\n            // 1) First we pop which ever snapshot tree was deepest. Popping old contexts as we go.\n            // 2) Then we find the nearest common ancestor from there. Popping old contexts as we go.\n            // 3) Then we reapply new contexts on the way back up the stack.\n            var prev = currentActiveSnapshot;\n            var next = newSnapshot;\n            if (prev !== next) {\n                if (prev === null) {\n                    // $FlowFixMe[incompatible-call]: This has to be non-null since it's not equal to prev.\n                    pushAllNext(next);\n                } else if (next === null) {\n                    popAllPrevious(prev);\n                } else if (prev.depth === next.depth) {\n                    popToNearestCommonAncestor(prev, next);\n                } else if (prev.depth > next.depth) {\n                    popPreviousToCommonLevel(prev, next);\n                } else {\n                    popNextToCommonLevel(prev, next);\n                }\n                currentActiveSnapshot = next;\n            }\n        }\n        function pushProvider(context, nextValue) {\n            var prevValue;\n            {\n                prevValue = context._currentValue2;\n                context._currentValue2 = nextValue;\n                {\n                    if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer2 = rendererSigil;\n                }\n            }\n            var prevNode = currentActiveSnapshot;\n            var newNode = {\n                parent: prevNode,\n                depth: prevNode === null ? 0 : prevNode.depth + 1,\n                context: context,\n                parentValue: prevValue,\n                value: nextValue\n            };\n            currentActiveSnapshot = newNode;\n            return newNode;\n        }\n        function popProvider(context) {\n            var prevSnapshot = currentActiveSnapshot;\n            if (prevSnapshot === null) {\n                throw new Error(\"Tried to pop a Context at the root of the app. This is a bug in React.\");\n            }\n            {\n                if (prevSnapshot.context !== context) {\n                    error(\"The parent context is not the expected context. This is probably a bug in React.\");\n                }\n            }\n            {\n                var _value = prevSnapshot.parentValue;\n                if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;\n                } else {\n                    prevSnapshot.context._currentValue2 = _value;\n                }\n                {\n                    if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer2 = rendererSigil;\n                }\n            }\n            return currentActiveSnapshot = prevSnapshot.parent;\n        }\n        function getActiveContext() {\n            return currentActiveSnapshot;\n        }\n        function readContext$1(context) {\n            var value = context._currentValue2;\n            return value;\n        }\n        /**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */ function get(key) {\n            return key._reactInternals;\n        }\n        function set(key, value) {\n            key._reactInternals = value;\n        }\n        var didWarnAboutNoopUpdateForComponent = {};\n        var didWarnAboutDeprecatedWillMount = {};\n        var didWarnAboutUninitializedState;\n        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n        var didWarnAboutLegacyLifecyclesAndDerivedState;\n        var didWarnAboutUndefinedDerivedState;\n        var didWarnAboutDirectlyAssigningPropsToState;\n        var didWarnAboutContextTypeAndContextTypes;\n        var didWarnAboutInvalidateContextType;\n        var didWarnOnInvalidCallback;\n        {\n            didWarnAboutUninitializedState = new Set();\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n            didWarnAboutDirectlyAssigningPropsToState = new Set();\n            didWarnAboutUndefinedDerivedState = new Set();\n            didWarnAboutContextTypeAndContextTypes = new Set();\n            didWarnAboutInvalidateContextType = new Set();\n            didWarnOnInvalidCallback = new Set();\n        }\n        function warnOnInvalidCallback(callback, callerName) {\n            {\n                if (callback === null || typeof callback === \"function\") {\n                    return;\n                }\n                var key = callerName + \"_\" + callback;\n                if (!didWarnOnInvalidCallback.has(key)) {\n                    didWarnOnInvalidCallback.add(key);\n                    error(\"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, callback);\n                }\n            }\n        }\n        function warnOnUndefinedDerivedState(type, partialState) {\n            {\n                if (partialState === undefined) {\n                    var componentName = getComponentNameFromType(type) || \"Component\";\n                    if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n                        didWarnAboutUndefinedDerivedState.add(componentName);\n                        error(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" + \"You have returned undefined.\", componentName);\n                    }\n                }\n            }\n        }\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && getComponentNameFromType(_constructor) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnAboutNoopUpdateForComponent[warningKey]) {\n                    return;\n                }\n                error(\"%s(...): Can only update a mounting component. \" + \"This usually means you called %s() outside componentWillMount() on the server. \" + \"This is a no-op.\\n\\nPlease check the code for the %s component.\", callerName, callerName, componentName);\n                didWarnAboutNoopUpdateForComponent[warningKey] = true;\n            }\n        }\n        var classComponentUpdater = {\n            isMounted: function(inst) {\n                return false;\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueSetState: function(inst, payload, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"setState\");\n                } else {\n                    internals.queue.push(payload);\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            },\n            enqueueReplaceState: function(inst, payload, callback) {\n                var internals = get(inst);\n                internals.replace = true;\n                internals.queue = [\n                    payload\n                ];\n                {\n                    if (callback !== undefined && callback !== null) {\n                        warnOnInvalidCallback(callback, \"setState\");\n                    }\n                }\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueForceUpdate: function(inst, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"forceUpdate\");\n                } else {\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            }\n        };\n        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {\n            var partialState = getDerivedStateFromProps(nextProps, prevState);\n            {\n                warnOnUndefinedDerivedState(ctor, partialState);\n            }\n            var newState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n            return newState;\n        }\n        function constructClassInstance(ctor, props, maskedLegacyContext) {\n            var context = emptyContextObject;\n            var contextType = ctor.contextType;\n            {\n                if (\"contextType\" in ctor) {\n                    var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n                    if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n                        didWarnAboutInvalidateContextType.add(ctor);\n                        var addendum = \"\";\n                        if (contextType === undefined) {\n                            addendum = \" However, it is set to undefined. \" + \"This can be caused by a typo or by mixing up named and default imports. \" + \"This can also happen due to a circular dependency, so \" + \"try moving the createContext() call to a separate file.\";\n                        } else if (typeof contextType !== \"object\") {\n                            addendum = \" However, it is set to a \" + typeof contextType + \".\";\n                        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n                            addendum = \" Did you accidentally pass the Context.Provider instead?\";\n                        } else if (contextType._context !== undefined) {\n                            // <Context.Consumer>\n                            addendum = \" Did you accidentally pass the Context.Consumer instead?\";\n                        } else {\n                            addendum = \" However, it is set to an object with keys {\" + Object.keys(contextType).join(\", \") + \"}.\";\n                        }\n                        error(\"%s defines an invalid contextType. \" + \"contextType should point to the Context object returned by React.createContext().%s\", getComponentNameFromType(ctor) || \"Component\", addendum);\n                    }\n                }\n            }\n            if (typeof contextType === \"object\" && contextType !== null) {\n                context = readContext$1(contextType);\n            } else {\n                context = maskedLegacyContext;\n            }\n            var instance = new ctor(props, context);\n            {\n                if (typeof ctor.getDerivedStateFromProps === \"function\" && (instance.state === null || instance.state === undefined)) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutUninitializedState.has(componentName)) {\n                        didWarnAboutUninitializedState.add(componentName);\n                        error(\"`%s` uses `getDerivedStateFromProps` but its initial state is \" + \"%s. This is not recommended. Instead, define the initial state by \" + \"assigning an object to `this.state` in the constructor of `%s`. \" + \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\", componentName, instance.state === null ? \"null\" : \"undefined\", componentName);\n                    }\n                } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n                // Warn about these lifecycles if they are present.\n                // Don't warn about react-lifecycles-compat polyfilled methods though.\n                if (typeof ctor.getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    var foundWillMountName = null;\n                    var foundWillReceivePropsName = null;\n                    var foundWillUpdateName = null;\n                    if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        foundWillMountName = \"componentWillMount\";\n                    } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                        foundWillMountName = \"UNSAFE_componentWillMount\";\n                    }\n                    if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                        foundWillReceivePropsName = \"componentWillReceiveProps\";\n                    } else if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n                        foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n                    }\n                    if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                        foundWillUpdateName = \"componentWillUpdate\";\n                    } else if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n                        foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n                    }\n                    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n                        var _componentName = getComponentNameFromType(ctor) || \"Component\";\n                        var newApiName = typeof ctor.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                            error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" + \"The above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://reactjs.org/link/unsafe-component-lifecycles\", _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\", foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\", foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\");\n                        }\n                    }\n                }\n            }\n            return instance;\n        }\n        function checkClassInstance(instance, ctor, newProps) {\n            {\n                var name = getComponentNameFromType(ctor) || \"Component\";\n                var renderPresent = instance.render;\n                if (!renderPresent) {\n                    if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: did you accidentally return an object from the constructor?\", name);\n                    } else {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", name);\n                    }\n                }\n                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n                    error(\"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", name);\n                }\n                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", name);\n                }\n                if (instance.propTypes) {\n                    error(\"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", name);\n                }\n                if (instance.contextType) {\n                    error(\"contextType was defined as an instance property on %s. Use a static \" + \"property to define contextType instead.\", name);\n                }\n                {\n                    if (instance.contextTypes) {\n                        error(\"contextTypes was defined as an instance property on %s. Use a static \" + \"property to define contextTypes instead.\", name);\n                    }\n                    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n                        didWarnAboutContextTypeAndContextTypes.add(ctor);\n                        error(\"%s declares both contextTypes and contextType static properties. \" + \"The legacy contextTypes property will be ignored.\", name);\n                    }\n                }\n                if (typeof instance.componentShouldUpdate === \"function\") {\n                    error(\"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", name);\n                }\n                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== \"undefined\") {\n                    error(\"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", getComponentNameFromType(ctor) || \"A pure component\");\n                }\n                if (typeof instance.componentDidUnmount === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", name);\n                }\n                if (typeof instance.componentDidReceiveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidReceiveProps(). But there is no such lifecycle method. \" + \"If you meant to update the state in response to changing props, \" + \"use componentWillReceiveProps(). If you meant to fetch data or \" + \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\", name);\n                }\n                if (typeof instance.componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", name);\n                }\n                if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\", name);\n                }\n                var hasMutatedProps = instance.props !== newProps;\n                if (instance.props !== undefined && hasMutatedProps) {\n                    error(\"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", name, name);\n                }\n                if (instance.defaultProps) {\n                    error(\"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", name, name);\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\" && typeof instance.componentDidUpdate !== \"function\" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n                    error(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" + \"This component defines getSnapshotBeforeUpdate() only.\", getComponentNameFromType(ctor));\n                }\n                if (typeof instance.getDerivedStateFromProps === \"function\") {\n                    error(\"%s: getDerivedStateFromProps() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof instance.getDerivedStateFromError === \"function\") {\n                    error(\"%s: getDerivedStateFromError() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n                    error(\"%s: getSnapshotBeforeUpdate() is defined as a static method \" + \"and will be ignored. Instead, declare it as an instance method.\", name);\n                }\n                var state = instance.state;\n                if (state && (typeof state !== \"object\" || isArray(state))) {\n                    error(\"%s.state: must be set to an object or null\", name);\n                }\n                if (typeof instance.getChildContext === \"function\" && typeof ctor.childContextTypes !== \"object\") {\n                    error(\"%s.getChildContext(): childContextTypes must be defined in order to \" + \"use getChildContext().\", name);\n                }\n            }\n        }\n        function callComponentWillMount(type, instance) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillMount === \"function\") {\n                {\n                    if (instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!didWarnAboutDeprecatedWillMount[componentName]) {\n                            warn(\"componentWillMount has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code from componentWillMount to componentDidMount (preferred in most cases) \" + \"or the constructor.\\n\" + \"\\nPlease update the following components: %s\", componentName);\n                            didWarnAboutDeprecatedWillMount[componentName] = true;\n                        }\n                    }\n                }\n                instance.componentWillMount();\n            }\n            if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                instance.UNSAFE_componentWillMount();\n            }\n            if (oldState !== instance.state) {\n                {\n                    error(\"%s.componentWillMount(): Assigning directly to this.state is \" + \"deprecated (except inside a component's \" + \"constructor). Use setState instead.\", getComponentNameFromType(type) || \"Component\");\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        }\n        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {\n            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {\n                var oldQueue = internalInstance.queue;\n                var oldReplace = internalInstance.replace;\n                internalInstance.queue = null;\n                internalInstance.replace = false;\n                if (oldReplace && oldQueue.length === 1) {\n                    inst.state = oldQueue[0];\n                } else {\n                    var nextState = oldReplace ? oldQueue[0] : inst.state;\n                    var dontMutate = true;\n                    for(var i = oldReplace ? 1 : 0; i < oldQueue.length; i++){\n                        var partial = oldQueue[i];\n                        var partialState = typeof partial === \"function\" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;\n                        if (partialState != null) {\n                            if (dontMutate) {\n                                dontMutate = false;\n                                nextState = assign({}, nextState, partialState);\n                            } else {\n                                assign(nextState, partialState);\n                            }\n                        }\n                    }\n                    inst.state = nextState;\n                }\n            } else {\n                internalInstance.queue = null;\n            }\n        } // Invokes the mount life-cycles on a previously never rendered instance.\n        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {\n            {\n                checkClassInstance(instance, ctor, newProps);\n            }\n            var initialState = instance.state !== undefined ? instance.state : null;\n            instance.updater = classComponentUpdater;\n            instance.props = newProps;\n            instance.state = initialState; // We don't bother initializing the refs object on the server, since we're not going to resolve them anyway.\n            // The internal instance will be used to manage updates that happen during this mount.\n            var internalInstance = {\n                queue: [],\n                replace: false\n            };\n            set(instance, internalInstance);\n            var contextType = ctor.contextType;\n            if (typeof contextType === \"object\" && contextType !== null) {\n                instance.context = readContext$1(contextType);\n            } else {\n                instance.context = maskedLegacyContext;\n            }\n            {\n                if (instance.state === newProps) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n                        error(\"%s: It is not recommended to assign props directly to state \" + \"because updates to props won't be reflected in state. \" + \"In most cases, it is better to use props directly.\", componentName);\n                    }\n                }\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            if (typeof getDerivedStateFromProps === \"function\") {\n                instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);\n            } // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (typeof ctor.getDerivedStateFromProps !== \"function\" && typeof instance.getSnapshotBeforeUpdate !== \"function\" && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n                callComponentWillMount(ctor, instance); // If we had additional state updates during this life-cycle, let's\n                // process them now.\n                processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);\n            }\n        }\n        // Ids are base 32 strings whose binary representation corresponds to the\n        // position of a node in a tree.\n        // Every time the tree forks into multiple children, we add additional bits to\n        // the left of the sequence that represent the position of the child within the\n        // current level of children.\n        //\n        //      00101       00010001011010101\n        //      ╰─┬─╯       ╰───────┬───────╯\n        //   Fork 5 of 20       Parent id\n        //\n        // The leading 0s are important. In the above example, you only need 3 bits to\n        // represent slot 5. However, you need 5 bits to represent all the forks at\n        // the current level, so we must account for the empty bits at the end.\n        //\n        // For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n        // the zeroth id at a level would be indistinguishable from its parent.\n        //\n        // If a node has only one child, and does not materialize an id (i.e. does not\n        // contain a useId hook), then we don't need to allocate any space in the\n        // sequence. It's treated as a transparent indirection. For example, these two\n        // trees produce the same ids:\n        //\n        // <>                          <>\n        //   <Indirection>               <A />\n        //     <A />                     <B />\n        //   </Indirection>            </>\n        //   <B />\n        // </>\n        //\n        // However, we cannot skip any node that materializes an id. Otherwise, a parent\n        // id that does not fork would be indistinguishable from its child id. For\n        // example, this tree does not fork, but the parent and child must have\n        // different ids.\n        //\n        // <Parent>\n        //   <Child />\n        // </Parent>\n        //\n        // To handle this scenario, every time we materialize an id, we allocate a\n        // new level with a single slot. You can think of this as a fork with only one\n        // prong, or an array of children with length 1.\n        //\n        // It's possible for the size of the sequence to exceed 32 bits, the max\n        // size for bitwise operations. When this happens, we make more room by\n        // converting the right part of the id to a string and storing it in an overflow\n        // variable. We use a base 32 string representation, because 32 is the largest\n        // power of 2 that is supported by toString(). We want the base to be large so\n        // that the resulting ids are compact, and we want the base to be a power of 2\n        // because every log2(base) bits corresponds to a single character, i.e. every\n        // log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n        // affecting the final result.\n        var emptyTreeContext = {\n            id: 1,\n            overflow: \"\"\n        };\n        function getTreeId(context) {\n            var overflow = context.overflow;\n            var idWithLeadingBit = context.id;\n            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n            return id.toString(32) + overflow;\n        }\n        function pushTreeContext(baseContext, totalChildren, index) {\n            var baseIdWithLeadingBit = baseContext.id;\n            var baseOverflow = baseContext.overflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n            // of the id; we use it to account for leading 0s.\n            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n            var slot = index + 1;\n            var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n            // consideration the leading 1 we use to mark the end of the sequence.\n            if (length > 30) {\n                // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n                // This branch assumes the length of the base id is greater than 5; it won't\n                // work for smaller ids, because you need 5 bits per character.\n                //\n                // We encode the id in multiple steps: first the base id, then the\n                // remaining digits.\n                //\n                // Each 5 bit sequence corresponds to a single base 32 character. So for\n                // example, if the current id is 23 bits long, we can convert 20 of those\n                // bits into a string of 4 characters, with 3 bits left over.\n                //\n                // First calculate how many bits in the base id represent a complete\n                // sequence of characters.\n                var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n                var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n                var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n                var restOfBaseId = baseId >> numberOfOverflowBits;\n                var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n                // we made more room, this time it won't overflow.\n                var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n                var restOfNewBits = slot << restOfBaseLength;\n                var id = restOfNewBits | restOfBaseId;\n                var overflow = newOverflow + baseOverflow;\n                return {\n                    id: 1 << restOfLength | id,\n                    overflow: overflow\n                };\n            } else {\n                // Normal path\n                var newBits = slot << baseLength;\n                var _id = newBits | baseId;\n                var _overflow = baseOverflow;\n                return {\n                    id: 1 << length | _id,\n                    overflow: _overflow\n                };\n            }\n        }\n        function getBitLength(number) {\n            return 32 - clz32(number);\n        }\n        function getLeadingBit(id) {\n            return 1 << getBitLength(id) - 1;\n        } // TODO: Math.clz32 is supported in Node 12+. Maybe we can drop the fallback.\n        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n        // Based on:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n        var log = Math.log;\n        var LN2 = Math.LN2;\n        function clz32Fallback(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0;\n        }\n        // Corresponds to ReactFiberWakeable and ReactFlightWakeable modules. Generally,\n        // changes to one module should be reflected in the others.\n        // TODO: Rename this module and the corresponding Fiber one to \"Thenable\"\n        // instead of \"Wakeable\". Or some other more appropriate name.\n        // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n        // detect this is caught by userspace, we'll log a warning in development.\n        var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + \"detail of `use` to interrupt the current render. You must either \" + \"rethrow it immediately, or move the `use` call outside of the \" + \"`try/catch` block. Capturing without rethrowing will lead to \" + \"unexpected behavior.\\n\\n\" + \"To handle async errors, wrap your component in an error boundary, or \" + \"call the promise's `.catch` method and pass the result to `use`\");\n        function createThenableState() {\n            // The ThenableState is created the first time a component suspends. If it\n            // suspends again, we'll reuse the same state.\n            return [];\n        }\n        function noop$2() {}\n        function trackUsedThenable(thenableState, thenable, index) {\n            var previous = thenableState[index];\n            if (previous === undefined) {\n                thenableState.push(thenable);\n            } else {\n                if (previous !== thenable) {\n                    // Reuse the previous thenable, and drop the new one. We can assume\n                    // they represent the same value, because components are idempotent.\n                    // Avoid an unhandled rejection errors for the Promises that we'll\n                    // intentionally ignore.\n                    thenable.then(noop$2, noop$2);\n                    thenable = previous;\n                }\n            } // We use an expando to track the status and result of a thenable so that we\n            // can synchronously unwrap the value. Think of this as an extension of the\n            // Promise API, or a custom interface that is a superset of Thenable.\n            //\n            // If the thenable doesn't have a status, set it to \"pending\" and attach\n            // a listener that will update its status and result when it resolves.\n            switch(thenable.status){\n                case \"fulfilled\":\n                    {\n                        var fulfilledValue = thenable.value;\n                        return fulfilledValue;\n                    }\n                case \"rejected\":\n                    {\n                        var rejectedError = thenable.reason;\n                        throw rejectedError;\n                    }\n                default:\n                    {\n                        if (typeof thenable.status === \"string\") ;\n                        else {\n                            var pendingThenable = thenable;\n                            pendingThenable.status = \"pending\";\n                            pendingThenable.then(function(fulfilledValue) {\n                                if (thenable.status === \"pending\") {\n                                    var fulfilledThenable = thenable;\n                                    fulfilledThenable.status = \"fulfilled\";\n                                    fulfilledThenable.value = fulfilledValue;\n                                }\n                            }, function(error) {\n                                if (thenable.status === \"pending\") {\n                                    var rejectedThenable = thenable;\n                                    rejectedThenable.status = \"rejected\";\n                                    rejectedThenable.reason = error;\n                                }\n                            }); // Check one more time in case the thenable resolved synchronously\n                            switch(thenable.status){\n                                case \"fulfilled\":\n                                    {\n                                        var fulfilledThenable = thenable;\n                                        return fulfilledThenable.value;\n                                    }\n                                case \"rejected\":\n                                    {\n                                        var rejectedThenable = thenable;\n                                        throw rejectedThenable.reason;\n                                    }\n                            }\n                        } // Suspend.\n                        //\n                        // Throwing here is an implementation detail that allows us to unwind the\n                        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n                        // opaque placeholder value instead of the actual thenable. If it doesn't\n                        // get captured by the work loop, log a warning, because that means\n                        // something in userspace must have caught it.\n                        suspendedThenable = thenable;\n                        throw SuspenseException;\n                    }\n            }\n        } // This is used to track the actual thenable that suspended so it can be\n        // passed to the rest of the Suspense implementation — which, for historical\n        // reasons, expects to receive a thenable.\n        var suspendedThenable = null;\n        function getSuspendedThenable() {\n            // This is called right after `use` suspends by throwing an exception. `use`\n            // throws an opaque value instead of the thenable itself so that it can't be\n            // caught in userspace. Then the work loop accesses the actual thenable using\n            // this function.\n            if (suspendedThenable === null) {\n                throw new Error(\"Expected a suspended thenable. This is a bug in React. Please file \" + \"an issue.\");\n            }\n            var thenable = suspendedThenable;\n            suspendedThenable = null;\n            return thenable;\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        var currentlyRenderingComponent = null;\n        var currentlyRenderingTask = null;\n        var currentlyRenderingRequest = null;\n        var currentlyRenderingKeyPath = null;\n        var firstWorkInProgressHook = null;\n        var workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook\n        var isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n        var didScheduleRenderPhaseUpdate = false; // Counts the number of useId hooks in this component\n        var localIdCounter = 0; // Chunks that should be pushed to the stream once the component\n        // finishes rendering.\n        // Counts the number of useFormState calls in this component\n        var formStateCounter = 0; // The index of the useFormState hook that matches the one passed in at the\n        // root during an MPA navigation, if any.\n        var formStateMatchingIndex = -1; // Counts the number of use(thenable) calls in this component\n        var thenableIndexCounter = 0;\n        var thenableState = null; // Lazily created map of render-phase updates\n        var renderPhaseUpdates = null; // Counter to prevent infinite loops.\n        var numberOfReRenders = 0;\n        var RE_RENDER_LIMIT = 25;\n        var isInHookUserCodeInDev = false; // In DEV, this is the name of the currently executing primitive hook\n        var currentHookNameInDev;\n        function resolveCurrentlyRenderingComponent() {\n            if (currentlyRenderingComponent === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n            }\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" + \"You can only call Hooks at the top level of your React function. \" + \"For more information, see \" + \"https://reactjs.org/link/rules-of-hooks\");\n                }\n            }\n            return currentlyRenderingComponent;\n        }\n        function areHookInputsEqual(nextDeps, prevDeps) {\n            if (prevDeps === null) {\n                {\n                    error(\"%s received a final argument during this render, but not during \" + \"the previous render. Even though the final argument is optional, \" + \"its type cannot change between renders.\", currentHookNameInDev);\n                }\n                return false;\n            }\n            {\n                // Don't bother comparing lengths in prod because these arrays should be\n                // passed inline.\n                if (nextDeps.length !== prevDeps.length) {\n                    error(\"The final argument passed to %s changed size between renders. The \" + \"order and size of this array must remain constant.\\n\\n\" + \"Previous: %s\\n\" + \"Incoming: %s\", currentHookNameInDev, \"[\" + nextDeps.join(\", \") + \"]\", \"[\" + prevDeps.join(\", \") + \"]\");\n                }\n            }\n            for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){\n                // $FlowFixMe[incompatible-use] found when upgrading Flow\n                if (objectIs(nextDeps[i], prevDeps[i])) {\n                    continue;\n                }\n                return false;\n            }\n            return true;\n        }\n        function createHook() {\n            if (numberOfReRenders > 0) {\n                throw new Error(\"Rendered more hooks than during the previous render\");\n            }\n            return {\n                memoizedState: null,\n                queue: null,\n                next: null\n            };\n        }\n        function createWorkInProgressHook() {\n            if (workInProgressHook === null) {\n                // This is the first hook in the list\n                if (firstWorkInProgressHook === null) {\n                    isReRender = false;\n                    firstWorkInProgressHook = workInProgressHook = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = firstWorkInProgressHook;\n                }\n            } else {\n                if (workInProgressHook.next === null) {\n                    isReRender = false; // Append to the end of the list\n                    workInProgressHook = workInProgressHook.next = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = workInProgressHook.next;\n                }\n            }\n            return workInProgressHook;\n        }\n        function prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {\n            currentlyRenderingComponent = componentIdentity;\n            currentlyRenderingTask = task;\n            currentlyRenderingRequest = request;\n            currentlyRenderingKeyPath = keyPath;\n            {\n                isInHookUserCodeInDev = false;\n            }\n            // didScheduleRenderPhaseUpdate = false;\n            // firstWorkInProgressHook = null;\n            // numberOfReRenders = 0;\n            // renderPhaseUpdates = null;\n            // workInProgressHook = null;\n            localIdCounter = 0;\n            formStateCounter = 0;\n            formStateMatchingIndex = -1;\n            thenableIndexCounter = 0;\n            thenableState = prevThenableState;\n        }\n        function finishHooks(Component, props, children, refOrContext) {\n            // This must be called after every function component to prevent hooks from\n            // being used in classes.\n            while(didScheduleRenderPhaseUpdate){\n                // Updates were scheduled during the render phase. They are stored in\n                // the `renderPhaseUpdates` map. Call the component again, reusing the\n                // work-in-progress hooks and applying the additional updates on top. Keep\n                // restarting until no more updates are scheduled.\n                didScheduleRenderPhaseUpdate = false;\n                localIdCounter = 0;\n                formStateCounter = 0;\n                formStateMatchingIndex = -1;\n                thenableIndexCounter = 0;\n                numberOfReRenders += 1; // Start over from the beginning of the list\n                workInProgressHook = null;\n                children = Component(props, refOrContext);\n            }\n            resetHooksState();\n            return children;\n        }\n        function getThenableStateAfterSuspending() {\n            var state = thenableState;\n            thenableState = null;\n            return state;\n        }\n        function checkDidRenderIdHook() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            var didRenderIdHook = localIdCounter !== 0;\n            return didRenderIdHook;\n        }\n        function getFormStateCount() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            return formStateCounter;\n        }\n        function getFormStateMatchingIndex() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            return formStateMatchingIndex;\n        } // Reset the internal hooks state if an error occurs while rendering a component\n        function resetHooksState() {\n            {\n                isInHookUserCodeInDev = false;\n            }\n            currentlyRenderingComponent = null;\n            currentlyRenderingTask = null;\n            currentlyRenderingRequest = null;\n            currentlyRenderingKeyPath = null;\n            didScheduleRenderPhaseUpdate = false;\n            firstWorkInProgressHook = null;\n            numberOfReRenders = 0;\n            renderPhaseUpdates = null;\n            workInProgressHook = null;\n        }\n        function readContext(context) {\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n                }\n            }\n            return readContext$1(context);\n        }\n        function useContext(context) {\n            {\n                currentHookNameInDev = \"useContext\";\n            }\n            resolveCurrentlyRenderingComponent();\n            return readContext$1(context);\n        }\n        function basicStateReducer(state, action) {\n            // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n            return typeof action === \"function\" ? action(state) : action;\n        }\n        function useState(initialState) {\n            {\n                currentHookNameInDev = \"useState\";\n            }\n            return useReducer(basicStateReducer, initialState);\n        }\n        function useReducer(reducer, initialArg, init) {\n            {\n                if (reducer !== basicStateReducer) {\n                    currentHookNameInDev = \"useReducer\";\n                }\n            }\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            if (isReRender) {\n                // This is a re-render. Apply the new render phase updates to the previous\n                // current hook.\n                var queue = workInProgressHook.queue;\n                var dispatch = queue.dispatch;\n                if (renderPhaseUpdates !== null) {\n                    // Render phase updates are stored in a map of queue -> linked list\n                    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                    if (firstRenderPhaseUpdate !== undefined) {\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        renderPhaseUpdates.delete(queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        var newState = workInProgressHook.memoizedState;\n                        var update = firstRenderPhaseUpdate;\n                        do {\n                            // Process this render phase update. We don't have to check the\n                            // priority because it will always be the same as the current\n                            // render's.\n                            var action = update.action;\n                            {\n                                isInHookUserCodeInDev = true;\n                            }\n                            newState = reducer(newState, action);\n                            {\n                                isInHookUserCodeInDev = false;\n                            }\n                            update = update.next;\n                        }while (update !== null); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        workInProgressHook.memoizedState = newState;\n                        return [\n                            newState,\n                            dispatch\n                        ];\n                    }\n                } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    dispatch\n                ];\n            } else {\n                {\n                    isInHookUserCodeInDev = true;\n                }\n                var initialState;\n                if (reducer === basicStateReducer) {\n                    // Special case for `useState`.\n                    initialState = typeof initialArg === \"function\" ? initialArg() : initialArg;\n                } else {\n                    initialState = init !== undefined ? init(initialArg) : initialArg;\n                }\n                {\n                    isInHookUserCodeInDev = false;\n                }\n                workInProgressHook.memoizedState = initialState; // $FlowFixMe[incompatible-use] found when upgrading Flow\n                var _queue = workInProgressHook.queue = {\n                    last: null,\n                    dispatch: null\n                };\n                var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    _dispatch\n                ];\n            }\n        }\n        function useMemo(nextCreate, deps) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            if (workInProgressHook !== null) {\n                var prevState = workInProgressHook.memoizedState;\n                if (prevState !== null) {\n                    if (nextDeps !== null) {\n                        var prevDeps = prevState[1];\n                        if (areHookInputsEqual(nextDeps, prevDeps)) {\n                            return prevState[0];\n                        }\n                    }\n                }\n            }\n            {\n                isInHookUserCodeInDev = true;\n            }\n            var nextValue = nextCreate();\n            {\n                isInHookUserCodeInDev = false;\n            }\n            workInProgressHook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function useRef(initialValue) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var previousRef = workInProgressHook.memoizedState;\n            if (previousRef === null) {\n                var ref = {\n                    current: initialValue\n                };\n                {\n                    Object.seal(ref);\n                }\n                workInProgressHook.memoizedState = ref;\n                return ref;\n            } else {\n                return previousRef;\n            }\n        }\n        function dispatchAction(componentIdentity, queue, action) {\n            if (numberOfReRenders >= RE_RENDER_LIMIT) {\n                throw new Error(\"Too many re-renders. React limits the number of renders to prevent \" + \"an infinite loop.\");\n            }\n            if (componentIdentity === currentlyRenderingComponent) {\n                // This is a render phase update. Stash it in a lazily-created map of\n                // queue -> linked list of updates. After this render pass, we'll restart\n                // and apply the stashed updates on top of the work-in-progress hook.\n                didScheduleRenderPhaseUpdate = true;\n                var update = {\n                    action: action,\n                    next: null\n                };\n                if (renderPhaseUpdates === null) {\n                    renderPhaseUpdates = new Map();\n                }\n                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                if (firstRenderPhaseUpdate === undefined) {\n                    // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    renderPhaseUpdates.set(queue, update);\n                } else {\n                    // Append the update to the end of the list.\n                    var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n                    while(lastRenderPhaseUpdate.next !== null){\n                        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n                    }\n                    lastRenderPhaseUpdate.next = update;\n                }\n            }\n        }\n        function useCallback(callback, deps) {\n            return useMemo(function() {\n                return callback;\n            }, deps);\n        }\n        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            if (getServerSnapshot === undefined) {\n                throw new Error(\"Missing getServerSnapshot, which is required for \" + \"server-rendered content. Will revert to client rendering.\");\n            }\n            return getServerSnapshot();\n        }\n        function useDeferredValue(value, initialValue) {\n            resolveCurrentlyRenderingComponent();\n            {\n                return value;\n            }\n        }\n        function unsupportedStartTransition() {\n            throw new Error(\"startTransition cannot be called during server rendering.\");\n        }\n        function useTransition() {\n            resolveCurrentlyRenderingComponent();\n            return [\n                false,\n                unsupportedStartTransition\n            ];\n        }\n        function useHostTransitionStatus() {\n            resolveCurrentlyRenderingComponent();\n            return NotPendingTransition;\n        }\n        function unsupportedSetOptimisticState() {\n            throw new Error(\"Cannot update optimistic state while rendering.\");\n        }\n        function useOptimistic(passthrough, reducer) {\n            resolveCurrentlyRenderingComponent();\n            return [\n                passthrough,\n                unsupportedSetOptimisticState\n            ];\n        }\n        function createPostbackFormStateKey(permalink, componentKeyPath, hookIndex) {\n            if (permalink !== undefined) {\n                // Don't bother to hash a permalink-based key since it's already short.\n                return \"p\" + permalink;\n            } else {\n                // Append a node to the key path that represents the form state hook.\n                var keyPath = [\n                    componentKeyPath,\n                    null,\n                    hookIndex\n                ]; // Key paths are hashed to reduce the size. It does not need to be secure,\n                // and it's more important that it's fast than that it's completely\n                // collision-free.\n                var keyPathHash = createFastHashJS(JSON.stringify(keyPath));\n                return \"k\" + keyPathHash;\n            }\n        }\n        function useFormState(action, initialState, permalink) {\n            resolveCurrentlyRenderingComponent(); // Count the number of useFormState hooks per component. We also use this to\n            // track the position of this useFormState hook relative to the other ones in\n            // this component, so we can generate a unique key for each one.\n            var formStateHookIndex = formStateCounter++;\n            var request = currentlyRenderingRequest; // $FlowIgnore[prop-missing]\n            var formAction = action.$$FORM_ACTION;\n            if (typeof formAction === \"function\") {\n                // This is a server action. These have additional features to enable\n                // MPA-style form submissions with progressive enhancement.\n                // TODO: If the same permalink is passed to multiple useFormStates, and\n                // they all have the same action signature, Fizz will pass the postback\n                // state to all of them. We should probably only pass it to the first one,\n                // and/or warn.\n                // The key is lazily generated and deduped so the that the keypath doesn't\n                // get JSON.stringify-ed unnecessarily, and at most once.\n                var nextPostbackStateKey = null; // Determine the current form state. If we received state during an MPA form\n                // submission, then we will reuse that, if the action identity matches.\n                // Otherwise we'll use the initial state argument. We will emit a comment\n                // marker into the stream that indicates whether the state was reused.\n                var state = initialState;\n                var componentKeyPath = currentlyRenderingKeyPath;\n                var postbackFormState = getFormState(request); // $FlowIgnore[prop-missing]\n                var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;\n                if (postbackFormState !== null && typeof isSignatureEqual === \"function\") {\n                    var postbackKey = postbackFormState[1];\n                    var postbackReferenceId = postbackFormState[2];\n                    var postbackBoundArity = postbackFormState[3];\n                    if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {\n                        nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n                        if (postbackKey === nextPostbackStateKey) {\n                            // This was a match\n                            formStateMatchingIndex = formStateHookIndex; // Reuse the state that was submitted by the form.\n                            state = postbackFormState[0];\n                        }\n                    }\n                } // Bind the state to the first argument of the action.\n                var boundAction = action.bind(null, state); // Wrap the action so the return value is void.\n                var dispatch = function(payload) {\n                    boundAction(payload);\n                }; // $FlowIgnore[prop-missing]\n                if (typeof boundAction.$$FORM_ACTION === \"function\") {\n                    // $FlowIgnore[prop-missing]\n                    dispatch.$$FORM_ACTION = function(prefix) {\n                        var metadata = boundAction.$$FORM_ACTION(prefix); // Override the action URL\n                        if (permalink !== undefined) {\n                            {\n                                checkAttributeStringCoercion(permalink, \"target\");\n                            }\n                            permalink += \"\";\n                            metadata.action = permalink;\n                        }\n                        var formData = metadata.data;\n                        if (formData) {\n                            if (nextPostbackStateKey === null) {\n                                nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n                            }\n                            formData.append(\"$ACTION_KEY\", nextPostbackStateKey);\n                        }\n                        return metadata;\n                    };\n                }\n                return [\n                    state,\n                    dispatch\n                ];\n            } else {\n                // This is not a server action, so the implementation is much simpler.\n                // Bind the state to the first argument of the action.\n                var _boundAction = action.bind(null, initialState); // Wrap the action so the return value is void.\n                var _dispatch2 = function(payload) {\n                    _boundAction(payload);\n                };\n                return [\n                    initialState,\n                    _dispatch2\n                ];\n            }\n        }\n        function useId() {\n            var task = currentlyRenderingTask;\n            var treeId = getTreeId(task.treeContext);\n            var resumableState = currentResumableState;\n            if (resumableState === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component.\");\n            }\n            var localId = localIdCounter++;\n            return makeId(resumableState, treeId, localId);\n        }\n        function use(usable) {\n            if (usable !== null && typeof usable === \"object\") {\n                // $FlowFixMe[method-unbinding]\n                if (typeof usable.then === \"function\") {\n                    // This is a thenable.\n                    var thenable = usable;\n                    return unwrapThenable(thenable);\n                } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = usable;\n                    return readContext(context);\n                }\n            } // eslint-disable-next-line react-internal/safe-string-coercion\n            throw new Error(\"An unsupported type was passed to use(): \" + String(usable));\n        }\n        function unwrapThenable(thenable) {\n            var index = thenableIndexCounter;\n            thenableIndexCounter += 1;\n            if (thenableState === null) {\n                thenableState = createThenableState();\n            }\n            return trackUsedThenable(thenableState, thenable, index);\n        }\n        function unsupportedRefresh() {\n            throw new Error(\"Cache cannot be refreshed during server rendering.\");\n        }\n        function useCacheRefresh() {\n            return unsupportedRefresh;\n        }\n        function noop$1() {}\n        var HooksDispatcher = {\n            readContext: readContext,\n            use: use,\n            useContext: useContext,\n            useMemo: useMemo,\n            useReducer: useReducer,\n            useRef: useRef,\n            useState: useState,\n            useInsertionEffect: noop$1,\n            useLayoutEffect: noop$1,\n            useCallback: useCallback,\n            // useImperativeHandle is not run in the server environment\n            useImperativeHandle: noop$1,\n            // Effects are not run in the server environment.\n            useEffect: noop$1,\n            // Debugging effect\n            useDebugValue: noop$1,\n            useDeferredValue: useDeferredValue,\n            useTransition: useTransition,\n            useId: useId,\n            // Subscriptions are not setup in a server environment.\n            useSyncExternalStore: useSyncExternalStore\n        };\n        {\n            HooksDispatcher.useCacheRefresh = useCacheRefresh;\n        }\n        {\n            HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;\n        }\n        {\n            HooksDispatcher.useOptimistic = useOptimistic;\n            HooksDispatcher.useFormState = useFormState;\n        }\n        var currentResumableState = null;\n        function setCurrentResumableState(resumableState) {\n            currentResumableState = resumableState;\n        }\n        function getCacheSignal() {\n            throw new Error(\"Not implemented.\");\n        }\n        function getCacheForType(resourceType) {\n            throw new Error(\"Not implemented.\");\n        }\n        var DefaultCacheDispatcher = {\n            getCacheSignal: getCacheSignal,\n            getCacheForType: getCacheForType\n        };\n        function getStackByComponentStackNode(componentStack) {\n            try {\n                var info = \"\";\n                var node = componentStack;\n                do {\n                    switch(node.tag){\n                        case 0:\n                            info += describeBuiltInComponentFrame(node.type, null, null);\n                            break;\n                        case 1:\n                            info += describeFunctionComponentFrame(node.type, null, null);\n                            break;\n                        case 2:\n                            info += describeClassComponentFrame(node.type, null, null);\n                            break;\n                    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                    node = node.parent;\n                }while (node);\n                return info;\n            } catch (x) {\n                return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame; // Linked list representing the identity of a component given the component/tag name and key.\n        // The name might be minified but we assume that it's going to be the same generated name. Typically\n        // because it's just the same compiled output in practice.\n        // resume with segmentID at the index\n        var CLIENT_RENDERED = 4; // if it errors or infinitely suspends\n        var PENDING = 0;\n        var COMPLETED = 1;\n        var FLUSHED = 2;\n        var ABORTED = 3;\n        var ERRORED = 4;\n        var POSTPONED = 5;\n        var OPEN = 0;\n        var CLOSING = 1;\n        var CLOSED = 2; // This is a default heuristic for how to split up the HTML content into progressive\n        // loading. Our goal is to be able to display additional new content about every 500ms.\n        // Faster than that is unnecessary and should be throttled on the client. It also\n        // adds unnecessary overhead to do more splits. We don't know if it's a higher or lower\n        // end device but higher end suffer less from the overhead than lower end does from\n        // not getting small enough pieces. We error on the side of low end.\n        // We base this on low end 3G speeds which is about 500kbits per second. We assume\n        // that there can be a reasonable drop off from max bandwidth which leaves you with\n        // as little as 80%. We can receive half of that each 500ms - at best. In practice,\n        // a little bandwidth is lost to processing and contention - e.g. CSS and images that\n        // are downloaded along with the main content. So we estimate about half of that to be\n        // the lower end throughput. In other words, we expect that you can at least show\n        // about 12.5kb of content per 500ms. Not counting starting latency for the first\n        // paint.\n        // 500 * 1024 / 8 * .8 * 0.5 / 2\n        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;\n        function defaultErrorHandler(error) {\n            console[\"error\"](error); // Don't transform to our wrapper\n            return null;\n        }\n        function noop() {}\n        function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {\n            prepareHostDispatcher();\n            var pingedTasks = [];\n            var abortSet = new Set();\n            var request = {\n                destination: null,\n                flushScheduled: false,\n                resumableState: resumableState,\n                renderState: renderState,\n                rootFormatContext: rootFormatContext,\n                progressiveChunkSize: progressiveChunkSize === undefined ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,\n                status: OPEN,\n                fatalError: null,\n                nextSegmentId: 0,\n                allPendingTasks: 0,\n                pendingRootTasks: 0,\n                completedRootSegment: null,\n                abortableTasks: abortSet,\n                pingedTasks: pingedTasks,\n                clientRenderedBoundaries: [],\n                completedBoundaries: [],\n                partialBoundaries: [],\n                trackedPostpones: null,\n                onError: onError === undefined ? defaultErrorHandler : onError,\n                onPostpone: onPostpone === undefined ? noop : onPostpone,\n                onAllReady: onAllReady === undefined ? noop : onAllReady,\n                onShellReady: onShellReady === undefined ? noop : onShellReady,\n                onShellError: onShellError === undefined ? noop : onShellError,\n                onFatalError: onFatalError === undefined ? noop : onFatalError,\n                formState: formState === undefined ? null : formState\n            }; // This segment represents the root fallback.\n            var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false); // There is no parent so conceptually, we're unblocked to flush this segment.\n            rootSegment.parentFlushed = true;\n            var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext);\n            pingedTasks.push(rootTask);\n            return request;\n        }\n        var currentRequest = null;\n        function resolveRequest() {\n            if (currentRequest) return currentRequest;\n            return null;\n        }\n        function pingTask(request, task) {\n            var pingedTasks = request.pingedTasks;\n            pingedTasks.push(task);\n            if (request.pingedTasks.length === 1) {\n                request.flushScheduled = request.destination !== null;\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n        }\n        function createSuspenseBoundary(request, fallbackAbortableTasks) {\n            return {\n                status: PENDING,\n                rootSegmentID: -1,\n                parentFlushed: false,\n                pendingTasks: 0,\n                completedSegments: [],\n                byteSize: 0,\n                fallbackAbortableTasks: fallbackAbortableTasks,\n                errorDigest: null,\n                resources: createBoundaryResources(),\n                trackedContentKeyPath: null,\n                trackedFallbackNode: null\n            };\n        }\n        function createRenderTask(request, thenableState, node, childIndex, blockedBoundary, blockedSegment, abortSet, keyPath, formatContext, legacyContext, context, treeContext) {\n            request.allPendingTasks++;\n            if (blockedBoundary === null) {\n                request.pendingRootTasks++;\n            } else {\n                blockedBoundary.pendingTasks++;\n            }\n            var task = {\n                replay: null,\n                node: node,\n                childIndex: childIndex,\n                ping: function() {\n                    return pingTask(request, task);\n                },\n                blockedBoundary: blockedBoundary,\n                blockedSegment: blockedSegment,\n                abortSet: abortSet,\n                keyPath: keyPath,\n                formatContext: formatContext,\n                legacyContext: legacyContext,\n                context: context,\n                treeContext: treeContext,\n                thenableState: thenableState\n            };\n            {\n                task.componentStack = null;\n            }\n            abortSet.add(task);\n            return task;\n        }\n        function createReplayTask(request, thenableState, replay, node, childIndex, blockedBoundary, abortSet, keyPath, formatContext, legacyContext, context, treeContext) {\n            request.allPendingTasks++;\n            if (blockedBoundary === null) {\n                request.pendingRootTasks++;\n            } else {\n                blockedBoundary.pendingTasks++;\n            }\n            replay.pendingTasks++;\n            var task = {\n                replay: replay,\n                node: node,\n                childIndex: childIndex,\n                ping: function() {\n                    return pingTask(request, task);\n                },\n                blockedBoundary: blockedBoundary,\n                blockedSegment: null,\n                abortSet: abortSet,\n                keyPath: keyPath,\n                formatContext: formatContext,\n                legacyContext: legacyContext,\n                context: context,\n                treeContext: treeContext,\n                thenableState: thenableState\n            };\n            {\n                task.componentStack = null;\n            }\n            abortSet.add(task);\n            return task;\n        }\n        function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {\n            return {\n                status: PENDING,\n                id: -1,\n                // lazily assigned later\n                index: index,\n                parentFlushed: false,\n                chunks: [],\n                children: [],\n                parentFormatContext: parentFormatContext,\n                boundary: boundary,\n                lastPushedText: lastPushedText,\n                textEmbedded: textEmbedded\n            };\n        } // DEV-only global reference to the currently executing task\n        var currentTaskInDEV = null;\n        function getCurrentStackInDEV() {\n            {\n                if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {\n                    return \"\";\n                }\n                return getStackByComponentStackNode(currentTaskInDEV.componentStack);\n            }\n        }\n        function pushBuiltInComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 0,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushFunctionComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 1,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushClassComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 2,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function popComponentStackInDEV(task) {\n            {\n                if (task.componentStack === null) {\n                    error(\"Unexpectedly popped too many stack frames. This is a bug in React.\");\n                } else {\n                    task.componentStack = task.componentStack.parent;\n                }\n            }\n        } // stash the component stack of an unwinding error until it is processed\n        var lastBoundaryErrorComponentStackDev = null;\n        function captureBoundaryErrorDetailsDev(boundary, error) {\n            {\n                var errorMessage;\n                if (typeof error === \"string\") {\n                    errorMessage = error;\n                } else if (error && typeof error.message === \"string\") {\n                    errorMessage = error.message;\n                } else {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    errorMessage = String(error);\n                }\n                var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();\n                lastBoundaryErrorComponentStackDev = null;\n                boundary.errorMessage = errorMessage;\n                boundary.errorComponentStack = errorComponentStack;\n            }\n        }\n        function logRecoverableError(request, error) {\n            // If this callback errors, we intentionally let that error bubble up to become a fatal error\n            // so that someone fixes the error reporting instead of hiding it.\n            var errorDigest = request.onError(error);\n            if (errorDigest != null && typeof errorDigest !== \"string\") {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                throw new Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n            }\n            return errorDigest;\n        }\n        function fatalError(request, error) {\n            // This is called outside error handling code such as if the root errors outside\n            // a suspense boundary or if the root suspense boundary's fallback errors.\n            // It's also called if React itself or its host configs errors.\n            var onShellError = request.onShellError;\n            onShellError(error);\n            var onFatalError = request.onFatalError;\n            onFatalError(error);\n            if (request.destination !== null) {\n                request.status = CLOSED;\n                closeWithError(request.destination, error);\n            } else {\n                request.status = CLOSING;\n                request.fatalError = error;\n            }\n        }\n        function renderSuspenseBoundary(request, someTask, keyPath, props) {\n            if (someTask.replay !== null) {\n                // If we're replaying through this pass, it means we're replaying through\n                // an already completed Suspense boundary. It's too late to do anything about it\n                // so we can just render through it.\n                var _prevKeyPath = someTask.keyPath;\n                someTask.keyPath = keyPath;\n                var _content = props.children;\n                try {\n                    renderNode(request, someTask, _content, -1);\n                } finally{\n                    someTask.keyPath = _prevKeyPath;\n                }\n                return;\n            } // $FlowFixMe: Refined.\n            var task = someTask;\n            pushBuiltInComponentStackInDEV(task, \"Suspense\");\n            var prevKeyPath = task.keyPath;\n            var parentBoundary = task.blockedBoundary;\n            var parentSegment = task.blockedSegment; // Each time we enter a suspense boundary, we split out into a new segment for\n            // the fallback so that we can later replace that segment with the content.\n            // This also lets us split out the main content even if it doesn't suspend,\n            // in case it ends up generating a large subtree of content.\n            var fallback = props.fallback;\n            var content = props.children;\n            var fallbackAbortSet = new Set();\n            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n            if (request.trackedPostpones !== null) {\n                newBoundary.trackedContentKeyPath = keyPath;\n            }\n            var insertionIndex = parentSegment.chunks.length; // The children of the boundary segment is actually the fallback.\n            var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, task.formatContext, false, false);\n            parentSegment.children.push(boundarySegment); // The parentSegment has a child Segment at this index so we reset the lastPushedText marker on the parent\n            parentSegment.lastPushedText = false; // This segment is the actual child content. We can start rendering that immediately.\n            var contentRootSegment = createPendingSegment(request, 0, null, task.formatContext, false, false); // We mark the root segment as having its parent flushed. It's not really flushed but there is\n            // no parent segment so there's nothing to wait on.\n            contentRootSegment.parentFlushed = true; // Currently this is running synchronously. We could instead schedule this to pingedTasks.\n            // I suspect that there might be some efficiency benefits from not creating the suspended task\n            // and instead just using the stack if possible.\n            // TODO: Call this directly instead of messing with saving and restoring contexts.\n            // We can reuse the current context and task to render the content immediately without\n            // context switching. We just need to temporarily switch which boundary and which segment\n            // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n            task.blockedBoundary = newBoundary;\n            task.blockedSegment = contentRootSegment;\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, newBoundary.resources);\n            }\n            task.keyPath = keyPath;\n            try {\n                // We use the safe form because we don't handle suspending here. Only error handling.\n                renderNode(request, task, content, -1);\n                pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);\n                contentRootSegment.status = COMPLETED;\n                queueCompletedSegment(newBoundary, contentRootSegment);\n                if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {\n                    newBoundary.status = COMPLETED; // This must have been the last segment we were waiting on. This boundary is now complete.\n                    // Therefore we won't need the fallback. We early return so that we don't have to create\n                    // the fallback.\n                    popComponentStackInDEV(task);\n                    return;\n                }\n            } catch (error) {\n                contentRootSegment.status = ERRORED;\n                newBoundary.status = CLIENT_RENDERED;\n                var errorDigest;\n                {\n                    errorDigest = logRecoverableError(request, error);\n                }\n                newBoundary.errorDigest = errorDigest;\n                {\n                    captureBoundaryErrorDetailsDev(newBoundary, error);\n                }\n            // We don't need to schedule any task because we know the parent has written yet.\n            // We do need to fallthrough to create the fallback though.\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, parentBoundary ? parentBoundary.resources : null);\n                }\n                task.blockedBoundary = parentBoundary;\n                task.blockedSegment = parentSegment;\n                task.keyPath = prevKeyPath;\n            }\n            var fallbackKeyPath = [\n                keyPath[0],\n                \"Suspense Fallback\",\n                keyPath[2]\n            ];\n            var trackedPostpones = request.trackedPostpones;\n            if (trackedPostpones !== null) {\n                // We create a detached replay node to track any postpones inside the fallback.\n                var fallbackReplayNode = [\n                    fallbackKeyPath[1],\n                    fallbackKeyPath[2],\n                    [],\n                    null\n                ];\n                trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);\n                if (newBoundary.status === POSTPONED) {\n                    // This must exist now.\n                    var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);\n                    boundaryReplayNode[4] = fallbackReplayNode;\n                } else {\n                    // We might not inject it into the postponed tree, unless the content actually\n                    // postpones too. We need to keep track of it until that happpens.\n                    newBoundary.trackedFallbackNode = fallbackReplayNode;\n                }\n            } // We create suspended task for the fallback because we don't want to actually work\n            // on it yet in case we finish the main content, so we queue for later.\n            var suspendedFallbackTask = createRenderTask(request, null, fallback, -1, parentBoundary, boundarySegment, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                suspendedFallbackTask.componentStack = task.componentStack;\n            }\n            // on preparing fallbacks if we don't have any more main content to task on.\n            request.pingedTasks.push(suspendedFallbackTask);\n            popComponentStackInDEV(task);\n        }\n        function replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {\n            pushBuiltInComponentStackInDEV(task, \"Suspense\");\n            var prevKeyPath = task.keyPath;\n            var previousReplaySet = task.replay;\n            var parentBoundary = task.blockedBoundary;\n            var content = props.children;\n            var fallback = props.fallback;\n            var fallbackAbortSet = new Set();\n            var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n            resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n            resumedBoundary.rootSegmentID = id; // We can reuse the current context and task to render the content immediately without\n            // context switching. We just need to temporarily switch which boundary and replay node\n            // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n            task.blockedBoundary = resumedBoundary;\n            task.replay = {\n                nodes: childNodes,\n                slots: childSlots,\n                pendingTasks: 1\n            };\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, resumedBoundary.resources);\n            }\n            try {\n                // We use the safe form because we don't handle suspending here. Only error handling.\n                renderNode(request, task, content, -1);\n                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n                    throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                }\n                task.replay.pendingTasks--;\n                if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {\n                    resumedBoundary.status = COMPLETED;\n                    request.completedBoundaries.push(resumedBoundary); // This must have been the last segment we were waiting on. This boundary is now complete.\n                    // Therefore we won't need the fallback. We early return so that we don't have to create\n                    // the fallback.\n                    popComponentStackInDEV(task);\n                    return;\n                }\n            } catch (error) {\n                resumedBoundary.status = CLIENT_RENDERED;\n                var errorDigest;\n                {\n                    errorDigest = logRecoverableError(request, error);\n                }\n                resumedBoundary.errorDigest = errorDigest;\n                {\n                    captureBoundaryErrorDetailsDev(resumedBoundary, error);\n                }\n                task.replay.pendingTasks--; // The parent already flushed in the prerender so we need to schedule this to be emitted.\n                request.clientRenderedBoundaries.push(resumedBoundary); // We don't need to decrement any task numbers because we didn't spawn any new task.\n            // We don't need to schedule any task because we know the parent has written yet.\n            // We do need to fallthrough to create the fallback though.\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, parentBoundary ? parentBoundary.resources : null);\n                }\n                task.blockedBoundary = parentBoundary;\n                task.replay = previousReplaySet;\n                task.keyPath = prevKeyPath;\n            }\n            var fallbackKeyPath = [\n                keyPath[0],\n                \"Suspense Fallback\",\n                keyPath[2]\n            ]; // We create suspended task for the fallback because we don't want to actually work\n            // on it yet in case we finish the main content, so we queue for later.\n            var fallbackReplay = {\n                nodes: fallbackNodes,\n                slots: fallbackSlots,\n                pendingTasks: 0\n            };\n            var suspendedFallbackTask = createReplayTask(request, null, fallbackReplay, fallback, -1, parentBoundary, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                suspendedFallbackTask.componentStack = task.componentStack;\n            }\n            // on preparing fallbacks if we don't have any more main content to task on.\n            request.pingedTasks.push(suspendedFallbackTask);\n            popComponentStackInDEV(task);\n        }\n        function renderHostElement(request, task, keyPath, type, props) {\n            pushBuiltInComponentStackInDEV(task, type);\n            var segment = task.blockedSegment;\n            if (segment === null) {\n                // Replay\n                var children = props.children; // TODO: Make this a Config for replaying.\n                var prevContext = task.formatContext;\n                var prevKeyPath = task.keyPath;\n                task.formatContext = getChildFormatContext(prevContext, type, props);\n                task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n                // need to pop back up and finish this subtree of HTML.\n                renderNode(request, task, children, -1); // We expect that errors will fatal the whole task and that we don't need\n                // the correct context. Therefore this is not in a finally.\n                task.formatContext = prevContext;\n                task.keyPath = prevKeyPath;\n            } else {\n                // Render\n                var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.formatContext, segment.lastPushedText);\n                segment.lastPushedText = false;\n                var _prevContext = task.formatContext;\n                var _prevKeyPath2 = task.keyPath;\n                task.formatContext = getChildFormatContext(_prevContext, type, props);\n                task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n                // need to pop back up and finish this subtree of HTML.\n                renderNode(request, task, _children, -1); // We expect that errors will fatal the whole task and that we don't need\n                // the correct context. Therefore this is not in a finally.\n                task.formatContext = _prevContext;\n                task.keyPath = _prevKeyPath2;\n                pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);\n                segment.lastPushedText = false;\n            }\n            popComponentStackInDEV(task);\n        }\n        function shouldConstruct(Component) {\n            return Component.prototype && Component.prototype.isReactComponent;\n        }\n        function renderWithHooks(request, task, keyPath, prevThenableState, Component, props, secondArg) {\n            var componentIdentity = {};\n            prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);\n            var result = Component(props, secondArg);\n            return finishHooks(Component, props, result, secondArg);\n        }\n        function finishClassComponent(request, task, keyPath, instance, Component, props) {\n            var nextChildren = instance.render();\n            {\n                if (instance.props !== props) {\n                    if (!didWarnAboutReassigningProps) {\n                        error(\"It looks like %s is reassigning its own `this.props` while rendering. \" + \"This is not supported and can lead to confusing bugs.\", getComponentNameFromType(Component) || \"a component\");\n                    }\n                    didWarnAboutReassigningProps = true;\n                }\n            }\n            {\n                var childContextTypes = Component.childContextTypes;\n                if (childContextTypes !== null && childContextTypes !== undefined) {\n                    var previousContext = task.legacyContext;\n                    var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);\n                    task.legacyContext = mergedContext;\n                    renderNodeDestructive(request, task, null, nextChildren, -1);\n                    task.legacyContext = previousContext;\n                    return;\n                }\n            }\n            var prevKeyPath = task.keyPath;\n            task.keyPath = keyPath;\n            renderNodeDestructive(request, task, null, nextChildren, -1);\n            task.keyPath = prevKeyPath;\n        }\n        function renderClassComponent(request, task, keyPath, Component, props) {\n            pushClassComponentStackInDEV(task, Component);\n            var maskedContext = getMaskedContext(Component, task.legacyContext);\n            var instance = constructClassInstance(Component, props, maskedContext);\n            mountClassInstance(instance, Component, props, maskedContext);\n            finishClassComponent(request, task, keyPath, instance, Component, props);\n            popComponentStackInDEV(task);\n        }\n        var didWarnAboutBadClass = {};\n        var didWarnAboutModulePatternComponent = {};\n        var didWarnAboutContextTypeOnFunctionComponent = {};\n        var didWarnAboutGetDerivedStateOnFunctionComponent = {};\n        var didWarnAboutReassigningProps = false;\n        var didWarnAboutDefaultPropsOnFunctionComponent = {};\n        var didWarnAboutGenerators = false;\n        var didWarnAboutMaps = false;\n        var hasWarnedAboutUsingContextAsConsumer = false; // This would typically be a function component but we still support module pattern\n        // components for some reason.\n        function renderIndeterminateComponent(request, task, keyPath, prevThenableState, Component, props) {\n            var legacyContext;\n            {\n                legacyContext = getMaskedContext(Component, task.legacyContext);\n            }\n            pushFunctionComponentStackInDEV(task, Component);\n            {\n                if (Component.prototype && typeof Component.prototype.render === \"function\") {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutBadClass[componentName]) {\n                        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + \"This is likely to cause errors. Change %s to extend React.Component instead.\", componentName, componentName);\n                        didWarnAboutBadClass[componentName] = true;\n                    }\n                }\n            }\n            var value = renderWithHooks(request, task, keyPath, prevThenableState, Component, props, legacyContext);\n            var hasId = checkDidRenderIdHook();\n            var formStateCount = getFormStateCount();\n            var formStateMatchingIndex = getFormStateMatchingIndex();\n            {\n                // Support for module components is deprecated and is removed behind a flag.\n                // Whether or not it would crash later, we want to show a good message in DEV first.\n                if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                    var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName, _componentName, _componentName);\n                        didWarnAboutModulePatternComponent[_componentName] = true;\n                    }\n                }\n            }\n            if (// Eventually we'll delete this branch altogether.\n            typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                {\n                    var _componentName2 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName2]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName2, _componentName2, _componentName2);\n                        didWarnAboutModulePatternComponent[_componentName2] = true;\n                    }\n                }\n                mountClassInstance(value, Component, props, legacyContext);\n                finishClassComponent(request, task, keyPath, value, Component, props);\n            } else {\n                {\n                    validateFunctionComponentInDev(Component);\n                }\n                finishFunctionComponent(request, task, keyPath, value, hasId, formStateCount, formStateMatchingIndex);\n            }\n            popComponentStackInDEV(task);\n        }\n        function finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex) {\n            var didEmitFormStateMarkers = false;\n            if (formStateCount !== 0 && request.formState !== null) {\n                // For each useFormState hook, emit a marker that indicates whether we\n                // rendered using the form state passed at the root. We only emit these\n                // markers if form state is passed at the root.\n                var segment = task.blockedSegment;\n                if (segment === null) ;\n                else {\n                    didEmitFormStateMarkers = true;\n                    var target = segment.chunks;\n                    for(var i = 0; i < formStateCount; i++){\n                        if (i === formStateMatchingIndex) {\n                            pushFormStateMarkerIsMatching(target);\n                        } else {\n                            pushFormStateMarkerIsNotMatching(target);\n                        }\n                    }\n                }\n            }\n            var prevKeyPath = task.keyPath;\n            task.keyPath = keyPath;\n            if (hasId) {\n                // This component materialized an id. We treat this as its own level, with\n                // a single \"child\" slot.\n                var prevTreeContext = task.treeContext;\n                var totalChildren = 1;\n                var index = 0; // Modify the id context. Because we'll need to reset this if something\n                // suspends or errors, we'll use the non-destructive render path.\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n                renderNode(request, task, children, -1); // Like the other contexts, this does not need to be in a finally block\n                // because renderNode takes care of unwinding the stack.\n                task.treeContext = prevTreeContext;\n            } else if (didEmitFormStateMarkers) {\n                // If there were formState hooks, we must use the non-destructive path\n                // because this component is not a pure indirection; we emitted markers\n                // to the stream.\n                renderNode(request, task, children, -1);\n            } else {\n                // We're now successfully past this task, and we haven't modified the\n                // context stack. We don't have to pop back to the previous task every\n                // again, so we can use the destructive recursive form.\n                renderNodeDestructive(request, task, null, children, -1);\n            }\n            task.keyPath = prevKeyPath;\n        }\n        function validateFunctionComponentInDev(Component) {\n            {\n                if (Component) {\n                    if (Component.childContextTypes) {\n                        error(\"%s(...): childContextTypes cannot be defined on a function component.\", Component.displayName || Component.name || \"Component\");\n                    }\n                }\n                if (Component.defaultProps !== undefined) {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n                        error(\"%s: Support for defaultProps will be removed from function components \" + \"in a future major release. Use JavaScript default parameters instead.\", componentName);\n                        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n                    }\n                }\n                if (typeof Component.getDerivedStateFromProps === \"function\") {\n                    var _componentName3 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n                        error(\"%s: Function components do not support getDerivedStateFromProps.\", _componentName3);\n                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n                    }\n                }\n                if (typeof Component.contextType === \"object\" && Component.contextType !== null) {\n                    var _componentName4 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n                        error(\"%s: Function components do not support contextType.\", _componentName4);\n                        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n                    }\n                }\n            }\n        }\n        function resolveDefaultProps(Component, baseProps) {\n            if (Component && Component.defaultProps) {\n                // Resolve default props. Taken from ReactElement\n                var props = assign({}, baseProps);\n                var defaultProps = Component.defaultProps;\n                for(var propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n                return props;\n            }\n            return baseProps;\n        }\n        function renderForwardRef(request, task, keyPath, prevThenableState, type, props, ref) {\n            pushFunctionComponentStackInDEV(task, type.render);\n            var children = renderWithHooks(request, task, keyPath, prevThenableState, type.render, props, ref);\n            var hasId = checkDidRenderIdHook();\n            var formStateCount = getFormStateCount();\n            var formStateMatchingIndex = getFormStateMatchingIndex();\n            finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex);\n            popComponentStackInDEV(task);\n        }\n        function renderMemo(request, task, keyPath, prevThenableState, type, props, ref) {\n            var innerType = type.type;\n            var resolvedProps = resolveDefaultProps(innerType, props);\n            renderElement(request, task, keyPath, prevThenableState, innerType, resolvedProps, ref);\n        }\n        function renderContextConsumer(request, task, keyPath, context, props) {\n            // The logic below for Context differs depending on PROD or DEV mode. In\n            // DEV mode, we create a separate object for Context.Consumer that acts\n            // like a proxy to Context. This proxy object adds unnecessary code in PROD\n            // so we use the old behaviour (Context.Consumer references Context) to\n            // reduce size and overhead. The separate object references context via\n            // a property called \"_context\", which also gives us the ability to check\n            // in DEV mode if this property exists or not and warn if it does not.\n            {\n                if (context._context === undefined) {\n                    // This may be because it's a Context (rather than a Consumer).\n                    // Or it may be because it's older React where they're the same thing.\n                    // We only want to warn if we're sure it's a new React.\n                    if (context !== context.Consumer) {\n                        if (!hasWarnedAboutUsingContextAsConsumer) {\n                            hasWarnedAboutUsingContextAsConsumer = true;\n                            error(\"Rendering <Context> directly is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n                        }\n                    }\n                } else {\n                    context = context._context;\n                }\n            }\n            var render = props.children;\n            {\n                if (typeof render !== \"function\") {\n                    error(\"A context consumer was rendered with multiple children, or a child \" + \"that isn't a function. A context consumer expects a single child \" + \"that is a function. If you did pass a function, make sure there \" + \"is no trailing or leading whitespace around it.\");\n                }\n            }\n            var newValue = readContext$1(context);\n            var newChildren = render(newValue);\n            var prevKeyPath = task.keyPath;\n            task.keyPath = keyPath;\n            renderNodeDestructive(request, task, null, newChildren, -1);\n            task.keyPath = prevKeyPath;\n        }\n        function renderContextProvider(request, task, keyPath, type, props) {\n            var context = type._context;\n            var value = props.value;\n            var children = props.children;\n            var prevSnapshot;\n            {\n                prevSnapshot = task.context;\n            }\n            var prevKeyPath = task.keyPath;\n            task.context = pushProvider(context, value);\n            task.keyPath = keyPath;\n            renderNodeDestructive(request, task, null, children, -1);\n            task.context = popProvider(context);\n            task.keyPath = prevKeyPath;\n            {\n                if (prevSnapshot !== task.context) {\n                    error(\"Popping the context provider did not return back to the original snapshot. This is a bug in React.\");\n                }\n            }\n        }\n        function renderLazyComponent(request, task, keyPath, prevThenableState, lazyComponent, props, ref) {\n            pushBuiltInComponentStackInDEV(task, \"Lazy\");\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n            var Component = init(payload);\n            var resolvedProps = resolveDefaultProps(Component, props);\n            renderElement(request, task, keyPath, prevThenableState, Component, resolvedProps, ref);\n            popComponentStackInDEV(task);\n        }\n        function renderOffscreen(request, task, keyPath, props) {\n            var mode = props.mode;\n            if (mode === \"hidden\") ;\n            else {\n                // A visible Offscreen boundary is treated exactly like a fragment: a\n                // pure indirection.\n                var prevKeyPath = task.keyPath;\n                task.keyPath = keyPath;\n                renderNodeDestructive(request, task, null, props.children, -1);\n                task.keyPath = prevKeyPath;\n            }\n        }\n        function renderElement(request, task, keyPath, prevThenableState, type, props, ref) {\n            if (typeof type === \"function\") {\n                if (shouldConstruct(type)) {\n                    renderClassComponent(request, task, keyPath, type, props);\n                    return;\n                } else {\n                    renderIndeterminateComponent(request, task, keyPath, prevThenableState, type, props);\n                    return;\n                }\n            }\n            if (typeof type === \"string\") {\n                renderHostElement(request, task, keyPath, type, props);\n                return;\n            }\n            switch(type){\n                // LegacyHidden acts the same as a fragment. This only works because we\n                // currently assume that every instance of LegacyHidden is accompanied by a\n                // host component wrapper. In the hidden mode, the host component is given a\n                // `hidden` attribute, which ensures that the initial HTML is not visible.\n                // To support the use of LegacyHidden as a true fragment, without an extra\n                // DOM node, we would have to hide the initial HTML in some other way.\n                // TODO: Delete in LegacyHidden. It's an unstable API only used in the\n                // www build. As a migration step, we could add a special prop to Offscreen\n                // that simulates the old behavior (no hiding, no change to effects).\n                case REACT_LEGACY_HIDDEN_TYPE:\n                case REACT_DEBUG_TRACING_MODE_TYPE:\n                case REACT_STRICT_MODE_TYPE:\n                case REACT_PROFILER_TYPE:\n                case REACT_FRAGMENT_TYPE:\n                    {\n                        var prevKeyPath = task.keyPath;\n                        task.keyPath = keyPath;\n                        renderNodeDestructive(request, task, null, props.children, -1);\n                        task.keyPath = prevKeyPath;\n                        return;\n                    }\n                case REACT_OFFSCREEN_TYPE:\n                    {\n                        renderOffscreen(request, task, keyPath, props);\n                        return;\n                    }\n                case REACT_SUSPENSE_LIST_TYPE:\n                    {\n                        pushBuiltInComponentStackInDEV(task, \"SuspenseList\"); // TODO: SuspenseList should control the boundaries.\n                        var _prevKeyPath3 = task.keyPath;\n                        task.keyPath = keyPath;\n                        renderNodeDestructive(request, task, null, props.children, -1);\n                        task.keyPath = _prevKeyPath3;\n                        popComponentStackInDEV(task);\n                        return;\n                    }\n                case REACT_SCOPE_TYPE:\n                    {\n                        throw new Error(\"ReactDOMServer does not yet support scope components.\");\n                    }\n                case REACT_SUSPENSE_TYPE:\n                    {\n                        {\n                            renderSuspenseBoundary(request, task, keyPath, props);\n                        }\n                        return;\n                    }\n            }\n            if (typeof type === \"object\" && type !== null) {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        {\n                            renderForwardRef(request, task, keyPath, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_MEMO_TYPE:\n                        {\n                            renderMemo(request, task, keyPath, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_PROVIDER_TYPE:\n                        {\n                            renderContextProvider(request, task, keyPath, type, props);\n                            return;\n                        }\n                    case REACT_CONTEXT_TYPE:\n                        {\n                            renderContextConsumer(request, task, keyPath, type, props);\n                            return;\n                        }\n                    case REACT_LAZY_TYPE:\n                        {\n                            renderLazyComponent(request, task, keyPath, prevThenableState, type, props);\n                            return;\n                        }\n                }\n            }\n            var info = \"\";\n            {\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and \" + \"named imports.\";\n                }\n            }\n            throw new Error(\"Element type is invalid: expected a string (for built-in \" + \"components) or a class/function (for composite components) \" + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        }\n        function resumeNode(request, task, segmentId, node, childIndex) {\n            var prevReplay = task.replay;\n            var blockedBoundary = task.blockedBoundary;\n            var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);\n            resumedSegment.id = segmentId;\n            resumedSegment.parentFlushed = true;\n            try {\n                // Convert the current ReplayTask to a RenderTask.\n                var renderTask = task;\n                renderTask.replay = null;\n                renderTask.blockedSegment = resumedSegment;\n                renderNode(request, task, node, childIndex);\n                resumedSegment.status = COMPLETED;\n                if (blockedBoundary === null) {\n                    request.completedRootSegment = resumedSegment;\n                } else {\n                    queueCompletedSegment(blockedBoundary, resumedSegment);\n                    if (blockedBoundary.parentFlushed) {\n                        request.partialBoundaries.push(blockedBoundary);\n                    }\n                }\n            } finally{\n                // Restore to a ReplayTask.\n                task.replay = prevReplay;\n                task.blockedSegment = null;\n            }\n        }\n        function replayElement(request, task, keyPath, prevThenableState, name, keyOrIndex, childIndex, type, props, ref, replay) {\n            // We're replaying. Find the path to follow.\n            var replayNodes = replay.nodes;\n            for(var i = 0; i < replayNodes.length; i++){\n                // Flow doesn't support refinement on tuples so we do it manually here.\n                var node = replayNodes[i];\n                if (keyOrIndex !== node[1]) {\n                    continue;\n                }\n                if (node.length === 4) {\n                    // Matched a replayable path.\n                    // Let's double check that the component name matches as a precaution.\n                    if (name !== null && name !== node[0]) {\n                        throw new Error(\"Expected the resume to render <\" + node[0] + \"> in this slot but instead it rendered <\" + name + \">. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                    }\n                    var childNodes = node[2];\n                    var childSlots = node[3];\n                    var currentNode = task.node;\n                    task.replay = {\n                        nodes: childNodes,\n                        slots: childSlots,\n                        pendingTasks: 1\n                    };\n                    try {\n                        renderElement(request, task, keyPath, prevThenableState, type, props, ref);\n                        if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0 // TODO check remaining slots\n                        ) {\n                            throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                        }\n                        task.replay.pendingTasks--;\n                    } catch (x) {\n                        if (typeof x === \"object\" && x !== null && (x === SuspenseException || typeof x.then === \"function\")) {\n                            // Suspend\n                            if (task.node === currentNode) {\n                                // This same element suspended so we need to pop the replay we just added.\n                                task.replay = replay;\n                            }\n                            throw x;\n                        }\n                        task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n                        // during a replay. That's because this component didn't actually error\n                        // in the original prerender. What's unable to complete is the child\n                        // replay nodes which might be Suspense boundaries which are able to\n                        // absorb the error and we can still continue with siblings.\n                        erroredReplay(request, task.blockedBoundary, x, childNodes, childSlots);\n                    }\n                    task.replay = replay;\n                } else {\n                    // Let's double check that the component type matches.\n                    if (type !== REACT_SUSPENSE_TYPE) {\n                        var expectedType = \"Suspense\";\n                        throw new Error(\"Expected the resume to render <\" + expectedType + \"> in this slot but instead it rendered <\" + (getComponentNameFromType(type) || \"Unknown\") + \">. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                    } // Matched a replayable path.\n                    replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);\n                } // We finished rendering this node, so now we can consume this\n                // slot. This must happen after in case we rerender this task.\n                replayNodes.splice(i, 1);\n                return;\n            } // We didn't find any matching nodes. We assume that this element was already\n        // rendered in the prelude and skip it.\n        } // $FlowFixMe[missing-local-annot]\n        function validateIterable(iterable, iteratorFn) {\n            {\n                // We don't support rendering Generators because it's a mutation.\n                // See https://github.com/facebook/react/issues/12995\n                if (typeof Symbol === \"function\" && iterable[Symbol.toStringTag] === \"Generator\") {\n                    if (!didWarnAboutGenerators) {\n                        error(\"Using Generators as children is unsupported and will likely yield \" + \"unexpected results because enumerating a generator mutates it. \" + \"You may convert it to an array with `Array.from()` or the \" + \"`[...spread]` operator before rendering. Keep in mind \" + \"you might need to polyfill these features for older browsers.\");\n                    }\n                    didWarnAboutGenerators = true;\n                } // Warn about using Maps as children\n                if (iterable.entries === iteratorFn) {\n                    if (!didWarnAboutMaps) {\n                        error(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                    }\n                    didWarnAboutMaps = true;\n                }\n            }\n        }\n        function renderNodeDestructive(request, task, // always null, except when called by retryTask.\n        prevThenableState, node, childIndex) {\n            {\n                // In Dev we wrap renderNodeDestructiveImpl in a try / catch so we can capture\n                // a component stack at the right place in the tree. We don't do this in renderNode\n                // becuase it is not called at every layer of the tree and we may lose frames\n                try {\n                    return renderNodeDestructiveImpl(request, task, prevThenableState, node, childIndex);\n                } catch (x) {\n                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") ;\n                    else {\n                        // This is an error, stash the component stack if it is null.\n                        lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();\n                    } // rethrow so normal suspense logic can handle thrown value accordingly\n                    throw x;\n                }\n            }\n        } // This function by it self renders a node and consumes the task by mutating it\n        // to update the current execution state.\n        function renderNodeDestructiveImpl(request, task, prevThenableState, node, childIndex) {\n            if (task.replay !== null && typeof task.replay.slots === \"number\") {\n                // TODO: Figure out a cheaper place than this hot path to do this check.\n                var resumeSegmentID = task.replay.slots;\n                resumeNode(request, task, resumeSegmentID, node, childIndex);\n                return;\n            } // Stash the node we're working on. We'll pick up from this task in case\n            // something suspends.\n            task.node = node;\n            task.childIndex = childIndex; // Handle object types\n            if (typeof node === \"object\" && node !== null) {\n                switch(node.$$typeof){\n                    case REACT_ELEMENT_TYPE:\n                        {\n                            var element = node;\n                            var type = element.type;\n                            var key = element.key;\n                            var props = element.props;\n                            var ref = element.ref;\n                            var name = getComponentNameFromType(type);\n                            var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;\n                            var keyPath = [\n                                task.keyPath,\n                                name,\n                                keyOrIndex\n                            ];\n                            if (task.replay !== null) {\n                                replayElement(request, task, keyPath, prevThenableState, name, keyOrIndex, childIndex, type, props, ref, task.replay); // No matches found for this node. We assume it's already emitted in the\n                            // prelude and skip it during the replay.\n                            } else {\n                                // We're doing a plain render.\n                                renderElement(request, task, keyPath, prevThenableState, type, props, ref);\n                            }\n                            return;\n                        }\n                    case REACT_PORTAL_TYPE:\n                        throw new Error(\"Portals are not currently supported by the server renderer. \" + \"Render them conditionally so that they only appear on the client render.\");\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyNode = node;\n                            var payload = lazyNode._payload;\n                            var init = lazyNode._init;\n                            var resolvedNode;\n                            {\n                                try {\n                                    resolvedNode = init(payload);\n                                } catch (x) {\n                                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                                        // this Lazy initializer is suspending. push a temporary frame onto the stack so it can be\n                                        // popped off in spawnNewSuspendedTask. This aligns stack behavior between Lazy in element position\n                                        // vs Component position. We do not want the frame for Errors so we exclusively do this in\n                                        // the wakeable branch\n                                        pushBuiltInComponentStackInDEV(task, \"Lazy\");\n                                    }\n                                    throw x;\n                                }\n                            }\n                            renderNodeDestructive(request, task, null, resolvedNode, childIndex);\n                            return;\n                        }\n                }\n                if (isArray(node)) {\n                    renderChildrenArray(request, task, node, childIndex);\n                    return;\n                }\n                var iteratorFn = getIteratorFn(node);\n                if (iteratorFn) {\n                    {\n                        validateIterable(node, iteratorFn);\n                    }\n                    var iterator = iteratorFn.call(node);\n                    if (iterator) {\n                        // We need to know how many total children are in this set, so that we\n                        // can allocate enough id slots to acommodate them. So we must exhaust\n                        // the iterator before we start recursively rendering the children.\n                        // TODO: This is not great but I think it's inherent to the id\n                        // generation algorithm.\n                        var step = iterator.next(); // If there are not entries, we need to push an empty so we start by checking that.\n                        if (!step.done) {\n                            var children = [];\n                            do {\n                                children.push(step.value);\n                                step = iterator.next();\n                            }while (!step.done);\n                            renderChildrenArray(request, task, children, childIndex);\n                            return;\n                        }\n                        return;\n                    }\n                } // Usables are a valid React node type. When React encounters a Usable in\n                // a child position, it unwraps it using the same algorithm as `use`. For\n                // example, for promises, React will throw an exception to unwind the\n                // stack, then replay the component once the promise resolves.\n                //\n                // A difference from `use` is that React will keep unwrapping the value\n                // until it reaches a non-Usable type.\n                //\n                // e.g. Usable<Usable<Usable<T>>> should resolve to T\n                var maybeUsable = node;\n                if (typeof maybeUsable.then === \"function\") {\n                    var thenable = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, unwrapThenable(thenable), childIndex);\n                }\n                if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE || maybeUsable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, readContext$1(context), childIndex);\n                } // $FlowFixMe[method-unbinding]\n                var childString = Object.prototype.toString.call(node);\n                throw new Error(\"Objects are not valid as a React child (found: \" + (childString === \"[object Object]\" ? \"object with keys {\" + Object.keys(node).join(\", \") + \"}\" : childString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n            }\n            if (typeof node === \"string\") {\n                var segment = task.blockedSegment;\n                if (segment === null) ;\n                else {\n                    segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);\n                }\n                return;\n            }\n            if (typeof node === \"number\") {\n                var _segment = task.blockedSegment;\n                if (_segment === null) ;\n                else {\n                    _segment.lastPushedText = pushTextInstance(_segment.chunks, \"\" + node, request.renderState, _segment.lastPushedText);\n                }\n                return;\n            }\n            {\n                if (typeof node === \"function\") {\n                    error(\"Functions are not valid as a React child. This may happen if \" + \"you return a Component instead of <Component /> from render. \" + \"Or maybe you meant to call this function rather than return it.\");\n                }\n            }\n        }\n        function replayFragment(request, task, children, childIndex) {\n            // If we're supposed follow this array, we'd expect to see a ReplayNode matching\n            // this fragment.\n            var replay = task.replay;\n            var replayNodes = replay.nodes;\n            for(var j = 0; j < replayNodes.length; j++){\n                var node = replayNodes[j];\n                if (node[1] !== childIndex) {\n                    continue;\n                } // Matched a replayable path.\n                var childNodes = node[2];\n                var childSlots = node[3];\n                task.replay = {\n                    nodes: childNodes,\n                    slots: childSlots,\n                    pendingTasks: 1\n                };\n                try {\n                    renderChildrenArray(request, task, children, -1);\n                    if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n                        throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                    }\n                    task.replay.pendingTasks--;\n                } catch (x) {\n                    if (typeof x === \"object\" && x !== null && (x === SuspenseException || typeof x.then === \"function\")) {\n                        // Suspend\n                        throw x;\n                    }\n                    task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n                    // during a replay. That's because this component didn't actually error\n                    // in the original prerender. What's unable to complete is the child\n                    // replay nodes which might be Suspense boundaries which are able to\n                    // absorb the error and we can still continue with siblings.\n                    // This is an error, stash the component stack if it is null.\n                    erroredReplay(request, task.blockedBoundary, x, childNodes, childSlots);\n                }\n                task.replay = replay; // We finished rendering this node, so now we can consume this\n                // slot. This must happen after in case we rerender this task.\n                replayNodes.splice(j, 1);\n                break;\n            }\n        }\n        function renderChildrenArray(request, task, children, childIndex) {\n            var prevKeyPath = task.keyPath;\n            if (childIndex !== -1) {\n                task.keyPath = [\n                    task.keyPath,\n                    \"Fragment\",\n                    childIndex\n                ];\n                if (task.replay !== null) {\n                    replayFragment(request, task, children, childIndex);\n                    task.keyPath = prevKeyPath;\n                    return;\n                }\n            }\n            var prevTreeContext = task.treeContext;\n            var totalChildren = children.length;\n            if (task.replay !== null) {\n                // Replay\n                // First we need to check if we have any resume slots at this level.\n                var resumeSlots = task.replay.slots;\n                if (resumeSlots !== null && typeof resumeSlots === \"object\") {\n                    for(var i = 0; i < totalChildren; i++){\n                        var node = children[i];\n                        task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i); // We need to use the non-destructive form so that we can safely pop back\n                        // up and render the sibling if something suspends.\n                        var resumeSegmentID = resumeSlots[i]; // TODO: If this errors we should still continue with the next sibling.\n                        if (typeof resumeSegmentID === \"number\") {\n                            resumeNode(request, task, resumeSegmentID, node, i); // We finished rendering this node, so now we can consume this\n                            // slot. This must happen after in case we rerender this task.\n                            delete resumeSlots[i];\n                        } else {\n                            renderNode(request, task, node, i);\n                        }\n                    }\n                    task.treeContext = prevTreeContext;\n                    task.keyPath = prevKeyPath;\n                    return;\n                }\n            }\n            for(var _i = 0; _i < totalChildren; _i++){\n                var _node = children[_i];\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i); // We need to use the non-destructive form so that we can safely pop back\n                // up and render the sibling if something suspends.\n                renderNode(request, task, _node, _i);\n            } // Because this context is always set right before rendering every child, we\n            // only need to reset it to the previous value at the very end.\n            task.treeContext = prevTreeContext;\n            task.keyPath = prevKeyPath;\n        }\n        function spawnNewSuspendedReplayTask(request, task, thenableState, x) {\n            var newTask = createReplayTask(request, thenableState, task.replay, task.node, task.childIndex, task.blockedBoundary, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                if (task.componentStack !== null) {\n                    // We pop one task off the stack because the node that suspended will be tried again,\n                    // which will add it back onto the stack.\n                    newTask.componentStack = task.componentStack.parent;\n                }\n            }\n            var ping = newTask.ping;\n            x.then(ping, ping);\n        }\n        function spawnNewSuspendedRenderTask(request, task, thenableState, x) {\n            // Something suspended, we'll need to create a new segment and resolve it later.\n            var segment = task.blockedSegment;\n            var insertionIndex = segment.chunks.length;\n            var newSegment = createPendingSegment(request, insertionIndex, null, task.formatContext, segment.lastPushedText, true);\n            segment.children.push(newSegment); // Reset lastPushedText for current Segment since the new Segment \"consumed\" it\n            segment.lastPushedText = false;\n            var newTask = createRenderTask(request, thenableState, task.node, task.childIndex, task.blockedBoundary, newSegment, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                if (task.componentStack !== null) {\n                    // We pop one task off the stack because the node that suspended will be tried again,\n                    // which will add it back onto the stack.\n                    newTask.componentStack = task.componentStack.parent;\n                }\n            }\n            var ping = newTask.ping;\n            x.then(ping, ping);\n        } // This is a non-destructive form of rendering a node. If it suspends it spawns\n        // a new task and restores the context of this task to what it was before.\n        function renderNode(request, task, node, childIndex) {\n            // Snapshot the current context in case something throws to interrupt the\n            // process.\n            var previousFormatContext = task.formatContext;\n            var previousLegacyContext = task.legacyContext;\n            var previousContext = task.context;\n            var previousKeyPath = task.keyPath;\n            var previousTreeContext = task.treeContext;\n            var previousComponentStack = null;\n            {\n                previousComponentStack = task.componentStack;\n            }\n            var x; // Store how much we've pushed at this point so we can reset it in case something\n            // suspended partially through writing something.\n            var segment = task.blockedSegment;\n            if (segment === null) {\n                // Replay\n                try {\n                    return renderNodeDestructive(request, task, null, node, childIndex);\n                } catch (thrownValue) {\n                    resetHooksState();\n                    x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                    // value to be a thenable, because before `use` existed that was the\n                    // (unstable) API for suspending. This implementation detail can change\n                    // later, once we deprecate the old API in favor of `use`.\n                    getSuspendedThenable() : thrownValue;\n                    if (typeof x === \"object\" && x !== null) {\n                        // $FlowFixMe[method-unbinding]\n                        if (typeof x.then === \"function\") {\n                            var wakeable = x;\n                            var thenableState = getThenableStateAfterSuspending();\n                            spawnNewSuspendedReplayTask(request, task, thenableState, wakeable); // Restore the context. We assume that this will be restored by the inner\n                            // functions in case nothing throws so we don't use \"finally\" here.\n                            task.formatContext = previousFormatContext;\n                            task.legacyContext = previousLegacyContext;\n                            task.context = previousContext;\n                            task.keyPath = previousKeyPath;\n                            task.treeContext = previousTreeContext; // Restore all active ReactContexts to what they were before.\n                            switchContext(previousContext);\n                            {\n                                task.componentStack = previousComponentStack;\n                            }\n                            return;\n                        }\n                    } // TODO: Abort any undiscovered Suspense boundaries in the ReplayNode.\n                }\n            } else {\n                // Render\n                var childrenLength = segment.children.length;\n                var chunkLength = segment.chunks.length;\n                try {\n                    return renderNodeDestructive(request, task, null, node, childIndex);\n                } catch (thrownValue) {\n                    resetHooksState(); // Reset the write pointers to where we started.\n                    segment.children.length = childrenLength;\n                    segment.chunks.length = chunkLength;\n                    x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                    // value to be a thenable, because before `use` existed that was the\n                    // (unstable) API for suspending. This implementation detail can change\n                    // later, once we deprecate the old API in favor of `use`.\n                    getSuspendedThenable() : thrownValue;\n                    if (typeof x === \"object\" && x !== null) {\n                        // $FlowFixMe[method-unbinding]\n                        if (typeof x.then === \"function\") {\n                            var _wakeable = x;\n                            var _thenableState = getThenableStateAfterSuspending();\n                            spawnNewSuspendedRenderTask(request, task, _thenableState, _wakeable); // Restore the context. We assume that this will be restored by the inner\n                            // functions in case nothing throws so we don't use \"finally\" here.\n                            task.formatContext = previousFormatContext;\n                            task.legacyContext = previousLegacyContext;\n                            task.context = previousContext;\n                            task.keyPath = previousKeyPath;\n                            task.treeContext = previousTreeContext; // Restore all active ReactContexts to what they were before.\n                            switchContext(previousContext);\n                            {\n                                task.componentStack = previousComponentStack;\n                            }\n                            return;\n                        }\n                    }\n                }\n            } // Restore the context. We assume that this will be restored by the inner\n            // functions in case nothing throws so we don't use \"finally\" here.\n            task.formatContext = previousFormatContext;\n            task.legacyContext = previousLegacyContext;\n            task.context = previousContext;\n            task.keyPath = previousKeyPath;\n            task.treeContext = previousTreeContext; // Restore all active ReactContexts to what they were before.\n            switchContext(previousContext);\n            {\n                task.componentStack = previousComponentStack;\n            }\n            // Let's terminate the rest of the tree and don't render any siblings.\n            throw x;\n        }\n        function erroredReplay(request, boundary, error, replayNodes, resumeSlots) {\n            // Erroring during a replay doesn't actually cause an error by itself because\n            // that component has already rendered. What causes the error is the resumable\n            // points that we did not yet finish which will be below the point of the reset.\n            // For example, if we're replaying a path to a Suspense boundary that is not done\n            // that doesn't error the parent Suspense boundary.\n            // This might be a bit strange that the error in a parent gets thrown at a child.\n            // We log it only once and reuse the digest.\n            var errorDigest;\n            {\n                errorDigest = logRecoverableError(request, error);\n            }\n            abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error, errorDigest);\n        }\n        function erroredTask(request, boundary, error) {\n            // Report the error to a global handler.\n            var errorDigest;\n            {\n                errorDigest = logRecoverableError(request, error);\n            }\n            if (boundary === null) {\n                lastBoundaryErrorComponentStackDev = null;\n                fatalError(request, error);\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.status !== CLIENT_RENDERED) {\n                    boundary.status = CLIENT_RENDERED;\n                    boundary.errorDigest = errorDigest;\n                    {\n                        captureBoundaryErrorDetailsDev(boundary, error);\n                    }\n                    // so we can flush it, if the parent already flushed.\n                    if (boundary.parentFlushed) {\n                        // We don't have a preference where in the queue this goes since it's likely\n                        // to error on the client anyway. However, intentionally client-rendered\n                        // boundaries should be flushed earlier so that they can start on the client.\n                        // We reuse the same queue for errors.\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } else {\n                    lastBoundaryErrorComponentStackDev = null;\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                completeAll(request);\n            }\n        }\n        function abortTaskSoft(task) {\n            // This aborts task without aborting the parent boundary that it blocks.\n            // It's used for when we didn't need this task to complete the tree.\n            // If task was needed, then it should use abortTask instead.\n            var request = this;\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            if (segment !== null) {\n                segment.status = ABORTED;\n                finishedTask(request, boundary, segment);\n            }\n        }\n        function abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest) {\n            var resumedBoundary = createSuspenseBoundary(request, new Set());\n            resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n            resumedBoundary.rootSegmentID = rootSegmentID;\n            resumedBoundary.status = CLIENT_RENDERED;\n            resumedBoundary.errorDigest = errorDigest;\n            {\n                var errorPrefix = \"The server did not finish this Suspense boundary: \";\n                var errorMessage;\n                if (error && typeof error.message === \"string\") {\n                    errorMessage = errorPrefix + error.message;\n                } else {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    errorMessage = errorPrefix + String(error);\n                }\n                var previousTaskInDev = currentTaskInDEV;\n                currentTaskInDEV = null;\n                try {\n                    captureBoundaryErrorDetailsDev(resumedBoundary, errorMessage);\n                } finally{\n                    currentTaskInDEV = previousTaskInDev;\n                }\n            }\n            if (resumedBoundary.parentFlushed) {\n                request.clientRenderedBoundaries.push(resumedBoundary);\n            }\n        }\n        function abortRemainingReplayNodes(request, boundary, nodes, slots, error, errorDigest) {\n            for(var i = 0; i < nodes.length; i++){\n                var node = nodes[i];\n                if (node.length === 4) {\n                    abortRemainingReplayNodes(request, boundary, node[2], node[3], error, errorDigest);\n                } else {\n                    var boundaryNode = node;\n                    var rootSegmentID = boundaryNode[5];\n                    abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest);\n                }\n            } // Empty the set, since we've cleared it now.\n            nodes.length = 0;\n            if (slots !== null) {\n                // We had something still to resume in the parent boundary. We must trigger\n                // the error on the parent boundary since it's not able to complete.\n                if (boundary === null) {\n                    throw new Error(\"We should not have any resumable nodes in the shell. \" + \"This is a bug in React.\");\n                } else if (boundary.status !== CLIENT_RENDERED) {\n                    boundary.status = CLIENT_RENDERED;\n                    boundary.errorDigest = errorDigest;\n                    {\n                        captureBoundaryErrorDetailsDev(boundary, error);\n                    }\n                    if (boundary.parentFlushed) {\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } // Empty the set\n                if (typeof slots === \"object\") {\n                    for(var index in slots){\n                        delete slots[index];\n                    }\n                }\n            }\n        }\n        function abortTask(task, request, error) {\n            // This aborts the task and aborts the parent that it blocks, putting it into\n            // client rendered mode.\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            if (segment !== null) {\n                segment.status = ABORTED;\n            }\n            if (boundary === null) {\n                if (request.status !== CLOSING && request.status !== CLOSED) {\n                    var replay = task.replay;\n                    if (replay === null) {\n                        // We didn't complete the root so we have nothing to show. We can close\n                        // the request;\n                        logRecoverableError(request, error);\n                        fatalError(request, error);\n                        return;\n                    } else {\n                        // If the shell aborts during a replay, that's not a fatal error. Instead\n                        // we should be able to recover by client rendering all the root boundaries in\n                        // the ReplaySet.\n                        replay.pendingTasks--;\n                        if (replay.pendingTasks === 0 && replay.nodes.length > 0) {\n                            var errorDigest = logRecoverableError(request, error);\n                            abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error, errorDigest);\n                        }\n                        request.pendingRootTasks--;\n                        if (request.pendingRootTasks === 0) {\n                            completeShell(request);\n                        }\n                    }\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.status !== CLIENT_RENDERED) {\n                    boundary.status = CLIENT_RENDERED;\n                    boundary.errorDigest = logRecoverableError(request, error);\n                    {\n                        var errorPrefix = \"The server did not finish this Suspense boundary: \";\n                        var errorMessage;\n                        if (error && typeof error.message === \"string\") {\n                            errorMessage = errorPrefix + error.message;\n                        } else {\n                            // eslint-disable-next-line react-internal/safe-string-coercion\n                            errorMessage = errorPrefix + String(error);\n                        }\n                        var previousTaskInDev = currentTaskInDEV;\n                        currentTaskInDEV = task;\n                        try {\n                            captureBoundaryErrorDetailsDev(boundary, errorMessage);\n                        } finally{\n                            currentTaskInDEV = previousTaskInDev;\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } // If this boundary was still pending then we haven't already cancelled its fallbacks.\n                // We'll need to abort the fallbacks, which will also error that parent boundary.\n                boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {\n                    return abortTask(fallbackTask, request, error);\n                });\n                boundary.fallbackAbortableTasks.clear();\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                completeAll(request);\n            }\n        }\n        function safelyEmitEarlyPreloads(request, shellComplete) {\n            try {\n                emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);\n            } catch (error) {\n                // We assume preloads are optimistic and thus non-fatal if errored.\n                logRecoverableError(request, error);\n            }\n        } // I extracted this function out because we want to ensure we consistently emit preloads before\n        // transitioning to the next request stage and this transition can happen in multiple places in this\n        // implementation.\n        function completeShell(request) {\n            if (request.trackedPostpones === null) {\n                // We only emit early preloads on shell completion for renders. For prerenders\n                // we wait for the entire Request to finish because we are not responding to a\n                // live request and can wait for as much data as possible.\n                // we should only be calling completeShell when the shell is complete so we\n                // just use a literal here\n                var shellComplete = true;\n                safelyEmitEarlyPreloads(request, shellComplete);\n            } // We have completed the shell so the shell can't error anymore.\n            request.onShellError = noop;\n            var onShellReady = request.onShellReady;\n            onShellReady();\n        } // I extracted this function out because we want to ensure we consistently emit preloads before\n        // transitioning to the next request stage and this transition can happen in multiple places in this\n        // implementation.\n        function completeAll(request) {\n            // During a render the shell must be complete if the entire request is finished\n            // however during a Prerender it is possible that the shell is incomplete because\n            // it postponed. We cannot use rootPendingTasks in the prerender case because\n            // those hit zero even when the shell postpones. Instead we look at the completedRootSegment\n            var shellComplete = request.trackedPostpones === null ? true : request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED;\n            safelyEmitEarlyPreloads(request, shellComplete);\n            var onAllReady = request.onAllReady;\n            onAllReady();\n        }\n        function queueCompletedSegment(boundary, segment) {\n            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {\n                // This is an empty segment. There's nothing to write, so we can instead transfer the ID\n                // to the child. That way any existing references point to the child.\n                var childSegment = segment.children[0];\n                childSegment.id = segment.id;\n                childSegment.parentFlushed = true;\n                if (childSegment.status === COMPLETED) {\n                    queueCompletedSegment(boundary, childSegment);\n                }\n            } else {\n                var completedSegments = boundary.completedSegments;\n                completedSegments.push(segment);\n            }\n        }\n        function finishedTask(request, boundary, segment) {\n            if (boundary === null) {\n                if (segment !== null && segment.parentFlushed) {\n                    if (request.completedRootSegment !== null) {\n                        throw new Error(\"There can only be one root segment. This is a bug in React.\");\n                    }\n                    request.completedRootSegment = segment;\n                }\n                request.pendingRootTasks--;\n                if (request.pendingRootTasks === 0) {\n                    completeShell(request);\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.status === CLIENT_RENDERED) ;\n                else if (boundary.pendingTasks === 0) {\n                    if (boundary.status === PENDING) {\n                        boundary.status = COMPLETED;\n                    } // This must have been the last segment we were waiting on. This boundary is now complete.\n                    if (segment !== null && segment.parentFlushed) {\n                        // Our parent segment already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        // The segment might be part of a segment that didn't flush yet, but if the boundary's\n                        // parent flushed, we need to schedule the boundary to be emitted.\n                        request.completedBoundaries.push(boundary);\n                    } // We can now cancel any pending task on the fallback since we won't need to show it anymore.\n                    // This needs to happen after we read the parentFlushed flags because aborting can finish\n                    // work which can trigger user code, which can start flushing, which can change those flags.\n                    // If the boundary was POSTPONED, we still need to finish the fallback first.\n                    if (boundary.status === COMPLETED) {\n                        boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);\n                        boundary.fallbackAbortableTasks.clear();\n                    }\n                } else {\n                    if (segment !== null && segment.parentFlushed) {\n                        // Our parent already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                            var completedSegments = boundary.completedSegments;\n                            if (completedSegments.length === 1) {\n                                // This is the first time since we last flushed that we completed anything.\n                                // We can schedule this boundary to emit its partially completed segments early\n                                // in case the parent has already been flushed.\n                                if (boundary.parentFlushed) {\n                                    request.partialBoundaries.push(boundary);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                completeAll(request);\n            }\n        }\n        function retryTask(request, task) {\n            {\n                var blockedBoundary = task.blockedBoundary;\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, blockedBoundary ? blockedBoundary.resources : null);\n            }\n            var segment = task.blockedSegment;\n            if (segment === null) {\n                retryReplayTask(request, task);\n            } else {\n                retryRenderTask(request, task, segment);\n            }\n        }\n        function retryRenderTask(request, task, segment) {\n            if (segment.status !== PENDING) {\n                // We completed this by other means before we had a chance to retry it.\n                return;\n            } // We restore the context to what it was when we suspended.\n            // We don't restore it after we leave because it's likely that we'll end up\n            // needing a very similar context soon again.\n            switchContext(task.context);\n            var prevTaskInDEV = null;\n            {\n                prevTaskInDEV = currentTaskInDEV;\n                currentTaskInDEV = task;\n            }\n            var childrenLength = segment.children.length;\n            var chunkLength = segment.chunks.length;\n            try {\n                // We call the destructive form that mutates this task. That way if something\n                // suspends again, we can reuse the same task instead of spawning a new one.\n                // Reset the task's thenable state before continuing, so that if a later\n                // component suspends we can reuse the same task object. If the same\n                // component suspends again, the thenable state will be restored.\n                var prevThenableState = task.thenableState;\n                task.thenableState = null;\n                renderNodeDestructive(request, task, prevThenableState, task.node, task.childIndex);\n                pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);\n                task.abortSet.delete(task);\n                segment.status = COMPLETED;\n                finishedTask(request, task.blockedBoundary, segment);\n            } catch (thrownValue) {\n                resetHooksState(); // Reset the write pointers to where we started.\n                segment.children.length = childrenLength;\n                segment.chunks.length = chunkLength;\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue;\n                if (typeof x === \"object\" && x !== null) {\n                    // $FlowFixMe[method-unbinding]\n                    if (typeof x.then === \"function\") {\n                        // Something suspended again, let's pick it back up later.\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                        task.thenableState = getThenableStateAfterSuspending();\n                        return;\n                    }\n                }\n                task.abortSet.delete(task);\n                segment.status = ERRORED;\n                erroredTask(request, task.blockedBoundary, x);\n                return;\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, null);\n                }\n                {\n                    currentTaskInDEV = prevTaskInDEV;\n                }\n            }\n        }\n        function retryReplayTask(request, task) {\n            if (task.replay.pendingTasks === 0) {\n                // There are no pending tasks working on this set, so we must have aborted.\n                return;\n            } // We restore the context to what it was when we suspended.\n            // We don't restore it after we leave because it's likely that we'll end up\n            // needing a very similar context soon again.\n            switchContext(task.context);\n            var prevTaskInDEV = null;\n            {\n                prevTaskInDEV = currentTaskInDEV;\n                currentTaskInDEV = task;\n            }\n            try {\n                // We call the destructive form that mutates this task. That way if something\n                // suspends again, we can reuse the same task instead of spawning a new one.\n                // Reset the task's thenable state before continuing, so that if a later\n                // component suspends we can reuse the same task object. If the same\n                // component suspends again, the thenable state will be restored.\n                var prevThenableState = task.thenableState;\n                task.thenableState = null;\n                renderNodeDestructive(request, task, prevThenableState, task.node, task.childIndex);\n                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n                    throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                }\n                task.replay.pendingTasks--;\n                task.abortSet.delete(task);\n                finishedTask(request, task.blockedBoundary, null);\n            } catch (thrownValue) {\n                resetHooksState();\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue;\n                if (typeof x === \"object\" && x !== null) {\n                    // $FlowFixMe[method-unbinding]\n                    if (typeof x.then === \"function\") {\n                        // Something suspended again, let's pick it back up later.\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                        task.thenableState = getThenableStateAfterSuspending();\n                        return;\n                    }\n                }\n                task.replay.pendingTasks--;\n                task.abortSet.delete(task);\n                erroredReplay(request, task.blockedBoundary, x, task.replay.nodes, task.replay.slots);\n                request.pendingRootTasks--;\n                if (request.pendingRootTasks === 0) {\n                    completeShell(request);\n                }\n                request.allPendingTasks--;\n                if (request.allPendingTasks === 0) {\n                    completeAll(request);\n                }\n                return;\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, null);\n                }\n                {\n                    currentTaskInDEV = prevTaskInDEV;\n                }\n            }\n        }\n        function performWork(request) {\n            if (request.status === CLOSED) {\n                return;\n            }\n            var prevContext = getActiveContext();\n            var prevDispatcher = ReactCurrentDispatcher.current;\n            ReactCurrentDispatcher.current = HooksDispatcher;\n            var prevCacheDispatcher;\n            {\n                prevCacheDispatcher = ReactCurrentCache.current;\n                ReactCurrentCache.current = DefaultCacheDispatcher;\n            }\n            var prevRequest = currentRequest;\n            currentRequest = request;\n            var prevGetCurrentStackImpl;\n            {\n                prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;\n                ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;\n            }\n            var prevResumableState = currentResumableState;\n            setCurrentResumableState(request.resumableState);\n            try {\n                var pingedTasks = request.pingedTasks;\n                var i;\n                for(i = 0; i < pingedTasks.length; i++){\n                    var task = pingedTasks[i];\n                    retryTask(request, task);\n                }\n                pingedTasks.splice(0, i);\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            } finally{\n                setCurrentResumableState(prevResumableState);\n                ReactCurrentDispatcher.current = prevDispatcher;\n                {\n                    ReactCurrentCache.current = prevCacheDispatcher;\n                }\n                {\n                    ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;\n                }\n                if (prevDispatcher === HooksDispatcher) {\n                    // This means that we were in a reentrant work loop. This could happen\n                    // in a renderer that supports synchronous work like renderToString,\n                    // when it's called from within another renderer.\n                    // Normally we don't bother switching the contexts to their root/default\n                    // values when leaving because we'll likely need the same or similar\n                    // context again. However, when we're inside a synchronous loop like this\n                    // we'll to restore the context to what it was before returning.\n                    switchContext(prevContext);\n                }\n                currentRequest = prevRequest;\n            }\n        }\n        function flushSubtree(request, destination, segment) {\n            segment.parentFlushed = true;\n            switch(segment.status){\n                case PENDING:\n                    {\n                        // We're emitting a placeholder for this segment to be filled in later.\n                        // Therefore we'll need to assign it an ID - to refer to it by.\n                        segment.id = request.nextSegmentId++; // Fallthrough\n                    }\n                case POSTPONED:\n                    {\n                        var segmentID = segment.id; // When this segment finally completes it won't be embedded in text since it will flush separately\n                        segment.lastPushedText = false;\n                        segment.textEmbedded = false;\n                        return writePlaceholder(destination, request.renderState, segmentID);\n                    }\n                case COMPLETED:\n                    {\n                        segment.status = FLUSHED;\n                        var r = true;\n                        var chunks = segment.chunks;\n                        var chunkIdx = 0;\n                        var children = segment.children;\n                        for(var childIdx = 0; childIdx < children.length; childIdx++){\n                            var nextChild = children[childIdx]; // Write all the chunks up until the next child.\n                            for(; chunkIdx < nextChild.index; chunkIdx++){\n                                writeChunk(destination, chunks[chunkIdx]);\n                            }\n                            r = flushSegment(request, destination, nextChild);\n                        } // Finally just write all the remaining chunks\n                        for(; chunkIdx < chunks.length - 1; chunkIdx++){\n                            writeChunk(destination, chunks[chunkIdx]);\n                        }\n                        if (chunkIdx < chunks.length) {\n                            r = writeChunkAndReturn(destination, chunks[chunkIdx]);\n                        }\n                        return r;\n                    }\n                default:\n                    {\n                        throw new Error(\"Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.\");\n                    }\n            }\n        }\n        function flushSegment(request, destination, segment) {\n            var boundary = segment.boundary;\n            if (boundary === null) {\n                // Not a suspense boundary.\n                return flushSubtree(request, destination, segment);\n            }\n            boundary.parentFlushed = true; // This segment is a Suspense boundary. We need to decide whether to\n            // emit the content or the fallback now.\n            if (boundary.status === CLIENT_RENDERED) {\n                // Emit a client rendered suspense boundary wrapper.\n                // We never queue the inner boundary so we'll never emit its content or partial segments.\n                writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndClientRenderedSuspenseBoundary(destination, request.renderState);\n            } else if (boundary.status !== COMPLETED) {\n                if (boundary.status === PENDING) {\n                    // For pending boundaries we lazily assign an ID to the boundary\n                    // and root segment.\n                    boundary.rootSegmentID = request.nextSegmentId++;\n                }\n                if (boundary.completedSegments.length > 0) {\n                    // If this is at least partially complete, we can queue it to be partially emitted early.\n                    request.partialBoundaries.push(boundary);\n                } // This boundary is still loading. Emit a pending suspense boundary wrapper.\n                var id = boundary.rootSegmentID;\n                writeStartPendingSuspenseBoundary(destination, request.renderState, id); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else if (boundary.byteSize > request.progressiveChunkSize) {\n                // This boundary is large and will be emitted separately so that we can progressively show\n                // other content. We add it to the queue during the flush because we have to ensure that\n                // the parent flushes first so that there's something to inject it into.\n                // We also have to make sure that it's emitted into the queue in a deterministic slot.\n                // I.e. we can't insert it here when it completes.\n                // Assign an ID to refer to the future content by.\n                boundary.rootSegmentID = request.nextSegmentId++;\n                request.completedBoundaries.push(boundary); // Emit a pending rendered suspense boundary wrapper.\n                writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else {\n                {\n                    hoistResources(request.renderState, boundary.resources);\n                }\n                writeStartCompletedSuspenseBoundary(destination, request.renderState);\n                var completedSegments = boundary.completedSegments;\n                if (completedSegments.length !== 1) {\n                    throw new Error(\"A previously unvisited boundary must have exactly one root segment. This is a bug in React.\");\n                }\n                var contentSegment = completedSegments[0];\n                flushSegment(request, destination, contentSegment);\n                return writeEndCompletedSuspenseBoundary(destination, request.renderState);\n            }\n        }\n        function flushClientRenderedBoundary(request, destination, boundary) {\n            return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);\n        }\n        function flushSegmentContainer(request, destination, segment) {\n            writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);\n            flushSegment(request, destination, segment);\n            return writeEndSegment(destination, segment.parentFormatContext);\n        }\n        function flushCompletedBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                flushPartiallyCompletedSegment(request, destination, boundary, segment);\n            }\n            completedSegments.length = 0;\n            {\n                writeResourcesForBoundary(destination, boundary.resources, request.renderState);\n            }\n            return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.resources);\n        }\n        function flushPartialBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {\n                    i++;\n                    completedSegments.splice(0, i); // Only write as much as the buffer wants. Something higher priority\n                    // might want to write later.\n                    return false;\n                }\n            }\n            completedSegments.splice(0, i);\n            {\n                // The way this is structured we only write resources for partial boundaries\n                // if there is no backpressure. Later before we complete the boundary we\n                // will write resources regardless of backpressure before we emit the\n                // completion instruction\n                return writeResourcesForBoundary(destination, boundary.resources, request.renderState);\n            }\n        }\n        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {\n            if (segment.status === FLUSHED) {\n                // We've already flushed this inline.\n                return true;\n            }\n            var segmentID = segment.id;\n            if (segmentID === -1) {\n                // This segment wasn't previously referred to. This happens at the root of\n                // a boundary. We make kind of a leap here and assume this is the root.\n                var rootSegmentID = segment.id = boundary.rootSegmentID;\n                if (rootSegmentID === -1) {\n                    throw new Error(\"A root segment ID must have been assigned by now. This is a bug in React.\");\n                }\n                return flushSegmentContainer(request, destination, segment);\n            } else if (segmentID === boundary.rootSegmentID) {\n                // When we emit postponed boundaries, we might have assigned the ID already\n                // but it's still the root segment so we can't inject it into the parent yet.\n                return flushSegmentContainer(request, destination, segment);\n            } else {\n                flushSegmentContainer(request, destination, segment);\n                return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);\n            }\n        }\n        function flushCompletedQueues(request, destination) {\n            try {\n                // The structure of this is to go through each queue one by one and write\n                // until the sink tells us to stop. When we should stop, we still finish writing\n                // that item fully and then yield. At that point we remove the already completed\n                // items up until the point we completed them.\n                var i;\n                var completedRootSegment = request.completedRootSegment;\n                if (completedRootSegment !== null) {\n                    if (completedRootSegment.status === POSTPONED) {\n                        // We postponed the root, so we write nothing.\n                        return;\n                    } else if (request.pendingRootTasks === 0) {\n                        if (enableFloat) {\n                            writePreamble(destination, request.resumableState, request.renderState, request.allPendingTasks === 0 && request.trackedPostpones === null);\n                        }\n                        flushSegment(request, destination, completedRootSegment);\n                        request.completedRootSegment = null;\n                        writeCompletedRoot(destination, request.renderState);\n                    } else {\n                        // We haven't flushed the root yet so we don't need to check any other branches further down\n                        return;\n                    }\n                }\n                if (enableFloat) {\n                    writeHoistables(destination, request.resumableState, request.renderState);\n                } // We emit client rendering instructions for already emitted boundaries first.\n                // This is so that we can signal to the client to start client rendering them as\n                // soon as possible.\n                var clientRenderedBoundaries = request.clientRenderedBoundaries;\n                for(i = 0; i < clientRenderedBoundaries.length; i++){\n                    var boundary = clientRenderedBoundaries[i];\n                    if (!flushClientRenderedBoundary(request, destination, boundary)) {\n                        request.destination = null;\n                        i++;\n                        clientRenderedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                clientRenderedBoundaries.splice(0, i); // Next we emit any complete boundaries. It's better to favor boundaries\n                // that are completely done since we can actually show them, than it is to emit\n                // any individual segments from a partially complete boundary.\n                var completedBoundaries = request.completedBoundaries;\n                for(i = 0; i < completedBoundaries.length; i++){\n                    var _boundary = completedBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary)) {\n                        request.destination = null;\n                        i++;\n                        completedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                completedBoundaries.splice(0, i); // Allow anything written so far to flush to the underlying sink before\n                // we continue with lower priorities.\n                completeWriting(destination);\n                beginWriting(destination); // TODO: Here we'll emit data used by hydration.\n                // Next we emit any segments of any boundaries that are partially complete\n                // but not deeply complete.\n                var partialBoundaries = request.partialBoundaries;\n                for(i = 0; i < partialBoundaries.length; i++){\n                    var _boundary2 = partialBoundaries[i];\n                    if (!flushPartialBoundary(request, destination, _boundary2)) {\n                        request.destination = null;\n                        i++;\n                        partialBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                partialBoundaries.splice(0, i); // Next we check the completed boundaries again. This may have had\n                // boundaries added to it in case they were too larged to be inlined.\n                // New ones might be added in this loop.\n                var largeBoundaries = request.completedBoundaries;\n                for(i = 0; i < largeBoundaries.length; i++){\n                    var _boundary3 = largeBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary3)) {\n                        request.destination = null;\n                        i++;\n                        largeBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                largeBoundaries.splice(0, i);\n            } finally{\n                if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 // We don't need to check any partially completed segments because\n                ) {\n                    request.flushScheduled = false;\n                    {\n                        // We write the trailing tags but only if don't have any data to resume.\n                        // If we need to resume we'll write the postamble in the resume instead.\n                        {\n                            writePostamble(destination, request.resumableState);\n                        }\n                    }\n                    {\n                        if (request.abortableTasks.size !== 0) {\n                            error(\"There was still abortable task at the root when we closed. This is a bug in React.\");\n                        }\n                    }\n                    close(destination); // We need to stop flowing now because we do not want any async contexts which might call\n                    // float methods to initiate any flushes after this point\n                    stopFlowing(request);\n                }\n            }\n        }\n        function startWork(request) {\n            request.flushScheduled = request.destination !== null;\n            {\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n            if (request.trackedPostpones === null) {\n                // this is either a regular render or a resume. For regular render we want\n                // to call emitEarlyPreloads after the first performWork because we want\n                // are responding to a live request and need to balance sending something early\n                // (i.e. don't want for the shell to finish) but we need something to send.\n                // The only implementation of this is for DOM at the moment and during resumes nothing\n                // actually emits but the code paths here are the same.\n                // During a prerender we don't want to be too aggressive in emitting early preloads\n                // because we aren't responding to a live request and we can wait for the prerender to\n                // postpone before we emit anything.\n                {\n                    scheduleWork(function() {\n                        return enqueueEarlyPreloadsAfterInitialWork(request);\n                    });\n                }\n            }\n        }\n        function enqueueEarlyPreloadsAfterInitialWork(request) {\n            var shellComplete = request.pendingRootTasks === 0;\n            safelyEmitEarlyPreloads(request, shellComplete);\n        }\n        function enqueueFlush(request) {\n            if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes\n            request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will\n            // happen when we start flowing again\n            request.destination !== null) {\n                request.flushScheduled = true;\n                scheduleWork(function() {\n                    // We need to existence check destination again here because it might go away\n                    // in between the enqueueFlush call and the work execution\n                    var destination = request.destination;\n                    if (destination) {\n                        flushCompletedQueues(request, destination);\n                    } else {\n                        request.flushScheduled = false;\n                    }\n                });\n            }\n        } // This function is intented to only be called during the pipe function for the Node builds.\n        function startFlowing(request, destination) {\n            if (request.status === CLOSING) {\n                request.status = CLOSED;\n                closeWithError(destination, request.fatalError);\n                return;\n            }\n            if (request.status === CLOSED) {\n                return;\n            }\n            if (request.destination !== null) {\n                // We're already flowing.\n                return;\n            }\n            request.destination = destination;\n            try {\n                flushCompletedQueues(request, destination);\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function stopFlowing(request) {\n            request.destination = null;\n        } // This is called to early terminate a request. It puts all pending boundaries in client rendered state.\n        function abort(request, reason) {\n            try {\n                var abortableTasks = request.abortableTasks;\n                if (abortableTasks.size > 0) {\n                    var error = reason === undefined ? new Error(\"The render was aborted by the server without a reason.\") : reason;\n                    abortableTasks.forEach(function(task) {\n                        return abortTask(task, request, error);\n                    });\n                    abortableTasks.clear();\n                }\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function flushResources(request) {\n            enqueueFlush(request);\n        }\n        function getFormState(request) {\n            return request.formState;\n        }\n        function getResumableState(request) {\n            return request.resumableState;\n        }\n        function getRenderState(request) {\n            return request.renderState;\n        }\n        function onError$1() {}\n        function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {\n            var didFatal = false;\n            var fatalError = null;\n            var result = \"\";\n            var destination = {\n                // $FlowFixMe[missing-local-annot]\n                push: function(chunk) {\n                    if (chunk !== null) {\n                        result += chunk;\n                    }\n                    return true;\n                },\n                // $FlowFixMe[missing-local-annot]\n                destroy: function(error) {\n                    didFatal = true;\n                    fatalError = error;\n                }\n            };\n            var readyToStream = false;\n            function onShellReady() {\n                readyToStream = true;\n            }\n            var resumableState = createResumableState(options ? options.identifierPrefix : undefined, undefined);\n            var request = createRequest(children, resumableState, createRenderState(resumableState, generateStaticMarkup), createRootFormatContext(), Infinity, onError$1, undefined, onShellReady, undefined, undefined, undefined);\n            startWork(request); // If anything suspended and is still pending, we'll abort it before writing.\n            // That way we write only client-rendered boundaries from the start.\n            abort(request, abortReason);\n            startFlowing(request, destination);\n            if (didFatal && fatalError !== abortReason) {\n                throw fatalError;\n            }\n            if (!readyToStream) {\n                // Note: This error message is the one we use on the client. It doesn't\n                // really make sense here. But this is the legacy server renderer, anyway.\n                // We're going to delete it soon.\n                throw new Error(\"A component suspended while responding to synchronous input. This \" + \"will cause the UI to be replaced with a loading indicator. To fix, \" + \"updates that suspend should be wrapped with startTransition.\");\n            }\n            return result;\n        }\n        function _inheritsLoose(subClass, superClass) {\n            subClass.prototype = Object.create(superClass.prototype);\n            subClass.prototype.constructor = subClass;\n            subClass.__proto__ = superClass;\n        }\n        var ReactMarkupReadableStream = /*#__PURE__*/ function(_Readable) {\n            _inheritsLoose(ReactMarkupReadableStream, _Readable);\n            function ReactMarkupReadableStream() {\n                var _this;\n                // Calls the stream.Readable(options) constructor. Consider exposing built-in\n                // features like highWaterMark in the future.\n                _this = _Readable.call(this, {}) || this;\n                _this.request = void 0;\n                _this.startedFlowing = void 0;\n                _this.request = null;\n                _this.startedFlowing = false;\n                return _this;\n            } // $FlowFixMe[missing-local-annot]\n            var _proto = ReactMarkupReadableStream.prototype;\n            _proto._destroy = function _destroy(err, callback) {\n                abort(this.request);\n                callback(err);\n            } // $FlowFixMe[missing-local-annot]\n            ;\n            _proto._read = function _read(size) {\n                if (this.startedFlowing) {\n                    startFlowing(this.request, this);\n                }\n            };\n            return ReactMarkupReadableStream;\n        }(stream.Readable);\n        function onError() {}\n        function renderToNodeStreamImpl(children, options, generateStaticMarkup) {\n            function onAllReady() {\n                // We wait until everything has loaded before starting to write.\n                // That way we only end up with fully resolved HTML even if we suspend.\n                destination.startedFlowing = true;\n                startFlowing(request, destination);\n            }\n            var destination = new ReactMarkupReadableStream();\n            var resumableState = createResumableState(options ? options.identifierPrefix : undefined, undefined);\n            var request = createRequest(children, resumableState, createRenderState(resumableState, false), createRootFormatContext(), Infinity, onError, onAllReady, undefined, undefined, undefined);\n            destination.request = request;\n            startWork(request);\n            return destination;\n        }\n        function renderToNodeStream(children, options) {\n            {\n                error(\"renderToNodeStream is deprecated. Use renderToPipeableStream instead.\");\n            }\n            return renderToNodeStreamImpl(children, options);\n        }\n        function renderToStaticNodeStream(children, options) {\n            return renderToNodeStreamImpl(children, options);\n        }\n        function renderToString(children, options) {\n            return renderToStringImpl(children, options, false, 'The server used \"renderToString\" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to \"renderToPipeableStream\" which supports Suspense on the server');\n        }\n        function renderToStaticMarkup(children, options) {\n            return renderToStringImpl(children, options, true, 'The server used \"renderToStaticMarkup\" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to \"renderToPipeableStream\" which supports Suspense on the server');\n        }\n        exports.renderToNodeStream = renderToNodeStream;\n        exports.renderToStaticMarkup = renderToStaticMarkup;\n        exports.renderToStaticNodeStream = renderToStaticNodeStream;\n        exports.renderToString = renderToString;\n        exports.version = ReactVersion;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom-server.node.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(rsc)/../node_modules/next/dist/compiled/react/index.js\");\n        var util = __webpack_require__(/*! util */ \"util\");\n        var crypto = __webpack_require__(/*! crypto */ \"crypto\");\n        var async_hooks = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n        var ReactDOM = __webpack_require__(/*! react-dom */ \"(rsc)/../node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js\");\n        var ReactVersion = \"18.3.0-canary-2c338b16f-20231116\";\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        function scheduleWork(callback) {\n            setImmediate(callback);\n        }\n        function flushBuffered(destination) {\n            // If we don't have any more data to send right now.\n            // Flush whatever is in the buffer to the wire.\n            if (typeof destination.flush === \"function\") {\n                // By convention the Zlib streams provide a flush function for this purpose.\n                // For Express, compression middleware adds this method.\n                destination.flush();\n            }\n        }\n        var VIEW_SIZE = 2048;\n        var currentView = null;\n        var writtenBytes = 0;\n        var destinationHasCapacity$1 = true;\n        function beginWriting(destination) {\n            currentView = new Uint8Array(VIEW_SIZE);\n            writtenBytes = 0;\n            destinationHasCapacity$1 = true;\n        }\n        function writeStringChunk(destination, stringChunk) {\n            if (stringChunk.length === 0) {\n                return;\n            } // maximum possible view needed to encode entire string\n            if (stringChunk.length * 3 > VIEW_SIZE) {\n                if (writtenBytes > 0) {\n                    writeToDestination(destination, currentView.subarray(0, writtenBytes));\n                    currentView = new Uint8Array(VIEW_SIZE);\n                    writtenBytes = 0;\n                }\n                writeToDestination(destination, textEncoder.encode(stringChunk));\n                return;\n            }\n            var target = currentView;\n            if (writtenBytes > 0) {\n                target = currentView.subarray(writtenBytes);\n            }\n            var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target), read = _textEncoder$encodeIn.read, written = _textEncoder$encodeIn.written;\n            writtenBytes += written;\n            if (read < stringChunk.length) {\n                writeToDestination(destination, currentView.subarray(0, writtenBytes));\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = textEncoder.encodeInto(stringChunk.slice(read), currentView).written;\n            }\n            if (writtenBytes === VIEW_SIZE) {\n                writeToDestination(destination, currentView);\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = 0;\n            }\n        }\n        function writeViewChunk(destination, chunk) {\n            if (chunk.byteLength === 0) {\n                return;\n            }\n            if (chunk.byteLength > VIEW_SIZE) {\n                {\n                    if (precomputedChunkSet && precomputedChunkSet.has(chunk)) {\n                        error(\"A large precomputed chunk was passed to writeChunk without being copied.\" + \" Large chunks get enqueued directly and are not copied. This is incompatible with precomputed chunks because you cannot enqueue the same precomputed chunk twice.\" + ' Use \"cloneChunk\" to make a copy of this large precomputed chunk before writing it. This is a bug in React.');\n                    }\n                }\n                // one that is cached by the streaming renderer. We will enqueu\n                // it directly and expect it is not re-used\n                if (writtenBytes > 0) {\n                    writeToDestination(destination, currentView.subarray(0, writtenBytes));\n                    currentView = new Uint8Array(VIEW_SIZE);\n                    writtenBytes = 0;\n                }\n                writeToDestination(destination, chunk);\n                return;\n            }\n            var bytesToWrite = chunk;\n            var allowableBytes = currentView.length - writtenBytes;\n            if (allowableBytes < bytesToWrite.byteLength) {\n                // this chunk would overflow the current view. We enqueue a full view\n                // and start a new view with the remaining chunk\n                if (allowableBytes === 0) {\n                    // the current view is already full, send it\n                    writeToDestination(destination, currentView);\n                } else {\n                    // fill up the current view and apply the remaining chunk bytes\n                    // to a new view.\n                    currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);\n                    writtenBytes += allowableBytes;\n                    writeToDestination(destination, currentView);\n                    bytesToWrite = bytesToWrite.subarray(allowableBytes);\n                }\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = 0;\n            }\n            currentView.set(bytesToWrite, writtenBytes);\n            writtenBytes += bytesToWrite.byteLength;\n            if (writtenBytes === VIEW_SIZE) {\n                writeToDestination(destination, currentView);\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = 0;\n            }\n        }\n        function writeChunk(destination, chunk) {\n            if (typeof chunk === \"string\") {\n                writeStringChunk(destination, chunk);\n            } else {\n                writeViewChunk(destination, chunk);\n            }\n        }\n        function writeToDestination(destination, view) {\n            var currentHasCapacity = destination.write(view);\n            destinationHasCapacity$1 = destinationHasCapacity$1 && currentHasCapacity;\n        }\n        function writeChunkAndReturn(destination, chunk) {\n            writeChunk(destination, chunk);\n            return destinationHasCapacity$1;\n        }\n        function completeWriting(destination) {\n            if (currentView && writtenBytes > 0) {\n                destination.write(currentView.subarray(0, writtenBytes));\n            }\n            currentView = null;\n            writtenBytes = 0;\n            destinationHasCapacity$1 = true;\n        }\n        function close(destination) {\n            destination.end();\n        }\n        var textEncoder = new util.TextEncoder();\n        function stringToChunk(content) {\n            return content;\n        }\n        var precomputedChunkSet = new Set();\n        function stringToPrecomputedChunk(content) {\n            var precomputedChunk = textEncoder.encode(content);\n            {\n                if (precomputedChunkSet) {\n                    precomputedChunkSet.add(precomputedChunk);\n                }\n            }\n            return precomputedChunk;\n        }\n        function clonePrecomputedChunk(precomputedChunk) {\n            return precomputedChunk.length > VIEW_SIZE ? precomputedChunk.slice() : precomputedChunk;\n        }\n        function closeWithError(destination, error) {\n            // $FlowFixMe[incompatible-call]: This is an Error object or the destination accepts other types.\n            destination.destroy(error);\n        }\n        function createFastHash(input) {\n            var hash = crypto.createHash(\"md5\");\n            hash.update(input);\n            return hash.digest(\"hex\");\n        }\n        var assign = Object.assign;\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkAttributeStringCoercion(value, attributeName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` attribute is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", attributeName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkOptionStringCoercion(value, propName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` option is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", propName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkCSSPropertyStringCoercion(value, propName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` CSS property is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", propName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkHtmlStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided HTML markup uses a value of unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableFloat = true; // Enables unstable_useMemoCache hook, intended as a compilation target for\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n        /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(\"^[\" + ATTRIBUTE_NAME_START_CHAR + \"][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var illegalAttributeNameCache = {};\n        var validatedAttributeNameCache = {};\n        function isAttributeNameSafe(attributeName) {\n            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n                return true;\n            }\n            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n                return false;\n            }\n            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n                validatedAttributeNameCache[attributeName] = true;\n                return true;\n            }\n            illegalAttributeNameCache[attributeName] = true;\n            {\n                error(\"Invalid attribute name: `%s`\", attributeName);\n            }\n            return false;\n        }\n        /**\n * CSS properties which accept numbers but are not in units of \"px\".\n */ var unitlessNumbers = new Set([\n            \"animationIterationCount\",\n            \"aspectRatio\",\n            \"borderImageOutset\",\n            \"borderImageSlice\",\n            \"borderImageWidth\",\n            \"boxFlex\",\n            \"boxFlexGroup\",\n            \"boxOrdinalGroup\",\n            \"columnCount\",\n            \"columns\",\n            \"flex\",\n            \"flexGrow\",\n            \"flexPositive\",\n            \"flexShrink\",\n            \"flexNegative\",\n            \"flexOrder\",\n            \"gridArea\",\n            \"gridRow\",\n            \"gridRowEnd\",\n            \"gridRowSpan\",\n            \"gridRowStart\",\n            \"gridColumn\",\n            \"gridColumnEnd\",\n            \"gridColumnSpan\",\n            \"gridColumnStart\",\n            \"fontWeight\",\n            \"lineClamp\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"scale\",\n            \"tabSize\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\",\n            \"fillOpacity\",\n            \"floodOpacity\",\n            \"stopOpacity\",\n            \"strokeDasharray\",\n            \"strokeDashoffset\",\n            \"strokeMiterlimit\",\n            \"strokeOpacity\",\n            \"strokeWidth\",\n            \"MozAnimationIterationCount\",\n            \"MozBoxFlex\",\n            \"MozBoxFlexGroup\",\n            \"MozLineClamp\",\n            \"msAnimationIterationCount\",\n            \"msFlex\",\n            \"msZoom\",\n            \"msFlexGrow\",\n            \"msFlexNegative\",\n            \"msFlexOrder\",\n            \"msFlexPositive\",\n            \"msFlexShrink\",\n            \"msGridColumn\",\n            \"msGridColumnSpan\",\n            \"msGridRow\",\n            \"msGridRowSpan\",\n            \"WebkitAnimationIterationCount\",\n            \"WebkitBoxFlex\",\n            \"WebKitBoxFlexGroup\",\n            \"WebkitBoxOrdinalGroup\",\n            \"WebkitColumnCount\",\n            \"WebkitColumns\",\n            \"WebkitFlex\",\n            \"WebkitFlexGrow\",\n            \"WebkitFlexPositive\",\n            \"WebkitFlexShrink\",\n            \"WebkitLineClamp\"\n        ]);\n        function isUnitlessNumber(name) {\n            return unitlessNumbers.has(name);\n        }\n        var aliases = new Map([\n            [\n                \"acceptCharset\",\n                \"accept-charset\"\n            ],\n            [\n                \"htmlFor\",\n                \"for\"\n            ],\n            [\n                \"httpEquiv\",\n                \"http-equiv\"\n            ],\n            [\n                \"crossOrigin\",\n                \"crossorigin\"\n            ],\n            // Regular attributes that just accept strings.],\n            [\n                \"accentHeight\",\n                \"accent-height\"\n            ],\n            [\n                \"alignmentBaseline\",\n                \"alignment-baseline\"\n            ],\n            [\n                \"arabicForm\",\n                \"arabic-form\"\n            ],\n            [\n                \"baselineShift\",\n                \"baseline-shift\"\n            ],\n            [\n                \"capHeight\",\n                \"cap-height\"\n            ],\n            [\n                \"clipPath\",\n                \"clip-path\"\n            ],\n            [\n                \"clipRule\",\n                \"clip-rule\"\n            ],\n            [\n                \"colorInterpolation\",\n                \"color-interpolation\"\n            ],\n            [\n                \"colorInterpolationFilters\",\n                \"color-interpolation-filters\"\n            ],\n            [\n                \"colorProfile\",\n                \"color-profile\"\n            ],\n            [\n                \"colorRendering\",\n                \"color-rendering\"\n            ],\n            [\n                \"dominantBaseline\",\n                \"dominant-baseline\"\n            ],\n            [\n                \"enableBackground\",\n                \"enable-background\"\n            ],\n            [\n                \"fillOpacity\",\n                \"fill-opacity\"\n            ],\n            [\n                \"fillRule\",\n                \"fill-rule\"\n            ],\n            [\n                \"floodColor\",\n                \"flood-color\"\n            ],\n            [\n                \"floodOpacity\",\n                \"flood-opacity\"\n            ],\n            [\n                \"fontFamily\",\n                \"font-family\"\n            ],\n            [\n                \"fontSize\",\n                \"font-size\"\n            ],\n            [\n                \"fontSizeAdjust\",\n                \"font-size-adjust\"\n            ],\n            [\n                \"fontStretch\",\n                \"font-stretch\"\n            ],\n            [\n                \"fontStyle\",\n                \"font-style\"\n            ],\n            [\n                \"fontVariant\",\n                \"font-variant\"\n            ],\n            [\n                \"fontWeight\",\n                \"font-weight\"\n            ],\n            [\n                \"glyphName\",\n                \"glyph-name\"\n            ],\n            [\n                \"glyphOrientationHorizontal\",\n                \"glyph-orientation-horizontal\"\n            ],\n            [\n                \"glyphOrientationVertical\",\n                \"glyph-orientation-vertical\"\n            ],\n            [\n                \"horizAdvX\",\n                \"horiz-adv-x\"\n            ],\n            [\n                \"horizOriginX\",\n                \"horiz-origin-x\"\n            ],\n            [\n                \"imageRendering\",\n                \"image-rendering\"\n            ],\n            [\n                \"letterSpacing\",\n                \"letter-spacing\"\n            ],\n            [\n                \"lightingColor\",\n                \"lighting-color\"\n            ],\n            [\n                \"markerEnd\",\n                \"marker-end\"\n            ],\n            [\n                \"markerMid\",\n                \"marker-mid\"\n            ],\n            [\n                \"markerStart\",\n                \"marker-start\"\n            ],\n            [\n                \"overlinePosition\",\n                \"overline-position\"\n            ],\n            [\n                \"overlineThickness\",\n                \"overline-thickness\"\n            ],\n            [\n                \"paintOrder\",\n                \"paint-order\"\n            ],\n            [\n                \"panose-1\",\n                \"panose-1\"\n            ],\n            [\n                \"pointerEvents\",\n                \"pointer-events\"\n            ],\n            [\n                \"renderingIntent\",\n                \"rendering-intent\"\n            ],\n            [\n                \"shapeRendering\",\n                \"shape-rendering\"\n            ],\n            [\n                \"stopColor\",\n                \"stop-color\"\n            ],\n            [\n                \"stopOpacity\",\n                \"stop-opacity\"\n            ],\n            [\n                \"strikethroughPosition\",\n                \"strikethrough-position\"\n            ],\n            [\n                \"strikethroughThickness\",\n                \"strikethrough-thickness\"\n            ],\n            [\n                \"strokeDasharray\",\n                \"stroke-dasharray\"\n            ],\n            [\n                \"strokeDashoffset\",\n                \"stroke-dashoffset\"\n            ],\n            [\n                \"strokeLinecap\",\n                \"stroke-linecap\"\n            ],\n            [\n                \"strokeLinejoin\",\n                \"stroke-linejoin\"\n            ],\n            [\n                \"strokeMiterlimit\",\n                \"stroke-miterlimit\"\n            ],\n            [\n                \"strokeOpacity\",\n                \"stroke-opacity\"\n            ],\n            [\n                \"strokeWidth\",\n                \"stroke-width\"\n            ],\n            [\n                \"textAnchor\",\n                \"text-anchor\"\n            ],\n            [\n                \"textDecoration\",\n                \"text-decoration\"\n            ],\n            [\n                \"textRendering\",\n                \"text-rendering\"\n            ],\n            [\n                \"transformOrigin\",\n                \"transform-origin\"\n            ],\n            [\n                \"underlinePosition\",\n                \"underline-position\"\n            ],\n            [\n                \"underlineThickness\",\n                \"underline-thickness\"\n            ],\n            [\n                \"unicodeBidi\",\n                \"unicode-bidi\"\n            ],\n            [\n                \"unicodeRange\",\n                \"unicode-range\"\n            ],\n            [\n                \"unitsPerEm\",\n                \"units-per-em\"\n            ],\n            [\n                \"vAlphabetic\",\n                \"v-alphabetic\"\n            ],\n            [\n                \"vHanging\",\n                \"v-hanging\"\n            ],\n            [\n                \"vIdeographic\",\n                \"v-ideographic\"\n            ],\n            [\n                \"vMathematical\",\n                \"v-mathematical\"\n            ],\n            [\n                \"vectorEffect\",\n                \"vector-effect\"\n            ],\n            [\n                \"vertAdvY\",\n                \"vert-adv-y\"\n            ],\n            [\n                \"vertOriginX\",\n                \"vert-origin-x\"\n            ],\n            [\n                \"vertOriginY\",\n                \"vert-origin-y\"\n            ],\n            [\n                \"wordSpacing\",\n                \"word-spacing\"\n            ],\n            [\n                \"writingMode\",\n                \"writing-mode\"\n            ],\n            [\n                \"xmlnsXlink\",\n                \"xmlns:xlink\"\n            ],\n            [\n                \"xHeight\",\n                \"x-height\"\n            ]\n        ]);\n        function getAttributeAlias(name) {\n            return aliases.get(name) || name;\n        }\n        var hasReadOnlyValue = {\n            button: true,\n            checkbox: true,\n            image: true,\n            hidden: true,\n            radio: true,\n            reset: true,\n            submit: true\n        };\n        function checkControlledValueProps(tagName, props) {\n            {\n                if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n                    error(\"You provided a `value` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultValue`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n                if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n                    error(\"You provided a `checked` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultChecked`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n            }\n        }\n        var ariaProperties = {\n            \"aria-current\": 0,\n            // state\n            \"aria-description\": 0,\n            \"aria-details\": 0,\n            \"aria-disabled\": 0,\n            // state\n            \"aria-hidden\": 0,\n            // state\n            \"aria-invalid\": 0,\n            // state\n            \"aria-keyshortcuts\": 0,\n            \"aria-label\": 0,\n            \"aria-roledescription\": 0,\n            // Widget Attributes\n            \"aria-autocomplete\": 0,\n            \"aria-checked\": 0,\n            \"aria-expanded\": 0,\n            \"aria-haspopup\": 0,\n            \"aria-level\": 0,\n            \"aria-modal\": 0,\n            \"aria-multiline\": 0,\n            \"aria-multiselectable\": 0,\n            \"aria-orientation\": 0,\n            \"aria-placeholder\": 0,\n            \"aria-pressed\": 0,\n            \"aria-readonly\": 0,\n            \"aria-required\": 0,\n            \"aria-selected\": 0,\n            \"aria-sort\": 0,\n            \"aria-valuemax\": 0,\n            \"aria-valuemin\": 0,\n            \"aria-valuenow\": 0,\n            \"aria-valuetext\": 0,\n            // Live Region Attributes\n            \"aria-atomic\": 0,\n            \"aria-busy\": 0,\n            \"aria-live\": 0,\n            \"aria-relevant\": 0,\n            // Drag-and-Drop Attributes\n            \"aria-dropeffect\": 0,\n            \"aria-grabbed\": 0,\n            // Relationship Attributes\n            \"aria-activedescendant\": 0,\n            \"aria-colcount\": 0,\n            \"aria-colindex\": 0,\n            \"aria-colspan\": 0,\n            \"aria-controls\": 0,\n            \"aria-describedby\": 0,\n            \"aria-errormessage\": 0,\n            \"aria-flowto\": 0,\n            \"aria-labelledby\": 0,\n            \"aria-owns\": 0,\n            \"aria-posinset\": 0,\n            \"aria-rowcount\": 0,\n            \"aria-rowindex\": 0,\n            \"aria-rowspan\": 0,\n            \"aria-setsize\": 0\n        };\n        var warnedProperties$1 = {};\n        var rARIA$1 = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel$1 = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty$1(tagName, name) {\n            {\n                if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n                    return true;\n                }\n                if (rARIACamel$1.test(name)) {\n                    var ariaName = \"aria-\" + name.slice(4).toLowerCase();\n                    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (correctName == null) {\n                        error(\"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.\", name);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== correctName) {\n                        error(\"Invalid ARIA attribute `%s`. Did you mean `%s`?\", name, correctName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n                if (rARIA$1.test(name)) {\n                    var lowerCasedName = name.toLowerCase();\n                    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (standardName == null) {\n                        warnedProperties$1[name] = true;\n                        return false;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== standardName) {\n                        error(\"Unknown ARIA attribute `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n            }\n            return true;\n        }\n        function validateProperties$2(type, props) {\n            {\n                var invalidProps = [];\n                for(var key in props){\n                    var isValid = validateProperty$1(type, key);\n                    if (!isValid) {\n                        invalidProps.push(key);\n                    }\n                }\n                var unknownPropString = invalidProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (invalidProps.length === 1) {\n                    error(\"Invalid aria prop %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                } else if (invalidProps.length > 1) {\n                    error(\"Invalid aria props %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                }\n            }\n        }\n        var didWarnValueNull = false;\n        function validateProperties$1(type, props) {\n            {\n                if (type !== \"input\" && type !== \"textarea\" && type !== \"select\") {\n                    return;\n                }\n                if (props != null && props.value === null && !didWarnValueNull) {\n                    didWarnValueNull = true;\n                    if (type === \"select\" && props.multiple) {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty array when `multiple` is set to `true` \" + \"to clear the component or `undefined` for uncontrolled components.\", type);\n                    } else {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty string to clear the component or `undefined` \" + \"for uncontrolled components.\", type);\n                    }\n                }\n            }\n        }\n        function isCustomElement(tagName, props) {\n            if (tagName.indexOf(\"-\") === -1) {\n                return false;\n            }\n            switch(tagName){\n                // These are reserved SVG and MathML elements.\n                // We don't mind this list too much because we expect it to never grow.\n                // The alternative is to track the namespace in a few places which is convoluted.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    return false;\n                default:\n                    return true;\n            }\n        }\n        // When adding attributes to the HTML or SVG allowed attribute list, be sure to\n        // also add them to this module to ensure casing and incorrect name\n        // warnings.\n        var possibleStandardNames = {\n            // HTML\n            accept: \"accept\",\n            acceptcharset: \"acceptCharset\",\n            \"accept-charset\": \"acceptCharset\",\n            accesskey: \"accessKey\",\n            action: \"action\",\n            allowfullscreen: \"allowFullScreen\",\n            alt: \"alt\",\n            as: \"as\",\n            async: \"async\",\n            autocapitalize: \"autoCapitalize\",\n            autocomplete: \"autoComplete\",\n            autocorrect: \"autoCorrect\",\n            autofocus: \"autoFocus\",\n            autoplay: \"autoPlay\",\n            autosave: \"autoSave\",\n            capture: \"capture\",\n            cellpadding: \"cellPadding\",\n            cellspacing: \"cellSpacing\",\n            challenge: \"challenge\",\n            charset: \"charSet\",\n            checked: \"checked\",\n            children: \"children\",\n            cite: \"cite\",\n            class: \"className\",\n            classid: \"classID\",\n            classname: \"className\",\n            cols: \"cols\",\n            colspan: \"colSpan\",\n            content: \"content\",\n            contenteditable: \"contentEditable\",\n            contextmenu: \"contextMenu\",\n            controls: \"controls\",\n            controlslist: \"controlsList\",\n            coords: \"coords\",\n            crossorigin: \"crossOrigin\",\n            dangerouslysetinnerhtml: \"dangerouslySetInnerHTML\",\n            data: \"data\",\n            datetime: \"dateTime\",\n            default: \"default\",\n            defaultchecked: \"defaultChecked\",\n            defaultvalue: \"defaultValue\",\n            defer: \"defer\",\n            dir: \"dir\",\n            disabled: \"disabled\",\n            disablepictureinpicture: \"disablePictureInPicture\",\n            disableremoteplayback: \"disableRemotePlayback\",\n            download: \"download\",\n            draggable: \"draggable\",\n            enctype: \"encType\",\n            enterkeyhint: \"enterKeyHint\",\n            fetchpriority: \"fetchPriority\",\n            for: \"htmlFor\",\n            form: \"form\",\n            formmethod: \"formMethod\",\n            formaction: \"formAction\",\n            formenctype: \"formEncType\",\n            formnovalidate: \"formNoValidate\",\n            formtarget: \"formTarget\",\n            frameborder: \"frameBorder\",\n            headers: \"headers\",\n            height: \"height\",\n            hidden: \"hidden\",\n            high: \"high\",\n            href: \"href\",\n            hreflang: \"hrefLang\",\n            htmlfor: \"htmlFor\",\n            httpequiv: \"httpEquiv\",\n            \"http-equiv\": \"httpEquiv\",\n            icon: \"icon\",\n            id: \"id\",\n            imagesizes: \"imageSizes\",\n            imagesrcset: \"imageSrcSet\",\n            innerhtml: \"innerHTML\",\n            inputmode: \"inputMode\",\n            integrity: \"integrity\",\n            is: \"is\",\n            itemid: \"itemID\",\n            itemprop: \"itemProp\",\n            itemref: \"itemRef\",\n            itemscope: \"itemScope\",\n            itemtype: \"itemType\",\n            keyparams: \"keyParams\",\n            keytype: \"keyType\",\n            kind: \"kind\",\n            label: \"label\",\n            lang: \"lang\",\n            list: \"list\",\n            loop: \"loop\",\n            low: \"low\",\n            manifest: \"manifest\",\n            marginwidth: \"marginWidth\",\n            marginheight: \"marginHeight\",\n            max: \"max\",\n            maxlength: \"maxLength\",\n            media: \"media\",\n            mediagroup: \"mediaGroup\",\n            method: \"method\",\n            min: \"min\",\n            minlength: \"minLength\",\n            multiple: \"multiple\",\n            muted: \"muted\",\n            name: \"name\",\n            nomodule: \"noModule\",\n            nonce: \"nonce\",\n            novalidate: \"noValidate\",\n            open: \"open\",\n            optimum: \"optimum\",\n            pattern: \"pattern\",\n            placeholder: \"placeholder\",\n            playsinline: \"playsInline\",\n            poster: \"poster\",\n            preload: \"preload\",\n            profile: \"profile\",\n            radiogroup: \"radioGroup\",\n            readonly: \"readOnly\",\n            referrerpolicy: \"referrerPolicy\",\n            rel: \"rel\",\n            required: \"required\",\n            reversed: \"reversed\",\n            role: \"role\",\n            rows: \"rows\",\n            rowspan: \"rowSpan\",\n            sandbox: \"sandbox\",\n            scope: \"scope\",\n            scoped: \"scoped\",\n            scrolling: \"scrolling\",\n            seamless: \"seamless\",\n            selected: \"selected\",\n            shape: \"shape\",\n            size: \"size\",\n            sizes: \"sizes\",\n            span: \"span\",\n            spellcheck: \"spellCheck\",\n            src: \"src\",\n            srcdoc: \"srcDoc\",\n            srclang: \"srcLang\",\n            srcset: \"srcSet\",\n            start: \"start\",\n            step: \"step\",\n            style: \"style\",\n            summary: \"summary\",\n            tabindex: \"tabIndex\",\n            target: \"target\",\n            title: \"title\",\n            type: \"type\",\n            usemap: \"useMap\",\n            value: \"value\",\n            width: \"width\",\n            wmode: \"wmode\",\n            wrap: \"wrap\",\n            // SVG\n            about: \"about\",\n            accentheight: \"accentHeight\",\n            \"accent-height\": \"accentHeight\",\n            accumulate: \"accumulate\",\n            additive: \"additive\",\n            alignmentbaseline: \"alignmentBaseline\",\n            \"alignment-baseline\": \"alignmentBaseline\",\n            allowreorder: \"allowReorder\",\n            alphabetic: \"alphabetic\",\n            amplitude: \"amplitude\",\n            arabicform: \"arabicForm\",\n            \"arabic-form\": \"arabicForm\",\n            ascent: \"ascent\",\n            attributename: \"attributeName\",\n            attributetype: \"attributeType\",\n            autoreverse: \"autoReverse\",\n            azimuth: \"azimuth\",\n            basefrequency: \"baseFrequency\",\n            baselineshift: \"baselineShift\",\n            \"baseline-shift\": \"baselineShift\",\n            baseprofile: \"baseProfile\",\n            bbox: \"bbox\",\n            begin: \"begin\",\n            bias: \"bias\",\n            by: \"by\",\n            calcmode: \"calcMode\",\n            capheight: \"capHeight\",\n            \"cap-height\": \"capHeight\",\n            clip: \"clip\",\n            clippath: \"clipPath\",\n            \"clip-path\": \"clipPath\",\n            clippathunits: \"clipPathUnits\",\n            cliprule: \"clipRule\",\n            \"clip-rule\": \"clipRule\",\n            color: \"color\",\n            colorinterpolation: \"colorInterpolation\",\n            \"color-interpolation\": \"colorInterpolation\",\n            colorinterpolationfilters: \"colorInterpolationFilters\",\n            \"color-interpolation-filters\": \"colorInterpolationFilters\",\n            colorprofile: \"colorProfile\",\n            \"color-profile\": \"colorProfile\",\n            colorrendering: \"colorRendering\",\n            \"color-rendering\": \"colorRendering\",\n            contentscripttype: \"contentScriptType\",\n            contentstyletype: \"contentStyleType\",\n            cursor: \"cursor\",\n            cx: \"cx\",\n            cy: \"cy\",\n            d: \"d\",\n            datatype: \"datatype\",\n            decelerate: \"decelerate\",\n            descent: \"descent\",\n            diffuseconstant: \"diffuseConstant\",\n            direction: \"direction\",\n            display: \"display\",\n            divisor: \"divisor\",\n            dominantbaseline: \"dominantBaseline\",\n            \"dominant-baseline\": \"dominantBaseline\",\n            dur: \"dur\",\n            dx: \"dx\",\n            dy: \"dy\",\n            edgemode: \"edgeMode\",\n            elevation: \"elevation\",\n            enablebackground: \"enableBackground\",\n            \"enable-background\": \"enableBackground\",\n            end: \"end\",\n            exponent: \"exponent\",\n            externalresourcesrequired: \"externalResourcesRequired\",\n            fill: \"fill\",\n            fillopacity: \"fillOpacity\",\n            \"fill-opacity\": \"fillOpacity\",\n            fillrule: \"fillRule\",\n            \"fill-rule\": \"fillRule\",\n            filter: \"filter\",\n            filterres: \"filterRes\",\n            filterunits: \"filterUnits\",\n            floodopacity: \"floodOpacity\",\n            \"flood-opacity\": \"floodOpacity\",\n            floodcolor: \"floodColor\",\n            \"flood-color\": \"floodColor\",\n            focusable: \"focusable\",\n            fontfamily: \"fontFamily\",\n            \"font-family\": \"fontFamily\",\n            fontsize: \"fontSize\",\n            \"font-size\": \"fontSize\",\n            fontsizeadjust: \"fontSizeAdjust\",\n            \"font-size-adjust\": \"fontSizeAdjust\",\n            fontstretch: \"fontStretch\",\n            \"font-stretch\": \"fontStretch\",\n            fontstyle: \"fontStyle\",\n            \"font-style\": \"fontStyle\",\n            fontvariant: \"fontVariant\",\n            \"font-variant\": \"fontVariant\",\n            fontweight: \"fontWeight\",\n            \"font-weight\": \"fontWeight\",\n            format: \"format\",\n            from: \"from\",\n            fx: \"fx\",\n            fy: \"fy\",\n            g1: \"g1\",\n            g2: \"g2\",\n            glyphname: \"glyphName\",\n            \"glyph-name\": \"glyphName\",\n            glyphorientationhorizontal: \"glyphOrientationHorizontal\",\n            \"glyph-orientation-horizontal\": \"glyphOrientationHorizontal\",\n            glyphorientationvertical: \"glyphOrientationVertical\",\n            \"glyph-orientation-vertical\": \"glyphOrientationVertical\",\n            glyphref: \"glyphRef\",\n            gradienttransform: \"gradientTransform\",\n            gradientunits: \"gradientUnits\",\n            hanging: \"hanging\",\n            horizadvx: \"horizAdvX\",\n            \"horiz-adv-x\": \"horizAdvX\",\n            horizoriginx: \"horizOriginX\",\n            \"horiz-origin-x\": \"horizOriginX\",\n            ideographic: \"ideographic\",\n            imagerendering: \"imageRendering\",\n            \"image-rendering\": \"imageRendering\",\n            in2: \"in2\",\n            in: \"in\",\n            inlist: \"inlist\",\n            intercept: \"intercept\",\n            k1: \"k1\",\n            k2: \"k2\",\n            k3: \"k3\",\n            k4: \"k4\",\n            k: \"k\",\n            kernelmatrix: \"kernelMatrix\",\n            kernelunitlength: \"kernelUnitLength\",\n            kerning: \"kerning\",\n            keypoints: \"keyPoints\",\n            keysplines: \"keySplines\",\n            keytimes: \"keyTimes\",\n            lengthadjust: \"lengthAdjust\",\n            letterspacing: \"letterSpacing\",\n            \"letter-spacing\": \"letterSpacing\",\n            lightingcolor: \"lightingColor\",\n            \"lighting-color\": \"lightingColor\",\n            limitingconeangle: \"limitingConeAngle\",\n            local: \"local\",\n            markerend: \"markerEnd\",\n            \"marker-end\": \"markerEnd\",\n            markerheight: \"markerHeight\",\n            markermid: \"markerMid\",\n            \"marker-mid\": \"markerMid\",\n            markerstart: \"markerStart\",\n            \"marker-start\": \"markerStart\",\n            markerunits: \"markerUnits\",\n            markerwidth: \"markerWidth\",\n            mask: \"mask\",\n            maskcontentunits: \"maskContentUnits\",\n            maskunits: \"maskUnits\",\n            mathematical: \"mathematical\",\n            mode: \"mode\",\n            numoctaves: \"numOctaves\",\n            offset: \"offset\",\n            opacity: \"opacity\",\n            operator: \"operator\",\n            order: \"order\",\n            orient: \"orient\",\n            orientation: \"orientation\",\n            origin: \"origin\",\n            overflow: \"overflow\",\n            overlineposition: \"overlinePosition\",\n            \"overline-position\": \"overlinePosition\",\n            overlinethickness: \"overlineThickness\",\n            \"overline-thickness\": \"overlineThickness\",\n            paintorder: \"paintOrder\",\n            \"paint-order\": \"paintOrder\",\n            panose1: \"panose1\",\n            \"panose-1\": \"panose1\",\n            pathlength: \"pathLength\",\n            patterncontentunits: \"patternContentUnits\",\n            patterntransform: \"patternTransform\",\n            patternunits: \"patternUnits\",\n            pointerevents: \"pointerEvents\",\n            \"pointer-events\": \"pointerEvents\",\n            points: \"points\",\n            pointsatx: \"pointsAtX\",\n            pointsaty: \"pointsAtY\",\n            pointsatz: \"pointsAtZ\",\n            prefix: \"prefix\",\n            preservealpha: \"preserveAlpha\",\n            preserveaspectratio: \"preserveAspectRatio\",\n            primitiveunits: \"primitiveUnits\",\n            property: \"property\",\n            r: \"r\",\n            radius: \"radius\",\n            refx: \"refX\",\n            refy: \"refY\",\n            renderingintent: \"renderingIntent\",\n            \"rendering-intent\": \"renderingIntent\",\n            repeatcount: \"repeatCount\",\n            repeatdur: \"repeatDur\",\n            requiredextensions: \"requiredExtensions\",\n            requiredfeatures: \"requiredFeatures\",\n            resource: \"resource\",\n            restart: \"restart\",\n            result: \"result\",\n            results: \"results\",\n            rotate: \"rotate\",\n            rx: \"rx\",\n            ry: \"ry\",\n            scale: \"scale\",\n            security: \"security\",\n            seed: \"seed\",\n            shaperendering: \"shapeRendering\",\n            \"shape-rendering\": \"shapeRendering\",\n            slope: \"slope\",\n            spacing: \"spacing\",\n            specularconstant: \"specularConstant\",\n            specularexponent: \"specularExponent\",\n            speed: \"speed\",\n            spreadmethod: \"spreadMethod\",\n            startoffset: \"startOffset\",\n            stddeviation: \"stdDeviation\",\n            stemh: \"stemh\",\n            stemv: \"stemv\",\n            stitchtiles: \"stitchTiles\",\n            stopcolor: \"stopColor\",\n            \"stop-color\": \"stopColor\",\n            stopopacity: \"stopOpacity\",\n            \"stop-opacity\": \"stopOpacity\",\n            strikethroughposition: \"strikethroughPosition\",\n            \"strikethrough-position\": \"strikethroughPosition\",\n            strikethroughthickness: \"strikethroughThickness\",\n            \"strikethrough-thickness\": \"strikethroughThickness\",\n            string: \"string\",\n            stroke: \"stroke\",\n            strokedasharray: \"strokeDasharray\",\n            \"stroke-dasharray\": \"strokeDasharray\",\n            strokedashoffset: \"strokeDashoffset\",\n            \"stroke-dashoffset\": \"strokeDashoffset\",\n            strokelinecap: \"strokeLinecap\",\n            \"stroke-linecap\": \"strokeLinecap\",\n            strokelinejoin: \"strokeLinejoin\",\n            \"stroke-linejoin\": \"strokeLinejoin\",\n            strokemiterlimit: \"strokeMiterlimit\",\n            \"stroke-miterlimit\": \"strokeMiterlimit\",\n            strokewidth: \"strokeWidth\",\n            \"stroke-width\": \"strokeWidth\",\n            strokeopacity: \"strokeOpacity\",\n            \"stroke-opacity\": \"strokeOpacity\",\n            suppresscontenteditablewarning: \"suppressContentEditableWarning\",\n            suppresshydrationwarning: \"suppressHydrationWarning\",\n            surfacescale: \"surfaceScale\",\n            systemlanguage: \"systemLanguage\",\n            tablevalues: \"tableValues\",\n            targetx: \"targetX\",\n            targety: \"targetY\",\n            textanchor: \"textAnchor\",\n            \"text-anchor\": \"textAnchor\",\n            textdecoration: \"textDecoration\",\n            \"text-decoration\": \"textDecoration\",\n            textlength: \"textLength\",\n            textrendering: \"textRendering\",\n            \"text-rendering\": \"textRendering\",\n            to: \"to\",\n            transform: \"transform\",\n            transformorigin: \"transformOrigin\",\n            \"transform-origin\": \"transformOrigin\",\n            typeof: \"typeof\",\n            u1: \"u1\",\n            u2: \"u2\",\n            underlineposition: \"underlinePosition\",\n            \"underline-position\": \"underlinePosition\",\n            underlinethickness: \"underlineThickness\",\n            \"underline-thickness\": \"underlineThickness\",\n            unicode: \"unicode\",\n            unicodebidi: \"unicodeBidi\",\n            \"unicode-bidi\": \"unicodeBidi\",\n            unicoderange: \"unicodeRange\",\n            \"unicode-range\": \"unicodeRange\",\n            unitsperem: \"unitsPerEm\",\n            \"units-per-em\": \"unitsPerEm\",\n            unselectable: \"unselectable\",\n            valphabetic: \"vAlphabetic\",\n            \"v-alphabetic\": \"vAlphabetic\",\n            values: \"values\",\n            vectoreffect: \"vectorEffect\",\n            \"vector-effect\": \"vectorEffect\",\n            version: \"version\",\n            vertadvy: \"vertAdvY\",\n            \"vert-adv-y\": \"vertAdvY\",\n            vertoriginx: \"vertOriginX\",\n            \"vert-origin-x\": \"vertOriginX\",\n            vertoriginy: \"vertOriginY\",\n            \"vert-origin-y\": \"vertOriginY\",\n            vhanging: \"vHanging\",\n            \"v-hanging\": \"vHanging\",\n            videographic: \"vIdeographic\",\n            \"v-ideographic\": \"vIdeographic\",\n            viewbox: \"viewBox\",\n            viewtarget: \"viewTarget\",\n            visibility: \"visibility\",\n            vmathematical: \"vMathematical\",\n            \"v-mathematical\": \"vMathematical\",\n            vocab: \"vocab\",\n            widths: \"widths\",\n            wordspacing: \"wordSpacing\",\n            \"word-spacing\": \"wordSpacing\",\n            writingmode: \"writingMode\",\n            \"writing-mode\": \"writingMode\",\n            x1: \"x1\",\n            x2: \"x2\",\n            x: \"x\",\n            xchannelselector: \"xChannelSelector\",\n            xheight: \"xHeight\",\n            \"x-height\": \"xHeight\",\n            xlinkactuate: \"xlinkActuate\",\n            \"xlink:actuate\": \"xlinkActuate\",\n            xlinkarcrole: \"xlinkArcrole\",\n            \"xlink:arcrole\": \"xlinkArcrole\",\n            xlinkhref: \"xlinkHref\",\n            \"xlink:href\": \"xlinkHref\",\n            xlinkrole: \"xlinkRole\",\n            \"xlink:role\": \"xlinkRole\",\n            xlinkshow: \"xlinkShow\",\n            \"xlink:show\": \"xlinkShow\",\n            xlinktitle: \"xlinkTitle\",\n            \"xlink:title\": \"xlinkTitle\",\n            xlinktype: \"xlinkType\",\n            \"xlink:type\": \"xlinkType\",\n            xmlbase: \"xmlBase\",\n            \"xml:base\": \"xmlBase\",\n            xmllang: \"xmlLang\",\n            \"xml:lang\": \"xmlLang\",\n            xmlns: \"xmlns\",\n            \"xml:space\": \"xmlSpace\",\n            xmlnsxlink: \"xmlnsXlink\",\n            \"xmlns:xlink\": \"xmlnsXlink\",\n            xmlspace: \"xmlSpace\",\n            y1: \"y1\",\n            y2: \"y2\",\n            y: \"y\",\n            ychannelselector: \"yChannelSelector\",\n            z: \"z\",\n            zoomandpan: \"zoomAndPan\"\n        };\n        var warnedProperties = {};\n        var EVENT_NAME_REGEX = /^on./;\n        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n        var rARIA = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty(tagName, name, value, eventRegistry) {\n            {\n                if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n                    return true;\n                }\n                var lowerCasedName = name.toLowerCase();\n                if (lowerCasedName === \"onfocusin\" || lowerCasedName === \"onfocusout\") {\n                    error(\"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. \" + \"All React events are normalized to bubble, so onFocusIn and onFocusOut \" + \"are not needed/supported by React.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                {\n                    // Actions are special because unlike events they can have other value types.\n                    if (typeof value === \"function\") {\n                        if (tagName === \"form\" && name === \"action\") {\n                            return true;\n                        }\n                        if (tagName === \"input\" && name === \"formAction\") {\n                            return true;\n                        }\n                        if (tagName === \"button\" && name === \"formAction\") {\n                            return true;\n                        }\n                    }\n                }\n                if (eventRegistry != null) {\n                    var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n                    if (registrationNameDependencies.hasOwnProperty(name)) {\n                        return true;\n                    }\n                    var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n                    if (registrationName != null) {\n                        error(\"Invalid event handler property `%s`. Did you mean `%s`?\", name, registrationName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                    if (EVENT_NAME_REGEX.test(name)) {\n                        error(\"Unknown event handler property `%s`. It will be ignored.\", name);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (EVENT_NAME_REGEX.test(name)) {\n                    // If no event plugins have been injected, we are in a server environment.\n                    // So we can't tell if the event name is correct for sure, but we can filter\n                    // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n                    if (INVALID_EVENT_NAME_REGEX.test(name)) {\n                        error(\"Invalid event handler property `%s`. \" + \"React events use the camelCase naming convention, for example `onClick`.\", name);\n                    }\n                    warnedProperties[name] = true;\n                    return true;\n                } // Let the ARIA attribute hook validate ARIA attributes\n                if (rARIA.test(name) || rARIACamel.test(name)) {\n                    return true;\n                }\n                if (lowerCasedName === \"innerhtml\") {\n                    error(\"Directly setting property `innerHTML` is not permitted. \" + \"For more information, lookup documentation on `dangerouslySetInnerHTML`.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"aria\") {\n                    error(\"The `aria` attribute is reserved for future use in React. \" + \"Pass individual `aria-` attributes instead.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"is\" && value !== null && value !== undefined && typeof value !== \"string\") {\n                    error(\"Received a `%s` for a string attribute `is`. If this is expected, cast \" + \"the value to a string.\", typeof value);\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (typeof value === \"number\" && isNaN(value)) {\n                    error(\"Received NaN for the `%s` attribute. If this is expected, cast \" + \"the value to a string.\", name);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Known attributes should match the casing specified in the property config.\n                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n                    var standardName = possibleStandardNames[lowerCasedName];\n                    if (standardName !== name) {\n                        error(\"Invalid DOM property `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (name !== lowerCasedName) {\n                    // Unknown attributes should have lowercase casing since that's how they\n                    // will be cased anyway with server rendering.\n                    error(\"React does not recognize the `%s` prop on a DOM element. If you \" + \"intentionally want it to appear in the DOM as a custom \" + \"attribute, spell it as lowercase `%s` instead. \" + \"If you accidentally passed it from a parent component, remove \" + \"it from the DOM element.\", name, lowerCasedName);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Now that we've validated casing, do not validate\n                // data types for reserved props\n                switch(name){\n                    case \"dangerouslySetInnerHTML\":\n                    case \"children\":\n                    case \"style\":\n                    case \"suppressContentEditableWarning\":\n                    case \"suppressHydrationWarning\":\n                    case \"defaultValue\":\n                    case \"defaultChecked\":\n                    case \"innerHTML\":\n                        {\n                            return true;\n                        }\n                }\n                switch(typeof value){\n                    case \"boolean\":\n                        {\n                            switch(name){\n                                case \"autoFocus\":\n                                case \"checked\":\n                                case \"multiple\":\n                                case \"muted\":\n                                case \"selected\":\n                                case \"contentEditable\":\n                                case \"spellCheck\":\n                                case \"draggable\":\n                                case \"value\":\n                                case \"autoReverse\":\n                                case \"externalResourcesRequired\":\n                                case \"focusable\":\n                                case \"preserveAlpha\":\n                                case \"allowFullScreen\":\n                                case \"async\":\n                                case \"autoPlay\":\n                                case \"controls\":\n                                case \"default\":\n                                case \"defer\":\n                                case \"disabled\":\n                                case \"disablePictureInPicture\":\n                                case \"disableRemotePlayback\":\n                                case \"formNoValidate\":\n                                case \"hidden\":\n                                case \"loop\":\n                                case \"noModule\":\n                                case \"noValidate\":\n                                case \"open\":\n                                case \"playsInline\":\n                                case \"readOnly\":\n                                case \"required\":\n                                case \"reversed\":\n                                case \"scoped\":\n                                case \"seamless\":\n                                case \"itemScope\":\n                                case \"capture\":\n                                case \"download\":\n                                    {\n                                        // Boolean properties can accept boolean values\n                                        return true;\n                                    }\n                                default:\n                                    {\n                                        var prefix = name.toLowerCase().slice(0, 5);\n                                        if (prefix === \"data-\" || prefix === \"aria-\") {\n                                            return true;\n                                        }\n                                        if (value) {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n                                        } else {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + \"If you used to conditionally omit it with %s={condition && value}, \" + \"pass %s={condition ? value : undefined} instead.\", value, name, name, value, name, name, name);\n                                        }\n                                        warnedProperties[name] = true;\n                                        return true;\n                                    }\n                            }\n                        }\n                    case \"function\":\n                    case \"symbol\":\n                        // eslint-disable-line\n                        // Warn when a known attribute is a bad type\n                        warnedProperties[name] = true;\n                        return false;\n                    case \"string\":\n                        {\n                            // Warn when passing the strings 'false' or 'true' into a boolean prop\n                            if (value === \"false\" || value === \"true\") {\n                                switch(name){\n                                    case \"checked\":\n                                    case \"selected\":\n                                    case \"multiple\":\n                                    case \"muted\":\n                                    case \"allowFullScreen\":\n                                    case \"async\":\n                                    case \"autoPlay\":\n                                    case \"controls\":\n                                    case \"default\":\n                                    case \"defer\":\n                                    case \"disabled\":\n                                    case \"disablePictureInPicture\":\n                                    case \"disableRemotePlayback\":\n                                    case \"formNoValidate\":\n                                    case \"hidden\":\n                                    case \"loop\":\n                                    case \"noModule\":\n                                    case \"noValidate\":\n                                    case \"open\":\n                                    case \"playsInline\":\n                                    case \"readOnly\":\n                                    case \"required\":\n                                    case \"reversed\":\n                                    case \"scoped\":\n                                    case \"seamless\":\n                                    case \"itemScope\":\n                                        {\n                                            break;\n                                        }\n                                    default:\n                                        {\n                                            return true;\n                                        }\n                                }\n                                error(\"Received the string `%s` for the boolean attribute `%s`. \" + \"%s \" + \"Did you mean %s={%s}?\", value, name, value === \"false\" ? \"The browser will interpret it as a truthy value.\" : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n                                warnedProperties[name] = true;\n                                return true;\n                            }\n                        }\n                }\n                return true;\n            }\n        }\n        function warnUnknownProperties(type, props, eventRegistry) {\n            {\n                var unknownProps = [];\n                for(var key in props){\n                    var isValid = validateProperty(type, key, props[key], eventRegistry);\n                    if (!isValid) {\n                        unknownProps.push(key);\n                    }\n                }\n                var unknownPropString = unknownProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (unknownProps.length === 1) {\n                    error(\"Invalid value for prop %s on <%s> tag. Either remove it from the element, \" + \"or pass a string or number value to keep it in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                } else if (unknownProps.length > 1) {\n                    error(\"Invalid values for props %s on <%s> tag. Either remove them from the element, \" + \"or pass a string or number value to keep them in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                }\n            }\n        }\n        function validateProperties(type, props, eventRegistry) {\n            if (isCustomElement(type) || typeof props.is === \"string\") {\n                return;\n            }\n            warnUnknownProperties(type, props, eventRegistry);\n        }\n        // 'msTransform' is correct, but the other prefixes should be capitalized\n        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n        var msPattern$1 = /^-ms-/;\n        var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n        var badStyleValueWithSemicolonPattern = /;\\s*$/;\n        var warnedStyleNames = {};\n        var warnedStyleValues = {};\n        var warnedForNaNValue = false;\n        var warnedForInfinityValue = false;\n        function camelize(string) {\n            return string.replace(hyphenPattern, function(_, character) {\n                return character.toUpperCase();\n            });\n        }\n        function warnHyphenatedStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported style property %s. Did you mean %s?\", name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n                // is converted to lowercase `ms`.\n                camelize(name.replace(msPattern$1, \"ms-\")));\n            }\n        }\n        function warnBadVendoredStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported vendor-prefixed style property %s. Did you mean %s?\", name, name.charAt(0).toUpperCase() + name.slice(1));\n            }\n        }\n        function warnStyleValueWithSemicolon(name, value) {\n            {\n                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n                    return;\n                }\n                warnedStyleValues[value] = true;\n                error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, \"\"));\n            }\n        }\n        function warnStyleValueIsNaN(name, value) {\n            {\n                if (warnedForNaNValue) {\n                    return;\n                }\n                warnedForNaNValue = true;\n                error(\"`NaN` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnStyleValueIsInfinity(name, value) {\n            {\n                if (warnedForInfinityValue) {\n                    return;\n                }\n                warnedForInfinityValue = true;\n                error(\"`Infinity` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnValidStyle(name, value) {\n            {\n                if (name.indexOf(\"-\") > -1) {\n                    warnHyphenatedStyleName(name);\n                } else if (badVendoredStyleNamePattern.test(name)) {\n                    warnBadVendoredStyleName(name);\n                } else if (badStyleValueWithSemicolonPattern.test(value)) {\n                    warnStyleValueWithSemicolon(name, value);\n                }\n                if (typeof value === \"number\") {\n                    if (isNaN(value)) {\n                        warnStyleValueIsNaN(name);\n                    } else if (!isFinite(value)) {\n                        warnStyleValueIsInfinity(name);\n                    }\n                }\n            }\n        }\n        function getCrossOriginString(input) {\n            if (typeof input === \"string\") {\n                return input === \"use-credentials\" ? input : \"\";\n            }\n            return undefined;\n        }\n        // code copied and modified from escape-html\n        var matchHtmlRegExp = /[\"'&<>]/;\n        /**\n * Escapes special characters and HTML entities in a given html string.\n *\n * @param  {string} string HTML string to escape for later insertion\n * @return {string}\n * @public\n */ function escapeHtml(string) {\n            {\n                checkHtmlStringCoercion(string);\n            }\n            var str = \"\" + string;\n            var match = matchHtmlRegExp.exec(str);\n            if (!match) {\n                return str;\n            }\n            var escape;\n            var html = \"\";\n            var index;\n            var lastIndex = 0;\n            for(index = match.index; index < str.length; index++){\n                switch(str.charCodeAt(index)){\n                    case 34:\n                        // \"\n                        escape = \"&quot;\";\n                        break;\n                    case 38:\n                        // &\n                        escape = \"&amp;\";\n                        break;\n                    case 39:\n                        // '\n                        escape = \"&#x27;\"; // modified from escape-html; used to be '&#39'\n                        break;\n                    case 60:\n                        // <\n                        escape = \"&lt;\";\n                        break;\n                    case 62:\n                        // >\n                        escape = \"&gt;\";\n                        break;\n                    default:\n                        continue;\n                }\n                if (lastIndex !== index) {\n                    html += str.slice(lastIndex, index);\n                }\n                lastIndex = index + 1;\n                html += escape;\n            }\n            return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n        } // end code copied and modified from escape-html\n        /**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */ function escapeTextForBrowser(text) {\n            if (typeof text === \"boolean\" || typeof text === \"number\") {\n                // this shortcircuit helps perf for types that we know will never have\n                // special characters, especially given that this function is used often\n                // for numeric dom ids.\n                return \"\" + text;\n            }\n            return escapeHtml(text);\n        }\n        var uppercasePattern = /([A-Z])/g;\n        var msPattern = /^ms-/;\n        /**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */ function hyphenateStyleName(name) {\n            return name.replace(uppercasePattern, \"-$1\").toLowerCase().replace(msPattern, \"-ms-\");\n        }\n        // and any newline or tab are filtered out as if they're not part of the URL.\n        // https://url.spec.whatwg.org/#url-parsing\n        // Tab or newline are defined as \\r\\n\\t:\n        // https://infra.spec.whatwg.org/#ascii-tab-or-newline\n        // A C0 control is a code point in the range \\u0000 NULL to \\u001F\n        // INFORMATION SEPARATOR ONE, inclusive:\n        // https://infra.spec.whatwg.org/#c0-control-or-space\n        /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n        var didWarn = false;\n        function sanitizeURL(url) {\n            // We should never have symbols here because they get filtered out elsewhere.\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var stringifiedURL = \"\" + url;\n            {\n                if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {\n                    didWarn = true;\n                    error(\"A future version of React will block javascript: URLs as a security precaution. \" + \"Use event handlers instead if you can. If you need to generate unsafe HTML try \" + \"using dangerouslySetInnerHTML instead. React was passed %s.\", JSON.stringify(stringifiedURL));\n                }\n            }\n            return url;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        // The build script is at scripts/rollup/generate-inline-fizz-runtime.js.\n        // Run `yarn generate-inline-fizz-runtime` to generate.\n        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data=\"$!\",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';\n        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=\"$!\",a.setAttribute(\"data-dgst\",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(\"/$\"===d)if(0===f)break;else f--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=\"$\"}b._reactRetry&&b._reactRetry()}};';\n        var completeBoundaryWithStyles = '$RM=new Map;\\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll(\"link[data-precedence],style[data-precedence]\"),v=[],k=0;b=h[k++];)\"not all\"===b.getAttribute(\"media\")?v.push(b):(\"LINK\"===b.tagName&&n.set(b.getAttribute(\"href\"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement(\"link\");a.href=d;a.rel=\"stylesheet\";for(a.dataset.precedence=\\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute(\"media\");!e||\"l\"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute(\"data-precedence\");a.removeAttribute(\"media\")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,\"\"),u.bind(null,r,t,\"Resource failed to load\"))};';\n        var completeSegment = \"$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};\";\n        var formReplaying = 'addEventListener(\"submit\",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute(\"formAction\");null!=f&&(e=f,b=null)}\"javascript:throw new Error(\\'A React form was unexpectedly submitted.\\')\"===e&&(a.preventDefault(),b?(a=document.createElement(\"input\"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,\\nd,b))}});';\n        function getValueDescriptorExpectingObjectForWarning(thing) {\n            return thing === null ? \"`null`\" : thing === undefined ? \"`undefined`\" : thing === \"\" ? \"an empty string\" : 'something with type \"' + typeof thing + '\"';\n        }\n        // same object across all transitions.\n        var sharedNotPendingObject = {\n            pending: false,\n            data: null,\n            method: null,\n            action: null\n        };\n        var NotPending = Object.freeze(sharedNotPendingObject);\n        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\n        var ReactDOMServerDispatcher = {\n            prefetchDNS: prefetchDNS,\n            preconnect: preconnect,\n            preload: preload,\n            preloadModule: preloadModule,\n            preinitStyle: preinitStyle,\n            preinitScript: preinitScript,\n            preinitModuleScript: preinitModuleScript\n        };\n        function prepareHostDispatcher() {\n            ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;\n        } // We make every property of the descriptor optional because it is not a contract that\n        var ScriptStreamingFormat = 0;\n        var DataStreamingFormat = 1;\n        var NothingSent = 0;\n        var SentCompleteSegmentFunction = 1;\n        var SentCompleteBoundaryFunction = 2;\n        var SentClientRenderFunction = 4;\n        var SentStyleInsertionFunction = 8;\n        var SentFormReplayingRuntime = 16; // Per request, global state that is not contextual to the rendering subtree.\n        // This cannot be resumed and therefore should only contain things that are\n        // temporary working state or are never used in the prerender pass.\n        // Credentials here are things that affect whether a browser will make a request\n        // as well as things that affect which connection the browser will use for that request.\n        // We want these to be aligned across preloads and resources because otherwise the preload\n        // will be wasted.\n        // We investigated whether referrerPolicy should be included here but from experimentation\n        // it seems that browsers do not treat this as part of the http cache key and does not affect\n        // which connection is used.\n        var EXISTS = null; // This constant is to mark preloads that have no unique credentials\n        // to convey. It should never be checked by identity and we should not\n        // assume Preload values in ResumableState equal this value because they\n        // will have come from some parsed input.\n        var PRELOAD_NO_CREDS = [];\n        {\n            Object.freeze(PRELOAD_NO_CREDS);\n        }\n        // This is resumable and therefore should be serializable.\n        var dataElementQuotedEnd = stringToPrecomputedChunk('\"></template>');\n        var startInlineScript = stringToPrecomputedChunk(\"<script>\");\n        var endInlineScript = stringToPrecomputedChunk(\"</script>\");\n        var startScriptSrc = stringToPrecomputedChunk('<script src=\"');\n        var startModuleSrc = stringToPrecomputedChunk('<script type=\"module\" src=\"');\n        var scriptNonce = stringToPrecomputedChunk('\" nonce=\"');\n        var scriptIntegirty = stringToPrecomputedChunk('\" integrity=\"');\n        var scriptCrossOrigin = stringToPrecomputedChunk('\" crossorigin=\"');\n        var endAsyncScript = stringToPrecomputedChunk('\" async=\"\"></script>');\n        /**\n * This escaping function is designed to work with bootstrapScriptContent and importMap only.\n * because we know we are escaping the entire script. We can avoid for instance\n * escaping html comment string sequences that are valid javascript as well because\n * if there are no sebsequent <script sequences the html parser will never enter\n * script data double escaped state (see: https://www.w3.org/TR/html53/syntax.html#script-data-double-escaped-state)\n *\n * While untrusted script content should be made safe before using this api it will\n * ensure that the script cannot be early terminated or never terminated state\n */ function escapeBootstrapAndImportMapScriptContent(scriptText) {\n            {\n                checkHtmlStringCoercion(scriptText);\n            }\n            return (\"\" + scriptText).replace(scriptRegex, scriptReplacer);\n        }\n        var scriptRegex = /(<\\/|<)(s)(cript)/gi;\n        var scriptReplacer = function(match, prefix, s, suffix) {\n            return \"\" + prefix + (s === \"s\" ? \"\\\\u0073\" : \"\\\\u0053\") + suffix;\n        };\n        var importMapScriptStart = stringToPrecomputedChunk('<script type=\"importmap\">');\n        var importMapScriptEnd = stringToPrecomputedChunk(\"</script>\"); // Since we store headers as strings we deal with their length in utf16 code units\n        // rather than visual characters or the utf8 encoding that is used for most binary\n        // serialization. Some common HTTP servers only allow for headers to be 4kB in length.\n        // We choose a default length that is likely to be well under this already limited length however\n        // pathological cases may still cause the utf-8 encoding of the headers to approach this limit.\n        // It should also be noted that this maximum is a soft maximum. we have not reached the limit we will\n        // allow one more header to be captured which means in practice if the limit is approached it will be exceeded\n        var DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2000; // Allows us to keep track of what we've already written so we can refer back to it.\n        // if passed externalRuntimeConfig and the enableFizzExternalRuntime feature flag\n        // is set, the server will send instructions via data attributes (instead of inline scripts)\n        function createRenderState(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {\n            var inlineScriptWithNonce = nonce === undefined ? startInlineScript : stringToPrecomputedChunk('<script nonce=\"' + escapeTextForBrowser(nonce) + '\">');\n            var idPrefix = resumableState.idPrefix;\n            var bootstrapChunks = [];\n            var externalRuntimeScript = null;\n            var bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;\n            if (bootstrapScriptContent !== undefined) {\n                bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapAndImportMapScriptContent(bootstrapScriptContent)), endInlineScript);\n            }\n            {\n                if (externalRuntimeConfig !== undefined) {\n                    if (typeof externalRuntimeConfig === \"string\") {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig,\n                            async: true,\n                            integrity: undefined,\n                            nonce: nonce\n                        });\n                    } else {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig.src,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig.src,\n                            async: true,\n                            integrity: externalRuntimeConfig.integrity,\n                            nonce: nonce\n                        });\n                    }\n                }\n            }\n            var importMapChunks = [];\n            if (importMap !== undefined) {\n                var map = importMap;\n                importMapChunks.push(importMapScriptStart);\n                importMapChunks.push(stringToChunk(escapeBootstrapAndImportMapScriptContent(JSON.stringify(map))));\n                importMapChunks.push(importMapScriptEnd);\n            }\n            {\n                if (onHeaders && typeof maxHeadersLength === \"number\") {\n                    if (maxHeadersLength <= 0) {\n                        error(\"React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.\", maxHeadersLength === 0 ? \"zero\" : maxHeadersLength);\n                    }\n                }\n            }\n            var headers = onHeaders ? {\n                preconnects: \"\",\n                fontPreloads: \"\",\n                highImagePreloads: \"\",\n                remainingCapacity: typeof maxHeadersLength === \"number\" ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS\n            } : null;\n            var renderState = {\n                placeholderPrefix: stringToPrecomputedChunk(idPrefix + \"P:\"),\n                segmentPrefix: stringToPrecomputedChunk(idPrefix + \"S:\"),\n                boundaryPrefix: stringToPrecomputedChunk(idPrefix + \"B:\"),\n                startInlineScript: inlineScriptWithNonce,\n                htmlChunks: null,\n                headChunks: null,\n                externalRuntimeScript: externalRuntimeScript,\n                bootstrapChunks: bootstrapChunks,\n                onHeaders: onHeaders,\n                headers: headers,\n                resets: {\n                    font: {},\n                    dns: {},\n                    connect: {\n                        default: {},\n                        anonymous: {},\n                        credentials: {}\n                    },\n                    image: {},\n                    style: {}\n                },\n                charsetChunks: [],\n                preconnectChunks: [],\n                importMapChunks: importMapChunks,\n                preloadChunks: [],\n                hoistableChunks: [],\n                // cleared on flush\n                preconnects: new Set(),\n                fontPreloads: new Set(),\n                highImagePreloads: new Set(),\n                // usedImagePreloads: new Set(),\n                styles: new Map(),\n                bootstrapScripts: new Set(),\n                scripts: new Set(),\n                bulkPreloads: new Set(),\n                preloads: {\n                    images: new Map(),\n                    stylesheets: new Map(),\n                    scripts: new Map(),\n                    moduleScripts: new Map()\n                },\n                nonce: nonce,\n                // like a module global for currently rendering boundary\n                boundaryResources: null,\n                stylesToHoist: false\n            };\n            if (bootstrapScripts !== undefined) {\n                for(var i = 0; i < bootstrapScripts.length; i++){\n                    var scriptConfig = bootstrapScripts[i];\n                    var src = void 0, crossOrigin = void 0, integrity = void 0;\n                    var props = {\n                        rel: \"preload\",\n                        as: \"script\",\n                        fetchPriority: \"low\",\n                        nonce: nonce\n                    };\n                    if (typeof scriptConfig === \"string\") {\n                        props.href = src = scriptConfig;\n                    } else {\n                        props.href = src = scriptConfig.src;\n                        props.integrity = integrity = typeof scriptConfig.integrity === \"string\" ? scriptConfig.integrity : undefined;\n                        props.crossOrigin = crossOrigin = typeof scriptConfig === \"string\" || scriptConfig.crossOrigin == null ? undefined : scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    }\n                    preloadBootstrapScriptOrModule(resumableState, renderState, src, props);\n                    bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (typeof integrity === \"string\") {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));\n                    }\n                    if (typeof crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            if (bootstrapModules !== undefined) {\n                for(var _i = 0; _i < bootstrapModules.length; _i++){\n                    var _scriptConfig = bootstrapModules[_i];\n                    var _src = void 0, _crossOrigin = void 0, _integrity = void 0;\n                    var _props = {\n                        rel: \"modulepreload\",\n                        fetchPriority: \"low\",\n                        nonce: nonce\n                    };\n                    if (typeof _scriptConfig === \"string\") {\n                        _props.href = _src = _scriptConfig;\n                    } else {\n                        _props.href = _src = _scriptConfig.src;\n                        _props.integrity = _integrity = typeof _scriptConfig.integrity === \"string\" ? _scriptConfig.integrity : undefined;\n                        _props.crossOrigin = _crossOrigin = typeof _scriptConfig === \"string\" || _scriptConfig.crossOrigin == null ? undefined : _scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    }\n                    preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);\n                    bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (typeof _integrity === \"string\") {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));\n                    }\n                    if (typeof _crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            return renderState;\n        }\n        function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {\n            var idPrefix = identifierPrefix === undefined ? \"\" : identifierPrefix;\n            var streamingFormat = ScriptStreamingFormat;\n            {\n                if (externalRuntimeConfig !== undefined) {\n                    streamingFormat = DataStreamingFormat;\n                }\n            }\n            return {\n                idPrefix: idPrefix,\n                nextFormID: 0,\n                streamingFormat: streamingFormat,\n                bootstrapScriptContent: bootstrapScriptContent,\n                bootstrapScripts: bootstrapScripts,\n                bootstrapModules: bootstrapModules,\n                instructions: NothingSent,\n                hasBody: false,\n                hasHtml: false,\n                // @TODO add bootstrap script to implicit preloads\n                // persistent\n                unknownResources: {},\n                dnsResources: {},\n                connectResources: {\n                    default: {},\n                    anonymous: {},\n                    credentials: {}\n                },\n                imageResources: {},\n                styleResources: {},\n                scriptResources: {},\n                moduleUnknownResources: {},\n                moduleScriptResources: {}\n            };\n        }\n        // modes. We only include the variants as they matter for the sake of our purposes.\n        // We don't actually provide the namespace therefore we use constants instead of the string.\n        var ROOT_HTML_MODE = 0; // Used for the root most element tag.\n        // We have a less than HTML_HTML_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        var HTML_HTML_MODE = 1; // Used for the <html> if it is at the top level.\n        var HTML_MODE = 2;\n        var SVG_MODE = 3;\n        var MATHML_MODE = 4;\n        var HTML_TABLE_MODE = 5;\n        var HTML_TABLE_BODY_MODE = 6;\n        var HTML_TABLE_ROW_MODE = 7;\n        var HTML_COLGROUP_MODE = 8; // We have a greater than HTML_TABLE_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        var NO_SCOPE = /*         */ 0;\n        var NOSCRIPT_SCOPE = /*   */ 1;\n        var PICTURE_SCOPE = /*    */ 2; // Lets us keep track of contextual state and pick it back up after suspending.\n        function createFormatContext(insertionMode, selectedValue, tagScope) {\n            return {\n                insertionMode: insertionMode,\n                selectedValue: selectedValue,\n                tagScope: tagScope\n            };\n        }\n        function createRootFormatContext(namespaceURI) {\n            var insertionMode = namespaceURI === \"http://www.w3.org/2000/svg\" ? SVG_MODE : namespaceURI === \"http://www.w3.org/1998/Math/MathML\" ? MATHML_MODE : ROOT_HTML_MODE;\n            return createFormatContext(insertionMode, null, NO_SCOPE);\n        }\n        function getChildFormatContext(parentContext, type, props) {\n            switch(type){\n                case \"noscript\":\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);\n                case \"select\":\n                    return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);\n                case \"svg\":\n                    return createFormatContext(SVG_MODE, null, parentContext.tagScope);\n                case \"picture\":\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);\n                case \"math\":\n                    return createFormatContext(MATHML_MODE, null, parentContext.tagScope);\n                case \"foreignObject\":\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n                // Table parents are special in that their children can only be created at all if they're\n                // wrapped in a table parent. So we need to encode that we're entering this mode.\n                case \"table\":\n                    return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);\n                case \"thead\":\n                case \"tbody\":\n                case \"tfoot\":\n                    return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);\n                case \"colgroup\":\n                    return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);\n                case \"tr\":\n                    return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);\n            }\n            if (parentContext.insertionMode >= HTML_TABLE_MODE) {\n                // Whatever tag this was, it wasn't a table parent or other special parent, so we must have\n                // entered plain HTML again.\n                return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n            }\n            if (parentContext.insertionMode === ROOT_HTML_MODE) {\n                if (type === \"html\") {\n                    // We've emitted the root and is now in <html> mode.\n                    return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);\n                } else {\n                    // We've emitted the root and is now in plain HTML mode.\n                    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n                }\n            } else if (parentContext.insertionMode === HTML_HTML_MODE) {\n                // We've emitted the document element and is now in plain HTML mode.\n                return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n            }\n            return parentContext;\n        }\n        function makeId(resumableState, treeId, localId) {\n            var idPrefix = resumableState.idPrefix;\n            var id = \":\" + idPrefix + \"R\" + treeId; // Unless this is the first id at this level, append a number at the end\n            // that represents the position of this useId hook among all the useId\n            // hooks for this fiber.\n            if (localId > 0) {\n                id += \"H\" + localId.toString(32);\n            }\n            return id + \":\";\n        }\n        function encodeHTMLTextNode(text) {\n            return escapeTextForBrowser(text);\n        }\n        var textSeparator = stringToPrecomputedChunk(\"<!-- -->\");\n        function pushTextInstance(target, text, renderState, textEmbedded) {\n            if (text === \"\") {\n                // Empty text doesn't have a DOM node representation and the hydration is aware of this.\n                return textEmbedded;\n            }\n            if (textEmbedded) {\n                target.push(textSeparator);\n            }\n            target.push(stringToChunk(encodeHTMLTextNode(text)));\n            return true;\n        } // Called when Fizz is done with a Segment. Currently the only purpose is to conditionally\n        // emit a text separator when we don't know for sure it is safe to omit\n        function pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {\n            if (lastPushedText && textEmbedded) {\n                target.push(textSeparator);\n            }\n        }\n        var styleNameCache = new Map();\n        function processStyleName(styleName) {\n            var chunk = styleNameCache.get(styleName);\n            if (chunk !== undefined) {\n                return chunk;\n            }\n            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));\n            styleNameCache.set(styleName, result);\n            return result;\n        }\n        var styleAttributeStart = stringToPrecomputedChunk(' style=\"');\n        var styleAssign = stringToPrecomputedChunk(\":\");\n        var styleSeparator = stringToPrecomputedChunk(\";\");\n        function pushStyleAttribute(target, style) {\n            if (typeof style !== \"object\") {\n                throw new Error(\"The `style` prop expects a mapping from style properties to values, \" + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + \"using JSX.\");\n            }\n            var isFirst = true;\n            for(var styleName in style){\n                if (!hasOwnProperty.call(style, styleName)) {\n                    continue;\n                } // If you provide unsafe user data here they can inject arbitrary CSS\n                // which may be problematic (I couldn't repro this):\n                // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n                // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n                // This is not an XSS hole but instead a potential CSS injection issue\n                // which has lead to a greater discussion about how we're going to\n                // trust URLs moving forward. See #2115901\n                var styleValue = style[styleName];\n                if (styleValue == null || typeof styleValue === \"boolean\" || styleValue === \"\") {\n                    continue;\n                }\n                var nameChunk = void 0;\n                var valueChunk = void 0;\n                var isCustomProperty = styleName.indexOf(\"--\") === 0;\n                if (isCustomProperty) {\n                    nameChunk = stringToChunk(escapeTextForBrowser(styleName));\n                    {\n                        checkCSSPropertyStringCoercion(styleValue, styleName);\n                    }\n                    valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                } else {\n                    {\n                        warnValidStyle(styleName, styleValue);\n                    }\n                    nameChunk = processStyleName(styleName);\n                    if (typeof styleValue === \"number\") {\n                        if (styleValue !== 0 && !isUnitlessNumber(styleName)) {\n                            valueChunk = stringToChunk(styleValue + \"px\"); // Presumes implicit 'px' suffix for unitless numbers\n                        } else {\n                            valueChunk = stringToChunk(\"\" + styleValue);\n                        }\n                    } else {\n                        {\n                            checkCSSPropertyStringCoercion(styleValue, styleName);\n                        }\n                        valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                    }\n                }\n                if (isFirst) {\n                    isFirst = false; // If it's first, we don't need any separators prefixed.\n                    target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);\n                } else {\n                    target.push(styleSeparator, nameChunk, styleAssign, valueChunk);\n                }\n            }\n            if (!isFirst) {\n                target.push(attributeEnd);\n            }\n        }\n        var attributeSeparator = stringToPrecomputedChunk(\" \");\n        var attributeAssign = stringToPrecomputedChunk('=\"');\n        var attributeEnd = stringToPrecomputedChunk('\"');\n        var attributeEmptyString = stringToPrecomputedChunk('=\"\"');\n        function pushBooleanAttribute(target, name, value) {\n            if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n            }\n        }\n        function pushStringAttribute(target, name, value) {\n            if (typeof value !== \"function\" && typeof value !== \"symbol\" && typeof value !== \"boolean\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n            }\n        }\n        function makeFormFieldPrefix(resumableState) {\n            var id = resumableState.nextFormID++;\n            return resumableState.idPrefix + id;\n        } // Since this will likely be repeated a lot in the HTML, we use a more concise message\n        // than on the client and hopefully it's googleable.\n        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(\"javascript:throw new Error('A React form was unexpectedly submitted.')\"));\n        var startHiddenInputChunk = stringToPrecomputedChunk('<input type=\"hidden\"');\n        function pushAdditionalFormField(value, key) {\n            var target = this;\n            target.push(startHiddenInputChunk);\n            if (typeof value !== \"string\") {\n                throw new Error(\"File/Blob fields are not yet supported in progressive forms. \" + \"It probably means you are closing over binary data or FormData in a Server Action.\");\n            }\n            pushStringAttribute(target, \"name\", key);\n            pushStringAttribute(target, \"value\", value);\n            target.push(endOfStartTagSelfClosing);\n        }\n        function pushAdditionalFormFields(target, formData) {\n            if (formData !== null) {\n                // $FlowFixMe[prop-missing]: FormData has forEach.\n                formData.forEach(pushAdditionalFormField, target);\n            }\n        }\n        function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {\n            var formData = null;\n            if (typeof formAction === \"function\") {\n                // Function form actions cannot control the form properties\n                {\n                    if (name !== null && !didWarnFormActionName) {\n                        didWarnFormActionName = true;\n                        error('Cannot specify a \"name\" prop for a button that specifies a function as a formAction. ' + \"React needs it to encode which action should be invoked. It will get overridden.\");\n                    }\n                    if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n                        didWarnFormActionMethod = true;\n                        error(\"Cannot specify a formEncType or formMethod for a button that specifies a \" + \"function as a formAction. React provides those automatically. They will get overridden.\");\n                    }\n                    if (formTarget !== null && !didWarnFormActionTarget) {\n                        didWarnFormActionTarget = true;\n                        error(\"Cannot specify a formTarget for a button that specifies a function as a formAction. \" + \"The function will always be executed in the same window.\");\n                    }\n                }\n                var customAction = formAction.$$FORM_ACTION;\n                if (typeof customAction === \"function\") {\n                    // This action has a custom progressive enhancement form that can submit the form\n                    // back to the server if it's invoked before hydration. Such as a Server Action.\n                    var prefix = makeFormFieldPrefix(resumableState);\n                    var customFields = formAction.$$FORM_ACTION(prefix);\n                    name = customFields.name;\n                    formAction = customFields.action || \"\";\n                    formEncType = customFields.encType;\n                    formMethod = customFields.method;\n                    formTarget = customFields.target;\n                    formData = customFields.data;\n                } else {\n                    // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n                    // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n                    // manually submitted or if someone calls stopPropagation before React gets the event.\n                    // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n                    // error message but the URL will be logged.\n                    target.push(attributeSeparator, stringToChunk(\"formAction\"), attributeAssign, actionJavaScriptURL, attributeEnd);\n                    name = null;\n                    formAction = null;\n                    formEncType = null;\n                    formMethod = null;\n                    formTarget = null;\n                    injectFormReplayingRuntime(resumableState, renderState);\n                }\n            }\n            if (name != null) {\n                pushAttribute(target, \"name\", name);\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"formAction\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"formEncType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"formMethod\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"formTarget\", formTarget);\n            }\n            return formData;\n        }\n        function pushAttribute(target, name, value) {\n            switch(name){\n                // These are very common props and therefore are in the beginning of the switch.\n                // TODO: aria-label is a very common prop but allows booleans so is not like the others\n                // but should ideally go in this list too.\n                case \"className\":\n                    {\n                        pushStringAttribute(target, \"class\", value);\n                        break;\n                    }\n                case \"tabIndex\":\n                    {\n                        pushStringAttribute(target, \"tabindex\", value);\n                        break;\n                    }\n                case \"dir\":\n                case \"role\":\n                case \"viewBox\":\n                case \"width\":\n                case \"height\":\n                    {\n                        pushStringAttribute(target, name, value);\n                        break;\n                    }\n                case \"style\":\n                    {\n                        pushStyleAttribute(target, value);\n                        return;\n                    }\n                case \"src\":\n                case \"href\":\n                // Fall through to the last case which shouldn't remove empty strings.\n                case \"action\":\n                case \"formAction\":\n                    {\n                        // TODO: Consider only special casing these for each tag.\n                        if (value == null || typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"defaultValue\":\n                case \"defaultChecked\":\n                case \"innerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                    // Ignored. These are built-in to React on the client.\n                    return;\n                case \"autoFocus\":\n                case \"multiple\":\n                case \"muted\":\n                    {\n                        pushBooleanAttribute(target, name.toLowerCase(), value);\n                        return;\n                    }\n                case \"xlinkHref\":\n                    {\n                        if (typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var _sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(\"xlink:href\"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"contentEditable\":\n                case \"spellCheck\":\n                case \"draggable\":\n                case \"value\":\n                case \"autoReverse\":\n                case \"externalResourcesRequired\":\n                case \"focusable\":\n                case \"preserveAlpha\":\n                    {\n                        // Booleanish String\n                        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n                        // In React, we let users pass `true` and `false` even though technically\n                        // these aren't boolean attributes (they are coerced to strings).\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"allowFullScreen\":\n                case \"async\":\n                case \"autoPlay\":\n                case \"controls\":\n                case \"default\":\n                case \"defer\":\n                case \"disabled\":\n                case \"disablePictureInPicture\":\n                case \"disableRemotePlayback\":\n                case \"formNoValidate\":\n                case \"hidden\":\n                case \"loop\":\n                case \"noModule\":\n                case \"noValidate\":\n                case \"open\":\n                case \"playsInline\":\n                case \"readOnly\":\n                case \"required\":\n                case \"reversed\":\n                case \"scoped\":\n                case \"seamless\":\n                case \"itemScope\":\n                    {\n                        // Boolean\n                        if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        }\n                        return;\n                    }\n                case \"capture\":\n                case \"download\":\n                    {\n                        // Overloaded Boolean\n                        if (value === true) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        } else if (value === false) ;\n                        else if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"cols\":\n                case \"rows\":\n                case \"size\":\n                case \"span\":\n                    {\n                        // These are HTML attributes that must be positive numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value) && value >= 1) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"rowSpan\":\n                case \"start\":\n                    {\n                        // These are HTML attributes that must be numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value)) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"xlinkActuate\":\n                    pushStringAttribute(target, \"xlink:actuate\", value);\n                    return;\n                case \"xlinkArcrole\":\n                    pushStringAttribute(target, \"xlink:arcrole\", value);\n                    return;\n                case \"xlinkRole\":\n                    pushStringAttribute(target, \"xlink:role\", value);\n                    return;\n                case \"xlinkShow\":\n                    pushStringAttribute(target, \"xlink:show\", value);\n                    return;\n                case \"xlinkTitle\":\n                    pushStringAttribute(target, \"xlink:title\", value);\n                    return;\n                case \"xlinkType\":\n                    pushStringAttribute(target, \"xlink:type\", value);\n                    return;\n                case \"xmlBase\":\n                    pushStringAttribute(target, \"xml:base\", value);\n                    return;\n                case \"xmlLang\":\n                    pushStringAttribute(target, \"xml:lang\", value);\n                    return;\n                case \"xmlSpace\":\n                    pushStringAttribute(target, \"xml:space\", value);\n                    return;\n                default:\n                    if (// We have already filtered out null/undefined and reserved words.\n                    name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                        return;\n                    }\n                    var attributeName = getAttributeAlias(name);\n                    if (isAttributeNameSafe(attributeName)) {\n                        // shouldRemoveAttribute\n                        switch(typeof value){\n                            case \"function\":\n                            case \"symbol\":\n                                // eslint-disable-line\n                                return;\n                            case \"boolean\":\n                                {\n                                    var prefix = attributeName.toLowerCase().slice(0, 5);\n                                    if (prefix !== \"data-\" && prefix !== \"aria-\") {\n                                        return;\n                                    }\n                                }\n                        }\n                        target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                    }\n            }\n        }\n        var endOfStartTag = stringToPrecomputedChunk(\">\");\n        var endOfStartTagSelfClosing = stringToPrecomputedChunk(\"/>\");\n        function pushInnerHTML(target, innerHTML, children) {\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    {\n                        checkHtmlStringCoercion(html);\n                    }\n                    target.push(stringToChunk(\"\" + html));\n                }\n            }\n        } // TODO: Move these to RenderState so that we warn for every request.\n        // It would help debugging in stateful servers (e.g. service worker).\n        var didWarnDefaultInputValue = false;\n        var didWarnDefaultChecked = false;\n        var didWarnDefaultSelectValue = false;\n        var didWarnDefaultTextareaValue = false;\n        var didWarnInvalidOptionChildren = false;\n        var didWarnInvalidOptionInnerHTML = false;\n        var didWarnSelectedSetOnOption = false;\n        var didWarnFormActionType = false;\n        var didWarnFormActionName = false;\n        var didWarnFormActionTarget = false;\n        var didWarnFormActionMethod = false;\n        function checkSelectProp(props, propName) {\n            {\n                var value = props[propName];\n                if (value != null) {\n                    var array = isArray(value);\n                    if (props.multiple && !array) {\n                        error(\"The `%s` prop supplied to <select> must be an array if \" + \"`multiple` is true.\", propName);\n                    } else if (!props.multiple && array) {\n                        error(\"The `%s` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\", propName);\n                    }\n                }\n            }\n        }\n        function pushStartSelect(target, props) {\n            {\n                checkControlledValueProps(\"select\", props);\n                checkSelectProp(props, \"value\");\n                checkSelectProp(props, \"defaultValue\");\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {\n                    error(\"Select elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled select \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultSelectValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"select\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            // TODO: This doesn't really make sense for select since it can't use the controlled\n                            // value in the innerHTML.\n                            innerHTML = propValue;\n                            break;\n                        case \"defaultValue\":\n                        case \"value\":\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        function flattenOptionChildren(children) {\n            var content = \"\"; // Flatten children and warn if they aren't strings or numbers;\n            // invalid types are ignored.\n            React.Children.forEach(children, function(child) {\n                if (child == null) {\n                    return;\n                }\n                content += child;\n                {\n                    if (!didWarnInvalidOptionChildren && typeof child !== \"string\" && typeof child !== \"number\") {\n                        didWarnInvalidOptionChildren = true;\n                        error(\"Cannot infer the option value of complex children. \" + \"Pass a `value` prop or use a plain string as children to <option>.\");\n                    }\n                }\n            });\n            return content;\n        }\n        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=\"\"');\n        function pushStartOption(target, props, formatContext) {\n            var selectedValue = formatContext.selectedValue;\n            target.push(startChunkForTag(\"option\"));\n            var children = null;\n            var value = null;\n            var selected = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"selected\":\n                            // ignore\n                            selected = propValue;\n                            {\n                                // TODO: Remove support for `selected` in <option>.\n                                if (!didWarnSelectedSetOnOption) {\n                                    error(\"Use the `defaultValue` or `value` props on <select> instead of \" + \"setting `selected` on <option>.\");\n                                    didWarnSelectedSetOnOption = true;\n                                }\n                            }\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                        // We intentionally fallthrough to also set the attribute on the node.\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (selectedValue != null) {\n                var stringValue;\n                if (value !== null) {\n                    {\n                        checkAttributeStringCoercion(value, \"value\");\n                    }\n                    stringValue = \"\" + value;\n                } else {\n                    {\n                        if (innerHTML !== null) {\n                            if (!didWarnInvalidOptionInnerHTML) {\n                                didWarnInvalidOptionInnerHTML = true;\n                                error(\"Pass a `value` prop if you set dangerouslyInnerHTML so React knows \" + \"which value should be selected.\");\n                            }\n                        }\n                    }\n                    stringValue = flattenOptionChildren(children);\n                }\n                if (isArray(selectedValue)) {\n                    // multiple\n                    for(var i = 0; i < selectedValue.length; i++){\n                        {\n                            checkAttributeStringCoercion(selectedValue[i], \"value\");\n                        }\n                        var v = \"\" + selectedValue[i];\n                        if (v === stringValue) {\n                            target.push(selectedMarkerAttribute);\n                            break;\n                        }\n                    }\n                } else {\n                    {\n                        checkAttributeStringCoercion(selectedValue, \"select.value\");\n                    }\n                    if (\"\" + selectedValue === stringValue) {\n                        target.push(selectedMarkerAttribute);\n                    }\n                }\n            } else if (selected) {\n                target.push(selectedMarkerAttribute);\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);\n        function injectFormReplayingRuntime(resumableState, renderState) {\n            // If we haven't sent it yet, inject the runtime that tracks submitted JS actions\n            // for later replaying by Fiber. If we use an external runtime, we don't need\n            // to emit anything. It's always used.\n            if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && !renderState.externalRuntimeScript) {\n                resumableState.instructions |= SentFormReplayingRuntime;\n                renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);\n            }\n        }\n        var formStateMarkerIsMatching = stringToPrecomputedChunk(\"<!--F!-->\");\n        var formStateMarkerIsNotMatching = stringToPrecomputedChunk(\"<!--F-->\");\n        function pushFormStateMarkerIsMatching(target) {\n            target.push(formStateMarkerIsMatching);\n        }\n        function pushFormStateMarkerIsNotMatching(target) {\n            target.push(formStateMarkerIsNotMatching);\n        }\n        function pushStartForm(target, props, resumableState, renderState) {\n            target.push(startChunkForTag(\"form\"));\n            var children = null;\n            var innerHTML = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"action\":\n                            formAction = propValue;\n                            break;\n                        case \"encType\":\n                            formEncType = propValue;\n                            break;\n                        case \"method\":\n                            formMethod = propValue;\n                            break;\n                        case \"target\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            var formData = null;\n            var formActionName = null;\n            if (typeof formAction === \"function\") {\n                // Function form actions cannot control the form properties\n                {\n                    if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n                        didWarnFormActionMethod = true;\n                        error(\"Cannot specify a encType or method for a form that specifies a \" + \"function as the action. React provides those automatically. \" + \"They will get overridden.\");\n                    }\n                    if (formTarget !== null && !didWarnFormActionTarget) {\n                        didWarnFormActionTarget = true;\n                        error(\"Cannot specify a target for a form that specifies a function as the action. \" + \"The function will always be executed in the same window.\");\n                    }\n                }\n                var customAction = formAction.$$FORM_ACTION;\n                if (typeof customAction === \"function\") {\n                    // This action has a custom progressive enhancement form that can submit the form\n                    // back to the server if it's invoked before hydration. Such as a Server Action.\n                    var prefix = makeFormFieldPrefix(resumableState);\n                    var customFields = formAction.$$FORM_ACTION(prefix);\n                    formAction = customFields.action || \"\";\n                    formEncType = customFields.encType;\n                    formMethod = customFields.method;\n                    formTarget = customFields.target;\n                    formData = customFields.data;\n                    formActionName = customFields.name;\n                } else {\n                    // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n                    // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n                    // manually submitted or if someone calls stopPropagation before React gets the event.\n                    // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n                    // error message but the URL will be logged.\n                    target.push(attributeSeparator, stringToChunk(\"action\"), attributeAssign, actionJavaScriptURL, attributeEnd);\n                    formAction = null;\n                    formEncType = null;\n                    formMethod = null;\n                    formTarget = null;\n                    injectFormReplayingRuntime(resumableState, renderState);\n                }\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"action\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"encType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"method\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"target\", formTarget);\n            }\n            target.push(endOfStartTag);\n            if (formActionName !== null) {\n                target.push(startHiddenInputChunk);\n                pushStringAttribute(target, \"name\", formActionName);\n                target.push(endOfStartTagSelfClosing);\n                pushAdditionalFormFields(target, formData);\n            }\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushInput(target, props, resumableState, renderState) {\n            {\n                checkControlledValueProps(\"input\", props);\n            }\n            target.push(startChunkForTag(\"input\"));\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            var value = null;\n            var defaultValue = null;\n            var checked = null;\n            var defaultChecked = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"input\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        case \"defaultChecked\":\n                            defaultChecked = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"checked\":\n                            checked = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type !== \"image\" && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('An input can only specify a formAction along with type=\"submit\" or type=\"image\".');\n                }\n            }\n            var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n            {\n                if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {\n                    error(\"%s contains an input of type %s with both checked and defaultChecked props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the checked prop, or the defaultChecked prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultChecked = true;\n                }\n                if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {\n                    error(\"%s contains an input of type %s with both value and defaultValue props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultInputValue = true;\n                }\n            }\n            if (checked !== null) {\n                pushBooleanAttribute(target, \"checked\", checked);\n            } else if (defaultChecked !== null) {\n                pushBooleanAttribute(target, \"checked\", defaultChecked);\n            }\n            if (value !== null) {\n                pushAttribute(target, \"value\", value);\n            } else if (defaultValue !== null) {\n                pushAttribute(target, \"value\", defaultValue);\n            }\n            target.push(endOfStartTagSelfClosing); // We place any additional hidden form fields after the input.\n            pushAdditionalFormFields(target, formData);\n            return null;\n        }\n        function pushStartButton(target, props, resumableState, renderState) {\n            target.push(startChunkForTag(\"button\"));\n            var children = null;\n            var innerHTML = null;\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type != null && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('A button can only specify a formAction along with type=\"submit\" or no type.');\n                }\n            }\n            var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n            target.push(endOfStartTag); // We place any additional hidden form fields we need to include inside the button itself.\n            pushAdditionalFormFields(target, formData);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartTextArea(target, props) {\n            {\n                checkControlledValueProps(\"textarea\", props);\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {\n                    error(\"Textarea elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled textarea \" + \"and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultTextareaValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"textarea\"));\n            var value = null;\n            var defaultValue = null;\n            var children = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"`dangerouslySetInnerHTML` does not make sense on <textarea>.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (value === null && defaultValue !== null) {\n                value = defaultValue;\n            }\n            target.push(endOfStartTag); // TODO (yungsters): Remove support for children content in <textarea>.\n            if (children != null) {\n                {\n                    error(\"Use the `defaultValue` or `value` props instead of setting \" + \"children on <textarea>.\");\n                }\n                if (value != null) {\n                    throw new Error(\"If you supply `defaultValue` on a <textarea>, do not pass children.\");\n                }\n                if (isArray(children)) {\n                    if (children.length > 1) {\n                        throw new Error(\"<textarea> can only have at most one child.\");\n                    } // TODO: remove the coercion and the DEV check below because it will\n                    // always be overwritten by the coercion several lines below it. #22309\n                    {\n                        checkHtmlStringCoercion(children[0]);\n                    }\n                    value = \"\" + children[0];\n                }\n                {\n                    checkHtmlStringCoercion(children);\n                }\n                value = \"\" + children;\n            }\n            if (typeof value === \"string\" && value[0] === \"\\n\") {\n                // text/html ignores the first character in these tags if it's a newline\n                // Prefer to break application/xml over text/html (for now) by adding\n                // a newline specifically to get eaten by the parser. (Alternately for\n                // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n                // \\r is normalized out by HTMLTextAreaElement#value.)\n                // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n                // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n                // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n                // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n                //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n                target.push(leadingNewline);\n            } // ToString and push directly instead of recurse over children.\n            // We don't really support complex children in the value anyway.\n            // This also currently avoids a trailing comment node which breaks textarea.\n            if (value !== null) {\n                {\n                    checkAttributeStringCoercion(value, \"value\");\n                }\n                target.push(stringToChunk(encodeHTMLTextNode(\"\" + value)));\n            }\n            return null;\n        }\n        function pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    return pushSelfClosing(target, props, \"meta\");\n                } else {\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    if (typeof props.charSet === \"string\") {\n                        return pushSelfClosing(renderState.charsetChunks, props, \"meta\");\n                    } else if (props.name === \"viewport\") {\n                        // \"viewport\" isn't related to preconnect but it has the right priority\n                        return pushSelfClosing(renderState.preconnectChunks, props, \"meta\");\n                    } else {\n                        return pushSelfClosing(renderState.hoistableChunks, props, \"meta\");\n                    }\n                }\n            }\n        }\n        function pushLink(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var rel = props.rel;\n                var href = props.href;\n                var precedence = props.precedence;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    {\n                        if (rel === \"stylesheet\" && typeof props.precedence === \"string\") {\n                            if (typeof href !== \"string\" || !href) {\n                                error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));\n                            }\n                        }\n                    }\n                    pushLinkImpl(target, props);\n                    return null;\n                }\n                if (props.rel === \"stylesheet\") {\n                    // This <link> may hoistable as a Stylesheet Resource, otherwise it will emit in place\n                    var key = getResourceKey(href);\n                    if (typeof precedence !== \"string\" || props.disabled != null || props.onLoad || props.onError) {\n                        // This stylesheet is either not opted into Resource semantics or has conflicting properties which\n                        // disqualify it for such. We can still create a preload resource to help it load faster on the\n                        // client\n                        {\n                            if (typeof precedence === \"string\") {\n                                if (props.disabled != null) {\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');\n                                } else if (props.onLoad || props.onError) {\n                                    var propDescription = props.onLoad && props.onError ? \"`onLoad` and `onError` props\" : props.onLoad ? \"`onLoad` prop\" : \"`onError` prop\";\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);\n                                }\n                            }\n                        }\n                        return pushLinkImpl(target, props);\n                    } else {\n                        // This stylesheet refers to a Resource and we create a new one if necessary\n                        var styleQueue = renderState.styles.get(precedence);\n                        var hasKey = resumableState.styleResources.hasOwnProperty(key);\n                        var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n                        if (resourceState !== EXISTS) {\n                            // We are going to create this resource now so it is marked as Exists\n                            resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n                            // to create a StyleQueue\n                            if (!styleQueue) {\n                                styleQueue = {\n                                    precedence: stringToChunk(escapeTextForBrowser(precedence)),\n                                    rules: [],\n                                    hrefs: [],\n                                    sheets: new Map()\n                                };\n                                renderState.styles.set(precedence, styleQueue);\n                            }\n                            var resource = {\n                                state: PENDING$1,\n                                props: stylesheetPropsFromRawProps(props)\n                            };\n                            if (resourceState) {\n                                // When resourceState is truty it is a Preload state. We cast it for clarity\n                                var preloadState = resourceState;\n                                if (preloadState.length === 2) {\n                                    adoptPreloadCredentials(resource.props, preloadState);\n                                }\n                                var preloadResource = renderState.preloads.stylesheets.get(key);\n                                if (preloadResource && preloadResource.length > 0) {\n                                    // The Preload for this resource was created in this render pass and has not flushed yet so\n                                    // we need to clear it to avoid it flushing.\n                                    preloadResource.length = 0;\n                                } else {\n                                    // Either the preload resource from this render already flushed in this render pass\n                                    // or the preload flushed in a prior pass (prerender). In either case we need to mark\n                                    // this resource as already having been preloaded.\n                                    resource.state = PRELOADED;\n                                }\n                            } // We add the newly created resource to our StyleQueue and if necessary\n                            // track the resource with the currently rendering boundary\n                            styleQueue.sheets.set(key, resource);\n                            if (renderState.boundaryResources) {\n                                renderState.boundaryResources.stylesheets.add(resource);\n                            }\n                        } else {\n                            // We need to track whether this boundary should wait on this resource or not.\n                            // Typically this resource should always exist since we either had it or just created\n                            // it. However, it's possible when you resume that the style has already been emitted\n                            // and then it wouldn't be recreated in the RenderState and there's no need to track\n                            // it again since we should've hoisted it to the shell already.\n                            if (styleQueue) {\n                                var _resource = styleQueue.sheets.get(key);\n                                if (_resource) {\n                                    if (renderState.boundaryResources) {\n                                        renderState.boundaryResources.stylesheets.add(_resource);\n                                    }\n                                }\n                            }\n                        }\n                        if (textEmbedded) {\n                            // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                            // to be safe and assume text will follow by inserting a textSeparator\n                            target.push(textSeparator);\n                        }\n                        return null;\n                    }\n                } else if (props.onLoad || props.onError) {\n                    // When using load handlers we cannot hoist and need to emit links in place\n                    return pushLinkImpl(target, props);\n                } else {\n                    // We can hoist this link so we may need to emit a text separator.\n                    // @TODO refactor text separators so we don't have to defensively add\n                    // them when we don't end up emitting a tag as a result of pushStartInstance\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    switch(props.rel){\n                        case \"preconnect\":\n                        case \"dns-prefetch\":\n                            return pushLinkImpl(renderState.preconnectChunks, props);\n                        case \"preload\":\n                            return pushLinkImpl(renderState.preloadChunks, props);\n                        default:\n                            return pushLinkImpl(renderState.hoistableChunks, props);\n                    }\n                }\n            }\n        }\n        function pushLinkImpl(target, props) {\n            target.push(startChunkForTag(\"link\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStyle(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (typeof child === \"function\" || typeof child === \"symbol\" || Array.isArray(child)) {\n                        var childType = typeof child === \"function\" ? \"a Function\" : typeof child === \"symbol\" ? \"a Sybmol\" : \"an Array\";\n                        error(\"React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. \" + \"In browsers style Elements can only have `Text` Nodes as children.\", childType);\n                    }\n                }\n            }\n            {\n                var precedence = props.precedence;\n                var href = props.href;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    // This style tag is not able to be turned into a Style Resource\n                    return pushStyleImpl(target, props);\n                }\n                {\n                    if (href.includes(\" \")) {\n                        error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is \"%s\".', href);\n                    }\n                }\n                var key = getResourceKey(href);\n                var styleQueue = renderState.styles.get(precedence);\n                var hasKey = resumableState.styleResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.styleResources[key] = EXISTS;\n                    {\n                        if (resourceState) {\n                            error('React encountered a hoistable style tag for the same href as a preload: \"%s\". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);\n                        }\n                    }\n                    if (!styleQueue) {\n                        // This is the first time we've encountered this precedence we need\n                        // to create a StyleQueue.\n                        styleQueue = {\n                            precedence: stringToChunk(escapeTextForBrowser(precedence)),\n                            rules: [],\n                            hrefs: [\n                                stringToChunk(escapeTextForBrowser(href))\n                            ],\n                            sheets: new Map()\n                        };\n                        renderState.styles.set(precedence, styleQueue);\n                    } else {\n                        // We have seen this precedence before and need to track this href\n                        styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));\n                    }\n                    pushStyleContents(styleQueue.rules, props);\n                }\n                if (styleQueue) {\n                    // We need to track whether this boundary should wait on this resource or not.\n                    // Typically this resource should always exist since we either had it or just created\n                    // it. However, it's possible when you resume that the style has already been emitted\n                    // and then it wouldn't be recreated in the RenderState and there's no need to track\n                    // it again since we should've hoisted it to the shell already.\n                    if (renderState.boundaryResources) {\n                        renderState.boundaryResources.styles.add(styleQueue);\n                    }\n                }\n                if (textEmbedded) {\n                    // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n            }\n        }\n        function pushStyleImpl(target, props) {\n            target.push(startChunkForTag(\"style\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endChunkForTag(\"style\"));\n            return null;\n        }\n        function pushStyleContents(target, props) {\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                    }\n                }\n            }\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            return;\n        }\n        function pushImg(target, props, resumableState, renderState, pictureTagInScope) {\n            var src = props.src, srcSet = props.srcSet;\n            if (props.loading !== \"lazy\" && (src || srcSet) && (typeof src === \"string\" || src == null) && (typeof srcSet === \"string\" || srcSet == null) && props.fetchPriority !== \"low\" && pictureTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded\n            !(typeof src === \"string\" && src[4] === \":\" && (src[0] === \"d\" || src[0] === \"D\") && (src[1] === \"a\" || src[1] === \"A\") && (src[2] === \"t\" || src[2] === \"T\") && (src[3] === \"a\" || src[3] === \"A\")) && !(typeof srcSet === \"string\" && srcSet[4] === \":\" && (srcSet[0] === \"d\" || srcSet[0] === \"D\") && (srcSet[1] === \"a\" || srcSet[1] === \"A\") && (srcSet[2] === \"t\" || srcSet[2] === \"T\") && (srcSet[3] === \"a\" || srcSet[3] === \"A\"))) {\n                // We have a suspensey image and ought to preload it to optimize the loading of display blocking\n                // resumableState.\n                var sizes = typeof props.sizes === \"string\" ? props.sizes : undefined;\n                var key = getImageResourceKey(src, srcSet, sizes);\n                var promotablePreloads = renderState.preloads.images;\n                var resource = promotablePreloads.get(key);\n                if (resource) {\n                    // We consider whether this preload can be promoted to higher priority flushing queue.\n                    // The only time a resource will exist here is if it was created during this render\n                    // and was not already in the high priority queue.\n                    if (props.fetchPriority === \"high\" || renderState.highImagePreloads.size < 10) {\n                        // Delete the resource from the map since we are promoting it and don't want to\n                        // reenter this branch in a second pass for duplicate img hrefs.\n                        promotablePreloads.delete(key); // $FlowFixMe - Flow should understand that this is a Resource if the condition was true\n                        renderState.highImagePreloads.add(resource);\n                    }\n                } else if (!resumableState.imageResources.hasOwnProperty(key)) {\n                    // We must construct a new preload resource\n                    resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n                    var crossOrigin = getCrossOriginString(props.crossOrigin);\n                    var headers = renderState.headers;\n                    var header;\n                    if (headers && headers.remainingCapacity > 0 && // fetchPriority=\"high\". We use length here which means it will fit fewer images when\n                    // the urls are long and more when short. arguably byte size is a better hueristic because\n                    // it directly translates to how much we send down before content is actually seen.\n                    // We could unify the counts and also make it so the total is tracked regardless of\n                    // flushing output but since the headers are likely to be go earlier than content\n                    // they don't really conflict so for now I've kept them separate\n                    (props.fetchPriority === \"high\" || headers.highImagePreloads.length < 500) && // the params list with arbitrary props and if we copied everything over as it we might get\n                    // coercion errors. We have checks for this in Dev but it seems safer to just only accept values\n                    // that are strings\n                    (header = getPreloadAsHeader(src, \"image\", {\n                        imageSrcSet: props.srcSet,\n                        imageSizes: props.sizes,\n                        crossOrigin: crossOrigin,\n                        integrity: props.integrity,\n                        nonce: props.nonce,\n                        type: props.type,\n                        fetchPriority: props.fetchPriority,\n                        referrerPolicy: props.refererPolicy\n                    }), // we assume all the rest won't as well. This is to avoid getting into a situation\n                    // where we have a very small remaining capacity but no headers will ever fit and we end\n                    // up constantly trying to see if the next resource might make it. In the future we can\n                    // make this behavior different between render and prerender since in the latter case\n                    // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                    // headers.\n                    (headers.remainingCapacity -= header.length) >= 2)) {\n                        // If we postpone in the shell we will still emit this preload so we track\n                        // it to make sure we don't reset it.\n                        renderState.resets.image[key] = PRELOAD_NO_CREDS;\n                        if (headers.highImagePreloads) {\n                            headers.highImagePreloads += \", \";\n                        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                        headers.highImagePreloads += header;\n                    } else {\n                        resource = [];\n                        pushLinkImpl(resource, {\n                            rel: \"preload\",\n                            as: \"image\",\n                            // There is a bug in Safari where imageSrcSet is not respected on preload links\n                            // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                            // This harms older browers that do not support imageSrcSet by making their preloads not work\n                            // but this population is shrinking fast and is already small so we accept this tradeoff.\n                            href: srcSet ? undefined : src,\n                            imageSrcSet: srcSet,\n                            imageSizes: sizes,\n                            crossOrigin: crossOrigin,\n                            integrity: props.integrity,\n                            type: props.type,\n                            fetchPriority: props.fetchPriority,\n                            referrerPolicy: props.referrerPolicy\n                        });\n                        if (props.fetchPriority === \"high\" || renderState.highImagePreloads.size < 10) {\n                            renderState.highImagePreloads.add(resource);\n                        } else {\n                            renderState.bulkPreloads.add(resource); // We can bump the priority up if the same img is rendered later\n                            // with fetchPriority=\"high\"\n                            promotablePreloads.set(key, resource);\n                        }\n                    }\n                }\n            }\n            return pushSelfClosing(target, props, \"img\");\n        }\n        function pushSelfClosing(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(tag + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStartMenuItem(target, props) {\n            target.push(startChunkForTag(\"menuitem\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"menuitems cannot have `children` nor `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            return null;\n        }\n        function pushTitle(target, props, renderState, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (Array.isArray(children) && children.length > 1) {\n                        error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value\" + \" which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes.\" + \" For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop\" + \" is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.\", children.length);\n                    } else if (typeof child === \"function\" || typeof child === \"symbol\") {\n                        var childType = typeof child === \"function\" ? \"a Function\" : \"a Sybmol\";\n                        error(\"React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title>\" + \" tags to a single string value.\", childType);\n                    } else if (child && child.toString === ({}).toString) {\n                        if (child.$$typeof != null) {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be\" + \" a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to\" + \" be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is\" + \" a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.\");\n                        } else {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement\" + \" a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags\" + \" to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title>\" + \" is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.\");\n                        }\n                    }\n                }\n            }\n            {\n                if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {\n                    pushTitleImpl(renderState.hoistableChunks, props);\n                    return null;\n                } else {\n                    return pushTitleImpl(target, props);\n                }\n            }\n        }\n        function pushTitleImpl(target, props) {\n            target.push(startChunkForTag(\"title\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endChunkForTag(\"title\"));\n            return null;\n        }\n        function pushStartHead(target, props, renderState, insertionMode) {\n            {\n                if (insertionMode < HTML_MODE && renderState.headChunks === null) {\n                    // This <head> is the Document.head and should be part of the preamble\n                    renderState.headChunks = [];\n                    return pushStartGenericElement(renderState.headChunks, props, \"head\");\n                } else {\n                    // This <head> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"head\");\n                }\n            }\n        }\n        function pushStartHtml(target, props, renderState, insertionMode) {\n            {\n                if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {\n                    // This <html> is the Document.documentElement and should be part of the preamble\n                    renderState.htmlChunks = [\n                        doctypeChunk\n                    ];\n                    return pushStartGenericElement(renderState.htmlChunks, props, \"html\");\n                } else {\n                    // This <html> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"html\");\n                }\n            }\n        }\n        function pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var asyncProp = props.async;\n                if (typeof props.src !== \"string\" || !props.src || !(asyncProp && typeof asyncProp !== \"function\" && typeof asyncProp !== \"symbol\") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    // This script will not be a resource, we bailout early and emit it in place.\n                    return pushScriptImpl(target, props);\n                }\n                var src = props.src;\n                var key = getResourceKey(src); // We can make this <script> into a ScriptResource\n                var resources, preloads;\n                if (props.type === \"module\") {\n                    resources = resumableState.moduleScriptResources;\n                    preloads = renderState.preloads.moduleScripts;\n                } else {\n                    resources = resumableState.scriptResources;\n                    preloads = renderState.preloads.scripts;\n                }\n                var hasKey = resources.hasOwnProperty(key);\n                var resourceState = hasKey ? resources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resources[key] = EXISTS;\n                    var scriptProps = props;\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            scriptProps = assign({}, props);\n                            adoptPreloadCredentials(scriptProps, preloadState);\n                        }\n                        var preloadResource = preloads.get(key);\n                        if (preloadResource) {\n                            // the preload resource exists was created in this render. Now that we have\n                            // a script resource which will emit earlier than a preload would if it\n                            // hasn't already flushed we prevent it from flushing by zeroing the length\n                            preloadResource.length = 0;\n                        }\n                    }\n                    var resource = []; // Add to the script flushing queue\n                    renderState.scripts.add(resource); // encode the tag as Chunks\n                    pushScriptImpl(resource, scriptProps);\n                }\n                if (textEmbedded) {\n                    // This script follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n                return null;\n            }\n        }\n        function pushScriptImpl(target, props) {\n            target.push(startChunkForTag(\"script\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            {\n                if (children != null && typeof children !== \"string\") {\n                    var descriptiveStatement = typeof children === \"number\" ? \"a number for children\" : Array.isArray(children) ? \"an array for children\" : \"something unexpected for children\";\n                    error(\"A script element was rendered with %s. If script element has children it must be a single string.\" + \" Consider using dangerouslySetInnerHTML or passing a plain string as children.\", descriptiveStatement);\n                }\n            }\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n            }\n            target.push(endChunkForTag(\"script\"));\n            return null;\n        }\n        function pushStartGenericElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartCustomElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    var attributeName = propKey;\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"style\":\n                            pushStyleAttribute(target, propValue);\n                            break;\n                        case \"suppressContentEditableWarning\":\n                        case \"suppressHydrationWarning\":\n                            break;\n                        case \"className\":\n                        // intentional fallthrough\n                        default:\n                            if (isAttributeNameSafe(propKey) && typeof propValue !== \"function\" && typeof propValue !== \"symbol\") {\n                                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);\n                            }\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        var leadingNewline = stringToPrecomputedChunk(\"\\n\");\n        function pushStartPreformattedElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag); // text/html ignores the first character in these tags if it's a newline\n            // Prefer to break application/xml over text/html (for now) by adding\n            // a newline specifically to get eaten by the parser. (Alternately for\n            // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n            // \\r is normalized out by HTMLTextAreaElement#value.)\n            // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n            // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n            // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n            // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n            //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n            // TODO: This doesn't deal with the case where the child is an array\n            // or component that returns a string.\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    if (typeof html === \"string\" && html.length > 0 && html[0] === \"\\n\") {\n                        target.push(leadingNewline, stringToChunk(html));\n                    } else {\n                        {\n                            checkHtmlStringCoercion(html);\n                        }\n                        target.push(stringToChunk(\"\" + html));\n                    }\n                }\n            }\n            if (typeof children === \"string\" && children[0] === \"\\n\") {\n                target.push(leadingNewline);\n            }\n            return children;\n        } // We accept any tag to be rendered but since this gets injected into arbitrary\n        // HTML, we want to make sure that it's a safe tag.\n        // http://www.w3.org/TR/REC-xml/#NT-Name\n        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\n        var validatedTagCache = new Map();\n        function startChunkForTag(tag) {\n            var tagStartChunk = validatedTagCache.get(tag);\n            if (tagStartChunk === undefined) {\n                if (!VALID_TAG_REGEX.test(tag)) {\n                    throw new Error(\"Invalid tag: \" + tag);\n                }\n                tagStartChunk = stringToPrecomputedChunk(\"<\" + tag);\n                validatedTagCache.set(tag, tagStartChunk);\n            }\n            return tagStartChunk;\n        }\n        var doctypeChunk = stringToPrecomputedChunk(\"<!DOCTYPE html>\");\n        function pushStartInstance(target, type, props, resumableState, renderState, formatContext, textEmbedded) {\n            {\n                validateProperties$2(type, props);\n                validateProperties$1(type, props);\n                validateProperties(type, props, null);\n                if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n                    error(\"A component is `contentEditable` and contains `children` managed by \" + \"React. It is now your responsibility to guarantee that none of \" + \"those nodes are unexpectedly modified or duplicated. This is \" + \"probably not intentional.\");\n                }\n                if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {\n                    if (type.indexOf(\"-\") === -1 && type.toLowerCase() !== type) {\n                        error(\"<%s /> is using incorrect casing. \" + \"Use PascalCase for React components, \" + \"or lowercase for HTML elements.\", type);\n                    }\n                }\n            }\n            switch(type){\n                case \"div\":\n                case \"span\":\n                case \"svg\":\n                case \"path\":\n                case \"a\":\n                case \"g\":\n                case \"p\":\n                case \"li\":\n                    break;\n                // Special tags\n                case \"select\":\n                    return pushStartSelect(target, props);\n                case \"option\":\n                    return pushStartOption(target, props, formatContext);\n                case \"textarea\":\n                    return pushStartTextArea(target, props);\n                case \"input\":\n                    return pushInput(target, props, resumableState, renderState);\n                case \"button\":\n                    return pushStartButton(target, props, resumableState, renderState);\n                case \"form\":\n                    return pushStartForm(target, props, resumableState, renderState);\n                case \"menuitem\":\n                    return pushStartMenuItem(target, props);\n                case \"title\":\n                    return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"link\":\n                    return pushLink(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"script\":\n                    return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"style\":\n                    return pushStyle(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                case \"meta\":\n                    return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n                // Newline eating tags\n                case \"listing\":\n                case \"pre\":\n                    {\n                        return pushStartPreformattedElement(target, props, type);\n                    }\n                case \"img\":\n                    {\n                        return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & PICTURE_SCOPE));\n                    }\n                // Omitted close tags\n                case \"base\":\n                case \"area\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"keygen\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        return pushSelfClosing(target, props, type);\n                    }\n                // These are reserved SVG and MathML elements, that are never custom elements.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    {\n                        break;\n                    }\n                // Preamble start tags\n                case \"head\":\n                    return pushStartHead(target, props, renderState, formatContext.insertionMode);\n                case \"html\":\n                    {\n                        return pushStartHtml(target, props, renderState, formatContext.insertionMode);\n                    }\n                default:\n                    {\n                        if (type.indexOf(\"-\") !== -1) {\n                            // Custom element\n                            return pushStartCustomElement(target, props, type);\n                        }\n                    }\n            } // Generic element\n            return pushStartGenericElement(target, props, type);\n        }\n        var endTagCache = new Map();\n        function endChunkForTag(tag) {\n            var chunk = endTagCache.get(tag);\n            if (chunk === undefined) {\n                chunk = stringToPrecomputedChunk(\"</\" + tag + \">\");\n                endTagCache.set(tag, chunk);\n            }\n            return chunk;\n        }\n        function pushEndInstance(target, type, props, resumableState, formatContext) {\n            switch(type){\n                // When float is on we expect title and script tags to always be pushed in\n                // a unit and never return children. when we end up pushing the end tag we\n                // want to ensure there is no extra closing tag pushed\n                case \"title\":\n                case \"style\":\n                case \"script\":\n                // Omitted close tags\n                // TODO: Instead of repeating this switch we could try to pass a flag from above.\n                // That would require returning a tuple. Which might be ok if it gets inlined.\n                case \"area\":\n                case \"base\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"img\":\n                case \"input\":\n                case \"keygen\":\n                case \"link\":\n                case \"meta\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        // No close tag needed.\n                        return;\n                    }\n                // Postamble end tags\n                // When float is enabled we omit the end tags for body and html when\n                // they represent the Document.body and Document.documentElement Nodes.\n                // This is so we can withhold them until the postamble when we know\n                // we won't emit any more tags\n                case \"body\":\n                    {\n                        if (formatContext.insertionMode <= HTML_HTML_MODE) {\n                            resumableState.hasBody = true;\n                            return;\n                        }\n                        break;\n                    }\n                case \"html\":\n                    if (formatContext.insertionMode === ROOT_HTML_MODE) {\n                        resumableState.hasHtml = true;\n                        return;\n                    }\n                    break;\n            }\n            target.push(endChunkForTag(type));\n        }\n        function writeBootstrap(destination, renderState) {\n            var bootstrapChunks = renderState.bootstrapChunks;\n            var i = 0;\n            for(; i < bootstrapChunks.length - 1; i++){\n                writeChunk(destination, bootstrapChunks[i]);\n            }\n            if (i < bootstrapChunks.length) {\n                var lastChunk = bootstrapChunks[i];\n                bootstrapChunks.length = 0;\n                return writeChunkAndReturn(destination, lastChunk);\n            }\n            return true;\n        }\n        function writeCompletedRoot(destination, renderState) {\n            return writeBootstrap(destination, renderState);\n        } // Structural Nodes\n        // A placeholder is a node inside a hidden partial tree that can be filled in later, but before\n        // display. It's never visible to users. We use the template tag because it can be used in every\n        // type of parent. <script> tags also work in every other tag except <colgroup>.\n        var placeholder1 = stringToPrecomputedChunk('<template id=\"');\n        var placeholder2 = stringToPrecomputedChunk('\"></template>');\n        function writePlaceholder(destination, renderState, id) {\n            writeChunk(destination, placeholder1);\n            writeChunk(destination, renderState.placeholderPrefix);\n            var formattedID = stringToChunk(id.toString(16));\n            writeChunk(destination, formattedID);\n            return writeChunkAndReturn(destination, placeholder2);\n        } // Suspense boundaries are encoded as comments.\n        var startCompletedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$-->\");\n        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id=\"');\n        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('\"></template>');\n        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$!-->\");\n        var endSuspenseBoundary = stringToPrecomputedChunk(\"<!--/$-->\");\n        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk(\"<template\");\n        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('\"');\n        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst=\"');\n        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg=\"');\n        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck=\"');\n        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk(\"></template>\");\n        function writeStartCompletedSuspenseBoundary(destination, renderState) {\n            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);\n        }\n        function writeStartPendingSuspenseBoundary(destination, renderState, id) {\n            writeChunk(destination, startPendingSuspenseBoundary1);\n            if (id === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            }\n            writeChunk(destination, renderState.boundaryPrefix);\n            writeChunk(destination, stringToChunk(id.toString(16)));\n            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);\n        }\n        function writeStartClientRenderedSuspenseBoundary(destination, renderState, errorDigest, errorMesssage, errorComponentStack) {\n            var result;\n            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);\n            writeChunk(destination, clientRenderedSuspenseBoundaryError1);\n            if (errorDigest) {\n                writeChunk(destination, clientRenderedSuspenseBoundaryError1A);\n                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));\n                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n            }\n            {\n                if (errorMesssage) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1B);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n                if (errorComponentStack) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1C);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n            }\n            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);\n            return result;\n        }\n        function writeEndCompletedSuspenseBoundary(destination, renderState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndPendingSuspenseBoundary(destination, renderState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndClientRenderedSuspenseBoundary(destination, renderState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id=\"');\n        var startSegmentHTML2 = stringToPrecomputedChunk('\">');\n        var endSegmentHTML = stringToPrecomputedChunk(\"</div>\");\n        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentSVG2 = stringToPrecomputedChunk('\">');\n        var endSegmentSVG = stringToPrecomputedChunk(\"</svg>\");\n        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentMathML2 = stringToPrecomputedChunk('\">');\n        var endSegmentMathML = stringToPrecomputedChunk(\"</math>\");\n        var startSegmentTable = stringToPrecomputedChunk('<table hidden id=\"');\n        var startSegmentTable2 = stringToPrecomputedChunk('\">');\n        var endSegmentTable = stringToPrecomputedChunk(\"</table>\");\n        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id=\"');\n        var startSegmentTableBody2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableBody = stringToPrecomputedChunk(\"</tbody></table>\");\n        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id=\"');\n        var startSegmentTableRow2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableRow = stringToPrecomputedChunk(\"</tr></table>\");\n        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id=\"');\n        var startSegmentColGroup2 = stringToPrecomputedChunk('\">');\n        var endSegmentColGroup = stringToPrecomputedChunk(\"</colgroup></table>\");\n        function writeStartSegment(destination, renderState, formatContext, id) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        writeChunk(destination, startSegmentHTML);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentHTML2);\n                    }\n                case SVG_MODE:\n                    {\n                        writeChunk(destination, startSegmentSVG);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentSVG2);\n                    }\n                case MATHML_MODE:\n                    {\n                        writeChunk(destination, startSegmentMathML);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentMathML2);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        writeChunk(destination, startSegmentTable);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTable2);\n                    }\n                // TODO: For the rest of these, there will be extra wrapper nodes that never\n                // get deleted from the document. We need to delete the table too as part\n                // of the injected scripts. They are invisible though so it's not too terrible\n                // and it's kind of an edge case to suspend in a table. Totally supported though.\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableBody);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableBody2);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableRow);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableRow2);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        writeChunk(destination, startSegmentColGroup);\n                        writeChunk(destination, renderState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentColGroup2);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        function writeEndSegment(destination, formatContext) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentHTML);\n                    }\n                case SVG_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentSVG);\n                    }\n                case MATHML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentMathML);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTable);\n                    }\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableBody);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableRow);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentColGroup);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS(\"');\n        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS(\"');\n        var completeSegmentScript2 = stringToPrecomputedChunk('\",\"');\n        var completeSegmentScriptEnd = stringToPrecomputedChunk('\")</script>');\n        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi=\"\" data-sid=\"');\n        var completeSegmentData2 = stringToPrecomputedChunk('\" data-pid=\"');\n        var completeSegmentDataEnd = dataElementQuotedEnd;\n        function writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {\n            var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, renderState.startInlineScript);\n                if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    resumableState.instructions |= SentCompleteSegmentFunction;\n                    writeChunk(destination, completeSegmentScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, completeSegmentScript1Partial);\n                }\n            } else {\n                writeChunk(destination, completeSegmentData1);\n            } // Write function arguments, which are string literals\n            writeChunk(destination, renderState.segmentPrefix);\n            var formattedID = stringToChunk(contentSegmentID.toString(16));\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                writeChunk(destination, completeSegmentScript2);\n            } else {\n                writeChunk(destination, completeSegmentData2);\n            }\n            writeChunk(destination, renderState.placeholderPrefix);\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                return writeChunkAndReturn(destination, completeSegmentScriptEnd);\n            } else {\n                return writeChunkAndReturn(destination, completeSegmentDataEnd);\n            }\n        }\n        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC(\"');\n        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC(\"');\n        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR(\"');\n        var completeBoundaryScript2 = stringToPrecomputedChunk('\",\"');\n        var completeBoundaryScript3a = stringToPrecomputedChunk('\",');\n        var completeBoundaryScript3b = stringToPrecomputedChunk('\"');\n        var completeBoundaryScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci=\"\" data-bid=\"');\n        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri=\"\" data-bid=\"');\n        var completeBoundaryData2 = stringToPrecomputedChunk('\" data-sid=\"');\n        var completeBoundaryData3a = stringToPrecomputedChunk('\" data-sty=\"');\n        var completeBoundaryDataEnd = dataElementQuotedEnd;\n        function writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, boundaryResources) {\n            var requiresStyleInsertion;\n            {\n                requiresStyleInsertion = renderState.stylesToHoist; // If necessary stylesheets will be flushed with this instruction.\n                // Any style tags not yet hoisted in the Document will also be hoisted.\n                // We reset this state since after this instruction executes all styles\n                // up to this point will have been hoisted\n                renderState.stylesToHoist = false;\n            }\n            var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, renderState.startInlineScript);\n                if (requiresStyleInsertion) {\n                    if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;\n                        writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));\n                    } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {\n                        resumableState.instructions |= SentStyleInsertionFunction;\n                        writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);\n                    } else {\n                        writeChunk(destination, completeBoundaryWithStylesScript1Partial);\n                    }\n                } else {\n                    if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        resumableState.instructions |= SentCompleteBoundaryFunction;\n                        writeChunk(destination, completeBoundaryScript1Full);\n                    } else {\n                        writeChunk(destination, completeBoundaryScript1Partial);\n                    }\n                }\n            } else {\n                if (requiresStyleInsertion) {\n                    writeChunk(destination, completeBoundaryWithStylesData1);\n                } else {\n                    writeChunk(destination, completeBoundaryData1);\n                }\n            }\n            var idChunk = stringToChunk(id.toString(16));\n            writeChunk(destination, renderState.boundaryPrefix);\n            writeChunk(destination, idChunk); // Write function arguments, which are string and array literals\n            if (scriptFormat) {\n                writeChunk(destination, completeBoundaryScript2);\n            } else {\n                writeChunk(destination, completeBoundaryData2);\n            }\n            writeChunk(destination, renderState.segmentPrefix);\n            writeChunk(destination, idChunk);\n            if (requiresStyleInsertion) {\n                // Script and data writers must format this differently:\n                //  - script writer emits an array literal, whose string elements are\n                //    escaped for javascript  e.g. [\"A\", \"B\"]\n                //  - data writer emits a string literal, which is escaped as html\n                //    e.g. [&#34;A&#34;, &#34;B&#34;]\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3a); // boundaryResources encodes an array literal\n                    writeStyleResourceDependenciesInJS(destination, boundaryResources);\n                } else {\n                    writeChunk(destination, completeBoundaryData3a);\n                    writeStyleResourceDependenciesInAttr(destination, boundaryResources);\n                }\n            } else {\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3b);\n                }\n            }\n            var writeMore;\n            if (scriptFormat) {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);\n            } else {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);\n            }\n            return writeBootstrap(destination, renderState) && writeMore;\n        }\n        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX(\"');\n        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX(\"');\n        var clientRenderScript1A = stringToPrecomputedChunk('\"');\n        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(\",\");\n        var clientRenderScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi=\"\" data-bid=\"');\n        var clientRenderData2 = stringToPrecomputedChunk('\" data-dgst=\"');\n        var clientRenderData3 = stringToPrecomputedChunk('\" data-msg=\"');\n        var clientRenderData4 = stringToPrecomputedChunk('\" data-stck=\"');\n        var clientRenderDataEnd = dataElementQuotedEnd;\n        function writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorComponentStack) {\n            var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, renderState.startInlineScript);\n                if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    resumableState.instructions |= SentClientRenderFunction;\n                    writeChunk(destination, clientRenderScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, clientRenderScript1Partial);\n                }\n            } else {\n                // <template data-rxi=\"\" data-bid=\"\n                writeChunk(destination, clientRenderData1);\n            }\n            writeChunk(destination, renderState.boundaryPrefix);\n            writeChunk(destination, stringToChunk(id.toString(16)));\n            if (scriptFormat) {\n                // \" needs to be inserted for scripts, since ArgInterstitual does not contain\n                // leading or trailing quotes\n                writeChunk(destination, clientRenderScript1A);\n            }\n            if (errorDigest || errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || \"\")));\n                } else {\n                    // \" data-dgst=\"HTMLString\n                    writeChunk(destination, clientRenderData2);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || \"\")));\n                }\n            }\n            if (errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || \"\")));\n                } else {\n                    // \" data-msg=\"HTMLString\n                    writeChunk(destination, clientRenderData3);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || \"\")));\n                }\n            }\n            if (errorComponentStack) {\n                // ,\"JSONString\"\n                if (scriptFormat) {\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));\n                } else {\n                    // \" data-stck=\"HTMLString\n                    writeChunk(destination, clientRenderData4);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                }\n            }\n            if (scriptFormat) {\n                // ></script>\n                return writeChunkAndReturn(destination, clientRenderScriptEnd);\n            } else {\n                // \"></template>\n                return writeChunkAndReturn(destination, clientRenderDataEnd);\n            }\n        }\n        var regexForJSStringsInInstructionScripts = /[<\\u2028\\u2029]/g;\n        function escapeJSStringsForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var regexForJSStringsInScripts = /[&><\\u2028\\u2029]/g;\n        function escapeJSObjectForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"&\":\n                        return \"\\\\u0026\";\n                    case \">\":\n                        return \"\\\\u003e\";\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media=\"not all\" data-precedence=\"');\n        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var lateStyleTagTemplateClose = stringToPrecomputedChunk(\"</style>\"); // Tracks whether the boundary currently flushing is flushign style tags or has any\n        // stylesheet dependencies not flushed in the Preamble.\n        var currentlyRenderingBoundaryHasStylesToHoist = false; // Acts as a return value for the forEach execution of style tag flushing.\n        var destinationHasCapacity = true;\n        function flushStyleTagsLateForBoundary(styleQueue) {\n            var rules = styleQueue.rules;\n            var hrefs = styleQueue.hrefs;\n            {\n                if (rules.length > 0 && hrefs.length === 0) {\n                    error(\"React expected to have at least one href for an a hoistable style but found none. This is a bug in React.\");\n                }\n            }\n            var i = 0;\n            if (hrefs.length) {\n                writeChunk(this, lateStyleTagResourceOpen1);\n                writeChunk(this, styleQueue.precedence);\n                writeChunk(this, lateStyleTagResourceOpen2);\n                for(; i < hrefs.length - 1; i++){\n                    writeChunk(this, hrefs[i]);\n                    writeChunk(this, spaceSeparator);\n                }\n                writeChunk(this, hrefs[i]);\n                writeChunk(this, lateStyleTagResourceOpen3);\n                for(i = 0; i < rules.length; i++){\n                    writeChunk(this, rules[i]);\n                }\n                destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose); // We wrote style tags for this boundary and we may need to emit a script\n                // to hoist them.\n                currentlyRenderingBoundaryHasStylesToHoist = true; // style resources can flush continuously since more rules may be written into\n                // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                // and hrefs\n                rules.length = 0;\n                hrefs.length = 0;\n            }\n        }\n        function hasStylesToHoist(stylesheet) {\n            // We need to reveal boundaries with styles whenever a stylesheet it depends on is either\n            // not flushed or flushed after the preamble (shell).\n            if (stylesheet.state !== PREAMBLE) {\n                currentlyRenderingBoundaryHasStylesToHoist = true;\n                return true;\n            }\n            return false;\n        }\n        function writeResourcesForBoundary(destination, boundaryResources, renderState) {\n            // Reset these on each invocation, they are only safe to read in this function\n            currentlyRenderingBoundaryHasStylesToHoist = false;\n            destinationHasCapacity = true; // Flush style tags for each precedence this boundary depends on\n            boundaryResources.styles.forEach(flushStyleTagsLateForBoundary, destination); // Determine if this boundary has stylesheets that need to be awaited upon completion\n            boundaryResources.stylesheets.forEach(hasStylesToHoist);\n            if (currentlyRenderingBoundaryHasStylesToHoist) {\n                renderState.stylesToHoist = true;\n            }\n            return destinationHasCapacity;\n        }\n        function flushResource(resource) {\n            for(var i = 0; i < resource.length; i++){\n                writeChunk(this, resource[i]);\n            }\n            resource.length = 0;\n        }\n        var stylesheetFlushingQueue = [];\n        function flushStyleInPreamble(stylesheet, key, map) {\n            // We still need to encode stylesheet chunks\n            // because unlike most Hoistables and Resources we do not eagerly encode\n            // them during render. This is because if we flush late we have to send a\n            // different encoding and we don't want to encode multiple times\n            pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);\n            for(var i = 0; i < stylesheetFlushingQueue.length; i++){\n                writeChunk(this, stylesheetFlushingQueue[i]);\n            }\n            stylesheetFlushingQueue.length = 0;\n            stylesheet.state = PREAMBLE;\n        }\n        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence=\"');\n        var styleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var spaceSeparator = stringToPrecomputedChunk(\" \");\n        var styleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var styleTagResourceClose = stringToPrecomputedChunk(\"</style>\");\n        function flushStylesInPreamble(styleQueue, precedence) {\n            var hasStylesheets = styleQueue.sheets.size > 0;\n            styleQueue.sheets.forEach(flushStyleInPreamble, this);\n            styleQueue.sheets.clear();\n            var rules = styleQueue.rules;\n            var hrefs = styleQueue.hrefs; // If we don't emit any stylesheets at this precedence we still need to maintain the precedence\n            // order so even if there are no rules for style tags at this precedence we emit an empty style\n            // tag with the data-precedence attribute\n            if (!hasStylesheets || hrefs.length) {\n                writeChunk(this, styleTagResourceOpen1);\n                writeChunk(this, styleQueue.precedence);\n                var i = 0;\n                if (hrefs.length) {\n                    writeChunk(this, styleTagResourceOpen2);\n                    for(; i < hrefs.length - 1; i++){\n                        writeChunk(this, hrefs[i]);\n                        writeChunk(this, spaceSeparator);\n                    }\n                    writeChunk(this, hrefs[i]);\n                }\n                writeChunk(this, styleTagResourceOpen3);\n                for(i = 0; i < rules.length; i++){\n                    writeChunk(this, rules[i]);\n                }\n                writeChunk(this, styleTagResourceClose); // style resources can flush continuously since more rules may be written into\n                // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                // and hrefs\n                rules.length = 0;\n                hrefs.length = 0;\n            }\n        }\n        function preloadLateStyle(stylesheet) {\n            if (stylesheet.state === PENDING$1) {\n                stylesheet.state = PRELOADED;\n                var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);\n                pushLinkImpl(stylesheetFlushingQueue, preloadProps);\n                for(var i = 0; i < stylesheetFlushingQueue.length; i++){\n                    writeChunk(this, stylesheetFlushingQueue[i]);\n                }\n                stylesheetFlushingQueue.length = 0;\n            }\n        }\n        function preloadLateStyles(styleQueue) {\n            styleQueue.sheets.forEach(preloadLateStyle, this);\n            styleQueue.sheets.clear();\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writePreamble(destination, resumableState, renderState, willFlushAllSegments) {\n            // This function must be called exactly once on every request\n            if (!willFlushAllSegments && renderState.externalRuntimeScript) {\n                // If the root segment is incomplete due to suspended tasks\n                // (e.g. willFlushAllSegments = false) and we are using data\n                // streaming format, ensure the external runtime is sent.\n                // (User code could choose to send this even earlier by calling\n                //  preinit(...), if they know they will suspend).\n                var _renderState$external = renderState.externalRuntimeScript, src = _renderState$external.src, chunks = _renderState$external.chunks;\n                internalPreinitScript(resumableState, renderState, src, chunks);\n            }\n            var htmlChunks = renderState.htmlChunks;\n            var headChunks = renderState.headChunks;\n            var i = 0; // Emit open tags before Hoistables and Resources\n            if (htmlChunks) {\n                // We have an <html> to emit as part of the preamble\n                for(i = 0; i < htmlChunks.length; i++){\n                    writeChunk(destination, htmlChunks[i]);\n                }\n                if (headChunks) {\n                    for(i = 0; i < headChunks.length; i++){\n                        writeChunk(destination, headChunks[i]);\n                    }\n                } else {\n                    // We did not render a head but we emitted an <html> so we emit one now\n                    writeChunk(destination, startChunkForTag(\"head\"));\n                    writeChunk(destination, endOfStartTag);\n                }\n            } else if (headChunks) {\n                // We do not have an <html> but we do have a <head>\n                for(i = 0; i < headChunks.length; i++){\n                    writeChunk(destination, headChunks[i]);\n                }\n            } // Emit high priority Hoistables\n            var charsetChunks = renderState.charsetChunks;\n            for(i = 0; i < charsetChunks.length; i++){\n                writeChunk(destination, charsetChunks[i]);\n            }\n            charsetChunks.length = 0; // emit preconnect resources\n            renderState.preconnects.forEach(flushResource, destination);\n            renderState.preconnects.clear();\n            var preconnectChunks = renderState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            renderState.fontPreloads.forEach(flushResource, destination);\n            renderState.fontPreloads.clear();\n            renderState.highImagePreloads.forEach(flushResource, destination);\n            renderState.highImagePreloads.clear(); // Flush unblocked stylesheets by precedence\n            renderState.styles.forEach(flushStylesInPreamble, destination);\n            var importMapChunks = renderState.importMapChunks;\n            for(i = 0; i < importMapChunks.length; i++){\n                writeChunk(destination, importMapChunks[i]);\n            }\n            importMapChunks.length = 0;\n            renderState.bootstrapScripts.forEach(flushResource, destination);\n            renderState.scripts.forEach(flushResource, destination);\n            renderState.scripts.clear();\n            renderState.bulkPreloads.forEach(flushResource, destination);\n            renderState.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = renderState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = renderState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0; // Flush closing head if necessary\n            if (htmlChunks && headChunks === null) {\n                // We have an <html> rendered but no <head> rendered. We however inserted\n                // a <head> up above so we need to emit the </head> now. This is safe because\n                // if the main content contained the </head> it would also have provided a\n                // <head>. This means that all the content inside <html> is either <body> or\n                // invalid HTML\n                writeChunk(destination, endChunkForTag(\"head\"));\n            }\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writeHoistables(destination, resumableState, renderState) {\n            var i = 0; // Emit high priority Hoistables\n            // We omit charsetChunks because we have already sent the shell and if it wasn't\n            // already sent it is too late now.\n            renderState.preconnects.forEach(flushResource, destination);\n            renderState.preconnects.clear();\n            var preconnectChunks = renderState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            renderState.fontPreloads.forEach(flushResource, destination);\n            renderState.fontPreloads.clear();\n            renderState.highImagePreloads.forEach(flushResource, destination);\n            renderState.highImagePreloads.clear(); // Preload any stylesheets. these will emit in a render instruction that follows this\n            // but we want to kick off preloading as soon as possible\n            renderState.styles.forEach(preloadLateStyles, destination); // We only hoist importmaps that are configured through createResponse and that will\n            // always flush in the preamble. Generally we don't expect people to render them as\n            // tags when using React but if you do they are going to be treated like regular inline\n            // scripts and flush after other hoistables which is problematic\n            // bootstrap scripts should flush above script priority but these can only flush in the preamble\n            // so we elide the code here for performance\n            renderState.scripts.forEach(flushResource, destination);\n            renderState.scripts.clear();\n            renderState.bulkPreloads.forEach(flushResource, destination);\n            renderState.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = renderState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = renderState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0;\n        }\n        function writePostamble(destination, resumableState) {\n            if (resumableState.hasBody) {\n                writeChunk(destination, endChunkForTag(\"body\"));\n            }\n            if (resumableState.hasHtml) {\n                writeChunk(destination, endChunkForTag(\"html\"));\n            }\n        }\n        var arrayFirstOpenBracket = stringToPrecomputedChunk(\"[\");\n        var arraySubsequentOpenBracket = stringToPrecomputedChunk(\",[\");\n        var arrayInterstitial = stringToPrecomputedChunk(\",\");\n        var arrayCloseBracket = stringToPrecomputedChunk(\"]\"); // This function writes a 2D array of strings to be embedded in javascript.\n        // E.g.\n        //  [[\"JS_escaped_string1\", \"JS_escaped_string2\"]]\n        function writeStyleResourceDependenciesInJS(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.stylesheets.forEach(function(resource) {\n                if (resource.state === PREAMBLE) ;\n                else if (resource.state === LATE) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state = LATE;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n        }\n        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInJS(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInJS(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));\n        } // This function writes a 2D array of strings to be embedded in an attribute\n        // value and read with JSON.parse in ReactDOMServerExternalRuntime.js\n        // E.g.\n        //  [[&quot;JSON_escaped_string1&quot;, &quot;JSON_escaped_string2&quot;]]\n        function writeStyleResourceDependenciesInAttr(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.stylesheets.forEach(function(resource) {\n                if (resource.state === PREAMBLE) ;\n                else if (resource.state === LATE) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state = LATE;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n        }\n        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInAttr(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInAttr(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));\n        }\n        /**\n * Resources\n */ var PENDING$1 = 0;\n        var PRELOADED = 1;\n        var PREAMBLE = 2;\n        var LATE = 3;\n        function createBoundaryResources() {\n            return {\n                styles: new Set(),\n                stylesheets: new Set()\n            };\n        }\n        function setCurrentlyRenderingBoundaryResourcesTarget(renderState, boundaryResources) {\n            renderState.boundaryResources = boundaryResources;\n        }\n        function getResourceKey(href) {\n            return href;\n        }\n        function getImageResourceKey(href, imageSrcSet, imageSizes) {\n            if (imageSrcSet) {\n                return imageSrcSet + \"\\n\" + (imageSizes || \"\");\n            }\n            return href;\n        }\n        function prefetchDNS(href) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (typeof href === \"string\" && href) {\n                var key = getResourceKey(href);\n                if (!resumableState.dnsResources.hasOwnProperty(key)) {\n                    resumableState.dnsResources[key] = EXISTS;\n                    var headers = renderState.headers;\n                    var header;\n                    if (headers && headers.remainingCapacity > 0 && (header = getPrefetchDNSAsHeader(href), // we assume all the rest won't as well. This is to avoid getting into a situation\n                    // where we have a very small remaining capacity but no headers will ever fit and we end\n                    // up constantly trying to see if the next resource might make it. In the future we can\n                    // make this behavior different between render and prerender since in the latter case\n                    // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                    // headers.\n                    (headers.remainingCapacity -= header.length) >= 2)) {\n                        // Store this as resettable in case we are prerendering and postpone in the Shell\n                        renderState.resets.dns[key] = EXISTS;\n                        if (headers.preconnects) {\n                            headers.preconnects += \", \";\n                        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                        headers.preconnects += header;\n                    } else {\n                        // Encode as element\n                        var resource = [];\n                        pushLinkImpl(resource, {\n                            href: href,\n                            rel: \"dns-prefetch\"\n                        });\n                        renderState.preconnects.add(resource);\n                    }\n                }\n                flushResources(request);\n            }\n        }\n        function preconnect(href, crossOrigin) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (typeof href === \"string\" && href) {\n                var bucket = crossOrigin === \"use-credentials\" ? \"credentials\" : typeof crossOrigin === \"string\" ? \"anonymous\" : \"default\";\n                var key = getResourceKey(href);\n                if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {\n                    resumableState.connectResources[bucket][key] = EXISTS;\n                    var headers = renderState.headers;\n                    var header;\n                    if (headers && headers.remainingCapacity > 0 && (header = getPreconnectAsHeader(href, crossOrigin), // we assume all the rest won't as well. This is to avoid getting into a situation\n                    // where we have a very small remaining capacity but no headers will ever fit and we end\n                    // up constantly trying to see if the next resource might make it. In the future we can\n                    // make this behavior different between render and prerender since in the latter case\n                    // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                    // headers.\n                    (headers.remainingCapacity -= header.length) >= 2)) {\n                        // Store this in resettableState in case we are prerending and postpone in the Shell\n                        renderState.resets.connect[bucket][key] = EXISTS;\n                        if (headers.preconnects) {\n                            headers.preconnects += \", \";\n                        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                        headers.preconnects += header;\n                    } else {\n                        var resource = [];\n                        pushLinkImpl(resource, {\n                            rel: \"preconnect\",\n                            href: href,\n                            crossOrigin: crossOrigin\n                        });\n                        renderState.preconnects.add(resource);\n                    }\n                }\n                flushResources(request);\n            }\n        }\n        function preload(href, as, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (as && href) {\n                switch(as){\n                    case \"image\":\n                        {\n                            var imageSrcSet, imageSizes, fetchPriority;\n                            if (options) {\n                                imageSrcSet = options.imageSrcSet;\n                                imageSizes = options.imageSizes;\n                                fetchPriority = options.fetchPriority;\n                            }\n                            var key = getImageResourceKey(href, imageSrcSet, imageSizes);\n                            if (resumableState.imageResources.hasOwnProperty(key)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n                            var headers = renderState.headers;\n                            var header;\n                            if (headers && headers.remainingCapacity > 0 && fetchPriority === \"high\" && (header = getPreloadAsHeader(href, as, options), // we assume all the rest won't as well. This is to avoid getting into a situation\n                            // where we have a very small remaining capacity but no headers will ever fit and we end\n                            // up constantly trying to see if the next resource might make it. In the future we can\n                            // make this behavior different between render and prerender since in the latter case\n                            // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                            // headers.\n                            (headers.remainingCapacity -= header.length) >= 2)) {\n                                // If we postpone in the shell we will still emit a preload as a header so we\n                                // track this to make sure we don't reset it.\n                                renderState.resets.image[key] = PRELOAD_NO_CREDS;\n                                if (headers.highImagePreloads) {\n                                    headers.highImagePreloads += \", \";\n                                } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                                headers.highImagePreloads += header;\n                            } else {\n                                // If we don't have headers to write to we have to encode as elements to flush in the head\n                                // When we have imageSrcSet the browser probably cannot load the right version from headers\n                                // (this should be verified by testing). For now we assume these need to go in the head\n                                // as elements even if headers are available.\n                                var resource = [];\n                                pushLinkImpl(resource, assign({\n                                    rel: \"preload\",\n                                    // There is a bug in Safari where imageSrcSet is not respected on preload links\n                                    // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                                    // This harms older browers that do not support imageSrcSet by making their preloads not work\n                                    // but this population is shrinking fast and is already small so we accept this tradeoff.\n                                    href: imageSrcSet ? undefined : href,\n                                    as: as\n                                }, options));\n                                if (fetchPriority === \"high\") {\n                                    renderState.highImagePreloads.add(resource);\n                                } else {\n                                    renderState.bulkPreloads.add(resource); // Stash the resource in case we need to promote it to higher priority\n                                    // when an img tag is rendered\n                                    renderState.preloads.images.set(key, resource);\n                                }\n                            }\n                            break;\n                        }\n                    case \"style\":\n                        {\n                            var _key = getResourceKey(href);\n                            if (resumableState.styleResources.hasOwnProperty(_key)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            var _resource2 = [];\n                            pushLinkImpl(_resource2, assign({\n                                rel: \"preload\",\n                                href: href,\n                                as: as\n                            }, options));\n                            resumableState.styleResources[_key] = options && (typeof options.crossOrigin === \"string\" || typeof options.integrity === \"string\") ? [\n                                options.crossOrigin,\n                                options.integrity\n                            ] : PRELOAD_NO_CREDS;\n                            renderState.preloads.stylesheets.set(_key, _resource2);\n                            renderState.bulkPreloads.add(_resource2);\n                            break;\n                        }\n                    case \"script\":\n                        {\n                            var _key2 = getResourceKey(href);\n                            if (resumableState.scriptResources.hasOwnProperty(_key2)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            var _resource3 = [];\n                            renderState.preloads.scripts.set(_key2, _resource3);\n                            renderState.bulkPreloads.add(_resource3);\n                            pushLinkImpl(_resource3, assign({\n                                rel: \"preload\",\n                                href: href,\n                                as: as\n                            }, options));\n                            resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === \"string\" || typeof options.integrity === \"string\") ? [\n                                options.crossOrigin,\n                                options.integrity\n                            ] : PRELOAD_NO_CREDS;\n                            break;\n                        }\n                    default:\n                        {\n                            var _key3 = getResourceKey(href);\n                            var hasAsType = resumableState.unknownResources.hasOwnProperty(as);\n                            var resources;\n                            if (hasAsType) {\n                                resources = resumableState.unknownResources[as];\n                                if (resources.hasOwnProperty(_key3)) {\n                                    // we can return if we already have this resource\n                                    return;\n                                }\n                            } else {\n                                resources = {};\n                                resumableState.unknownResources[as] = resources;\n                            }\n                            resources[_key3] = PRELOAD_NO_CREDS;\n                            var _headers = renderState.headers;\n                            var _header;\n                            if (_headers && _headers.remainingCapacity > 0 && as === \"font\" && (_header = getPreloadAsHeader(href, as, options), // we assume all the rest won't as well. This is to avoid getting into a situation\n                            // where we have a very small remaining capacity but no headers will ever fit and we end\n                            // up constantly trying to see if the next resource might make it. In the future we can\n                            // make this behavior different between render and prerender since in the latter case\n                            // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n                            // headers.\n                            (_headers.remainingCapacity -= _header.length) >= 2)) {\n                                // If we postpone in the shell we will still emit this preload so we\n                                // track it here to prevent it from being reset.\n                                renderState.resets.font[_key3] = PRELOAD_NO_CREDS;\n                                if (_headers.fontPreloads) {\n                                    _headers.fontPreloads += \", \";\n                                } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n                                _headers.fontPreloads += _header;\n                            } else {\n                                // We either don't have headers or we are preloading something that does\n                                // not warrant elevated priority so we encode as an element.\n                                var _resource4 = [];\n                                var props = assign({\n                                    rel: \"preload\",\n                                    href: href,\n                                    as: as\n                                }, options);\n                                pushLinkImpl(_resource4, props);\n                                switch(as){\n                                    case \"font\":\n                                        renderState.fontPreloads.add(_resource4);\n                                        break;\n                                    // intentional fall through\n                                    default:\n                                        renderState.bulkPreloads.add(_resource4);\n                                }\n                            }\n                        }\n                } // If we got this far we created a new resource\n                flushResources(request);\n            }\n        }\n        function preloadModule(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (href) {\n                var key = getResourceKey(href);\n                var as = options && typeof options.as === \"string\" ? options.as : \"script\";\n                var resource;\n                switch(as){\n                    case \"script\":\n                        {\n                            if (resumableState.moduleScriptResources.hasOwnProperty(key)) {\n                                // we can return if we already have this resource\n                                return;\n                            }\n                            resource = [];\n                            resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === \"string\" || typeof options.integrity === \"string\") ? [\n                                options.crossOrigin,\n                                options.integrity\n                            ] : PRELOAD_NO_CREDS;\n                            renderState.preloads.moduleScripts.set(key, resource);\n                            break;\n                        }\n                    default:\n                        {\n                            var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);\n                            var resources;\n                            if (hasAsType) {\n                                resources = resumableState.unknownResources[as];\n                                if (resources.hasOwnProperty(key)) {\n                                    // we can return if we already have this resource\n                                    return;\n                                }\n                            } else {\n                                resources = {};\n                                resumableState.moduleUnknownResources[as] = resources;\n                            }\n                            resource = [];\n                            resources[key] = PRELOAD_NO_CREDS;\n                        }\n                }\n                pushLinkImpl(resource, assign({\n                    rel: \"modulepreload\",\n                    href: href\n                }, options));\n                renderState.bulkPreloads.add(resource); // If we got this far we created a new resource\n                flushResources(request);\n            }\n        }\n        function preinitStyle(href, precedence, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (href) {\n                precedence = precedence || \"default\";\n                var key = getResourceKey(href);\n                var styleQueue = renderState.styles.get(precedence);\n                var hasKey = resumableState.styleResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n                    // to create a StyleQueue\n                    if (!styleQueue) {\n                        styleQueue = {\n                            precedence: stringToChunk(escapeTextForBrowser(precedence)),\n                            rules: [],\n                            hrefs: [],\n                            sheets: new Map()\n                        };\n                        renderState.styles.set(precedence, styleQueue);\n                    }\n                    var resource = {\n                        state: PENDING$1,\n                        props: assign({\n                            rel: \"stylesheet\",\n                            href: href,\n                            \"data-precedence\": precedence\n                        }, options)\n                    };\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            adoptPreloadCredentials(resource.props, preloadState);\n                        }\n                        var preloadResource = renderState.preloads.stylesheets.get(key);\n                        if (preloadResource && preloadResource.length > 0) {\n                            // The Preload for this resource was created in this render pass and has not flushed yet so\n                            // we need to clear it to avoid it flushing.\n                            preloadResource.length = 0;\n                        } else {\n                            // Either the preload resource from this render already flushed in this render pass\n                            // or the preload flushed in a prior pass (prerender). In either case we need to mark\n                            // this resource as already having been preloaded.\n                            resource.state = PRELOADED;\n                        }\n                    } // We add the newly created resource to our StyleQueue and if necessary\n                    // track the resource with the currently rendering boundary\n                    styleQueue.sheets.set(key, resource); // Notify the request that there are resources to flush even if no work is currently happening\n                    flushResources(request);\n                }\n            }\n        }\n        function preinitScript(src, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (src) {\n                var key = getResourceKey(src);\n                var hasKey = resumableState.scriptResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.scriptResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.scriptResources[key] = EXISTS;\n                    var props = assign({\n                        src: src,\n                        async: true\n                    }, options);\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            adoptPreloadCredentials(props, preloadState);\n                        }\n                        var preloadResource = renderState.preloads.scripts.get(key);\n                        if (preloadResource) {\n                            // the preload resource exists was created in this render. Now that we have\n                            // a script resource which will emit earlier than a preload would if it\n                            // hasn't already flushed we prevent it from flushing by zeroing the length\n                            preloadResource.length = 0;\n                        }\n                    }\n                    var resource = []; // Add to the script flushing queue\n                    renderState.scripts.add(resource); // encode the tag as Chunks\n                    pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n                    flushResources(request);\n                }\n                return;\n            }\n        }\n        function preinitModuleScript(src, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resumableState = getResumableState(request);\n            var renderState = getRenderState(request);\n            if (src) {\n                var key = getResourceKey(src);\n                var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);\n                var resourceState = hasKey ? resumableState.moduleScriptResources[key] : undefined;\n                if (resourceState !== EXISTS) {\n                    // We are going to create this resource now so it is marked as Exists\n                    resumableState.moduleScriptResources[key] = EXISTS;\n                    var props = assign({\n                        src: src,\n                        type: \"module\",\n                        async: true\n                    }, options);\n                    if (resourceState) {\n                        // When resourceState is truty it is a Preload state. We cast it for clarity\n                        var preloadState = resourceState;\n                        if (preloadState.length === 2) {\n                            adoptPreloadCredentials(props, preloadState);\n                        }\n                        var preloadResource = renderState.preloads.moduleScripts.get(key);\n                        if (preloadResource) {\n                            // the preload resource exists was created in this render. Now that we have\n                            // a script resource which will emit earlier than a preload would if it\n                            // hasn't already flushed we prevent it from flushing by zeroing the length\n                            preloadResource.length = 0;\n                        }\n                    }\n                    var resource = []; // Add to the script flushing queue\n                    renderState.scripts.add(resource); // encode the tag as Chunks\n                    pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n                    flushResources(request);\n                }\n                return;\n            }\n        } // This function is only safe to call at Request start time since it assumes\n        // that each module has not already been preloaded. If we find a need to preload\n        // scripts at any other point in time we will need to check whether the preload\n        // already exists and not assume it\n        function preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {\n            var key = getResourceKey(href);\n            {\n                if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {\n                    // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n                    // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n                    // rather than instruct the user to not preload their bootstrap scripts themselves\n                    error('Internal React Error: React expected bootstrap script or module with src \"%s\" to not have been preloaded already. please file an issue', href);\n                }\n            }\n            // used to preinit the resource. If a script can be preinited then it shouldn't\n            // be a bootstrap script/module and if it is a bootstrap script/module then it\n            // must not be safe to emit early. To avoid possibly allowing for preinits of\n            // bootstrap scripts/modules we occlude these keys.\n            resumableState.scriptResources[key] = EXISTS;\n            resumableState.moduleScriptResources[key] = EXISTS;\n            var resource = [];\n            pushLinkImpl(resource, props);\n            renderState.bootstrapScripts.add(resource);\n        }\n        function internalPreinitScript(resumableState, renderState, src, chunks) {\n            var key = getResourceKey(src);\n            if (!resumableState.scriptResources.hasOwnProperty(key)) {\n                var resource = chunks;\n                resumableState.scriptResources[key] = EXISTS;\n                renderState.scripts.add(resource);\n            }\n            return;\n        }\n        function preloadAsStylePropsFromProps(href, props) {\n            return {\n                rel: \"preload\",\n                as: \"style\",\n                href: href,\n                crossOrigin: props.crossOrigin,\n                fetchPriority: props.fetchPriority,\n                integrity: props.integrity,\n                media: props.media,\n                hrefLang: props.hrefLang,\n                referrerPolicy: props.referrerPolicy\n            };\n        }\n        function stylesheetPropsFromRawProps(rawProps) {\n            return assign({}, rawProps, {\n                \"data-precedence\": rawProps.precedence,\n                precedence: null\n            });\n        }\n        function adoptPreloadCredentials(target, preloadState) {\n            if (target.crossOrigin == null) target.crossOrigin = preloadState[0];\n            if (target.integrity == null) target.integrity = preloadState[1];\n        }\n        function getPrefetchDNSAsHeader(href) {\n            var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n            return \"<\" + escapedHref + \">; rel=dns-prefetch\";\n        }\n        function getPreconnectAsHeader(href, crossOrigin) {\n            var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n            var value = \"<\" + escapedHref + \">; rel=preconnect\";\n            if (typeof crossOrigin === \"string\") {\n                var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, \"crossOrigin\");\n                value += '; crossorigin=\"' + escapedCrossOrigin + '\"';\n            }\n            return value;\n        }\n        function getPreloadAsHeader(href, as, params) {\n            var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n            var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, \"as\");\n            var value = \"<\" + escapedHref + '>; rel=preload; as=\"' + escapedAs + '\"';\n            for(var paramName in params){\n                if (hasOwnProperty.call(params, paramName)) {\n                    var paramValue = params[paramName];\n                    if (typeof paramValue === \"string\") {\n                        value += \"; \" + paramName.toLowerCase() + '=\"' + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + '\"';\n                    }\n                }\n            }\n            return value;\n        }\n        function getStylesheetPreloadAsHeader(stylesheet) {\n            var props = stylesheet.props;\n            var preloadOptions = {\n                crossOrigin: props.crossOrigin,\n                integrity: props.integrity,\n                nonce: props.nonce,\n                type: props.type,\n                fetchPriority: props.fetchPriority,\n                referrerPolicy: props.referrerPolicy,\n                media: props.media\n            };\n            return getPreloadAsHeader(props.href, \"style\", preloadOptions);\n        } // This escaping function is only safe to use for href values being written into\n        // a \"Link\" header in between `<` and `>` characters. The primary concern with the href is\n        // to escape the bounding characters as well as new lines. This is unsafe to use in any other\n        // context\n        var regexForHrefInLinkHeaderURLContext = /[<>\\r\\n]/g;\n        function escapeHrefForLinkHeaderURLContext(hrefInput) {\n            {\n                checkAttributeStringCoercion(hrefInput, \"href\");\n            }\n            var coercedHref = \"\" + hrefInput;\n            return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);\n        }\n        function escapeHrefForLinkHeaderURLContextReplacer(match) {\n            switch(match){\n                case \"<\":\n                    return \"%3C\";\n                case \">\":\n                    return \"%3E\";\n                case \"\\n\":\n                    return \"%0A\";\n                case \"\\r\":\n                    return \"%0D\";\n                default:\n                    {\n                        // eslint-disable-next-line react-internal/prod-error-codes\n                        throw new Error(\"escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                    }\n            }\n        } // This escaping function is only safe to use for quoted param values in an HTTP header.\n        // It is unsafe to use for any value not inside quote marks in parater value position.\n        var regexForLinkHeaderQuotedParamValueContext = /[\"';,\\r\\n]/g;\n        function escapeStringForLinkHeaderQuotedParamValueContext(value, name) {\n            {\n                checkOptionStringCoercion(value, name);\n            }\n            var coerced = \"\" + value;\n            return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);\n        }\n        function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {\n            switch(match){\n                case '\"':\n                    return \"%22\";\n                case \"'\":\n                    return \"%27\";\n                case \";\":\n                    return \"%3B\";\n                case \",\":\n                    return \"%2C\";\n                case \"\\n\":\n                    return \"%0A\";\n                case \"\\r\":\n                    return \"%0D\";\n                default:\n                    {\n                        // eslint-disable-next-line react-internal/prod-error-codes\n                        throw new Error(\"escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                    }\n            }\n        }\n        function hoistStyleQueueDependency(styleQueue) {\n            this.styles.add(styleQueue);\n        }\n        function hoistStylesheetDependency(stylesheet) {\n            this.stylesheets.add(stylesheet);\n        }\n        function hoistResources(renderState, source) {\n            var currentBoundaryResources = renderState.boundaryResources;\n            if (currentBoundaryResources) {\n                source.styles.forEach(hoistStyleQueueDependency, currentBoundaryResources);\n                source.stylesheets.forEach(hoistStylesheetDependency, currentBoundaryResources);\n            }\n        } // This function is called at various times depending on whether we are rendering\n        // or prerendering. In this implementation we only actually emit headers once and\n        // subsequent calls are ignored. We track whether the request has a completed shell\n        // to determine whether we will follow headers with a flush including stylesheets.\n        // In the context of prerrender we don't have a completed shell when the request finishes\n        // with a postpone in the shell. In the context of a render we don't have a completed shell\n        // if this is called before the shell finishes rendering which usually will happen anytime\n        // anything suspends in the shell.\n        function emitEarlyPreloads(renderState, resumableState, shellComplete) {\n            var onHeaders = renderState.onHeaders;\n            if (onHeaders) {\n                var headers = renderState.headers;\n                if (headers) {\n                    // Even if onHeaders throws we don't want to call this again so\n                    // we drop the headers state from this point onwards.\n                    renderState.headers = null;\n                    var linkHeader = headers.preconnects;\n                    if (headers.fontPreloads) {\n                        if (linkHeader) {\n                            linkHeader += \", \";\n                        }\n                        linkHeader += headers.fontPreloads;\n                    }\n                    if (headers.highImagePreloads) {\n                        if (linkHeader) {\n                            linkHeader += \", \";\n                        }\n                        linkHeader += headers.highImagePreloads;\n                    }\n                    if (!shellComplete) {\n                        // We use raw iterators because we want to be able to halt iteration\n                        // We could refactor renderState to store these dually in arrays to\n                        // make this more efficient at the cost of additional memory and\n                        // write overhead. However this code only runs once per request so\n                        // for now I consider this sufficient.\n                        var queueIter = renderState.styles.values();\n                        outer: for(var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()){\n                            var sheets = queueStep.value.sheets;\n                            var sheetIter = sheets.values();\n                            for(var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()){\n                                var sheet = sheetStep.value;\n                                var props = sheet.props;\n                                var key = getResourceKey(props.href);\n                                var header = getStylesheetPreloadAsHeader(sheet); // We mutate the capacity b/c we don't want to keep checking if later headers will fit.\n                                // This means that a particularly long header might close out the header queue where later\n                                // headers could still fit. We could in the future alter the behavior here based on prerender vs render\n                                // since during prerender we aren't as concerned with pure runtime performance.\n                                if ((headers.remainingCapacity -= header.length) >= 2) {\n                                    renderState.resets.style[key] = PRELOAD_NO_CREDS;\n                                    if (linkHeader) {\n                                        linkHeader += \", \";\n                                    }\n                                    linkHeader += header; // We already track that the resource exists in resumableState however\n                                    // if the resumableState resets because we postponed in the shell\n                                    // which is what is happening in this branch if we are prerendering\n                                    // then we will end up resetting the resumableState. When it resets we\n                                    // want to record the fact that this stylesheet was already preloaded\n                                    renderState.resets.style[key] = typeof props.crossOrigin === \"string\" || typeof props.integrity === \"string\" ? [\n                                        props.crossOrigin,\n                                        props.integrity\n                                    ] : PRELOAD_NO_CREDS;\n                                } else {\n                                    break outer;\n                                }\n                            }\n                        }\n                    }\n                    if (linkHeader) {\n                        onHeaders({\n                            Link: linkHeader\n                        });\n                    } else {\n                        // We still call this with no headers because a user may be using it as a signal that\n                        // it React will not provide any headers\n                        onHeaders({});\n                    }\n                    return;\n                }\n            }\n        }\n        var NotPendingTransition = NotPending;\n        var requestStorage = new async_hooks.AsyncLocalStorage();\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher$1.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher$1.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeClassComponentFrame(ctor, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(ctor, true);\n            }\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct$1(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct$1(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement(null);\n                        }\n                    }\n                }\n            }\n        }\n        var warnedAboutMissingGetChildContext;\n        {\n            warnedAboutMissingGetChildContext = {};\n        }\n        var emptyContextObject = {};\n        {\n            Object.freeze(emptyContextObject);\n        }\n        function getMaskedContext(type, unmaskedContext) {\n            {\n                var contextTypes = type.contextTypes;\n                if (!contextTypes) {\n                    return emptyContextObject;\n                }\n                var context = {};\n                for(var key in contextTypes){\n                    context[key] = unmaskedContext[key];\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(contextTypes, context, \"context\", name);\n                }\n                return context;\n            }\n        }\n        function processChildContext(instance, type, parentContext, childContextTypes) {\n            {\n                // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n                // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n                if (typeof instance.getChildContext !== \"function\") {\n                    {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!warnedAboutMissingGetChildContext[componentName]) {\n                            warnedAboutMissingGetChildContext[componentName] = true;\n                            error(\"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName);\n                        }\n                    }\n                    return parentContext;\n                }\n                var childContext = instance.getChildContext();\n                for(var contextKey in childContext){\n                    if (!(contextKey in childContextTypes)) {\n                        throw new Error((getComponentNameFromType(type) || \"Unknown\") + '.getChildContext(): key \"' + contextKey + '\" is not defined in childContextTypes.');\n                    }\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(childContextTypes, childContext, \"child context\", name);\n                }\n                return assign({}, parentContext, childContext);\n            }\n        }\n        var rendererSigil;\n        {\n            // Use this to detect multiple renderers using the same context\n            rendererSigil = {};\n        }\n        // Forming a reverse tree.\n        // The structure of a context snapshot is an implementation of this file.\n        // Currently, it's implemented as tracking the current active node.\n        var rootContextSnapshot = null; // We assume that this runtime owns the \"current\" field on all ReactContext instances.\n        // This global (actually thread local) state represents what state all those \"current\",\n        // fields are currently in.\n        var currentActiveSnapshot = null;\n        function popNode(prev) {\n            {\n                prev.context._currentValue = prev.parentValue;\n            }\n        }\n        function pushNode(next) {\n            {\n                next.context._currentValue = next.value;\n            }\n        }\n        function popToNearestCommonAncestor(prev, next) {\n            if (prev === next) ;\n            else {\n                popNode(prev);\n                var parentPrev = prev.parent;\n                var parentNext = next.parent;\n                if (parentPrev === null) {\n                    if (parentNext !== null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                } else {\n                    if (parentNext === null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                    popToNearestCommonAncestor(parentPrev, parentNext);\n                } // On the way back, we push the new ones that weren't common.\n                pushNode(next);\n            }\n        }\n        function popAllPrevious(prev) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev !== null) {\n                popAllPrevious(parentPrev);\n            }\n        }\n        function pushAllNext(next) {\n            var parentNext = next.parent;\n            if (parentNext !== null) {\n                pushAllNext(parentNext);\n            }\n            pushNode(next);\n        }\n        function popPreviousToCommonLevel(prev, next) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (parentPrev.depth === next.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(parentPrev, next);\n            } else {\n                // We must still be deeper.\n                popPreviousToCommonLevel(parentPrev, next);\n            }\n        }\n        function popNextToCommonLevel(prev, next) {\n            var parentNext = next.parent;\n            if (parentNext === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (prev.depth === parentNext.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(prev, parentNext);\n            } else {\n                // We must still be deeper.\n                popNextToCommonLevel(prev, parentNext);\n            }\n            pushNode(next);\n        } // Perform context switching to the new snapshot.\n        // To make it cheap to read many contexts, while not suspending, we make the switch eagerly by\n        // updating all the context's current values. That way reads, always just read the current value.\n        // At the cost of updating contexts even if they're never read by this subtree.\n        function switchContext(newSnapshot) {\n            // The basic algorithm we need to do is to pop back any contexts that are no longer on the stack.\n            // We also need to update any new contexts that are now on the stack with the deepest value.\n            // The easiest way to update new contexts is to just reapply them in reverse order from the\n            // perspective of the backpointers. To avoid allocating a lot when switching, we use the stack\n            // for that. Therefore this algorithm is recursive.\n            // 1) First we pop which ever snapshot tree was deepest. Popping old contexts as we go.\n            // 2) Then we find the nearest common ancestor from there. Popping old contexts as we go.\n            // 3) Then we reapply new contexts on the way back up the stack.\n            var prev = currentActiveSnapshot;\n            var next = newSnapshot;\n            if (prev !== next) {\n                if (prev === null) {\n                    // $FlowFixMe[incompatible-call]: This has to be non-null since it's not equal to prev.\n                    pushAllNext(next);\n                } else if (next === null) {\n                    popAllPrevious(prev);\n                } else if (prev.depth === next.depth) {\n                    popToNearestCommonAncestor(prev, next);\n                } else if (prev.depth > next.depth) {\n                    popPreviousToCommonLevel(prev, next);\n                } else {\n                    popNextToCommonLevel(prev, next);\n                }\n                currentActiveSnapshot = next;\n            }\n        }\n        function pushProvider(context, nextValue) {\n            var prevValue;\n            {\n                prevValue = context._currentValue;\n                context._currentValue = nextValue;\n                {\n                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer = rendererSigil;\n                }\n            }\n            var prevNode = currentActiveSnapshot;\n            var newNode = {\n                parent: prevNode,\n                depth: prevNode === null ? 0 : prevNode.depth + 1,\n                context: context,\n                parentValue: prevValue,\n                value: nextValue\n            };\n            currentActiveSnapshot = newNode;\n            return newNode;\n        }\n        function popProvider(context) {\n            var prevSnapshot = currentActiveSnapshot;\n            if (prevSnapshot === null) {\n                throw new Error(\"Tried to pop a Context at the root of the app. This is a bug in React.\");\n            }\n            {\n                if (prevSnapshot.context !== context) {\n                    error(\"The parent context is not the expected context. This is probably a bug in React.\");\n                }\n            }\n            {\n                var value = prevSnapshot.parentValue;\n                if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;\n                } else {\n                    prevSnapshot.context._currentValue = value;\n                }\n                {\n                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer = rendererSigil;\n                }\n            }\n            return currentActiveSnapshot = prevSnapshot.parent;\n        }\n        function getActiveContext() {\n            return currentActiveSnapshot;\n        }\n        function readContext$1(context) {\n            var value = context._currentValue;\n            return value;\n        }\n        /**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */ function get(key) {\n            return key._reactInternals;\n        }\n        function set(key, value) {\n            key._reactInternals = value;\n        }\n        var didWarnAboutNoopUpdateForComponent = {};\n        var didWarnAboutDeprecatedWillMount = {};\n        var didWarnAboutUninitializedState;\n        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n        var didWarnAboutLegacyLifecyclesAndDerivedState;\n        var didWarnAboutUndefinedDerivedState;\n        var didWarnAboutDirectlyAssigningPropsToState;\n        var didWarnAboutContextTypeAndContextTypes;\n        var didWarnAboutInvalidateContextType;\n        var didWarnOnInvalidCallback;\n        {\n            didWarnAboutUninitializedState = new Set();\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n            didWarnAboutDirectlyAssigningPropsToState = new Set();\n            didWarnAboutUndefinedDerivedState = new Set();\n            didWarnAboutContextTypeAndContextTypes = new Set();\n            didWarnAboutInvalidateContextType = new Set();\n            didWarnOnInvalidCallback = new Set();\n        }\n        function warnOnInvalidCallback(callback, callerName) {\n            {\n                if (callback === null || typeof callback === \"function\") {\n                    return;\n                }\n                var key = callerName + \"_\" + callback;\n                if (!didWarnOnInvalidCallback.has(key)) {\n                    didWarnOnInvalidCallback.add(key);\n                    error(\"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, callback);\n                }\n            }\n        }\n        function warnOnUndefinedDerivedState(type, partialState) {\n            {\n                if (partialState === undefined) {\n                    var componentName = getComponentNameFromType(type) || \"Component\";\n                    if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n                        didWarnAboutUndefinedDerivedState.add(componentName);\n                        error(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" + \"You have returned undefined.\", componentName);\n                    }\n                }\n            }\n        }\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && getComponentNameFromType(_constructor) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnAboutNoopUpdateForComponent[warningKey]) {\n                    return;\n                }\n                error(\"%s(...): Can only update a mounting component. \" + \"This usually means you called %s() outside componentWillMount() on the server. \" + \"This is a no-op.\\n\\nPlease check the code for the %s component.\", callerName, callerName, componentName);\n                didWarnAboutNoopUpdateForComponent[warningKey] = true;\n            }\n        }\n        var classComponentUpdater = {\n            isMounted: function(inst) {\n                return false;\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueSetState: function(inst, payload, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"setState\");\n                } else {\n                    internals.queue.push(payload);\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            },\n            enqueueReplaceState: function(inst, payload, callback) {\n                var internals = get(inst);\n                internals.replace = true;\n                internals.queue = [\n                    payload\n                ];\n                {\n                    if (callback !== undefined && callback !== null) {\n                        warnOnInvalidCallback(callback, \"setState\");\n                    }\n                }\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueForceUpdate: function(inst, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"forceUpdate\");\n                } else {\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            }\n        };\n        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {\n            var partialState = getDerivedStateFromProps(nextProps, prevState);\n            {\n                warnOnUndefinedDerivedState(ctor, partialState);\n            }\n            var newState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n            return newState;\n        }\n        function constructClassInstance(ctor, props, maskedLegacyContext) {\n            var context = emptyContextObject;\n            var contextType = ctor.contextType;\n            {\n                if (\"contextType\" in ctor) {\n                    var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n                    if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n                        didWarnAboutInvalidateContextType.add(ctor);\n                        var addendum = \"\";\n                        if (contextType === undefined) {\n                            addendum = \" However, it is set to undefined. \" + \"This can be caused by a typo or by mixing up named and default imports. \" + \"This can also happen due to a circular dependency, so \" + \"try moving the createContext() call to a separate file.\";\n                        } else if (typeof contextType !== \"object\") {\n                            addendum = \" However, it is set to a \" + typeof contextType + \".\";\n                        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n                            addendum = \" Did you accidentally pass the Context.Provider instead?\";\n                        } else if (contextType._context !== undefined) {\n                            // <Context.Consumer>\n                            addendum = \" Did you accidentally pass the Context.Consumer instead?\";\n                        } else {\n                            addendum = \" However, it is set to an object with keys {\" + Object.keys(contextType).join(\", \") + \"}.\";\n                        }\n                        error(\"%s defines an invalid contextType. \" + \"contextType should point to the Context object returned by React.createContext().%s\", getComponentNameFromType(ctor) || \"Component\", addendum);\n                    }\n                }\n            }\n            if (typeof contextType === \"object\" && contextType !== null) {\n                context = readContext$1(contextType);\n            } else {\n                context = maskedLegacyContext;\n            }\n            var instance = new ctor(props, context);\n            {\n                if (typeof ctor.getDerivedStateFromProps === \"function\" && (instance.state === null || instance.state === undefined)) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutUninitializedState.has(componentName)) {\n                        didWarnAboutUninitializedState.add(componentName);\n                        error(\"`%s` uses `getDerivedStateFromProps` but its initial state is \" + \"%s. This is not recommended. Instead, define the initial state by \" + \"assigning an object to `this.state` in the constructor of `%s`. \" + \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\", componentName, instance.state === null ? \"null\" : \"undefined\", componentName);\n                    }\n                } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n                // Warn about these lifecycles if they are present.\n                // Don't warn about react-lifecycles-compat polyfilled methods though.\n                if (typeof ctor.getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    var foundWillMountName = null;\n                    var foundWillReceivePropsName = null;\n                    var foundWillUpdateName = null;\n                    if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        foundWillMountName = \"componentWillMount\";\n                    } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                        foundWillMountName = \"UNSAFE_componentWillMount\";\n                    }\n                    if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                        foundWillReceivePropsName = \"componentWillReceiveProps\";\n                    } else if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n                        foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n                    }\n                    if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                        foundWillUpdateName = \"componentWillUpdate\";\n                    } else if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n                        foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n                    }\n                    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n                        var _componentName = getComponentNameFromType(ctor) || \"Component\";\n                        var newApiName = typeof ctor.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                            error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" + \"The above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://reactjs.org/link/unsafe-component-lifecycles\", _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\", foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\", foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\");\n                        }\n                    }\n                }\n            }\n            return instance;\n        }\n        function checkClassInstance(instance, ctor, newProps) {\n            {\n                var name = getComponentNameFromType(ctor) || \"Component\";\n                var renderPresent = instance.render;\n                if (!renderPresent) {\n                    if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: did you accidentally return an object from the constructor?\", name);\n                    } else {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", name);\n                    }\n                }\n                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n                    error(\"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", name);\n                }\n                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", name);\n                }\n                if (instance.propTypes) {\n                    error(\"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", name);\n                }\n                if (instance.contextType) {\n                    error(\"contextType was defined as an instance property on %s. Use a static \" + \"property to define contextType instead.\", name);\n                }\n                {\n                    if (instance.contextTypes) {\n                        error(\"contextTypes was defined as an instance property on %s. Use a static \" + \"property to define contextTypes instead.\", name);\n                    }\n                    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n                        didWarnAboutContextTypeAndContextTypes.add(ctor);\n                        error(\"%s declares both contextTypes and contextType static properties. \" + \"The legacy contextTypes property will be ignored.\", name);\n                    }\n                }\n                if (typeof instance.componentShouldUpdate === \"function\") {\n                    error(\"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", name);\n                }\n                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== \"undefined\") {\n                    error(\"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", getComponentNameFromType(ctor) || \"A pure component\");\n                }\n                if (typeof instance.componentDidUnmount === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", name);\n                }\n                if (typeof instance.componentDidReceiveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidReceiveProps(). But there is no such lifecycle method. \" + \"If you meant to update the state in response to changing props, \" + \"use componentWillReceiveProps(). If you meant to fetch data or \" + \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\", name);\n                }\n                if (typeof instance.componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", name);\n                }\n                if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\", name);\n                }\n                var hasMutatedProps = instance.props !== newProps;\n                if (instance.props !== undefined && hasMutatedProps) {\n                    error(\"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", name, name);\n                }\n                if (instance.defaultProps) {\n                    error(\"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", name, name);\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\" && typeof instance.componentDidUpdate !== \"function\" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n                    error(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" + \"This component defines getSnapshotBeforeUpdate() only.\", getComponentNameFromType(ctor));\n                }\n                if (typeof instance.getDerivedStateFromProps === \"function\") {\n                    error(\"%s: getDerivedStateFromProps() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof instance.getDerivedStateFromError === \"function\") {\n                    error(\"%s: getDerivedStateFromError() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n                    error(\"%s: getSnapshotBeforeUpdate() is defined as a static method \" + \"and will be ignored. Instead, declare it as an instance method.\", name);\n                }\n                var state = instance.state;\n                if (state && (typeof state !== \"object\" || isArray(state))) {\n                    error(\"%s.state: must be set to an object or null\", name);\n                }\n                if (typeof instance.getChildContext === \"function\" && typeof ctor.childContextTypes !== \"object\") {\n                    error(\"%s.getChildContext(): childContextTypes must be defined in order to \" + \"use getChildContext().\", name);\n                }\n            }\n        }\n        function callComponentWillMount(type, instance) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillMount === \"function\") {\n                {\n                    if (instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!didWarnAboutDeprecatedWillMount[componentName]) {\n                            warn(\"componentWillMount has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code from componentWillMount to componentDidMount (preferred in most cases) \" + \"or the constructor.\\n\" + \"\\nPlease update the following components: %s\", componentName);\n                            didWarnAboutDeprecatedWillMount[componentName] = true;\n                        }\n                    }\n                }\n                instance.componentWillMount();\n            }\n            if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                instance.UNSAFE_componentWillMount();\n            }\n            if (oldState !== instance.state) {\n                {\n                    error(\"%s.componentWillMount(): Assigning directly to this.state is \" + \"deprecated (except inside a component's \" + \"constructor). Use setState instead.\", getComponentNameFromType(type) || \"Component\");\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        }\n        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {\n            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {\n                var oldQueue = internalInstance.queue;\n                var oldReplace = internalInstance.replace;\n                internalInstance.queue = null;\n                internalInstance.replace = false;\n                if (oldReplace && oldQueue.length === 1) {\n                    inst.state = oldQueue[0];\n                } else {\n                    var nextState = oldReplace ? oldQueue[0] : inst.state;\n                    var dontMutate = true;\n                    for(var i = oldReplace ? 1 : 0; i < oldQueue.length; i++){\n                        var partial = oldQueue[i];\n                        var partialState = typeof partial === \"function\" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;\n                        if (partialState != null) {\n                            if (dontMutate) {\n                                dontMutate = false;\n                                nextState = assign({}, nextState, partialState);\n                            } else {\n                                assign(nextState, partialState);\n                            }\n                        }\n                    }\n                    inst.state = nextState;\n                }\n            } else {\n                internalInstance.queue = null;\n            }\n        } // Invokes the mount life-cycles on a previously never rendered instance.\n        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {\n            {\n                checkClassInstance(instance, ctor, newProps);\n            }\n            var initialState = instance.state !== undefined ? instance.state : null;\n            instance.updater = classComponentUpdater;\n            instance.props = newProps;\n            instance.state = initialState; // We don't bother initializing the refs object on the server, since we're not going to resolve them anyway.\n            // The internal instance will be used to manage updates that happen during this mount.\n            var internalInstance = {\n                queue: [],\n                replace: false\n            };\n            set(instance, internalInstance);\n            var contextType = ctor.contextType;\n            if (typeof contextType === \"object\" && contextType !== null) {\n                instance.context = readContext$1(contextType);\n            } else {\n                instance.context = maskedLegacyContext;\n            }\n            {\n                if (instance.state === newProps) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n                        error(\"%s: It is not recommended to assign props directly to state \" + \"because updates to props won't be reflected in state. \" + \"In most cases, it is better to use props directly.\", componentName);\n                    }\n                }\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            if (typeof getDerivedStateFromProps === \"function\") {\n                instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);\n            } // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (typeof ctor.getDerivedStateFromProps !== \"function\" && typeof instance.getSnapshotBeforeUpdate !== \"function\" && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n                callComponentWillMount(ctor, instance); // If we had additional state updates during this life-cycle, let's\n                // process them now.\n                processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);\n            }\n        }\n        // Ids are base 32 strings whose binary representation corresponds to the\n        // position of a node in a tree.\n        // Every time the tree forks into multiple children, we add additional bits to\n        // the left of the sequence that represent the position of the child within the\n        // current level of children.\n        //\n        //      00101       00010001011010101\n        //      ╰─┬─╯       ╰───────┬───────╯\n        //   Fork 5 of 20       Parent id\n        //\n        // The leading 0s are important. In the above example, you only need 3 bits to\n        // represent slot 5. However, you need 5 bits to represent all the forks at\n        // the current level, so we must account for the empty bits at the end.\n        //\n        // For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n        // the zeroth id at a level would be indistinguishable from its parent.\n        //\n        // If a node has only one child, and does not materialize an id (i.e. does not\n        // contain a useId hook), then we don't need to allocate any space in the\n        // sequence. It's treated as a transparent indirection. For example, these two\n        // trees produce the same ids:\n        //\n        // <>                          <>\n        //   <Indirection>               <A />\n        //     <A />                     <B />\n        //   </Indirection>            </>\n        //   <B />\n        // </>\n        //\n        // However, we cannot skip any node that materializes an id. Otherwise, a parent\n        // id that does not fork would be indistinguishable from its child id. For\n        // example, this tree does not fork, but the parent and child must have\n        // different ids.\n        //\n        // <Parent>\n        //   <Child />\n        // </Parent>\n        //\n        // To handle this scenario, every time we materialize an id, we allocate a\n        // new level with a single slot. You can think of this as a fork with only one\n        // prong, or an array of children with length 1.\n        //\n        // It's possible for the size of the sequence to exceed 32 bits, the max\n        // size for bitwise operations. When this happens, we make more room by\n        // converting the right part of the id to a string and storing it in an overflow\n        // variable. We use a base 32 string representation, because 32 is the largest\n        // power of 2 that is supported by toString(). We want the base to be large so\n        // that the resulting ids are compact, and we want the base to be a power of 2\n        // because every log2(base) bits corresponds to a single character, i.e. every\n        // log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n        // affecting the final result.\n        var emptyTreeContext = {\n            id: 1,\n            overflow: \"\"\n        };\n        function getTreeId(context) {\n            var overflow = context.overflow;\n            var idWithLeadingBit = context.id;\n            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n            return id.toString(32) + overflow;\n        }\n        function pushTreeContext(baseContext, totalChildren, index) {\n            var baseIdWithLeadingBit = baseContext.id;\n            var baseOverflow = baseContext.overflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n            // of the id; we use it to account for leading 0s.\n            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n            var slot = index + 1;\n            var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n            // consideration the leading 1 we use to mark the end of the sequence.\n            if (length > 30) {\n                // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n                // This branch assumes the length of the base id is greater than 5; it won't\n                // work for smaller ids, because you need 5 bits per character.\n                //\n                // We encode the id in multiple steps: first the base id, then the\n                // remaining digits.\n                //\n                // Each 5 bit sequence corresponds to a single base 32 character. So for\n                // example, if the current id is 23 bits long, we can convert 20 of those\n                // bits into a string of 4 characters, with 3 bits left over.\n                //\n                // First calculate how many bits in the base id represent a complete\n                // sequence of characters.\n                var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n                var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n                var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n                var restOfBaseId = baseId >> numberOfOverflowBits;\n                var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n                // we made more room, this time it won't overflow.\n                var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n                var restOfNewBits = slot << restOfBaseLength;\n                var id = restOfNewBits | restOfBaseId;\n                var overflow = newOverflow + baseOverflow;\n                return {\n                    id: 1 << restOfLength | id,\n                    overflow: overflow\n                };\n            } else {\n                // Normal path\n                var newBits = slot << baseLength;\n                var _id = newBits | baseId;\n                var _overflow = baseOverflow;\n                return {\n                    id: 1 << length | _id,\n                    overflow: _overflow\n                };\n            }\n        }\n        function getBitLength(number) {\n            return 32 - clz32(number);\n        }\n        function getLeadingBit(id) {\n            return 1 << getBitLength(id) - 1;\n        } // TODO: Math.clz32 is supported in Node 12+. Maybe we can drop the fallback.\n        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n        // Based on:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n        var log = Math.log;\n        var LN2 = Math.LN2;\n        function clz32Fallback(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0;\n        }\n        // Corresponds to ReactFiberWakeable and ReactFlightWakeable modules. Generally,\n        // changes to one module should be reflected in the others.\n        // TODO: Rename this module and the corresponding Fiber one to \"Thenable\"\n        // instead of \"Wakeable\". Or some other more appropriate name.\n        // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n        // detect this is caught by userspace, we'll log a warning in development.\n        var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + \"detail of `use` to interrupt the current render. You must either \" + \"rethrow it immediately, or move the `use` call outside of the \" + \"`try/catch` block. Capturing without rethrowing will lead to \" + \"unexpected behavior.\\n\\n\" + \"To handle async errors, wrap your component in an error boundary, or \" + \"call the promise's `.catch` method and pass the result to `use`\");\n        function createThenableState() {\n            // The ThenableState is created the first time a component suspends. If it\n            // suspends again, we'll reuse the same state.\n            return [];\n        }\n        function noop$2() {}\n        function trackUsedThenable(thenableState, thenable, index) {\n            var previous = thenableState[index];\n            if (previous === undefined) {\n                thenableState.push(thenable);\n            } else {\n                if (previous !== thenable) {\n                    // Reuse the previous thenable, and drop the new one. We can assume\n                    // they represent the same value, because components are idempotent.\n                    // Avoid an unhandled rejection errors for the Promises that we'll\n                    // intentionally ignore.\n                    thenable.then(noop$2, noop$2);\n                    thenable = previous;\n                }\n            } // We use an expando to track the status and result of a thenable so that we\n            // can synchronously unwrap the value. Think of this as an extension of the\n            // Promise API, or a custom interface that is a superset of Thenable.\n            //\n            // If the thenable doesn't have a status, set it to \"pending\" and attach\n            // a listener that will update its status and result when it resolves.\n            switch(thenable.status){\n                case \"fulfilled\":\n                    {\n                        var fulfilledValue = thenable.value;\n                        return fulfilledValue;\n                    }\n                case \"rejected\":\n                    {\n                        var rejectedError = thenable.reason;\n                        throw rejectedError;\n                    }\n                default:\n                    {\n                        if (typeof thenable.status === \"string\") ;\n                        else {\n                            var pendingThenable = thenable;\n                            pendingThenable.status = \"pending\";\n                            pendingThenable.then(function(fulfilledValue) {\n                                if (thenable.status === \"pending\") {\n                                    var fulfilledThenable = thenable;\n                                    fulfilledThenable.status = \"fulfilled\";\n                                    fulfilledThenable.value = fulfilledValue;\n                                }\n                            }, function(error) {\n                                if (thenable.status === \"pending\") {\n                                    var rejectedThenable = thenable;\n                                    rejectedThenable.status = \"rejected\";\n                                    rejectedThenable.reason = error;\n                                }\n                            }); // Check one more time in case the thenable resolved synchronously\n                            switch(thenable.status){\n                                case \"fulfilled\":\n                                    {\n                                        var fulfilledThenable = thenable;\n                                        return fulfilledThenable.value;\n                                    }\n                                case \"rejected\":\n                                    {\n                                        var rejectedThenable = thenable;\n                                        throw rejectedThenable.reason;\n                                    }\n                            }\n                        } // Suspend.\n                        //\n                        // Throwing here is an implementation detail that allows us to unwind the\n                        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n                        // opaque placeholder value instead of the actual thenable. If it doesn't\n                        // get captured by the work loop, log a warning, because that means\n                        // something in userspace must have caught it.\n                        suspendedThenable = thenable;\n                        throw SuspenseException;\n                    }\n            }\n        } // This is used to track the actual thenable that suspended so it can be\n        // passed to the rest of the Suspense implementation — which, for historical\n        // reasons, expects to receive a thenable.\n        var suspendedThenable = null;\n        function getSuspendedThenable() {\n            // This is called right after `use` suspends by throwing an exception. `use`\n            // throws an opaque value instead of the thenable itself so that it can't be\n            // caught in userspace. Then the work loop accesses the actual thenable using\n            // this function.\n            if (suspendedThenable === null) {\n                throw new Error(\"Expected a suspended thenable. This is a bug in React. Please file \" + \"an issue.\");\n            }\n            var thenable = suspendedThenable;\n            suspendedThenable = null;\n            return thenable;\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        var currentlyRenderingComponent = null;\n        var currentlyRenderingTask = null;\n        var currentlyRenderingRequest = null;\n        var currentlyRenderingKeyPath = null;\n        var firstWorkInProgressHook = null;\n        var workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook\n        var isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n        var didScheduleRenderPhaseUpdate = false; // Counts the number of useId hooks in this component\n        var localIdCounter = 0; // Chunks that should be pushed to the stream once the component\n        // finishes rendering.\n        // Counts the number of useFormState calls in this component\n        var formStateCounter = 0; // The index of the useFormState hook that matches the one passed in at the\n        // root during an MPA navigation, if any.\n        var formStateMatchingIndex = -1; // Counts the number of use(thenable) calls in this component\n        var thenableIndexCounter = 0;\n        var thenableState = null; // Lazily created map of render-phase updates\n        var renderPhaseUpdates = null; // Counter to prevent infinite loops.\n        var numberOfReRenders = 0;\n        var RE_RENDER_LIMIT = 25;\n        var isInHookUserCodeInDev = false; // In DEV, this is the name of the currently executing primitive hook\n        var currentHookNameInDev;\n        function resolveCurrentlyRenderingComponent() {\n            if (currentlyRenderingComponent === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n            }\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" + \"You can only call Hooks at the top level of your React function. \" + \"For more information, see \" + \"https://reactjs.org/link/rules-of-hooks\");\n                }\n            }\n            return currentlyRenderingComponent;\n        }\n        function areHookInputsEqual(nextDeps, prevDeps) {\n            if (prevDeps === null) {\n                {\n                    error(\"%s received a final argument during this render, but not during \" + \"the previous render. Even though the final argument is optional, \" + \"its type cannot change between renders.\", currentHookNameInDev);\n                }\n                return false;\n            }\n            {\n                // Don't bother comparing lengths in prod because these arrays should be\n                // passed inline.\n                if (nextDeps.length !== prevDeps.length) {\n                    error(\"The final argument passed to %s changed size between renders. The \" + \"order and size of this array must remain constant.\\n\\n\" + \"Previous: %s\\n\" + \"Incoming: %s\", currentHookNameInDev, \"[\" + nextDeps.join(\", \") + \"]\", \"[\" + prevDeps.join(\", \") + \"]\");\n                }\n            }\n            for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){\n                // $FlowFixMe[incompatible-use] found when upgrading Flow\n                if (objectIs(nextDeps[i], prevDeps[i])) {\n                    continue;\n                }\n                return false;\n            }\n            return true;\n        }\n        function createHook() {\n            if (numberOfReRenders > 0) {\n                throw new Error(\"Rendered more hooks than during the previous render\");\n            }\n            return {\n                memoizedState: null,\n                queue: null,\n                next: null\n            };\n        }\n        function createWorkInProgressHook() {\n            if (workInProgressHook === null) {\n                // This is the first hook in the list\n                if (firstWorkInProgressHook === null) {\n                    isReRender = false;\n                    firstWorkInProgressHook = workInProgressHook = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = firstWorkInProgressHook;\n                }\n            } else {\n                if (workInProgressHook.next === null) {\n                    isReRender = false; // Append to the end of the list\n                    workInProgressHook = workInProgressHook.next = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = workInProgressHook.next;\n                }\n            }\n            return workInProgressHook;\n        }\n        function prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {\n            currentlyRenderingComponent = componentIdentity;\n            currentlyRenderingTask = task;\n            currentlyRenderingRequest = request;\n            currentlyRenderingKeyPath = keyPath;\n            {\n                isInHookUserCodeInDev = false;\n            }\n            // didScheduleRenderPhaseUpdate = false;\n            // firstWorkInProgressHook = null;\n            // numberOfReRenders = 0;\n            // renderPhaseUpdates = null;\n            // workInProgressHook = null;\n            localIdCounter = 0;\n            formStateCounter = 0;\n            formStateMatchingIndex = -1;\n            thenableIndexCounter = 0;\n            thenableState = prevThenableState;\n        }\n        function finishHooks(Component, props, children, refOrContext) {\n            // This must be called after every function component to prevent hooks from\n            // being used in classes.\n            while(didScheduleRenderPhaseUpdate){\n                // Updates were scheduled during the render phase. They are stored in\n                // the `renderPhaseUpdates` map. Call the component again, reusing the\n                // work-in-progress hooks and applying the additional updates on top. Keep\n                // restarting until no more updates are scheduled.\n                didScheduleRenderPhaseUpdate = false;\n                localIdCounter = 0;\n                formStateCounter = 0;\n                formStateMatchingIndex = -1;\n                thenableIndexCounter = 0;\n                numberOfReRenders += 1; // Start over from the beginning of the list\n                workInProgressHook = null;\n                children = Component(props, refOrContext);\n            }\n            resetHooksState();\n            return children;\n        }\n        function getThenableStateAfterSuspending() {\n            var state = thenableState;\n            thenableState = null;\n            return state;\n        }\n        function checkDidRenderIdHook() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            var didRenderIdHook = localIdCounter !== 0;\n            return didRenderIdHook;\n        }\n        function getFormStateCount() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            return formStateCounter;\n        }\n        function getFormStateMatchingIndex() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            return formStateMatchingIndex;\n        } // Reset the internal hooks state if an error occurs while rendering a component\n        function resetHooksState() {\n            {\n                isInHookUserCodeInDev = false;\n            }\n            currentlyRenderingComponent = null;\n            currentlyRenderingTask = null;\n            currentlyRenderingRequest = null;\n            currentlyRenderingKeyPath = null;\n            didScheduleRenderPhaseUpdate = false;\n            firstWorkInProgressHook = null;\n            numberOfReRenders = 0;\n            renderPhaseUpdates = null;\n            workInProgressHook = null;\n        }\n        function readContext(context) {\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n                }\n            }\n            return readContext$1(context);\n        }\n        function useContext(context) {\n            {\n                currentHookNameInDev = \"useContext\";\n            }\n            resolveCurrentlyRenderingComponent();\n            return readContext$1(context);\n        }\n        function basicStateReducer(state, action) {\n            // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n            return typeof action === \"function\" ? action(state) : action;\n        }\n        function useState(initialState) {\n            {\n                currentHookNameInDev = \"useState\";\n            }\n            return useReducer(basicStateReducer, initialState);\n        }\n        function useReducer(reducer, initialArg, init) {\n            {\n                if (reducer !== basicStateReducer) {\n                    currentHookNameInDev = \"useReducer\";\n                }\n            }\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            if (isReRender) {\n                // This is a re-render. Apply the new render phase updates to the previous\n                // current hook.\n                var queue = workInProgressHook.queue;\n                var dispatch = queue.dispatch;\n                if (renderPhaseUpdates !== null) {\n                    // Render phase updates are stored in a map of queue -> linked list\n                    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                    if (firstRenderPhaseUpdate !== undefined) {\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        renderPhaseUpdates.delete(queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        var newState = workInProgressHook.memoizedState;\n                        var update = firstRenderPhaseUpdate;\n                        do {\n                            // Process this render phase update. We don't have to check the\n                            // priority because it will always be the same as the current\n                            // render's.\n                            var action = update.action;\n                            {\n                                isInHookUserCodeInDev = true;\n                            }\n                            newState = reducer(newState, action);\n                            {\n                                isInHookUserCodeInDev = false;\n                            }\n                            update = update.next;\n                        }while (update !== null); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        workInProgressHook.memoizedState = newState;\n                        return [\n                            newState,\n                            dispatch\n                        ];\n                    }\n                } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    dispatch\n                ];\n            } else {\n                {\n                    isInHookUserCodeInDev = true;\n                }\n                var initialState;\n                if (reducer === basicStateReducer) {\n                    // Special case for `useState`.\n                    initialState = typeof initialArg === \"function\" ? initialArg() : initialArg;\n                } else {\n                    initialState = init !== undefined ? init(initialArg) : initialArg;\n                }\n                {\n                    isInHookUserCodeInDev = false;\n                }\n                workInProgressHook.memoizedState = initialState; // $FlowFixMe[incompatible-use] found when upgrading Flow\n                var _queue = workInProgressHook.queue = {\n                    last: null,\n                    dispatch: null\n                };\n                var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    _dispatch\n                ];\n            }\n        }\n        function useMemo(nextCreate, deps) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            if (workInProgressHook !== null) {\n                var prevState = workInProgressHook.memoizedState;\n                if (prevState !== null) {\n                    if (nextDeps !== null) {\n                        var prevDeps = prevState[1];\n                        if (areHookInputsEqual(nextDeps, prevDeps)) {\n                            return prevState[0];\n                        }\n                    }\n                }\n            }\n            {\n                isInHookUserCodeInDev = true;\n            }\n            var nextValue = nextCreate();\n            {\n                isInHookUserCodeInDev = false;\n            }\n            workInProgressHook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function useRef(initialValue) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var previousRef = workInProgressHook.memoizedState;\n            if (previousRef === null) {\n                var ref = {\n                    current: initialValue\n                };\n                {\n                    Object.seal(ref);\n                }\n                workInProgressHook.memoizedState = ref;\n                return ref;\n            } else {\n                return previousRef;\n            }\n        }\n        function dispatchAction(componentIdentity, queue, action) {\n            if (numberOfReRenders >= RE_RENDER_LIMIT) {\n                throw new Error(\"Too many re-renders. React limits the number of renders to prevent \" + \"an infinite loop.\");\n            }\n            if (componentIdentity === currentlyRenderingComponent) {\n                // This is a render phase update. Stash it in a lazily-created map of\n                // queue -> linked list of updates. After this render pass, we'll restart\n                // and apply the stashed updates on top of the work-in-progress hook.\n                didScheduleRenderPhaseUpdate = true;\n                var update = {\n                    action: action,\n                    next: null\n                };\n                if (renderPhaseUpdates === null) {\n                    renderPhaseUpdates = new Map();\n                }\n                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                if (firstRenderPhaseUpdate === undefined) {\n                    // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    renderPhaseUpdates.set(queue, update);\n                } else {\n                    // Append the update to the end of the list.\n                    var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n                    while(lastRenderPhaseUpdate.next !== null){\n                        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n                    }\n                    lastRenderPhaseUpdate.next = update;\n                }\n            }\n        }\n        function useCallback(callback, deps) {\n            return useMemo(function() {\n                return callback;\n            }, deps);\n        }\n        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            if (getServerSnapshot === undefined) {\n                throw new Error(\"Missing getServerSnapshot, which is required for \" + \"server-rendered content. Will revert to client rendering.\");\n            }\n            return getServerSnapshot();\n        }\n        function useDeferredValue(value, initialValue) {\n            resolveCurrentlyRenderingComponent();\n            {\n                return value;\n            }\n        }\n        function unsupportedStartTransition() {\n            throw new Error(\"startTransition cannot be called during server rendering.\");\n        }\n        function useTransition() {\n            resolveCurrentlyRenderingComponent();\n            return [\n                false,\n                unsupportedStartTransition\n            ];\n        }\n        function useHostTransitionStatus() {\n            resolveCurrentlyRenderingComponent();\n            return NotPendingTransition;\n        }\n        function unsupportedSetOptimisticState() {\n            throw new Error(\"Cannot update optimistic state while rendering.\");\n        }\n        function useOptimistic(passthrough, reducer) {\n            resolveCurrentlyRenderingComponent();\n            return [\n                passthrough,\n                unsupportedSetOptimisticState\n            ];\n        }\n        function createPostbackFormStateKey(permalink, componentKeyPath, hookIndex) {\n            if (permalink !== undefined) {\n                // Don't bother to hash a permalink-based key since it's already short.\n                return \"p\" + permalink;\n            } else {\n                // Append a node to the key path that represents the form state hook.\n                var keyPath = [\n                    componentKeyPath,\n                    null,\n                    hookIndex\n                ]; // Key paths are hashed to reduce the size. It does not need to be secure,\n                // and it's more important that it's fast than that it's completely\n                // collision-free.\n                var keyPathHash = createFastHash(JSON.stringify(keyPath));\n                return \"k\" + keyPathHash;\n            }\n        }\n        function useFormState(action, initialState, permalink) {\n            resolveCurrentlyRenderingComponent(); // Count the number of useFormState hooks per component. We also use this to\n            // track the position of this useFormState hook relative to the other ones in\n            // this component, so we can generate a unique key for each one.\n            var formStateHookIndex = formStateCounter++;\n            var request = currentlyRenderingRequest; // $FlowIgnore[prop-missing]\n            var formAction = action.$$FORM_ACTION;\n            if (typeof formAction === \"function\") {\n                // This is a server action. These have additional features to enable\n                // MPA-style form submissions with progressive enhancement.\n                // TODO: If the same permalink is passed to multiple useFormStates, and\n                // they all have the same action signature, Fizz will pass the postback\n                // state to all of them. We should probably only pass it to the first one,\n                // and/or warn.\n                // The key is lazily generated and deduped so the that the keypath doesn't\n                // get JSON.stringify-ed unnecessarily, and at most once.\n                var nextPostbackStateKey = null; // Determine the current form state. If we received state during an MPA form\n                // submission, then we will reuse that, if the action identity matches.\n                // Otherwise we'll use the initial state argument. We will emit a comment\n                // marker into the stream that indicates whether the state was reused.\n                var state = initialState;\n                var componentKeyPath = currentlyRenderingKeyPath;\n                var postbackFormState = getFormState(request); // $FlowIgnore[prop-missing]\n                var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;\n                if (postbackFormState !== null && typeof isSignatureEqual === \"function\") {\n                    var postbackKey = postbackFormState[1];\n                    var postbackReferenceId = postbackFormState[2];\n                    var postbackBoundArity = postbackFormState[3];\n                    if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {\n                        nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n                        if (postbackKey === nextPostbackStateKey) {\n                            // This was a match\n                            formStateMatchingIndex = formStateHookIndex; // Reuse the state that was submitted by the form.\n                            state = postbackFormState[0];\n                        }\n                    }\n                } // Bind the state to the first argument of the action.\n                var boundAction = action.bind(null, state); // Wrap the action so the return value is void.\n                var dispatch = function(payload) {\n                    boundAction(payload);\n                }; // $FlowIgnore[prop-missing]\n                if (typeof boundAction.$$FORM_ACTION === \"function\") {\n                    // $FlowIgnore[prop-missing]\n                    dispatch.$$FORM_ACTION = function(prefix) {\n                        var metadata = boundAction.$$FORM_ACTION(prefix); // Override the action URL\n                        if (permalink !== undefined) {\n                            {\n                                checkAttributeStringCoercion(permalink, \"target\");\n                            }\n                            permalink += \"\";\n                            metadata.action = permalink;\n                        }\n                        var formData = metadata.data;\n                        if (formData) {\n                            if (nextPostbackStateKey === null) {\n                                nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n                            }\n                            formData.append(\"$ACTION_KEY\", nextPostbackStateKey);\n                        }\n                        return metadata;\n                    };\n                }\n                return [\n                    state,\n                    dispatch\n                ];\n            } else {\n                // This is not a server action, so the implementation is much simpler.\n                // Bind the state to the first argument of the action.\n                var _boundAction = action.bind(null, initialState); // Wrap the action so the return value is void.\n                var _dispatch2 = function(payload) {\n                    _boundAction(payload);\n                };\n                return [\n                    initialState,\n                    _dispatch2\n                ];\n            }\n        }\n        function useId() {\n            var task = currentlyRenderingTask;\n            var treeId = getTreeId(task.treeContext);\n            var resumableState = currentResumableState;\n            if (resumableState === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component.\");\n            }\n            var localId = localIdCounter++;\n            return makeId(resumableState, treeId, localId);\n        }\n        function use(usable) {\n            if (usable !== null && typeof usable === \"object\") {\n                // $FlowFixMe[method-unbinding]\n                if (typeof usable.then === \"function\") {\n                    // This is a thenable.\n                    var thenable = usable;\n                    return unwrapThenable(thenable);\n                } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = usable;\n                    return readContext(context);\n                }\n            } // eslint-disable-next-line react-internal/safe-string-coercion\n            throw new Error(\"An unsupported type was passed to use(): \" + String(usable));\n        }\n        function unwrapThenable(thenable) {\n            var index = thenableIndexCounter;\n            thenableIndexCounter += 1;\n            if (thenableState === null) {\n                thenableState = createThenableState();\n            }\n            return trackUsedThenable(thenableState, thenable, index);\n        }\n        function unsupportedRefresh() {\n            throw new Error(\"Cache cannot be refreshed during server rendering.\");\n        }\n        function useCacheRefresh() {\n            return unsupportedRefresh;\n        }\n        function noop$1() {}\n        var HooksDispatcher = {\n            readContext: readContext,\n            use: use,\n            useContext: useContext,\n            useMemo: useMemo,\n            useReducer: useReducer,\n            useRef: useRef,\n            useState: useState,\n            useInsertionEffect: noop$1,\n            useLayoutEffect: noop$1,\n            useCallback: useCallback,\n            // useImperativeHandle is not run in the server environment\n            useImperativeHandle: noop$1,\n            // Effects are not run in the server environment.\n            useEffect: noop$1,\n            // Debugging effect\n            useDebugValue: noop$1,\n            useDeferredValue: useDeferredValue,\n            useTransition: useTransition,\n            useId: useId,\n            // Subscriptions are not setup in a server environment.\n            useSyncExternalStore: useSyncExternalStore\n        };\n        {\n            HooksDispatcher.useCacheRefresh = useCacheRefresh;\n        }\n        {\n            HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;\n        }\n        {\n            HooksDispatcher.useOptimistic = useOptimistic;\n            HooksDispatcher.useFormState = useFormState;\n        }\n        var currentResumableState = null;\n        function setCurrentResumableState(resumableState) {\n            currentResumableState = resumableState;\n        }\n        function getCacheSignal() {\n            throw new Error(\"Not implemented.\");\n        }\n        function getCacheForType(resourceType) {\n            throw new Error(\"Not implemented.\");\n        }\n        var DefaultCacheDispatcher = {\n            getCacheSignal: getCacheSignal,\n            getCacheForType: getCacheForType\n        };\n        function getStackByComponentStackNode(componentStack) {\n            try {\n                var info = \"\";\n                var node = componentStack;\n                do {\n                    switch(node.tag){\n                        case 0:\n                            info += describeBuiltInComponentFrame(node.type, null, null);\n                            break;\n                        case 1:\n                            info += describeFunctionComponentFrame(node.type, null, null);\n                            break;\n                        case 2:\n                            info += describeClassComponentFrame(node.type, null, null);\n                            break;\n                    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                    node = node.parent;\n                }while (node);\n                return info;\n            } catch (x) {\n                return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame; // Linked list representing the identity of a component given the component/tag name and key.\n        // The name might be minified but we assume that it's going to be the same generated name. Typically\n        // because it's just the same compiled output in practice.\n        // resume with segmentID at the index\n        var CLIENT_RENDERED = 4; // if it errors or infinitely suspends\n        var PENDING = 0;\n        var COMPLETED = 1;\n        var FLUSHED = 2;\n        var ABORTED = 3;\n        var ERRORED = 4;\n        var POSTPONED = 5;\n        var OPEN = 0;\n        var CLOSING = 1;\n        var CLOSED = 2; // This is a default heuristic for how to split up the HTML content into progressive\n        // loading. Our goal is to be able to display additional new content about every 500ms.\n        // Faster than that is unnecessary and should be throttled on the client. It also\n        // adds unnecessary overhead to do more splits. We don't know if it's a higher or lower\n        // end device but higher end suffer less from the overhead than lower end does from\n        // not getting small enough pieces. We error on the side of low end.\n        // We base this on low end 3G speeds which is about 500kbits per second. We assume\n        // that there can be a reasonable drop off from max bandwidth which leaves you with\n        // as little as 80%. We can receive half of that each 500ms - at best. In practice,\n        // a little bandwidth is lost to processing and contention - e.g. CSS and images that\n        // are downloaded along with the main content. So we estimate about half of that to be\n        // the lower end throughput. In other words, we expect that you can at least show\n        // about 12.5kb of content per 500ms. Not counting starting latency for the first\n        // paint.\n        // 500 * 1024 / 8 * .8 * 0.5 / 2\n        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;\n        function defaultErrorHandler(error) {\n            console[\"error\"](error); // Don't transform to our wrapper\n            return null;\n        }\n        function noop() {}\n        function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {\n            prepareHostDispatcher();\n            var pingedTasks = [];\n            var abortSet = new Set();\n            var request = {\n                destination: null,\n                flushScheduled: false,\n                resumableState: resumableState,\n                renderState: renderState,\n                rootFormatContext: rootFormatContext,\n                progressiveChunkSize: progressiveChunkSize === undefined ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,\n                status: OPEN,\n                fatalError: null,\n                nextSegmentId: 0,\n                allPendingTasks: 0,\n                pendingRootTasks: 0,\n                completedRootSegment: null,\n                abortableTasks: abortSet,\n                pingedTasks: pingedTasks,\n                clientRenderedBoundaries: [],\n                completedBoundaries: [],\n                partialBoundaries: [],\n                trackedPostpones: null,\n                onError: onError === undefined ? defaultErrorHandler : onError,\n                onPostpone: onPostpone === undefined ? noop : onPostpone,\n                onAllReady: onAllReady === undefined ? noop : onAllReady,\n                onShellReady: onShellReady === undefined ? noop : onShellReady,\n                onShellError: onShellError === undefined ? noop : onShellError,\n                onFatalError: onFatalError === undefined ? noop : onFatalError,\n                formState: formState === undefined ? null : formState\n            }; // This segment represents the root fallback.\n            var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false); // There is no parent so conceptually, we're unblocked to flush this segment.\n            rootSegment.parentFlushed = true;\n            var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext);\n            pingedTasks.push(rootTask);\n            return request;\n        }\n        var currentRequest = null;\n        function resolveRequest() {\n            if (currentRequest) return currentRequest;\n            {\n                var store = requestStorage.getStore();\n                if (store) return store;\n            }\n            return null;\n        }\n        function pingTask(request, task) {\n            var pingedTasks = request.pingedTasks;\n            pingedTasks.push(task);\n            if (request.pingedTasks.length === 1) {\n                request.flushScheduled = request.destination !== null;\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n        }\n        function createSuspenseBoundary(request, fallbackAbortableTasks) {\n            return {\n                status: PENDING,\n                rootSegmentID: -1,\n                parentFlushed: false,\n                pendingTasks: 0,\n                completedSegments: [],\n                byteSize: 0,\n                fallbackAbortableTasks: fallbackAbortableTasks,\n                errorDigest: null,\n                resources: createBoundaryResources(),\n                trackedContentKeyPath: null,\n                trackedFallbackNode: null\n            };\n        }\n        function createRenderTask(request, thenableState, node, childIndex, blockedBoundary, blockedSegment, abortSet, keyPath, formatContext, legacyContext, context, treeContext) {\n            request.allPendingTasks++;\n            if (blockedBoundary === null) {\n                request.pendingRootTasks++;\n            } else {\n                blockedBoundary.pendingTasks++;\n            }\n            var task = {\n                replay: null,\n                node: node,\n                childIndex: childIndex,\n                ping: function() {\n                    return pingTask(request, task);\n                },\n                blockedBoundary: blockedBoundary,\n                blockedSegment: blockedSegment,\n                abortSet: abortSet,\n                keyPath: keyPath,\n                formatContext: formatContext,\n                legacyContext: legacyContext,\n                context: context,\n                treeContext: treeContext,\n                thenableState: thenableState\n            };\n            {\n                task.componentStack = null;\n            }\n            abortSet.add(task);\n            return task;\n        }\n        function createReplayTask(request, thenableState, replay, node, childIndex, blockedBoundary, abortSet, keyPath, formatContext, legacyContext, context, treeContext) {\n            request.allPendingTasks++;\n            if (blockedBoundary === null) {\n                request.pendingRootTasks++;\n            } else {\n                blockedBoundary.pendingTasks++;\n            }\n            replay.pendingTasks++;\n            var task = {\n                replay: replay,\n                node: node,\n                childIndex: childIndex,\n                ping: function() {\n                    return pingTask(request, task);\n                },\n                blockedBoundary: blockedBoundary,\n                blockedSegment: null,\n                abortSet: abortSet,\n                keyPath: keyPath,\n                formatContext: formatContext,\n                legacyContext: legacyContext,\n                context: context,\n                treeContext: treeContext,\n                thenableState: thenableState\n            };\n            {\n                task.componentStack = null;\n            }\n            abortSet.add(task);\n            return task;\n        }\n        function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {\n            return {\n                status: PENDING,\n                id: -1,\n                // lazily assigned later\n                index: index,\n                parentFlushed: false,\n                chunks: [],\n                children: [],\n                parentFormatContext: parentFormatContext,\n                boundary: boundary,\n                lastPushedText: lastPushedText,\n                textEmbedded: textEmbedded\n            };\n        } // DEV-only global reference to the currently executing task\n        var currentTaskInDEV = null;\n        function getCurrentStackInDEV() {\n            {\n                if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {\n                    return \"\";\n                }\n                return getStackByComponentStackNode(currentTaskInDEV.componentStack);\n            }\n        }\n        function pushBuiltInComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 0,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushFunctionComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 1,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushClassComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 2,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function popComponentStackInDEV(task) {\n            {\n                if (task.componentStack === null) {\n                    error(\"Unexpectedly popped too many stack frames. This is a bug in React.\");\n                } else {\n                    task.componentStack = task.componentStack.parent;\n                }\n            }\n        } // stash the component stack of an unwinding error until it is processed\n        var lastBoundaryErrorComponentStackDev = null;\n        function captureBoundaryErrorDetailsDev(boundary, error) {\n            {\n                var errorMessage;\n                if (typeof error === \"string\") {\n                    errorMessage = error;\n                } else if (error && typeof error.message === \"string\") {\n                    errorMessage = error.message;\n                } else {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    errorMessage = String(error);\n                }\n                var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();\n                lastBoundaryErrorComponentStackDev = null;\n                boundary.errorMessage = errorMessage;\n                boundary.errorComponentStack = errorComponentStack;\n            }\n        }\n        function logRecoverableError(request, error) {\n            // If this callback errors, we intentionally let that error bubble up to become a fatal error\n            // so that someone fixes the error reporting instead of hiding it.\n            var errorDigest = request.onError(error);\n            if (errorDigest != null && typeof errorDigest !== \"string\") {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                throw new Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n            }\n            return errorDigest;\n        }\n        function fatalError(request, error) {\n            // This is called outside error handling code such as if the root errors outside\n            // a suspense boundary or if the root suspense boundary's fallback errors.\n            // It's also called if React itself or its host configs errors.\n            var onShellError = request.onShellError;\n            onShellError(error);\n            var onFatalError = request.onFatalError;\n            onFatalError(error);\n            if (request.destination !== null) {\n                request.status = CLOSED;\n                closeWithError(request.destination, error);\n            } else {\n                request.status = CLOSING;\n                request.fatalError = error;\n            }\n        }\n        function renderSuspenseBoundary(request, someTask, keyPath, props) {\n            if (someTask.replay !== null) {\n                // If we're replaying through this pass, it means we're replaying through\n                // an already completed Suspense boundary. It's too late to do anything about it\n                // so we can just render through it.\n                var _prevKeyPath = someTask.keyPath;\n                someTask.keyPath = keyPath;\n                var _content = props.children;\n                try {\n                    renderNode(request, someTask, _content, -1);\n                } finally{\n                    someTask.keyPath = _prevKeyPath;\n                }\n                return;\n            } // $FlowFixMe: Refined.\n            var task = someTask;\n            pushBuiltInComponentStackInDEV(task, \"Suspense\");\n            var prevKeyPath = task.keyPath;\n            var parentBoundary = task.blockedBoundary;\n            var parentSegment = task.blockedSegment; // Each time we enter a suspense boundary, we split out into a new segment for\n            // the fallback so that we can later replace that segment with the content.\n            // This also lets us split out the main content even if it doesn't suspend,\n            // in case it ends up generating a large subtree of content.\n            var fallback = props.fallback;\n            var content = props.children;\n            var fallbackAbortSet = new Set();\n            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n            if (request.trackedPostpones !== null) {\n                newBoundary.trackedContentKeyPath = keyPath;\n            }\n            var insertionIndex = parentSegment.chunks.length; // The children of the boundary segment is actually the fallback.\n            var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, task.formatContext, false, false);\n            parentSegment.children.push(boundarySegment); // The parentSegment has a child Segment at this index so we reset the lastPushedText marker on the parent\n            parentSegment.lastPushedText = false; // This segment is the actual child content. We can start rendering that immediately.\n            var contentRootSegment = createPendingSegment(request, 0, null, task.formatContext, false, false); // We mark the root segment as having its parent flushed. It's not really flushed but there is\n            // no parent segment so there's nothing to wait on.\n            contentRootSegment.parentFlushed = true; // Currently this is running synchronously. We could instead schedule this to pingedTasks.\n            // I suspect that there might be some efficiency benefits from not creating the suspended task\n            // and instead just using the stack if possible.\n            // TODO: Call this directly instead of messing with saving and restoring contexts.\n            // We can reuse the current context and task to render the content immediately without\n            // context switching. We just need to temporarily switch which boundary and which segment\n            // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n            task.blockedBoundary = newBoundary;\n            task.blockedSegment = contentRootSegment;\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, newBoundary.resources);\n            }\n            task.keyPath = keyPath;\n            try {\n                // We use the safe form because we don't handle suspending here. Only error handling.\n                renderNode(request, task, content, -1);\n                pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);\n                contentRootSegment.status = COMPLETED;\n                queueCompletedSegment(newBoundary, contentRootSegment);\n                if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {\n                    newBoundary.status = COMPLETED; // This must have been the last segment we were waiting on. This boundary is now complete.\n                    // Therefore we won't need the fallback. We early return so that we don't have to create\n                    // the fallback.\n                    popComponentStackInDEV(task);\n                    return;\n                }\n            } catch (error) {\n                contentRootSegment.status = ERRORED;\n                newBoundary.status = CLIENT_RENDERED;\n                var errorDigest;\n                {\n                    errorDigest = logRecoverableError(request, error);\n                }\n                newBoundary.errorDigest = errorDigest;\n                {\n                    captureBoundaryErrorDetailsDev(newBoundary, error);\n                }\n            // We don't need to schedule any task because we know the parent has written yet.\n            // We do need to fallthrough to create the fallback though.\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, parentBoundary ? parentBoundary.resources : null);\n                }\n                task.blockedBoundary = parentBoundary;\n                task.blockedSegment = parentSegment;\n                task.keyPath = prevKeyPath;\n            }\n            var fallbackKeyPath = [\n                keyPath[0],\n                \"Suspense Fallback\",\n                keyPath[2]\n            ];\n            var trackedPostpones = request.trackedPostpones;\n            if (trackedPostpones !== null) {\n                // We create a detached replay node to track any postpones inside the fallback.\n                var fallbackReplayNode = [\n                    fallbackKeyPath[1],\n                    fallbackKeyPath[2],\n                    [],\n                    null\n                ];\n                trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);\n                if (newBoundary.status === POSTPONED) {\n                    // This must exist now.\n                    var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);\n                    boundaryReplayNode[4] = fallbackReplayNode;\n                } else {\n                    // We might not inject it into the postponed tree, unless the content actually\n                    // postpones too. We need to keep track of it until that happpens.\n                    newBoundary.trackedFallbackNode = fallbackReplayNode;\n                }\n            } // We create suspended task for the fallback because we don't want to actually work\n            // on it yet in case we finish the main content, so we queue for later.\n            var suspendedFallbackTask = createRenderTask(request, null, fallback, -1, parentBoundary, boundarySegment, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                suspendedFallbackTask.componentStack = task.componentStack;\n            }\n            // on preparing fallbacks if we don't have any more main content to task on.\n            request.pingedTasks.push(suspendedFallbackTask);\n            popComponentStackInDEV(task);\n        }\n        function replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {\n            pushBuiltInComponentStackInDEV(task, \"Suspense\");\n            var prevKeyPath = task.keyPath;\n            var previousReplaySet = task.replay;\n            var parentBoundary = task.blockedBoundary;\n            var content = props.children;\n            var fallback = props.fallback;\n            var fallbackAbortSet = new Set();\n            var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n            resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n            resumedBoundary.rootSegmentID = id; // We can reuse the current context and task to render the content immediately without\n            // context switching. We just need to temporarily switch which boundary and replay node\n            // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n            task.blockedBoundary = resumedBoundary;\n            task.replay = {\n                nodes: childNodes,\n                slots: childSlots,\n                pendingTasks: 1\n            };\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, resumedBoundary.resources);\n            }\n            try {\n                // We use the safe form because we don't handle suspending here. Only error handling.\n                renderNode(request, task, content, -1);\n                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n                    throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                }\n                task.replay.pendingTasks--;\n                if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {\n                    resumedBoundary.status = COMPLETED;\n                    request.completedBoundaries.push(resumedBoundary); // This must have been the last segment we were waiting on. This boundary is now complete.\n                    // Therefore we won't need the fallback. We early return so that we don't have to create\n                    // the fallback.\n                    popComponentStackInDEV(task);\n                    return;\n                }\n            } catch (error) {\n                resumedBoundary.status = CLIENT_RENDERED;\n                var errorDigest;\n                {\n                    errorDigest = logRecoverableError(request, error);\n                }\n                resumedBoundary.errorDigest = errorDigest;\n                {\n                    captureBoundaryErrorDetailsDev(resumedBoundary, error);\n                }\n                task.replay.pendingTasks--; // The parent already flushed in the prerender so we need to schedule this to be emitted.\n                request.clientRenderedBoundaries.push(resumedBoundary); // We don't need to decrement any task numbers because we didn't spawn any new task.\n            // We don't need to schedule any task because we know the parent has written yet.\n            // We do need to fallthrough to create the fallback though.\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, parentBoundary ? parentBoundary.resources : null);\n                }\n                task.blockedBoundary = parentBoundary;\n                task.replay = previousReplaySet;\n                task.keyPath = prevKeyPath;\n            }\n            var fallbackKeyPath = [\n                keyPath[0],\n                \"Suspense Fallback\",\n                keyPath[2]\n            ]; // We create suspended task for the fallback because we don't want to actually work\n            // on it yet in case we finish the main content, so we queue for later.\n            var fallbackReplay = {\n                nodes: fallbackNodes,\n                slots: fallbackSlots,\n                pendingTasks: 0\n            };\n            var suspendedFallbackTask = createReplayTask(request, null, fallbackReplay, fallback, -1, parentBoundary, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                suspendedFallbackTask.componentStack = task.componentStack;\n            }\n            // on preparing fallbacks if we don't have any more main content to task on.\n            request.pingedTasks.push(suspendedFallbackTask);\n            popComponentStackInDEV(task);\n        }\n        function renderHostElement(request, task, keyPath, type, props) {\n            pushBuiltInComponentStackInDEV(task, type);\n            var segment = task.blockedSegment;\n            if (segment === null) {\n                // Replay\n                var children = props.children; // TODO: Make this a Config for replaying.\n                var prevContext = task.formatContext;\n                var prevKeyPath = task.keyPath;\n                task.formatContext = getChildFormatContext(prevContext, type, props);\n                task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n                // need to pop back up and finish this subtree of HTML.\n                renderNode(request, task, children, -1); // We expect that errors will fatal the whole task and that we don't need\n                // the correct context. Therefore this is not in a finally.\n                task.formatContext = prevContext;\n                task.keyPath = prevKeyPath;\n            } else {\n                // Render\n                var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.formatContext, segment.lastPushedText);\n                segment.lastPushedText = false;\n                var _prevContext = task.formatContext;\n                var _prevKeyPath2 = task.keyPath;\n                task.formatContext = getChildFormatContext(_prevContext, type, props);\n                task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n                // need to pop back up and finish this subtree of HTML.\n                renderNode(request, task, _children, -1); // We expect that errors will fatal the whole task and that we don't need\n                // the correct context. Therefore this is not in a finally.\n                task.formatContext = _prevContext;\n                task.keyPath = _prevKeyPath2;\n                pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);\n                segment.lastPushedText = false;\n            }\n            popComponentStackInDEV(task);\n        }\n        function shouldConstruct(Component) {\n            return Component.prototype && Component.prototype.isReactComponent;\n        }\n        function renderWithHooks(request, task, keyPath, prevThenableState, Component, props, secondArg) {\n            var componentIdentity = {};\n            prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);\n            var result = Component(props, secondArg);\n            return finishHooks(Component, props, result, secondArg);\n        }\n        function finishClassComponent(request, task, keyPath, instance, Component, props) {\n            var nextChildren = instance.render();\n            {\n                if (instance.props !== props) {\n                    if (!didWarnAboutReassigningProps) {\n                        error(\"It looks like %s is reassigning its own `this.props` while rendering. \" + \"This is not supported and can lead to confusing bugs.\", getComponentNameFromType(Component) || \"a component\");\n                    }\n                    didWarnAboutReassigningProps = true;\n                }\n            }\n            {\n                var childContextTypes = Component.childContextTypes;\n                if (childContextTypes !== null && childContextTypes !== undefined) {\n                    var previousContext = task.legacyContext;\n                    var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);\n                    task.legacyContext = mergedContext;\n                    renderNodeDestructive(request, task, null, nextChildren, -1);\n                    task.legacyContext = previousContext;\n                    return;\n                }\n            }\n            var prevKeyPath = task.keyPath;\n            task.keyPath = keyPath;\n            renderNodeDestructive(request, task, null, nextChildren, -1);\n            task.keyPath = prevKeyPath;\n        }\n        function renderClassComponent(request, task, keyPath, Component, props) {\n            pushClassComponentStackInDEV(task, Component);\n            var maskedContext = getMaskedContext(Component, task.legacyContext);\n            var instance = constructClassInstance(Component, props, maskedContext);\n            mountClassInstance(instance, Component, props, maskedContext);\n            finishClassComponent(request, task, keyPath, instance, Component, props);\n            popComponentStackInDEV(task);\n        }\n        var didWarnAboutBadClass = {};\n        var didWarnAboutModulePatternComponent = {};\n        var didWarnAboutContextTypeOnFunctionComponent = {};\n        var didWarnAboutGetDerivedStateOnFunctionComponent = {};\n        var didWarnAboutReassigningProps = false;\n        var didWarnAboutDefaultPropsOnFunctionComponent = {};\n        var didWarnAboutGenerators = false;\n        var didWarnAboutMaps = false;\n        var hasWarnedAboutUsingContextAsConsumer = false; // This would typically be a function component but we still support module pattern\n        // components for some reason.\n        function renderIndeterminateComponent(request, task, keyPath, prevThenableState, Component, props) {\n            var legacyContext;\n            {\n                legacyContext = getMaskedContext(Component, task.legacyContext);\n            }\n            pushFunctionComponentStackInDEV(task, Component);\n            {\n                if (Component.prototype && typeof Component.prototype.render === \"function\") {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutBadClass[componentName]) {\n                        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + \"This is likely to cause errors. Change %s to extend React.Component instead.\", componentName, componentName);\n                        didWarnAboutBadClass[componentName] = true;\n                    }\n                }\n            }\n            var value = renderWithHooks(request, task, keyPath, prevThenableState, Component, props, legacyContext);\n            var hasId = checkDidRenderIdHook();\n            var formStateCount = getFormStateCount();\n            var formStateMatchingIndex = getFormStateMatchingIndex();\n            {\n                // Support for module components is deprecated and is removed behind a flag.\n                // Whether or not it would crash later, we want to show a good message in DEV first.\n                if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                    var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName, _componentName, _componentName);\n                        didWarnAboutModulePatternComponent[_componentName] = true;\n                    }\n                }\n            }\n            if (// Eventually we'll delete this branch altogether.\n            typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                {\n                    var _componentName2 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName2]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName2, _componentName2, _componentName2);\n                        didWarnAboutModulePatternComponent[_componentName2] = true;\n                    }\n                }\n                mountClassInstance(value, Component, props, legacyContext);\n                finishClassComponent(request, task, keyPath, value, Component, props);\n            } else {\n                {\n                    validateFunctionComponentInDev(Component);\n                }\n                finishFunctionComponent(request, task, keyPath, value, hasId, formStateCount, formStateMatchingIndex);\n            }\n            popComponentStackInDEV(task);\n        }\n        function finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex) {\n            var didEmitFormStateMarkers = false;\n            if (formStateCount !== 0 && request.formState !== null) {\n                // For each useFormState hook, emit a marker that indicates whether we\n                // rendered using the form state passed at the root. We only emit these\n                // markers if form state is passed at the root.\n                var segment = task.blockedSegment;\n                if (segment === null) ;\n                else {\n                    didEmitFormStateMarkers = true;\n                    var target = segment.chunks;\n                    for(var i = 0; i < formStateCount; i++){\n                        if (i === formStateMatchingIndex) {\n                            pushFormStateMarkerIsMatching(target);\n                        } else {\n                            pushFormStateMarkerIsNotMatching(target);\n                        }\n                    }\n                }\n            }\n            var prevKeyPath = task.keyPath;\n            task.keyPath = keyPath;\n            if (hasId) {\n                // This component materialized an id. We treat this as its own level, with\n                // a single \"child\" slot.\n                var prevTreeContext = task.treeContext;\n                var totalChildren = 1;\n                var index = 0; // Modify the id context. Because we'll need to reset this if something\n                // suspends or errors, we'll use the non-destructive render path.\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n                renderNode(request, task, children, -1); // Like the other contexts, this does not need to be in a finally block\n                // because renderNode takes care of unwinding the stack.\n                task.treeContext = prevTreeContext;\n            } else if (didEmitFormStateMarkers) {\n                // If there were formState hooks, we must use the non-destructive path\n                // because this component is not a pure indirection; we emitted markers\n                // to the stream.\n                renderNode(request, task, children, -1);\n            } else {\n                // We're now successfully past this task, and we haven't modified the\n                // context stack. We don't have to pop back to the previous task every\n                // again, so we can use the destructive recursive form.\n                renderNodeDestructive(request, task, null, children, -1);\n            }\n            task.keyPath = prevKeyPath;\n        }\n        function validateFunctionComponentInDev(Component) {\n            {\n                if (Component) {\n                    if (Component.childContextTypes) {\n                        error(\"%s(...): childContextTypes cannot be defined on a function component.\", Component.displayName || Component.name || \"Component\");\n                    }\n                }\n                if (Component.defaultProps !== undefined) {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n                        error(\"%s: Support for defaultProps will be removed from function components \" + \"in a future major release. Use JavaScript default parameters instead.\", componentName);\n                        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n                    }\n                }\n                if (typeof Component.getDerivedStateFromProps === \"function\") {\n                    var _componentName3 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n                        error(\"%s: Function components do not support getDerivedStateFromProps.\", _componentName3);\n                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n                    }\n                }\n                if (typeof Component.contextType === \"object\" && Component.contextType !== null) {\n                    var _componentName4 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n                        error(\"%s: Function components do not support contextType.\", _componentName4);\n                        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n                    }\n                }\n            }\n        }\n        function resolveDefaultProps(Component, baseProps) {\n            if (Component && Component.defaultProps) {\n                // Resolve default props. Taken from ReactElement\n                var props = assign({}, baseProps);\n                var defaultProps = Component.defaultProps;\n                for(var propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n                return props;\n            }\n            return baseProps;\n        }\n        function renderForwardRef(request, task, keyPath, prevThenableState, type, props, ref) {\n            pushFunctionComponentStackInDEV(task, type.render);\n            var children = renderWithHooks(request, task, keyPath, prevThenableState, type.render, props, ref);\n            var hasId = checkDidRenderIdHook();\n            var formStateCount = getFormStateCount();\n            var formStateMatchingIndex = getFormStateMatchingIndex();\n            finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex);\n            popComponentStackInDEV(task);\n        }\n        function renderMemo(request, task, keyPath, prevThenableState, type, props, ref) {\n            var innerType = type.type;\n            var resolvedProps = resolveDefaultProps(innerType, props);\n            renderElement(request, task, keyPath, prevThenableState, innerType, resolvedProps, ref);\n        }\n        function renderContextConsumer(request, task, keyPath, context, props) {\n            // The logic below for Context differs depending on PROD or DEV mode. In\n            // DEV mode, we create a separate object for Context.Consumer that acts\n            // like a proxy to Context. This proxy object adds unnecessary code in PROD\n            // so we use the old behaviour (Context.Consumer references Context) to\n            // reduce size and overhead. The separate object references context via\n            // a property called \"_context\", which also gives us the ability to check\n            // in DEV mode if this property exists or not and warn if it does not.\n            {\n                if (context._context === undefined) {\n                    // This may be because it's a Context (rather than a Consumer).\n                    // Or it may be because it's older React where they're the same thing.\n                    // We only want to warn if we're sure it's a new React.\n                    if (context !== context.Consumer) {\n                        if (!hasWarnedAboutUsingContextAsConsumer) {\n                            hasWarnedAboutUsingContextAsConsumer = true;\n                            error(\"Rendering <Context> directly is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n                        }\n                    }\n                } else {\n                    context = context._context;\n                }\n            }\n            var render = props.children;\n            {\n                if (typeof render !== \"function\") {\n                    error(\"A context consumer was rendered with multiple children, or a child \" + \"that isn't a function. A context consumer expects a single child \" + \"that is a function. If you did pass a function, make sure there \" + \"is no trailing or leading whitespace around it.\");\n                }\n            }\n            var newValue = readContext$1(context);\n            var newChildren = render(newValue);\n            var prevKeyPath = task.keyPath;\n            task.keyPath = keyPath;\n            renderNodeDestructive(request, task, null, newChildren, -1);\n            task.keyPath = prevKeyPath;\n        }\n        function renderContextProvider(request, task, keyPath, type, props) {\n            var context = type._context;\n            var value = props.value;\n            var children = props.children;\n            var prevSnapshot;\n            {\n                prevSnapshot = task.context;\n            }\n            var prevKeyPath = task.keyPath;\n            task.context = pushProvider(context, value);\n            task.keyPath = keyPath;\n            renderNodeDestructive(request, task, null, children, -1);\n            task.context = popProvider(context);\n            task.keyPath = prevKeyPath;\n            {\n                if (prevSnapshot !== task.context) {\n                    error(\"Popping the context provider did not return back to the original snapshot. This is a bug in React.\");\n                }\n            }\n        }\n        function renderLazyComponent(request, task, keyPath, prevThenableState, lazyComponent, props, ref) {\n            pushBuiltInComponentStackInDEV(task, \"Lazy\");\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n            var Component = init(payload);\n            var resolvedProps = resolveDefaultProps(Component, props);\n            renderElement(request, task, keyPath, prevThenableState, Component, resolvedProps, ref);\n            popComponentStackInDEV(task);\n        }\n        function renderOffscreen(request, task, keyPath, props) {\n            var mode = props.mode;\n            if (mode === \"hidden\") ;\n            else {\n                // A visible Offscreen boundary is treated exactly like a fragment: a\n                // pure indirection.\n                var prevKeyPath = task.keyPath;\n                task.keyPath = keyPath;\n                renderNodeDestructive(request, task, null, props.children, -1);\n                task.keyPath = prevKeyPath;\n            }\n        }\n        function renderElement(request, task, keyPath, prevThenableState, type, props, ref) {\n            if (typeof type === \"function\") {\n                if (shouldConstruct(type)) {\n                    renderClassComponent(request, task, keyPath, type, props);\n                    return;\n                } else {\n                    renderIndeterminateComponent(request, task, keyPath, prevThenableState, type, props);\n                    return;\n                }\n            }\n            if (typeof type === \"string\") {\n                renderHostElement(request, task, keyPath, type, props);\n                return;\n            }\n            switch(type){\n                // LegacyHidden acts the same as a fragment. This only works because we\n                // currently assume that every instance of LegacyHidden is accompanied by a\n                // host component wrapper. In the hidden mode, the host component is given a\n                // `hidden` attribute, which ensures that the initial HTML is not visible.\n                // To support the use of LegacyHidden as a true fragment, without an extra\n                // DOM node, we would have to hide the initial HTML in some other way.\n                // TODO: Delete in LegacyHidden. It's an unstable API only used in the\n                // www build. As a migration step, we could add a special prop to Offscreen\n                // that simulates the old behavior (no hiding, no change to effects).\n                case REACT_LEGACY_HIDDEN_TYPE:\n                case REACT_DEBUG_TRACING_MODE_TYPE:\n                case REACT_STRICT_MODE_TYPE:\n                case REACT_PROFILER_TYPE:\n                case REACT_FRAGMENT_TYPE:\n                    {\n                        var prevKeyPath = task.keyPath;\n                        task.keyPath = keyPath;\n                        renderNodeDestructive(request, task, null, props.children, -1);\n                        task.keyPath = prevKeyPath;\n                        return;\n                    }\n                case REACT_OFFSCREEN_TYPE:\n                    {\n                        renderOffscreen(request, task, keyPath, props);\n                        return;\n                    }\n                case REACT_SUSPENSE_LIST_TYPE:\n                    {\n                        pushBuiltInComponentStackInDEV(task, \"SuspenseList\"); // TODO: SuspenseList should control the boundaries.\n                        var _prevKeyPath3 = task.keyPath;\n                        task.keyPath = keyPath;\n                        renderNodeDestructive(request, task, null, props.children, -1);\n                        task.keyPath = _prevKeyPath3;\n                        popComponentStackInDEV(task);\n                        return;\n                    }\n                case REACT_SCOPE_TYPE:\n                    {\n                        throw new Error(\"ReactDOMServer does not yet support scope components.\");\n                    }\n                case REACT_SUSPENSE_TYPE:\n                    {\n                        {\n                            renderSuspenseBoundary(request, task, keyPath, props);\n                        }\n                        return;\n                    }\n            }\n            if (typeof type === \"object\" && type !== null) {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        {\n                            renderForwardRef(request, task, keyPath, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_MEMO_TYPE:\n                        {\n                            renderMemo(request, task, keyPath, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_PROVIDER_TYPE:\n                        {\n                            renderContextProvider(request, task, keyPath, type, props);\n                            return;\n                        }\n                    case REACT_CONTEXT_TYPE:\n                        {\n                            renderContextConsumer(request, task, keyPath, type, props);\n                            return;\n                        }\n                    case REACT_LAZY_TYPE:\n                        {\n                            renderLazyComponent(request, task, keyPath, prevThenableState, type, props);\n                            return;\n                        }\n                }\n            }\n            var info = \"\";\n            {\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and \" + \"named imports.\";\n                }\n            }\n            throw new Error(\"Element type is invalid: expected a string (for built-in \" + \"components) or a class/function (for composite components) \" + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        }\n        function resumeNode(request, task, segmentId, node, childIndex) {\n            var prevReplay = task.replay;\n            var blockedBoundary = task.blockedBoundary;\n            var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);\n            resumedSegment.id = segmentId;\n            resumedSegment.parentFlushed = true;\n            try {\n                // Convert the current ReplayTask to a RenderTask.\n                var renderTask = task;\n                renderTask.replay = null;\n                renderTask.blockedSegment = resumedSegment;\n                renderNode(request, task, node, childIndex);\n                resumedSegment.status = COMPLETED;\n                if (blockedBoundary === null) {\n                    request.completedRootSegment = resumedSegment;\n                } else {\n                    queueCompletedSegment(blockedBoundary, resumedSegment);\n                    if (blockedBoundary.parentFlushed) {\n                        request.partialBoundaries.push(blockedBoundary);\n                    }\n                }\n            } finally{\n                // Restore to a ReplayTask.\n                task.replay = prevReplay;\n                task.blockedSegment = null;\n            }\n        }\n        function replayElement(request, task, keyPath, prevThenableState, name, keyOrIndex, childIndex, type, props, ref, replay) {\n            // We're replaying. Find the path to follow.\n            var replayNodes = replay.nodes;\n            for(var i = 0; i < replayNodes.length; i++){\n                // Flow doesn't support refinement on tuples so we do it manually here.\n                var node = replayNodes[i];\n                if (keyOrIndex !== node[1]) {\n                    continue;\n                }\n                if (node.length === 4) {\n                    // Matched a replayable path.\n                    // Let's double check that the component name matches as a precaution.\n                    if (name !== null && name !== node[0]) {\n                        throw new Error(\"Expected the resume to render <\" + node[0] + \"> in this slot but instead it rendered <\" + name + \">. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                    }\n                    var childNodes = node[2];\n                    var childSlots = node[3];\n                    var currentNode = task.node;\n                    task.replay = {\n                        nodes: childNodes,\n                        slots: childSlots,\n                        pendingTasks: 1\n                    };\n                    try {\n                        renderElement(request, task, keyPath, prevThenableState, type, props, ref);\n                        if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0 // TODO check remaining slots\n                        ) {\n                            throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                        }\n                        task.replay.pendingTasks--;\n                    } catch (x) {\n                        if (typeof x === \"object\" && x !== null && (x === SuspenseException || typeof x.then === \"function\")) {\n                            // Suspend\n                            if (task.node === currentNode) {\n                                // This same element suspended so we need to pop the replay we just added.\n                                task.replay = replay;\n                            }\n                            throw x;\n                        }\n                        task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n                        // during a replay. That's because this component didn't actually error\n                        // in the original prerender. What's unable to complete is the child\n                        // replay nodes which might be Suspense boundaries which are able to\n                        // absorb the error and we can still continue with siblings.\n                        erroredReplay(request, task.blockedBoundary, x, childNodes, childSlots);\n                    }\n                    task.replay = replay;\n                } else {\n                    // Let's double check that the component type matches.\n                    if (type !== REACT_SUSPENSE_TYPE) {\n                        var expectedType = \"Suspense\";\n                        throw new Error(\"Expected the resume to render <\" + expectedType + \"> in this slot but instead it rendered <\" + (getComponentNameFromType(type) || \"Unknown\") + \">. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                    } // Matched a replayable path.\n                    replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);\n                } // We finished rendering this node, so now we can consume this\n                // slot. This must happen after in case we rerender this task.\n                replayNodes.splice(i, 1);\n                return;\n            } // We didn't find any matching nodes. We assume that this element was already\n        // rendered in the prelude and skip it.\n        } // $FlowFixMe[missing-local-annot]\n        function validateIterable(iterable, iteratorFn) {\n            {\n                // We don't support rendering Generators because it's a mutation.\n                // See https://github.com/facebook/react/issues/12995\n                if (typeof Symbol === \"function\" && iterable[Symbol.toStringTag] === \"Generator\") {\n                    if (!didWarnAboutGenerators) {\n                        error(\"Using Generators as children is unsupported and will likely yield \" + \"unexpected results because enumerating a generator mutates it. \" + \"You may convert it to an array with `Array.from()` or the \" + \"`[...spread]` operator before rendering. Keep in mind \" + \"you might need to polyfill these features for older browsers.\");\n                    }\n                    didWarnAboutGenerators = true;\n                } // Warn about using Maps as children\n                if (iterable.entries === iteratorFn) {\n                    if (!didWarnAboutMaps) {\n                        error(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                    }\n                    didWarnAboutMaps = true;\n                }\n            }\n        }\n        function renderNodeDestructive(request, task, // always null, except when called by retryTask.\n        prevThenableState, node, childIndex) {\n            {\n                // In Dev we wrap renderNodeDestructiveImpl in a try / catch so we can capture\n                // a component stack at the right place in the tree. We don't do this in renderNode\n                // becuase it is not called at every layer of the tree and we may lose frames\n                try {\n                    return renderNodeDestructiveImpl(request, task, prevThenableState, node, childIndex);\n                } catch (x) {\n                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") ;\n                    else {\n                        // This is an error, stash the component stack if it is null.\n                        lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();\n                    } // rethrow so normal suspense logic can handle thrown value accordingly\n                    throw x;\n                }\n            }\n        } // This function by it self renders a node and consumes the task by mutating it\n        // to update the current execution state.\n        function renderNodeDestructiveImpl(request, task, prevThenableState, node, childIndex) {\n            if (task.replay !== null && typeof task.replay.slots === \"number\") {\n                // TODO: Figure out a cheaper place than this hot path to do this check.\n                var resumeSegmentID = task.replay.slots;\n                resumeNode(request, task, resumeSegmentID, node, childIndex);\n                return;\n            } // Stash the node we're working on. We'll pick up from this task in case\n            // something suspends.\n            task.node = node;\n            task.childIndex = childIndex; // Handle object types\n            if (typeof node === \"object\" && node !== null) {\n                switch(node.$$typeof){\n                    case REACT_ELEMENT_TYPE:\n                        {\n                            var element = node;\n                            var type = element.type;\n                            var key = element.key;\n                            var props = element.props;\n                            var ref = element.ref;\n                            var name = getComponentNameFromType(type);\n                            var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;\n                            var keyPath = [\n                                task.keyPath,\n                                name,\n                                keyOrIndex\n                            ];\n                            if (task.replay !== null) {\n                                replayElement(request, task, keyPath, prevThenableState, name, keyOrIndex, childIndex, type, props, ref, task.replay); // No matches found for this node. We assume it's already emitted in the\n                            // prelude and skip it during the replay.\n                            } else {\n                                // We're doing a plain render.\n                                renderElement(request, task, keyPath, prevThenableState, type, props, ref);\n                            }\n                            return;\n                        }\n                    case REACT_PORTAL_TYPE:\n                        throw new Error(\"Portals are not currently supported by the server renderer. \" + \"Render them conditionally so that they only appear on the client render.\");\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyNode = node;\n                            var payload = lazyNode._payload;\n                            var init = lazyNode._init;\n                            var resolvedNode;\n                            {\n                                try {\n                                    resolvedNode = init(payload);\n                                } catch (x) {\n                                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                                        // this Lazy initializer is suspending. push a temporary frame onto the stack so it can be\n                                        // popped off in spawnNewSuspendedTask. This aligns stack behavior between Lazy in element position\n                                        // vs Component position. We do not want the frame for Errors so we exclusively do this in\n                                        // the wakeable branch\n                                        pushBuiltInComponentStackInDEV(task, \"Lazy\");\n                                    }\n                                    throw x;\n                                }\n                            }\n                            renderNodeDestructive(request, task, null, resolvedNode, childIndex);\n                            return;\n                        }\n                }\n                if (isArray(node)) {\n                    renderChildrenArray(request, task, node, childIndex);\n                    return;\n                }\n                var iteratorFn = getIteratorFn(node);\n                if (iteratorFn) {\n                    {\n                        validateIterable(node, iteratorFn);\n                    }\n                    var iterator = iteratorFn.call(node);\n                    if (iterator) {\n                        // We need to know how many total children are in this set, so that we\n                        // can allocate enough id slots to acommodate them. So we must exhaust\n                        // the iterator before we start recursively rendering the children.\n                        // TODO: This is not great but I think it's inherent to the id\n                        // generation algorithm.\n                        var step = iterator.next(); // If there are not entries, we need to push an empty so we start by checking that.\n                        if (!step.done) {\n                            var children = [];\n                            do {\n                                children.push(step.value);\n                                step = iterator.next();\n                            }while (!step.done);\n                            renderChildrenArray(request, task, children, childIndex);\n                            return;\n                        }\n                        return;\n                    }\n                } // Usables are a valid React node type. When React encounters a Usable in\n                // a child position, it unwraps it using the same algorithm as `use`. For\n                // example, for promises, React will throw an exception to unwind the\n                // stack, then replay the component once the promise resolves.\n                //\n                // A difference from `use` is that React will keep unwrapping the value\n                // until it reaches a non-Usable type.\n                //\n                // e.g. Usable<Usable<Usable<T>>> should resolve to T\n                var maybeUsable = node;\n                if (typeof maybeUsable.then === \"function\") {\n                    var thenable = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, unwrapThenable(thenable), childIndex);\n                }\n                if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE || maybeUsable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, readContext$1(context), childIndex);\n                } // $FlowFixMe[method-unbinding]\n                var childString = Object.prototype.toString.call(node);\n                throw new Error(\"Objects are not valid as a React child (found: \" + (childString === \"[object Object]\" ? \"object with keys {\" + Object.keys(node).join(\", \") + \"}\" : childString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n            }\n            if (typeof node === \"string\") {\n                var segment = task.blockedSegment;\n                if (segment === null) ;\n                else {\n                    segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);\n                }\n                return;\n            }\n            if (typeof node === \"number\") {\n                var _segment = task.blockedSegment;\n                if (_segment === null) ;\n                else {\n                    _segment.lastPushedText = pushTextInstance(_segment.chunks, \"\" + node, request.renderState, _segment.lastPushedText);\n                }\n                return;\n            }\n            {\n                if (typeof node === \"function\") {\n                    error(\"Functions are not valid as a React child. This may happen if \" + \"you return a Component instead of <Component /> from render. \" + \"Or maybe you meant to call this function rather than return it.\");\n                }\n            }\n        }\n        function replayFragment(request, task, children, childIndex) {\n            // If we're supposed follow this array, we'd expect to see a ReplayNode matching\n            // this fragment.\n            var replay = task.replay;\n            var replayNodes = replay.nodes;\n            for(var j = 0; j < replayNodes.length; j++){\n                var node = replayNodes[j];\n                if (node[1] !== childIndex) {\n                    continue;\n                } // Matched a replayable path.\n                var childNodes = node[2];\n                var childSlots = node[3];\n                task.replay = {\n                    nodes: childNodes,\n                    slots: childSlots,\n                    pendingTasks: 1\n                };\n                try {\n                    renderChildrenArray(request, task, children, -1);\n                    if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n                        throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                    }\n                    task.replay.pendingTasks--;\n                } catch (x) {\n                    if (typeof x === \"object\" && x !== null && (x === SuspenseException || typeof x.then === \"function\")) {\n                        // Suspend\n                        throw x;\n                    }\n                    task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n                    // during a replay. That's because this component didn't actually error\n                    // in the original prerender. What's unable to complete is the child\n                    // replay nodes which might be Suspense boundaries which are able to\n                    // absorb the error and we can still continue with siblings.\n                    // This is an error, stash the component stack if it is null.\n                    erroredReplay(request, task.blockedBoundary, x, childNodes, childSlots);\n                }\n                task.replay = replay; // We finished rendering this node, so now we can consume this\n                // slot. This must happen after in case we rerender this task.\n                replayNodes.splice(j, 1);\n                break;\n            }\n        }\n        function renderChildrenArray(request, task, children, childIndex) {\n            var prevKeyPath = task.keyPath;\n            if (childIndex !== -1) {\n                task.keyPath = [\n                    task.keyPath,\n                    \"Fragment\",\n                    childIndex\n                ];\n                if (task.replay !== null) {\n                    replayFragment(request, task, children, childIndex);\n                    task.keyPath = prevKeyPath;\n                    return;\n                }\n            }\n            var prevTreeContext = task.treeContext;\n            var totalChildren = children.length;\n            if (task.replay !== null) {\n                // Replay\n                // First we need to check if we have any resume slots at this level.\n                var resumeSlots = task.replay.slots;\n                if (resumeSlots !== null && typeof resumeSlots === \"object\") {\n                    for(var i = 0; i < totalChildren; i++){\n                        var node = children[i];\n                        task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i); // We need to use the non-destructive form so that we can safely pop back\n                        // up and render the sibling if something suspends.\n                        var resumeSegmentID = resumeSlots[i]; // TODO: If this errors we should still continue with the next sibling.\n                        if (typeof resumeSegmentID === \"number\") {\n                            resumeNode(request, task, resumeSegmentID, node, i); // We finished rendering this node, so now we can consume this\n                            // slot. This must happen after in case we rerender this task.\n                            delete resumeSlots[i];\n                        } else {\n                            renderNode(request, task, node, i);\n                        }\n                    }\n                    task.treeContext = prevTreeContext;\n                    task.keyPath = prevKeyPath;\n                    return;\n                }\n            }\n            for(var _i = 0; _i < totalChildren; _i++){\n                var _node = children[_i];\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i); // We need to use the non-destructive form so that we can safely pop back\n                // up and render the sibling if something suspends.\n                renderNode(request, task, _node, _i);\n            } // Because this context is always set right before rendering every child, we\n            // only need to reset it to the previous value at the very end.\n            task.treeContext = prevTreeContext;\n            task.keyPath = prevKeyPath;\n        }\n        function spawnNewSuspendedReplayTask(request, task, thenableState, x) {\n            var newTask = createReplayTask(request, thenableState, task.replay, task.node, task.childIndex, task.blockedBoundary, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                if (task.componentStack !== null) {\n                    // We pop one task off the stack because the node that suspended will be tried again,\n                    // which will add it back onto the stack.\n                    newTask.componentStack = task.componentStack.parent;\n                }\n            }\n            var ping = newTask.ping;\n            x.then(ping, ping);\n        }\n        function spawnNewSuspendedRenderTask(request, task, thenableState, x) {\n            // Something suspended, we'll need to create a new segment and resolve it later.\n            var segment = task.blockedSegment;\n            var insertionIndex = segment.chunks.length;\n            var newSegment = createPendingSegment(request, insertionIndex, null, task.formatContext, segment.lastPushedText, true);\n            segment.children.push(newSegment); // Reset lastPushedText for current Segment since the new Segment \"consumed\" it\n            segment.lastPushedText = false;\n            var newTask = createRenderTask(request, thenableState, task.node, task.childIndex, task.blockedBoundary, newSegment, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext);\n            {\n                if (task.componentStack !== null) {\n                    // We pop one task off the stack because the node that suspended will be tried again,\n                    // which will add it back onto the stack.\n                    newTask.componentStack = task.componentStack.parent;\n                }\n            }\n            var ping = newTask.ping;\n            x.then(ping, ping);\n        } // This is a non-destructive form of rendering a node. If it suspends it spawns\n        // a new task and restores the context of this task to what it was before.\n        function renderNode(request, task, node, childIndex) {\n            // Snapshot the current context in case something throws to interrupt the\n            // process.\n            var previousFormatContext = task.formatContext;\n            var previousLegacyContext = task.legacyContext;\n            var previousContext = task.context;\n            var previousKeyPath = task.keyPath;\n            var previousTreeContext = task.treeContext;\n            var previousComponentStack = null;\n            {\n                previousComponentStack = task.componentStack;\n            }\n            var x; // Store how much we've pushed at this point so we can reset it in case something\n            // suspended partially through writing something.\n            var segment = task.blockedSegment;\n            if (segment === null) {\n                // Replay\n                try {\n                    return renderNodeDestructive(request, task, null, node, childIndex);\n                } catch (thrownValue) {\n                    resetHooksState();\n                    x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                    // value to be a thenable, because before `use` existed that was the\n                    // (unstable) API for suspending. This implementation detail can change\n                    // later, once we deprecate the old API in favor of `use`.\n                    getSuspendedThenable() : thrownValue;\n                    if (typeof x === \"object\" && x !== null) {\n                        // $FlowFixMe[method-unbinding]\n                        if (typeof x.then === \"function\") {\n                            var wakeable = x;\n                            var thenableState = getThenableStateAfterSuspending();\n                            spawnNewSuspendedReplayTask(request, task, thenableState, wakeable); // Restore the context. We assume that this will be restored by the inner\n                            // functions in case nothing throws so we don't use \"finally\" here.\n                            task.formatContext = previousFormatContext;\n                            task.legacyContext = previousLegacyContext;\n                            task.context = previousContext;\n                            task.keyPath = previousKeyPath;\n                            task.treeContext = previousTreeContext; // Restore all active ReactContexts to what they were before.\n                            switchContext(previousContext);\n                            {\n                                task.componentStack = previousComponentStack;\n                            }\n                            return;\n                        }\n                    } // TODO: Abort any undiscovered Suspense boundaries in the ReplayNode.\n                }\n            } else {\n                // Render\n                var childrenLength = segment.children.length;\n                var chunkLength = segment.chunks.length;\n                try {\n                    return renderNodeDestructive(request, task, null, node, childIndex);\n                } catch (thrownValue) {\n                    resetHooksState(); // Reset the write pointers to where we started.\n                    segment.children.length = childrenLength;\n                    segment.chunks.length = chunkLength;\n                    x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                    // value to be a thenable, because before `use` existed that was the\n                    // (unstable) API for suspending. This implementation detail can change\n                    // later, once we deprecate the old API in favor of `use`.\n                    getSuspendedThenable() : thrownValue;\n                    if (typeof x === \"object\" && x !== null) {\n                        // $FlowFixMe[method-unbinding]\n                        if (typeof x.then === \"function\") {\n                            var _wakeable = x;\n                            var _thenableState = getThenableStateAfterSuspending();\n                            spawnNewSuspendedRenderTask(request, task, _thenableState, _wakeable); // Restore the context. We assume that this will be restored by the inner\n                            // functions in case nothing throws so we don't use \"finally\" here.\n                            task.formatContext = previousFormatContext;\n                            task.legacyContext = previousLegacyContext;\n                            task.context = previousContext;\n                            task.keyPath = previousKeyPath;\n                            task.treeContext = previousTreeContext; // Restore all active ReactContexts to what they were before.\n                            switchContext(previousContext);\n                            {\n                                task.componentStack = previousComponentStack;\n                            }\n                            return;\n                        }\n                    }\n                }\n            } // Restore the context. We assume that this will be restored by the inner\n            // functions in case nothing throws so we don't use \"finally\" here.\n            task.formatContext = previousFormatContext;\n            task.legacyContext = previousLegacyContext;\n            task.context = previousContext;\n            task.keyPath = previousKeyPath;\n            task.treeContext = previousTreeContext; // Restore all active ReactContexts to what they were before.\n            switchContext(previousContext);\n            {\n                task.componentStack = previousComponentStack;\n            }\n            // Let's terminate the rest of the tree and don't render any siblings.\n            throw x;\n        }\n        function erroredReplay(request, boundary, error, replayNodes, resumeSlots) {\n            // Erroring during a replay doesn't actually cause an error by itself because\n            // that component has already rendered. What causes the error is the resumable\n            // points that we did not yet finish which will be below the point of the reset.\n            // For example, if we're replaying a path to a Suspense boundary that is not done\n            // that doesn't error the parent Suspense boundary.\n            // This might be a bit strange that the error in a parent gets thrown at a child.\n            // We log it only once and reuse the digest.\n            var errorDigest;\n            {\n                errorDigest = logRecoverableError(request, error);\n            }\n            abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error, errorDigest);\n        }\n        function erroredTask(request, boundary, error) {\n            // Report the error to a global handler.\n            var errorDigest;\n            {\n                errorDigest = logRecoverableError(request, error);\n            }\n            if (boundary === null) {\n                lastBoundaryErrorComponentStackDev = null;\n                fatalError(request, error);\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.status !== CLIENT_RENDERED) {\n                    boundary.status = CLIENT_RENDERED;\n                    boundary.errorDigest = errorDigest;\n                    {\n                        captureBoundaryErrorDetailsDev(boundary, error);\n                    }\n                    // so we can flush it, if the parent already flushed.\n                    if (boundary.parentFlushed) {\n                        // We don't have a preference where in the queue this goes since it's likely\n                        // to error on the client anyway. However, intentionally client-rendered\n                        // boundaries should be flushed earlier so that they can start on the client.\n                        // We reuse the same queue for errors.\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } else {\n                    lastBoundaryErrorComponentStackDev = null;\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                completeAll(request);\n            }\n        }\n        function abortTaskSoft(task) {\n            // This aborts task without aborting the parent boundary that it blocks.\n            // It's used for when we didn't need this task to complete the tree.\n            // If task was needed, then it should use abortTask instead.\n            var request = this;\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            if (segment !== null) {\n                segment.status = ABORTED;\n                finishedTask(request, boundary, segment);\n            }\n        }\n        function abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest) {\n            var resumedBoundary = createSuspenseBoundary(request, new Set());\n            resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n            resumedBoundary.rootSegmentID = rootSegmentID;\n            resumedBoundary.status = CLIENT_RENDERED;\n            resumedBoundary.errorDigest = errorDigest;\n            {\n                var errorPrefix = \"The server did not finish this Suspense boundary: \";\n                var errorMessage;\n                if (error && typeof error.message === \"string\") {\n                    errorMessage = errorPrefix + error.message;\n                } else {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    errorMessage = errorPrefix + String(error);\n                }\n                var previousTaskInDev = currentTaskInDEV;\n                currentTaskInDEV = null;\n                try {\n                    captureBoundaryErrorDetailsDev(resumedBoundary, errorMessage);\n                } finally{\n                    currentTaskInDEV = previousTaskInDev;\n                }\n            }\n            if (resumedBoundary.parentFlushed) {\n                request.clientRenderedBoundaries.push(resumedBoundary);\n            }\n        }\n        function abortRemainingReplayNodes(request, boundary, nodes, slots, error, errorDigest) {\n            for(var i = 0; i < nodes.length; i++){\n                var node = nodes[i];\n                if (node.length === 4) {\n                    abortRemainingReplayNodes(request, boundary, node[2], node[3], error, errorDigest);\n                } else {\n                    var boundaryNode = node;\n                    var rootSegmentID = boundaryNode[5];\n                    abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest);\n                }\n            } // Empty the set, since we've cleared it now.\n            nodes.length = 0;\n            if (slots !== null) {\n                // We had something still to resume in the parent boundary. We must trigger\n                // the error on the parent boundary since it's not able to complete.\n                if (boundary === null) {\n                    throw new Error(\"We should not have any resumable nodes in the shell. \" + \"This is a bug in React.\");\n                } else if (boundary.status !== CLIENT_RENDERED) {\n                    boundary.status = CLIENT_RENDERED;\n                    boundary.errorDigest = errorDigest;\n                    {\n                        captureBoundaryErrorDetailsDev(boundary, error);\n                    }\n                    if (boundary.parentFlushed) {\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } // Empty the set\n                if (typeof slots === \"object\") {\n                    for(var index in slots){\n                        delete slots[index];\n                    }\n                }\n            }\n        }\n        function abortTask(task, request, error) {\n            // This aborts the task and aborts the parent that it blocks, putting it into\n            // client rendered mode.\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            if (segment !== null) {\n                segment.status = ABORTED;\n            }\n            if (boundary === null) {\n                if (request.status !== CLOSING && request.status !== CLOSED) {\n                    var replay = task.replay;\n                    if (replay === null) {\n                        // We didn't complete the root so we have nothing to show. We can close\n                        // the request;\n                        logRecoverableError(request, error);\n                        fatalError(request, error);\n                        return;\n                    } else {\n                        // If the shell aborts during a replay, that's not a fatal error. Instead\n                        // we should be able to recover by client rendering all the root boundaries in\n                        // the ReplaySet.\n                        replay.pendingTasks--;\n                        if (replay.pendingTasks === 0 && replay.nodes.length > 0) {\n                            var errorDigest = logRecoverableError(request, error);\n                            abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error, errorDigest);\n                        }\n                        request.pendingRootTasks--;\n                        if (request.pendingRootTasks === 0) {\n                            completeShell(request);\n                        }\n                    }\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.status !== CLIENT_RENDERED) {\n                    boundary.status = CLIENT_RENDERED;\n                    boundary.errorDigest = logRecoverableError(request, error);\n                    {\n                        var errorPrefix = \"The server did not finish this Suspense boundary: \";\n                        var errorMessage;\n                        if (error && typeof error.message === \"string\") {\n                            errorMessage = errorPrefix + error.message;\n                        } else {\n                            // eslint-disable-next-line react-internal/safe-string-coercion\n                            errorMessage = errorPrefix + String(error);\n                        }\n                        var previousTaskInDev = currentTaskInDEV;\n                        currentTaskInDEV = task;\n                        try {\n                            captureBoundaryErrorDetailsDev(boundary, errorMessage);\n                        } finally{\n                            currentTaskInDEV = previousTaskInDev;\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } // If this boundary was still pending then we haven't already cancelled its fallbacks.\n                // We'll need to abort the fallbacks, which will also error that parent boundary.\n                boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {\n                    return abortTask(fallbackTask, request, error);\n                });\n                boundary.fallbackAbortableTasks.clear();\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                completeAll(request);\n            }\n        }\n        function safelyEmitEarlyPreloads(request, shellComplete) {\n            try {\n                emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);\n            } catch (error) {\n                // We assume preloads are optimistic and thus non-fatal if errored.\n                logRecoverableError(request, error);\n            }\n        } // I extracted this function out because we want to ensure we consistently emit preloads before\n        // transitioning to the next request stage and this transition can happen in multiple places in this\n        // implementation.\n        function completeShell(request) {\n            if (request.trackedPostpones === null) {\n                // We only emit early preloads on shell completion for renders. For prerenders\n                // we wait for the entire Request to finish because we are not responding to a\n                // live request and can wait for as much data as possible.\n                // we should only be calling completeShell when the shell is complete so we\n                // just use a literal here\n                var shellComplete = true;\n                safelyEmitEarlyPreloads(request, shellComplete);\n            } // We have completed the shell so the shell can't error anymore.\n            request.onShellError = noop;\n            var onShellReady = request.onShellReady;\n            onShellReady();\n        } // I extracted this function out because we want to ensure we consistently emit preloads before\n        // transitioning to the next request stage and this transition can happen in multiple places in this\n        // implementation.\n        function completeAll(request) {\n            // During a render the shell must be complete if the entire request is finished\n            // however during a Prerender it is possible that the shell is incomplete because\n            // it postponed. We cannot use rootPendingTasks in the prerender case because\n            // those hit zero even when the shell postpones. Instead we look at the completedRootSegment\n            var shellComplete = request.trackedPostpones === null ? true : request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED;\n            safelyEmitEarlyPreloads(request, shellComplete);\n            var onAllReady = request.onAllReady;\n            onAllReady();\n        }\n        function queueCompletedSegment(boundary, segment) {\n            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {\n                // This is an empty segment. There's nothing to write, so we can instead transfer the ID\n                // to the child. That way any existing references point to the child.\n                var childSegment = segment.children[0];\n                childSegment.id = segment.id;\n                childSegment.parentFlushed = true;\n                if (childSegment.status === COMPLETED) {\n                    queueCompletedSegment(boundary, childSegment);\n                }\n            } else {\n                var completedSegments = boundary.completedSegments;\n                completedSegments.push(segment);\n            }\n        }\n        function finishedTask(request, boundary, segment) {\n            if (boundary === null) {\n                if (segment !== null && segment.parentFlushed) {\n                    if (request.completedRootSegment !== null) {\n                        throw new Error(\"There can only be one root segment. This is a bug in React.\");\n                    }\n                    request.completedRootSegment = segment;\n                }\n                request.pendingRootTasks--;\n                if (request.pendingRootTasks === 0) {\n                    completeShell(request);\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.status === CLIENT_RENDERED) ;\n                else if (boundary.pendingTasks === 0) {\n                    if (boundary.status === PENDING) {\n                        boundary.status = COMPLETED;\n                    } // This must have been the last segment we were waiting on. This boundary is now complete.\n                    if (segment !== null && segment.parentFlushed) {\n                        // Our parent segment already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        // The segment might be part of a segment that didn't flush yet, but if the boundary's\n                        // parent flushed, we need to schedule the boundary to be emitted.\n                        request.completedBoundaries.push(boundary);\n                    } // We can now cancel any pending task on the fallback since we won't need to show it anymore.\n                    // This needs to happen after we read the parentFlushed flags because aborting can finish\n                    // work which can trigger user code, which can start flushing, which can change those flags.\n                    // If the boundary was POSTPONED, we still need to finish the fallback first.\n                    if (boundary.status === COMPLETED) {\n                        boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);\n                        boundary.fallbackAbortableTasks.clear();\n                    }\n                } else {\n                    if (segment !== null && segment.parentFlushed) {\n                        // Our parent already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                            var completedSegments = boundary.completedSegments;\n                            if (completedSegments.length === 1) {\n                                // This is the first time since we last flushed that we completed anything.\n                                // We can schedule this boundary to emit its partially completed segments early\n                                // in case the parent has already been flushed.\n                                if (boundary.parentFlushed) {\n                                    request.partialBoundaries.push(boundary);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                completeAll(request);\n            }\n        }\n        function retryTask(request, task) {\n            {\n                var blockedBoundary = task.blockedBoundary;\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, blockedBoundary ? blockedBoundary.resources : null);\n            }\n            var segment = task.blockedSegment;\n            if (segment === null) {\n                retryReplayTask(request, task);\n            } else {\n                retryRenderTask(request, task, segment);\n            }\n        }\n        function retryRenderTask(request, task, segment) {\n            if (segment.status !== PENDING) {\n                // We completed this by other means before we had a chance to retry it.\n                return;\n            } // We restore the context to what it was when we suspended.\n            // We don't restore it after we leave because it's likely that we'll end up\n            // needing a very similar context soon again.\n            switchContext(task.context);\n            var prevTaskInDEV = null;\n            {\n                prevTaskInDEV = currentTaskInDEV;\n                currentTaskInDEV = task;\n            }\n            var childrenLength = segment.children.length;\n            var chunkLength = segment.chunks.length;\n            try {\n                // We call the destructive form that mutates this task. That way if something\n                // suspends again, we can reuse the same task instead of spawning a new one.\n                // Reset the task's thenable state before continuing, so that if a later\n                // component suspends we can reuse the same task object. If the same\n                // component suspends again, the thenable state will be restored.\n                var prevThenableState = task.thenableState;\n                task.thenableState = null;\n                renderNodeDestructive(request, task, prevThenableState, task.node, task.childIndex);\n                pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);\n                task.abortSet.delete(task);\n                segment.status = COMPLETED;\n                finishedTask(request, task.blockedBoundary, segment);\n            } catch (thrownValue) {\n                resetHooksState(); // Reset the write pointers to where we started.\n                segment.children.length = childrenLength;\n                segment.chunks.length = chunkLength;\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue;\n                if (typeof x === \"object\" && x !== null) {\n                    // $FlowFixMe[method-unbinding]\n                    if (typeof x.then === \"function\") {\n                        // Something suspended again, let's pick it back up later.\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                        task.thenableState = getThenableStateAfterSuspending();\n                        return;\n                    }\n                }\n                task.abortSet.delete(task);\n                segment.status = ERRORED;\n                erroredTask(request, task.blockedBoundary, x);\n                return;\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, null);\n                }\n                {\n                    currentTaskInDEV = prevTaskInDEV;\n                }\n            }\n        }\n        function retryReplayTask(request, task) {\n            if (task.replay.pendingTasks === 0) {\n                // There are no pending tasks working on this set, so we must have aborted.\n                return;\n            } // We restore the context to what it was when we suspended.\n            // We don't restore it after we leave because it's likely that we'll end up\n            // needing a very similar context soon again.\n            switchContext(task.context);\n            var prevTaskInDEV = null;\n            {\n                prevTaskInDEV = currentTaskInDEV;\n                currentTaskInDEV = task;\n            }\n            try {\n                // We call the destructive form that mutates this task. That way if something\n                // suspends again, we can reuse the same task instead of spawning a new one.\n                // Reset the task's thenable state before continuing, so that if a later\n                // component suspends we can reuse the same task object. If the same\n                // component suspends again, the thenable state will be restored.\n                var prevThenableState = task.thenableState;\n                task.thenableState = null;\n                renderNodeDestructive(request, task, prevThenableState, task.node, task.childIndex);\n                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n                    throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n                }\n                task.replay.pendingTasks--;\n                task.abortSet.delete(task);\n                finishedTask(request, task.blockedBoundary, null);\n            } catch (thrownValue) {\n                resetHooksState();\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue;\n                if (typeof x === \"object\" && x !== null) {\n                    // $FlowFixMe[method-unbinding]\n                    if (typeof x.then === \"function\") {\n                        // Something suspended again, let's pick it back up later.\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                        task.thenableState = getThenableStateAfterSuspending();\n                        return;\n                    }\n                }\n                task.replay.pendingTasks--;\n                task.abortSet.delete(task);\n                erroredReplay(request, task.blockedBoundary, x, task.replay.nodes, task.replay.slots);\n                request.pendingRootTasks--;\n                if (request.pendingRootTasks === 0) {\n                    completeShell(request);\n                }\n                request.allPendingTasks--;\n                if (request.allPendingTasks === 0) {\n                    completeAll(request);\n                }\n                return;\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, null);\n                }\n                {\n                    currentTaskInDEV = prevTaskInDEV;\n                }\n            }\n        }\n        function performWork(request) {\n            if (request.status === CLOSED) {\n                return;\n            }\n            var prevContext = getActiveContext();\n            var prevDispatcher = ReactCurrentDispatcher.current;\n            ReactCurrentDispatcher.current = HooksDispatcher;\n            var prevCacheDispatcher;\n            {\n                prevCacheDispatcher = ReactCurrentCache.current;\n                ReactCurrentCache.current = DefaultCacheDispatcher;\n            }\n            var prevRequest = currentRequest;\n            currentRequest = request;\n            var prevGetCurrentStackImpl;\n            {\n                prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;\n                ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;\n            }\n            var prevResumableState = currentResumableState;\n            setCurrentResumableState(request.resumableState);\n            try {\n                var pingedTasks = request.pingedTasks;\n                var i;\n                for(i = 0; i < pingedTasks.length; i++){\n                    var task = pingedTasks[i];\n                    retryTask(request, task);\n                }\n                pingedTasks.splice(0, i);\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            } finally{\n                setCurrentResumableState(prevResumableState);\n                ReactCurrentDispatcher.current = prevDispatcher;\n                {\n                    ReactCurrentCache.current = prevCacheDispatcher;\n                }\n                {\n                    ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;\n                }\n                if (prevDispatcher === HooksDispatcher) {\n                    // This means that we were in a reentrant work loop. This could happen\n                    // in a renderer that supports synchronous work like renderToString,\n                    // when it's called from within another renderer.\n                    // Normally we don't bother switching the contexts to their root/default\n                    // values when leaving because we'll likely need the same or similar\n                    // context again. However, when we're inside a synchronous loop like this\n                    // we'll to restore the context to what it was before returning.\n                    switchContext(prevContext);\n                }\n                currentRequest = prevRequest;\n            }\n        }\n        function flushSubtree(request, destination, segment) {\n            segment.parentFlushed = true;\n            switch(segment.status){\n                case PENDING:\n                    {\n                        // We're emitting a placeholder for this segment to be filled in later.\n                        // Therefore we'll need to assign it an ID - to refer to it by.\n                        segment.id = request.nextSegmentId++; // Fallthrough\n                    }\n                case POSTPONED:\n                    {\n                        var segmentID = segment.id; // When this segment finally completes it won't be embedded in text since it will flush separately\n                        segment.lastPushedText = false;\n                        segment.textEmbedded = false;\n                        return writePlaceholder(destination, request.renderState, segmentID);\n                    }\n                case COMPLETED:\n                    {\n                        segment.status = FLUSHED;\n                        var r = true;\n                        var chunks = segment.chunks;\n                        var chunkIdx = 0;\n                        var children = segment.children;\n                        for(var childIdx = 0; childIdx < children.length; childIdx++){\n                            var nextChild = children[childIdx]; // Write all the chunks up until the next child.\n                            for(; chunkIdx < nextChild.index; chunkIdx++){\n                                writeChunk(destination, chunks[chunkIdx]);\n                            }\n                            r = flushSegment(request, destination, nextChild);\n                        } // Finally just write all the remaining chunks\n                        for(; chunkIdx < chunks.length - 1; chunkIdx++){\n                            writeChunk(destination, chunks[chunkIdx]);\n                        }\n                        if (chunkIdx < chunks.length) {\n                            r = writeChunkAndReturn(destination, chunks[chunkIdx]);\n                        }\n                        return r;\n                    }\n                default:\n                    {\n                        throw new Error(\"Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.\");\n                    }\n            }\n        }\n        function flushSegment(request, destination, segment) {\n            var boundary = segment.boundary;\n            if (boundary === null) {\n                // Not a suspense boundary.\n                return flushSubtree(request, destination, segment);\n            }\n            boundary.parentFlushed = true; // This segment is a Suspense boundary. We need to decide whether to\n            // emit the content or the fallback now.\n            if (boundary.status === CLIENT_RENDERED) {\n                // Emit a client rendered suspense boundary wrapper.\n                // We never queue the inner boundary so we'll never emit its content or partial segments.\n                writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndClientRenderedSuspenseBoundary(destination);\n            } else if (boundary.status !== COMPLETED) {\n                if (boundary.status === PENDING) {\n                    // For pending boundaries we lazily assign an ID to the boundary\n                    // and root segment.\n                    boundary.rootSegmentID = request.nextSegmentId++;\n                }\n                if (boundary.completedSegments.length > 0) {\n                    // If this is at least partially complete, we can queue it to be partially emitted early.\n                    request.partialBoundaries.push(boundary);\n                } // This boundary is still loading. Emit a pending suspense boundary wrapper.\n                var id = boundary.rootSegmentID;\n                writeStartPendingSuspenseBoundary(destination, request.renderState, id); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else if (boundary.byteSize > request.progressiveChunkSize) {\n                // This boundary is large and will be emitted separately so that we can progressively show\n                // other content. We add it to the queue during the flush because we have to ensure that\n                // the parent flushes first so that there's something to inject it into.\n                // We also have to make sure that it's emitted into the queue in a deterministic slot.\n                // I.e. we can't insert it here when it completes.\n                // Assign an ID to refer to the future content by.\n                boundary.rootSegmentID = request.nextSegmentId++;\n                request.completedBoundaries.push(boundary); // Emit a pending rendered suspense boundary wrapper.\n                writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else {\n                {\n                    hoistResources(request.renderState, boundary.resources);\n                }\n                writeStartCompletedSuspenseBoundary(destination);\n                var completedSegments = boundary.completedSegments;\n                if (completedSegments.length !== 1) {\n                    throw new Error(\"A previously unvisited boundary must have exactly one root segment. This is a bug in React.\");\n                }\n                var contentSegment = completedSegments[0];\n                flushSegment(request, destination, contentSegment);\n                return writeEndCompletedSuspenseBoundary(destination);\n            }\n        }\n        function flushClientRenderedBoundary(request, destination, boundary) {\n            return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);\n        }\n        function flushSegmentContainer(request, destination, segment) {\n            writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);\n            flushSegment(request, destination, segment);\n            return writeEndSegment(destination, segment.parentFormatContext);\n        }\n        function flushCompletedBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                flushPartiallyCompletedSegment(request, destination, boundary, segment);\n            }\n            completedSegments.length = 0;\n            {\n                writeResourcesForBoundary(destination, boundary.resources, request.renderState);\n            }\n            return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.resources);\n        }\n        function flushPartialBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.renderState, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {\n                    i++;\n                    completedSegments.splice(0, i); // Only write as much as the buffer wants. Something higher priority\n                    // might want to write later.\n                    return false;\n                }\n            }\n            completedSegments.splice(0, i);\n            {\n                // The way this is structured we only write resources for partial boundaries\n                // if there is no backpressure. Later before we complete the boundary we\n                // will write resources regardless of backpressure before we emit the\n                // completion instruction\n                return writeResourcesForBoundary(destination, boundary.resources, request.renderState);\n            }\n        }\n        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {\n            if (segment.status === FLUSHED) {\n                // We've already flushed this inline.\n                return true;\n            }\n            var segmentID = segment.id;\n            if (segmentID === -1) {\n                // This segment wasn't previously referred to. This happens at the root of\n                // a boundary. We make kind of a leap here and assume this is the root.\n                var rootSegmentID = segment.id = boundary.rootSegmentID;\n                if (rootSegmentID === -1) {\n                    throw new Error(\"A root segment ID must have been assigned by now. This is a bug in React.\");\n                }\n                return flushSegmentContainer(request, destination, segment);\n            } else if (segmentID === boundary.rootSegmentID) {\n                // When we emit postponed boundaries, we might have assigned the ID already\n                // but it's still the root segment so we can't inject it into the parent yet.\n                return flushSegmentContainer(request, destination, segment);\n            } else {\n                flushSegmentContainer(request, destination, segment);\n                return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);\n            }\n        }\n        function flushCompletedQueues(request, destination) {\n            beginWriting();\n            try {\n                // The structure of this is to go through each queue one by one and write\n                // until the sink tells us to stop. When we should stop, we still finish writing\n                // that item fully and then yield. At that point we remove the already completed\n                // items up until the point we completed them.\n                var i;\n                var completedRootSegment = request.completedRootSegment;\n                if (completedRootSegment !== null) {\n                    if (completedRootSegment.status === POSTPONED) {\n                        // We postponed the root, so we write nothing.\n                        return;\n                    } else if (request.pendingRootTasks === 0) {\n                        if (enableFloat) {\n                            writePreamble(destination, request.resumableState, request.renderState, request.allPendingTasks === 0 && request.trackedPostpones === null);\n                        }\n                        flushSegment(request, destination, completedRootSegment);\n                        request.completedRootSegment = null;\n                        writeCompletedRoot(destination, request.renderState);\n                    } else {\n                        // We haven't flushed the root yet so we don't need to check any other branches further down\n                        return;\n                    }\n                }\n                if (enableFloat) {\n                    writeHoistables(destination, request.resumableState, request.renderState);\n                } // We emit client rendering instructions for already emitted boundaries first.\n                // This is so that we can signal to the client to start client rendering them as\n                // soon as possible.\n                var clientRenderedBoundaries = request.clientRenderedBoundaries;\n                for(i = 0; i < clientRenderedBoundaries.length; i++){\n                    var boundary = clientRenderedBoundaries[i];\n                    if (!flushClientRenderedBoundary(request, destination, boundary)) {\n                        request.destination = null;\n                        i++;\n                        clientRenderedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                clientRenderedBoundaries.splice(0, i); // Next we emit any complete boundaries. It's better to favor boundaries\n                // that are completely done since we can actually show them, than it is to emit\n                // any individual segments from a partially complete boundary.\n                var completedBoundaries = request.completedBoundaries;\n                for(i = 0; i < completedBoundaries.length; i++){\n                    var _boundary = completedBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary)) {\n                        request.destination = null;\n                        i++;\n                        completedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                completedBoundaries.splice(0, i); // Allow anything written so far to flush to the underlying sink before\n                // we continue with lower priorities.\n                completeWriting(destination);\n                beginWriting(destination); // TODO: Here we'll emit data used by hydration.\n                // Next we emit any segments of any boundaries that are partially complete\n                // but not deeply complete.\n                var partialBoundaries = request.partialBoundaries;\n                for(i = 0; i < partialBoundaries.length; i++){\n                    var _boundary2 = partialBoundaries[i];\n                    if (!flushPartialBoundary(request, destination, _boundary2)) {\n                        request.destination = null;\n                        i++;\n                        partialBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                partialBoundaries.splice(0, i); // Next we check the completed boundaries again. This may have had\n                // boundaries added to it in case they were too larged to be inlined.\n                // New ones might be added in this loop.\n                var largeBoundaries = request.completedBoundaries;\n                for(i = 0; i < largeBoundaries.length; i++){\n                    var _boundary3 = largeBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary3)) {\n                        request.destination = null;\n                        i++;\n                        largeBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                largeBoundaries.splice(0, i);\n            } finally{\n                if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 // We don't need to check any partially completed segments because\n                ) {\n                    request.flushScheduled = false;\n                    {\n                        // We write the trailing tags but only if don't have any data to resume.\n                        // If we need to resume we'll write the postamble in the resume instead.\n                        {\n                            writePostamble(destination, request.resumableState);\n                        }\n                    }\n                    completeWriting(destination);\n                    flushBuffered(destination);\n                    {\n                        if (request.abortableTasks.size !== 0) {\n                            error(\"There was still abortable task at the root when we closed. This is a bug in React.\");\n                        }\n                    }\n                    close(destination); // We need to stop flowing now because we do not want any async contexts which might call\n                    // float methods to initiate any flushes after this point\n                    stopFlowing(request);\n                } else {\n                    completeWriting(destination);\n                    flushBuffered(destination);\n                }\n            }\n        }\n        function startWork(request) {\n            request.flushScheduled = request.destination !== null;\n            {\n                scheduleWork(function() {\n                    return requestStorage.run(request, performWork, request);\n                });\n            }\n            if (request.trackedPostpones === null) {\n                // this is either a regular render or a resume. For regular render we want\n                // to call emitEarlyPreloads after the first performWork because we want\n                // are responding to a live request and need to balance sending something early\n                // (i.e. don't want for the shell to finish) but we need something to send.\n                // The only implementation of this is for DOM at the moment and during resumes nothing\n                // actually emits but the code paths here are the same.\n                // During a prerender we don't want to be too aggressive in emitting early preloads\n                // because we aren't responding to a live request and we can wait for the prerender to\n                // postpone before we emit anything.\n                {\n                    scheduleWork(function() {\n                        return requestStorage.run(request, enqueueEarlyPreloadsAfterInitialWork, request);\n                    });\n                }\n            }\n        }\n        function enqueueEarlyPreloadsAfterInitialWork(request) {\n            var shellComplete = request.pendingRootTasks === 0;\n            safelyEmitEarlyPreloads(request, shellComplete);\n        }\n        function enqueueFlush(request) {\n            if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes\n            request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will\n            // happen when we start flowing again\n            request.destination !== null) {\n                request.flushScheduled = true;\n                scheduleWork(function() {\n                    // We need to existence check destination again here because it might go away\n                    // in between the enqueueFlush call and the work execution\n                    var destination = request.destination;\n                    if (destination) {\n                        flushCompletedQueues(request, destination);\n                    } else {\n                        request.flushScheduled = false;\n                    }\n                });\n            }\n        } // This function is intented to only be called during the pipe function for the Node builds.\n        // The reason we need this is because `renderToPipeableStream` is the only API which allows\n        // you to start flowing before the shell is complete and we've had a chance to emit early\n        // preloads already. This is really just defensive programming to ensure that we give hosts an\n        // opportunity to flush early preloads before streaming begins in case they are in an environment\n        // that only supports a single call to emitEarlyPreloads like the DOM renderers. It's unfortunate\n        // to put this Node only function directly in ReactFizzServer but it'd be more ackward to factor it\n        // by moving the implementation into ReactServerStreamConfigNode and even then we may not be able to\n        // eliminate all the wasted branching.\n        function prepareForStartFlowingIfBeforeAllReady(request) {\n            var shellComplete = request.trackedPostpones === null ? request.pendingRootTasks === 0 : request.completedRootSegment === null ? request.pendingRootTasks === 0 : request.completedRootSegment.status !== POSTPONED;\n            safelyEmitEarlyPreloads(request, shellComplete);\n        }\n        function startFlowing(request, destination) {\n            if (request.status === CLOSING) {\n                request.status = CLOSED;\n                closeWithError(destination, request.fatalError);\n                return;\n            }\n            if (request.status === CLOSED) {\n                return;\n            }\n            if (request.destination !== null) {\n                // We're already flowing.\n                return;\n            }\n            request.destination = destination;\n            try {\n                flushCompletedQueues(request, destination);\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function stopFlowing(request) {\n            request.destination = null;\n        } // This is called to early terminate a request. It puts all pending boundaries in client rendered state.\n        function abort(request, reason) {\n            try {\n                var abortableTasks = request.abortableTasks;\n                if (abortableTasks.size > 0) {\n                    var error = reason === undefined ? new Error(\"The render was aborted by the server without a reason.\") : reason;\n                    abortableTasks.forEach(function(task) {\n                        return abortTask(task, request, error);\n                    });\n                    abortableTasks.clear();\n                }\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function flushResources(request) {\n            enqueueFlush(request);\n        }\n        function getFormState(request) {\n            return request.formState;\n        }\n        function getResumableState(request) {\n            return request.resumableState;\n        }\n        function getRenderState(request) {\n            return request.renderState;\n        }\n        function createDrainHandler(destination, request) {\n            return function() {\n                return startFlowing(request, destination);\n            };\n        }\n        function createCancelHandler(request, reason) {\n            return function() {\n                stopFlowing(request); // eslint-disable-next-line react-internal/prod-error-codes\n                abort(request, new Error(reason));\n            };\n        }\n        function createRequestImpl(children, options) {\n            var resumableState = createResumableState(options ? options.identifierPrefix : undefined, options ? options.unstable_externalRuntimeSrc : undefined, options ? options.bootstrapScriptContent : undefined, options ? options.bootstrapScripts : undefined, options ? options.bootstrapModules : undefined);\n            return createRequest(children, resumableState, createRenderState(resumableState, options ? options.nonce : undefined, options ? options.unstable_externalRuntimeSrc : undefined, options ? options.importMap : undefined, options ? options.onHeaders : undefined, options ? options.maxHeadersLength : undefined), createRootFormatContext(options ? options.namespaceURI : undefined), options ? options.progressiveChunkSize : undefined, options ? options.onError : undefined, options ? options.onAllReady : undefined, options ? options.onShellReady : undefined, options ? options.onShellError : undefined, undefined, options ? options.onPostpone : undefined, options ? options.formState : undefined);\n        }\n        function renderToPipeableStream(children, options) {\n            var request = createRequestImpl(children, options);\n            var hasStartedFlowing = false;\n            startWork(request);\n            return {\n                pipe: function(destination) {\n                    if (hasStartedFlowing) {\n                        throw new Error(\"React currently only supports piping to one writable stream.\");\n                    }\n                    hasStartedFlowing = true;\n                    prepareForStartFlowingIfBeforeAllReady(request);\n                    startFlowing(request, destination);\n                    destination.on(\"drain\", createDrainHandler(destination, request));\n                    destination.on(\"error\", createCancelHandler(request, \"The destination stream errored while writing data.\"));\n                    destination.on(\"close\", createCancelHandler(request, \"The destination stream closed early.\"));\n                    return destination;\n                },\n                abort: function(reason) {\n                    abort(request, reason);\n                }\n            };\n        }\n        exports.renderToPipeableStream = renderToPipeableStream;\n        exports.version = ReactVersion;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/react-dom/server.js":
/*!**************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react-dom/server.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./server.node */ \"(rsc)/../node_modules/next/dist/compiled/react-dom/server.node.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vc2VydmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLDhIQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXIuanM/YTlkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zZXJ2ZXIubm9kZScpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/react-dom/server.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/react-dom/server.node.js":
/*!*******************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react-dom/server.node.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar l, s;\nif (false) {} else {\n    l = __webpack_require__(/*! ./cjs/react-dom-server-legacy.node.development.js */ \"(rsc)/../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js\");\n    s = __webpack_require__(/*! ./cjs/react-dom-server.node.development.js */ \"(rsc)/../node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js\");\n}\nexports.version = l.version;\nexports.renderToString = l.renderToString;\nexports.renderToStaticMarkup = l.renderToStaticMarkup;\nexports.renderToNodeStream = l.renderToNodeStream;\nexports.renderToStaticNodeStream = l.renderToStaticNodeStream;\nexports.renderToPipeableStream = s.renderToPipeableStream;\nif (s.resumeToPipeableStream) {\n    exports.resumeToPipeableStream = s.resumeToPipeableStream;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vc2VydmVyLm5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxHQUFHQztBQUNQLElBQUlDLEtBQXlCLEVBQWMsRUFHMUMsTUFBTTtJQUNMRixJQUFJRyxtQkFBT0EsQ0FBQztJQUNaRixJQUFJRSxtQkFBT0EsQ0FBQztBQUNkO0FBRUFDLGVBQWUsR0FBR0osRUFBRUssT0FBTztBQUMzQkQsc0JBQXNCLEdBQUdKLEVBQUVNLGNBQWM7QUFDekNGLDRCQUE0QixHQUFHSixFQUFFTyxvQkFBb0I7QUFDckRILDBCQUEwQixHQUFHSixFQUFFUSxrQkFBa0I7QUFDakRKLGdDQUFnQyxHQUFHSixFQUFFUyx3QkFBd0I7QUFDN0RMLDhCQUE4QixHQUFHSCxFQUFFUyxzQkFBc0I7QUFDekQsSUFBSVQsRUFBRVUsc0JBQXNCLEVBQUU7SUFDNUJQLDhCQUE4QixHQUFHSCxFQUFFVSxzQkFBc0I7QUFDM0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vc2VydmVyLm5vZGUuanM/Nzg3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBsLCBzO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbCA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXItbGVnYWN5Lm5vZGUucHJvZHVjdGlvbi5taW4uanMnKTtcbiAgcyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXIubm9kZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbCA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXItbGVnYWN5Lm5vZGUuZGV2ZWxvcG1lbnQuanMnKTtcbiAgcyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXIubm9kZS5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5leHBvcnRzLnZlcnNpb24gPSBsLnZlcnNpb247XG5leHBvcnRzLnJlbmRlclRvU3RyaW5nID0gbC5yZW5kZXJUb1N0cmluZztcbmV4cG9ydHMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSBsLnJlbmRlclRvU3RhdGljTWFya3VwO1xuZXhwb3J0cy5yZW5kZXJUb05vZGVTdHJlYW0gPSBsLnJlbmRlclRvTm9kZVN0cmVhbTtcbmV4cG9ydHMucmVuZGVyVG9TdGF0aWNOb2RlU3RyZWFtID0gbC5yZW5kZXJUb1N0YXRpY05vZGVTdHJlYW07XG5leHBvcnRzLnJlbmRlclRvUGlwZWFibGVTdHJlYW0gPSBzLnJlbmRlclRvUGlwZWFibGVTdHJlYW07XG5pZiAocy5yZXN1bWVUb1BpcGVhYmxlU3RyZWFtKSB7XG4gIGV4cG9ydHMucmVzdW1lVG9QaXBlYWJsZVN0cmVhbSA9IHMucmVzdW1lVG9QaXBlYWJsZVN0cmVhbTtcbn1cbiJdLCJuYW1lcyI6WyJsIiwicyIsInByb2Nlc3MiLCJyZXF1aXJlIiwiZXhwb3J0cyIsInZlcnNpb24iLCJyZW5kZXJUb1N0cmluZyIsInJlbmRlclRvU3RhdGljTWFya3VwIiwicmVuZGVyVG9Ob2RlU3RyZWFtIiwicmVuZGVyVG9TdGF0aWNOb2RlU3RyZWFtIiwicmVuZGVyVG9QaXBlYWJsZVN0cmVhbSIsInJlc3VtZVRvUGlwZWFibGVTdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/react-dom/server.node.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/react/cjs/react.development.js":
/*!*************************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react/cjs/react.development.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var ReactVersion = \"18.3.0-canary-2c338b16f-20231116\";\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        /**\n * Keeps track of the current dispatcher.\n */ var ReactCurrentDispatcher$1 = {\n            current: null\n        };\n        /**\n * Keeps track of the current Cache dispatcher.\n */ var ReactCurrentCache = {\n            current: null\n        };\n        /**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */ var ReactCurrentBatchConfig = {\n            transition: null\n        };\n        var ReactCurrentActQueue = {\n            current: null,\n            // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n            isBatchingLegacy: false,\n            didScheduleLegacyUpdate: false,\n            // Tracks whether something called `use` during the current batch of work.\n            // Determines whether we should yield to microtasks to unwrap already resolved\n            // promises without suspending.\n            didUsePromise: false\n        };\n        /**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */ var ReactCurrentOwner = {\n            /**\n   * @internal\n   * @type {ReactComponent}\n   */ current: null\n        };\n        var ReactDebugCurrentFrame$1 = {};\n        var currentExtraStackFrame = null;\n        function setExtraStackFrame(stack) {\n            {\n                currentExtraStackFrame = stack;\n            }\n        }\n        {\n            ReactDebugCurrentFrame$1.setExtraStackFrame = function(stack) {\n                {\n                    currentExtraStackFrame = stack;\n                }\n            }; // Stack implementation injected by the current renderer.\n            ReactDebugCurrentFrame$1.getCurrentStack = null;\n            ReactDebugCurrentFrame$1.getStackAddendum = function() {\n                var stack = \"\"; // Add an extra top frame while an element is being validated\n                if (currentExtraStackFrame) {\n                    stack += currentExtraStackFrame;\n                } // Delegate to the injected renderer-specific implementation\n                var impl = ReactDebugCurrentFrame$1.getCurrentStack;\n                if (impl) {\n                    stack += impl() || \"\";\n                }\n                return stack;\n            };\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n        var ReactSharedInternals = {\n            ReactCurrentDispatcher: ReactCurrentDispatcher$1,\n            ReactCurrentCache: ReactCurrentCache,\n            ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n            ReactCurrentOwner: ReactCurrentOwner\n        };\n        {\n            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;\n            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n        }\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        var didWarnStateUpdateForUnmountedComponent = {};\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && (_constructor.displayName || _constructor.name) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n                    return;\n                }\n                error(\"Can't call %s on a component that is not yet mounted. \" + \"This is a no-op, but it might indicate a bug in your application. \" + \"Instead, assign to `this.state` directly or define a `state = {};` \" + \"class property with the desired state in the %s component.\", callerName, componentName);\n                didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n            }\n        }\n        /**\n * This is the abstract API for an update queue.\n */ var ReactNoopUpdateQueue = {\n            /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */ isMounted: function(publicInstance) {\n                return false;\n            },\n            /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {\n                warnNoop(publicInstance, \"forceUpdate\");\n            },\n            /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {\n                warnNoop(publicInstance, \"replaceState\");\n            },\n            /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {\n                warnNoop(publicInstance, \"setState\");\n            }\n        };\n        var assign = Object.assign;\n        var emptyObject = {};\n        {\n            Object.freeze(emptyObject);\n        }\n        /**\n * Base class helpers for the updating state of a component.\n */ function Component(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n            // renderer.\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        Component.prototype.isReactComponent = {};\n        /**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */ Component.prototype.setState = function(partialState, callback) {\n            if (typeof partialState !== \"object\" && typeof partialState !== \"function\" && partialState != null) {\n                throw new Error(\"setState(...): takes an object of state variables to update or a \" + \"function which returns an object of state variables.\");\n            }\n            this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n        };\n        /**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */ Component.prototype.forceUpdate = function(callback) {\n            this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n        };\n        /**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */ {\n            var deprecatedAPIs = {\n                isMounted: [\n                    \"isMounted\",\n                    \"Instead, make sure to clean up subscriptions and pending requests in \" + \"componentWillUnmount to prevent memory leaks.\"\n                ],\n                replaceState: [\n                    \"replaceState\",\n                    \"Refactor your code to use setState instead (see \" + \"https://github.com/facebook/react/issues/3236).\"\n                ]\n            };\n            var defineDeprecationWarning = function(methodName, info) {\n                Object.defineProperty(Component.prototype, methodName, {\n                    get: function() {\n                        warn(\"%s(...) is deprecated in plain JavaScript React classes. %s\", info[0], info[1]);\n                        return undefined;\n                    }\n                });\n            };\n            for(var fnName in deprecatedAPIs){\n                if (deprecatedAPIs.hasOwnProperty(fnName)) {\n                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n                }\n            }\n        }\n        function ComponentDummy() {}\n        ComponentDummy.prototype = Component.prototype;\n        /**\n * Convenience component with default shallow equality check for sCU.\n */ function PureComponent(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n        pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n        assign(pureComponentPrototype, Component.prototype);\n        pureComponentPrototype.isPureReactComponent = true;\n        // an immutable object with a single mutable value\n        function createRef() {\n            var refObject = {\n                current: null\n            };\n            {\n                Object.seal(refObject);\n            }\n            return refObject;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            var warnAboutAccessingKey = function() {\n                {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingKey.isReactWarning = true;\n            Object.defineProperty(props, \"key\", {\n                get: warnAboutAccessingKey,\n                configurable: true\n            });\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            var warnAboutAccessingRef = function() {\n                {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingRef.isReactWarning = true;\n            Object.defineProperty(props, \"ref\", {\n                get: warnAboutAccessingRef,\n                configurable: true\n            });\n        }\n        function warnIfStringRefCannotBeAutoConverted(config) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", componentName, config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */ function createElement$1(type, config, children) {\n            var propName; // Reserved names are extracted\n            var props = {};\n            var key = null;\n            var ref = null;\n            var self = null;\n            var source = null;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    {\n                        warnIfStringRefCannotBeAutoConverted(config);\n                    }\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                self = config.__self === undefined ? null : config.__self;\n                source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                {\n                    if (Object.freeze) {\n                        Object.freeze(childArray);\n                    }\n                }\n                props.children = childArray;\n            } // Resolve default props\n            if (type && type.defaultProps) {\n                var defaultProps = type.defaultProps;\n                for(propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n            }\n            {\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n            }\n            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n        }\n        function cloneAndReplaceKey(oldElement, newKey) {\n            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n            return newElement;\n        }\n        /**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */ function cloneElement$1(element, config, children) {\n            if (element === null || element === undefined) {\n                throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n            }\n            var propName; // Original props are copied\n            var props = assign({}, element.props); // Reserved names are extracted\n            var key = element.key;\n            var ref = element.ref; // Self is preserved since the owner is preserved.\n            var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n            // transpiler, and the original source is probably a better indicator of the\n            // true owner.\n            var source = element._source; // Owner will be preserved, unless ref is overridden\n            var owner = element._owner;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    // Silently steal the ref from the parent.\n                    ref = config.ref;\n                    owner = ReactCurrentOwner.current;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                } // Remaining properties override existing props\n                var defaultProps;\n                if (element.type && element.type.defaultProps) {\n                    defaultProps = element.type.defaultProps;\n                }\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        if (config[propName] === undefined && defaultProps !== undefined) {\n                            // Resolve default props\n                            props[propName] = defaultProps[propName];\n                        } else {\n                            props[propName] = config[propName];\n                        }\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                props.children = childArray;\n            }\n            return ReactElement(element.type, key, ref, self, source, owner, props);\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        var SEPARATOR = \".\";\n        var SUBSEPARATOR = \":\";\n        /**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */ function escape(key) {\n            var escapeRegex = /[=:]/g;\n            var escaperLookup = {\n                \"=\": \"=0\",\n                \":\": \"=2\"\n            };\n            var escapedString = key.replace(escapeRegex, function(match) {\n                return escaperLookup[match];\n            });\n            return \"$\" + escapedString;\n        }\n        /**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */ var didWarnAboutMaps = false;\n        var userProvidedKeyEscapeRegex = /\\/+/g;\n        function escapeUserProvidedKey(text) {\n            return text.replace(userProvidedKeyEscapeRegex, \"$&/\");\n        }\n        /**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */ function getElementKey(element, index) {\n            // Do some typechecking here since we call this blindly. We want to ensure\n            // that we don't block potential future ES APIs.\n            if (typeof element === \"object\" && element !== null && element.key != null) {\n                // Explicit key\n                {\n                    checkKeyStringCoercion(element.key);\n                }\n                return escape(\"\" + element.key);\n            } // Implicit key determined by the index in the set\n            return index.toString(36);\n        }\n        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n            var type = typeof children;\n            if (type === \"undefined\" || type === \"boolean\") {\n                // All of the above are perceived as null.\n                children = null;\n            }\n            var invokeCallback = false;\n            if (children === null) {\n                invokeCallback = true;\n            } else {\n                switch(type){\n                    case \"string\":\n                    case \"number\":\n                        invokeCallback = true;\n                        break;\n                    case \"object\":\n                        switch(children.$$typeof){\n                            case REACT_ELEMENT_TYPE:\n                            case REACT_PORTAL_TYPE:\n                                invokeCallback = true;\n                        }\n                }\n            }\n            if (invokeCallback) {\n                var _child = children;\n                var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n                // so that it's consistent if the number of children grows:\n                var childKey = nameSoFar === \"\" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n                if (isArray(mappedChild)) {\n                    var escapedChildKey = \"\";\n                    if (childKey != null) {\n                        escapedChildKey = escapeUserProvidedKey(childKey) + \"/\";\n                    }\n                    mapIntoArray(mappedChild, array, escapedChildKey, \"\", function(c) {\n                        return c;\n                    });\n                } else if (mappedChild != null) {\n                    if (isValidElement(mappedChild)) {\n                        {\n                            // The `if` statement here prevents auto-disabling of the safe\n                            // coercion ESLint rule, so we must manually disable it below.\n                            // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n                            if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n                                checkKeyStringCoercion(mappedChild.key);\n                            }\n                        }\n                        mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children\n                        escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(\"\" + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n                        ) + \"/\" : \"\") + childKey);\n                    }\n                    array.push(mappedChild);\n                }\n                return 1;\n            }\n            var child;\n            var nextName;\n            var subtreeCount = 0; // Count of children found in the current subtree.\n            var nextNamePrefix = nameSoFar === \"\" ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n            if (isArray(children)) {\n                for(var i = 0; i < children.length; i++){\n                    child = children[i];\n                    nextName = nextNamePrefix + getElementKey(child, i);\n                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                }\n            } else {\n                var iteratorFn = getIteratorFn(children);\n                if (typeof iteratorFn === \"function\") {\n                    var iterableChildren = children;\n                    {\n                        // Warn about using Maps as children\n                        if (iteratorFn === iterableChildren.entries) {\n                            if (!didWarnAboutMaps) {\n                                warn(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                            }\n                            didWarnAboutMaps = true;\n                        }\n                    }\n                    var iterator = iteratorFn.call(iterableChildren);\n                    var step;\n                    var ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n                    while(!(step = iterator.next()).done){\n                        child = step.value;\n                        nextName = nextNamePrefix + getElementKey(child, ii++);\n                        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                    }\n                } else if (type === \"object\") {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    var childrenString = String(children);\n                    throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === \"[object Object]\" ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\" : childrenString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n                }\n            }\n            return subtreeCount;\n        }\n        /**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */ function mapChildren(children, func, context) {\n            if (children == null) {\n                // $FlowFixMe limitation refining abstract types in Flow\n                return children;\n            }\n            var result = [];\n            var count = 0;\n            mapIntoArray(children, result, \"\", \"\", function(child) {\n                return func.call(context, child, count++);\n            });\n            return result;\n        }\n        /**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */ function countChildren(children) {\n            var n = 0;\n            mapChildren(children, function() {\n                n++; // Don't return anything\n            });\n            return n;\n        }\n        /**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */ function forEachChildren(children, forEachFunc, forEachContext) {\n            mapChildren(children, function() {\n                forEachFunc.apply(this, arguments); // Don't return anything.\n            }, forEachContext);\n        }\n        /**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */ function toArray(children) {\n            return mapChildren(children, function(child) {\n                return child;\n            }) || [];\n        }\n        /**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */ function onlyChild(children) {\n            if (!isValidElement(children)) {\n                throw new Error(\"React.Children.only expected to receive a single React element child.\");\n            }\n            return children;\n        }\n        function createContext(defaultValue) {\n            // TODO: Second argument used to be an optional `calculateChangedBits`\n            // function. Warn to reserve for future use?\n            var context = {\n                $$typeof: REACT_CONTEXT_TYPE,\n                // As a workaround to support multiple concurrent renderers, we categorize\n                // some renderers as primary and others as secondary. We only expect\n                // there to be two concurrent renderers at most: React Native (primary) and\n                // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                // Secondary renderers store their context values on separate fields.\n                _currentValue: defaultValue,\n                _currentValue2: defaultValue,\n                // Used to track how many concurrent renderers this context currently\n                // supports within in a single renderer. Such as parallel server rendering.\n                _threadCount: 0,\n                // These are circular\n                Provider: null,\n                Consumer: null,\n                // Add these to use same hidden class in VM as ServerContext\n                _defaultValue: null,\n                _globalName: null\n            };\n            context.Provider = {\n                $$typeof: REACT_PROVIDER_TYPE,\n                _context: context\n            };\n            var hasWarnedAboutUsingNestedContextConsumers = false;\n            var hasWarnedAboutUsingConsumerProvider = false;\n            var hasWarnedAboutDisplayNameOnConsumer = false;\n            {\n                // A separate object, but proxies back to the original context object for\n                // backwards compatibility. It has a different $$typeof, so we can properly\n                // warn for the incorrect usage of Context as a Consumer.\n                var Consumer = {\n                    $$typeof: REACT_CONTEXT_TYPE,\n                    _context: context\n                }; // $FlowFixMe[prop-missing]: Flow complains about not setting a value, which is intentional here\n                Object.defineProperties(Consumer, {\n                    Provider: {\n                        get: function() {\n                            if (!hasWarnedAboutUsingConsumerProvider) {\n                                hasWarnedAboutUsingConsumerProvider = true;\n                                error(\"Rendering <Context.Consumer.Provider> is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Provider> instead?\");\n                            }\n                            return context.Provider;\n                        },\n                        set: function(_Provider) {\n                            context.Provider = _Provider;\n                        }\n                    },\n                    _currentValue: {\n                        get: function() {\n                            return context._currentValue;\n                        },\n                        set: function(_currentValue) {\n                            context._currentValue = _currentValue;\n                        }\n                    },\n                    _currentValue2: {\n                        get: function() {\n                            return context._currentValue2;\n                        },\n                        set: function(_currentValue2) {\n                            context._currentValue2 = _currentValue2;\n                        }\n                    },\n                    _threadCount: {\n                        get: function() {\n                            return context._threadCount;\n                        },\n                        set: function(_threadCount) {\n                            context._threadCount = _threadCount;\n                        }\n                    },\n                    Consumer: {\n                        get: function() {\n                            if (!hasWarnedAboutUsingNestedContextConsumers) {\n                                hasWarnedAboutUsingNestedContextConsumers = true;\n                                error(\"Rendering <Context.Consumer.Consumer> is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n                            }\n                            return context.Consumer;\n                        }\n                    },\n                    displayName: {\n                        get: function() {\n                            return context.displayName;\n                        },\n                        set: function(displayName) {\n                            if (!hasWarnedAboutDisplayNameOnConsumer) {\n                                warn(\"Setting `displayName` on Context.Consumer has no effect. \" + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n                                hasWarnedAboutDisplayNameOnConsumer = true;\n                            }\n                        }\n                    }\n                }); // $FlowFixMe[prop-missing]: Flow complains about missing properties because it doesn't understand defineProperty\n                context.Consumer = Consumer;\n            }\n            {\n                context._currentRenderer = null;\n                context._currentRenderer2 = null;\n            }\n            return context;\n        }\n        var Uninitialized = -1;\n        var Pending = 0;\n        var Resolved = 1;\n        var Rejected = 2;\n        function lazyInitializer(payload) {\n            if (payload._status === Uninitialized) {\n                var ctor = payload._result;\n                var thenable = ctor(); // Transition to the next state.\n                // This might throw either because it's missing or throws. If so, we treat it\n                // as still uninitialized and try again next time. Which is the same as what\n                // happens if the ctor or any wrappers processing the ctor throws. This might\n                // end up fixing it if the resolution was a concurrency bug.\n                thenable.then(function(moduleObject) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var resolved = payload;\n                        resolved._status = Resolved;\n                        resolved._result = moduleObject;\n                    }\n                }, function(error) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var rejected = payload;\n                        rejected._status = Rejected;\n                        rejected._result = error;\n                    }\n                });\n                if (payload._status === Uninitialized) {\n                    // In case, we're still uninitialized, then we're waiting for the thenable\n                    // to resolve. Set it as pending in the meantime.\n                    var pending = payload;\n                    pending._status = Pending;\n                    pending._result = thenable;\n                }\n            }\n            if (payload._status === Resolved) {\n                var moduleObject = payload._result;\n                {\n                    if (moduleObject === undefined) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\\n\\n\" + \"Did you accidentally put curly braces around the import?\", moduleObject);\n                    }\n                }\n                {\n                    if (!(\"default\" in moduleObject)) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\", moduleObject);\n                    }\n                }\n                return moduleObject.default;\n            } else {\n                throw payload._result;\n            }\n        }\n        function lazy(ctor) {\n            var payload = {\n                // We use these fields to store the result.\n                _status: Uninitialized,\n                _result: ctor\n            };\n            var lazyType = {\n                $$typeof: REACT_LAZY_TYPE,\n                _payload: payload,\n                _init: lazyInitializer\n            };\n            {\n                // In production, this would just set it on the object.\n                var defaultProps;\n                var propTypes; // $FlowFixMe[prop-missing]\n                Object.defineProperties(lazyType, {\n                    defaultProps: {\n                        configurable: true,\n                        get: function() {\n                            return defaultProps;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newDefaultProps) {\n                            error(\"React.lazy(...): It is not supported to assign `defaultProps` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            defaultProps = newDefaultProps; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"defaultProps\", {\n                                enumerable: true\n                            });\n                        }\n                    },\n                    propTypes: {\n                        configurable: true,\n                        get: function() {\n                            return propTypes;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newPropTypes) {\n                            error(\"React.lazy(...): It is not supported to assign `propTypes` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            propTypes = newPropTypes; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"propTypes\", {\n                                enumerable: true\n                            });\n                        }\n                    }\n                });\n            }\n            return lazyType;\n        }\n        function forwardRef(render) {\n            {\n                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n                    error(\"forwardRef requires a render function but received a `memo` \" + \"component. Instead of forwardRef(memo(...)), use \" + \"memo(forwardRef(...)).\");\n                } else if (typeof render !== \"function\") {\n                    error(\"forwardRef requires a render function but was given %s.\", render === null ? \"null\" : typeof render);\n                } else {\n                    if (render.length !== 0 && render.length !== 2) {\n                        error(\"forwardRef render functions accept exactly two parameters: props and ref. %s\", render.length === 1 ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\");\n                    }\n                }\n                if (render != null) {\n                    if (render.defaultProps != null || render.propTypes != null) {\n                        error(\"forwardRef render functions do not support propTypes or defaultProps. \" + \"Did you accidentally pass a React component?\");\n                    }\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: render\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.forwardRef((props, ref) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!render.name && !render.displayName) {\n                            render.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function memo(type, compare) {\n            {\n                if (!isValidElementType(type)) {\n                    error(\"memo: The first argument must be a component. Instead \" + \"received: %s\", type === null ? \"null\" : typeof type);\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_MEMO_TYPE,\n                type: type,\n                compare: compare === undefined ? null : compare\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.memo((props) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!type.name && !type.displayName) {\n                            type.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var UNTERMINATED = 0;\n        var TERMINATED = 1;\n        var ERRORED = 2;\n        function createCacheRoot() {\n            return new WeakMap();\n        }\n        function createCacheNode() {\n            return {\n                s: UNTERMINATED,\n                // status, represents whether the cached computation returned a value or threw an error\n                v: undefined,\n                // value, either the cached result or an error, depending on s\n                o: null,\n                // object cache, a WeakMap where non-primitive arguments are stored\n                p: null // primitive cache, a regular Map where primitive arguments are stored.\n            };\n        }\n        function cache(fn) {\n            return function() {\n                var dispatcher = ReactCurrentCache.current;\n                if (!dispatcher) {\n                    // If there is no dispatcher, then we treat this as not being cached.\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    return fn.apply(null, arguments);\n                }\n                var fnMap = dispatcher.getCacheForType(createCacheRoot);\n                var fnNode = fnMap.get(fn);\n                var cacheNode;\n                if (fnNode === undefined) {\n                    cacheNode = createCacheNode();\n                    fnMap.set(fn, cacheNode);\n                } else {\n                    cacheNode = fnNode;\n                }\n                for(var i = 0, l = arguments.length; i < l; i++){\n                    var arg = arguments[i];\n                    if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\n                        // Objects go into a WeakMap\n                        var objectCache = cacheNode.o;\n                        if (objectCache === null) {\n                            cacheNode.o = objectCache = new WeakMap();\n                        }\n                        var objectNode = objectCache.get(arg);\n                        if (objectNode === undefined) {\n                            cacheNode = createCacheNode();\n                            objectCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = objectNode;\n                        }\n                    } else {\n                        // Primitives go into a regular Map\n                        var primitiveCache = cacheNode.p;\n                        if (primitiveCache === null) {\n                            cacheNode.p = primitiveCache = new Map();\n                        }\n                        var primitiveNode = primitiveCache.get(arg);\n                        if (primitiveNode === undefined) {\n                            cacheNode = createCacheNode();\n                            primitiveCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = primitiveNode;\n                        }\n                    }\n                }\n                if (cacheNode.s === TERMINATED) {\n                    return cacheNode.v;\n                }\n                if (cacheNode.s === ERRORED) {\n                    throw cacheNode.v;\n                }\n                try {\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    var result = fn.apply(null, arguments);\n                    var terminatedNode = cacheNode;\n                    terminatedNode.s = TERMINATED;\n                    terminatedNode.v = result;\n                    return result;\n                } catch (error) {\n                    // We store the first error that's thrown and rethrow it.\n                    var erroredNode = cacheNode;\n                    erroredNode.s = ERRORED;\n                    erroredNode.v = error;\n                    throw error;\n                }\n            };\n        }\n        function resolveDispatcher() {\n            var dispatcher = ReactCurrentDispatcher$1.current;\n            {\n                if (dispatcher === null) {\n                    error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n                }\n            }\n            // intentionally don't throw our own error because this is in a hot path.\n            // Also helps ensure this is inlined.\n            return dispatcher;\n        }\n        function useContext(Context) {\n            var dispatcher = resolveDispatcher();\n            {\n                // TODO: add a more generic warning for invalid values.\n                if (Context._context !== undefined) {\n                    var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n                    // and nobody should be using this in existing code.\n                    if (realContext.Consumer === Context) {\n                        error(\"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be \" + \"removed in a future major release. Did you mean to call useContext(Context) instead?\");\n                    } else if (realContext.Provider === Context) {\n                        error(\"Calling useContext(Context.Provider) is not supported. \" + \"Did you mean to call useContext(Context) instead?\");\n                    }\n                }\n            }\n            return dispatcher.useContext(Context);\n        }\n        function useState(initialState) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useState(initialState);\n        }\n        function useReducer(reducer, initialArg, init) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useReducer(reducer, initialArg, init);\n        }\n        function useRef(initialValue) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useRef(initialValue);\n        }\n        function useEffect(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useEffect(create, deps);\n        }\n        function useInsertionEffect(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useInsertionEffect(create, deps);\n        }\n        function useLayoutEffect(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useLayoutEffect(create, deps);\n        }\n        function useCallback(callback, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useCallback(callback, deps);\n        }\n        function useMemo(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useMemo(create, deps);\n        }\n        function useImperativeHandle(ref, create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useImperativeHandle(ref, create, deps);\n        }\n        function useDebugValue(value, formatterFn) {\n            {\n                var dispatcher = resolveDispatcher();\n                return dispatcher.useDebugValue(value, formatterFn);\n            }\n        }\n        function useTransition() {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useTransition();\n        }\n        function useDeferredValue(value, initialValue) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useDeferredValue(value, initialValue);\n        }\n        function useId() {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useId();\n        }\n        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        }\n        function useCacheRefresh() {\n            var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n            return dispatcher.useCacheRefresh();\n        }\n        function use(usable) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.use(usable);\n        }\n        function useOptimistic(passthrough, reducer) {\n            var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n            return dispatcher.useOptimistic(passthrough, reducer);\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    setExtraStackFrame(stack);\n                } else {\n                    setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        function getDeclarationErrorAddendum() {\n            if (ReactCurrentOwner.current) {\n                var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                if (name) {\n                    return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                }\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendum(source) {\n            if (source !== undefined) {\n                var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                var lineNumber = source.lineNumber;\n                return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendumForProps(elementProps) {\n            if (elementProps !== null && elementProps !== undefined) {\n                return getSourceInfoErrorAddendum(elementProps.__source);\n            }\n            return \"\";\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            var info = getDeclarationErrorAddendum();\n            if (!info) {\n                var parentName = typeof parentType === \"string\" ? parentType : parentType.displayName || parentType.name;\n                if (parentName) {\n                    info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                }\n            }\n            return info;\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            if (!element._store || element._store.validated || element.key != null) {\n                return;\n            }\n            element._store.validated = true;\n            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                return;\n            }\n            ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n            // property, it may be the creator of the child that's responsible for\n            // assigning it a key.\n            var childOwner = \"\";\n            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                // Give the component that originally created this child.\n                childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n            }\n            {\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            if (typeof node !== \"object\" || !node) {\n                return;\n            }\n            if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n            else if (isArray(node)) {\n                for(var i = 0; i < node.length; i++){\n                    var child = node[i];\n                    if (isValidElement(child)) {\n                        validateExplicitKey(child, parentType);\n                    }\n                }\n            } else if (isValidElement(node)) {\n                // This element was passed in a valid location.\n                if (node._store) {\n                    node._store.validated = true;\n                }\n            } else {\n                var iteratorFn = getIteratorFn(node);\n                if (typeof iteratorFn === \"function\") {\n                    // Entry iterators used to provide implicit keys,\n                    // but now we print a separate warning for them later.\n                    if (iteratorFn !== node.entries) {\n                        var iterator = iteratorFn.call(node);\n                        var step;\n                        while(!(step = iterator.next()).done){\n                            if (isValidElement(step.value)) {\n                                validateExplicitKey(step.value, parentType);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        function createElementWithValidation(type, props, children) {\n            var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n            // succeed and there will likely be errors in render.\n            if (!validType) {\n                var info = \"\";\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                }\n                var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n                if (sourceInfo) {\n                    info += sourceInfo;\n                } else {\n                    info += getDeclarationErrorAddendum();\n                }\n                var typeString;\n                if (type === null) {\n                    typeString = \"null\";\n                } else if (isArray(type)) {\n                    typeString = \"array\";\n                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                    typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                    info = \" Did you accidentally export a JSX literal instead of a component?\";\n                } else {\n                    typeString = typeof type;\n                }\n                {\n                    error(\"React.createElement: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n            }\n            var element = createElement$1.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n            // TODO: Drop this when these are no longer allowed as the type argument.\n            if (element == null) {\n                return element;\n            } // Skip key warning if the type isn't valid since our key validation logic\n            // doesn't expect a non-string/function type and can throw confusing errors.\n            // We don't want exception behavior to differ between dev and prod.\n            // (Rendering will throw with a helpful message and as soon as the type is\n            // fixed, the key warnings will appear.)\n            if (validType) {\n                for(var i = 2; i < arguments.length; i++){\n                    validateChildKeys(arguments[i], type);\n                }\n            }\n            if (type === REACT_FRAGMENT_TYPE) {\n                validateFragmentProps(element);\n            } else {\n                validatePropTypes(element);\n            }\n            return element;\n        }\n        var didWarnAboutDeprecatedCreateFactory = false;\n        function createFactoryWithValidation(type) {\n            var validatedFactory = createElementWithValidation.bind(null, type);\n            validatedFactory.type = type;\n            {\n                if (!didWarnAboutDeprecatedCreateFactory) {\n                    didWarnAboutDeprecatedCreateFactory = true;\n                    warn(\"React.createFactory() is deprecated and will be removed in \" + \"a future major release. Consider using JSX \" + \"or use React.createElement() directly instead.\");\n                } // Legacy hook: remove it\n                Object.defineProperty(validatedFactory, \"type\", {\n                    enumerable: false,\n                    get: function() {\n                        warn(\"Factory.type is deprecated. Access the class directly \" + \"before passing it to createFactory.\");\n                        Object.defineProperty(this, \"type\", {\n                            value: type\n                        });\n                        return type;\n                    }\n                });\n            }\n            return validatedFactory;\n        }\n        function cloneElementWithValidation(element, props, children) {\n            var newElement = cloneElement$1.apply(this, arguments);\n            for(var i = 2; i < arguments.length; i++){\n                validateChildKeys(arguments[i], newElement.type);\n            }\n            validatePropTypes(newElement);\n            return newElement;\n        }\n        function startTransition(scope, options) {\n            var prevTransition = ReactCurrentBatchConfig.transition;\n            ReactCurrentBatchConfig.transition = {};\n            var currentTransition = ReactCurrentBatchConfig.transition;\n            {\n                ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n            }\n            try {\n                scope();\n            } finally{\n                ReactCurrentBatchConfig.transition = prevTransition;\n                {\n                    if (prevTransition === null && currentTransition._updatedFibers) {\n                        var updatedFibersCount = currentTransition._updatedFibers.size;\n                        currentTransition._updatedFibers.clear();\n                        if (updatedFibersCount > 10) {\n                            warn(\"Detected a large number of updates inside startTransition. \" + \"If this is due to a subscription please re-write it to use React provided hooks. \" + \"Otherwise concurrent mode guarantees are off the table.\");\n                        }\n                    }\n                }\n            }\n        }\n        var didWarnAboutMessageChannel = false;\n        var enqueueTaskImpl = null;\n        function enqueueTask(task) {\n            if (enqueueTaskImpl === null) {\n                try {\n                    // read require off the module object to get around the bundlers.\n                    // we don't want them to detect a require and bundle a Node polyfill.\n                    var requireString = (\"require\" + Math.random()).slice(0, 7);\n                    var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n                    // version of setImmediate, bypassing fake timers if any.\n                    enqueueTaskImpl = nodeRequire.call(module, \"timers\").setImmediate;\n                } catch (_err) {\n                    // we're in a browser\n                    // we can't use regular timers because they may still be faked\n                    // so we try MessageChannel+postMessage instead\n                    enqueueTaskImpl = function(callback) {\n                        {\n                            if (didWarnAboutMessageChannel === false) {\n                                didWarnAboutMessageChannel = true;\n                                if (typeof MessageChannel === \"undefined\") {\n                                    error(\"This browser does not have a MessageChannel implementation, \" + \"so enqueuing tasks via await act(async () => ...) will fail. \" + \"Please file an issue at https://github.com/facebook/react/issues \" + \"if you encounter this warning.\");\n                                }\n                            }\n                        }\n                        var channel = new MessageChannel();\n                        channel.port1.onmessage = callback;\n                        channel.port2.postMessage(undefined);\n                    };\n                }\n            }\n            return enqueueTaskImpl(task);\n        }\n        // number of `act` scopes on the stack.\n        var actScopeDepth = 0; // We only warn the first time you neglect to await an async `act` scope.\n        var didWarnNoAwaitAct = false;\n        function act(callback) {\n            {\n                // When ReactCurrentActQueue.current is not null, it signals to React that\n                // we're currently inside an `act` scope. React will push all its tasks to\n                // this queue instead of scheduling them with platform APIs.\n                //\n                // We set this to an empty array when we first enter an `act` scope, and\n                // only unset it once we've left the outermost `act` scope — remember that\n                // `act` calls can be nested.\n                //\n                // If we're already inside an `act` scope, reuse the existing queue.\n                var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n                var prevActQueue = ReactCurrentActQueue.current;\n                var prevActScopeDepth = actScopeDepth;\n                actScopeDepth++;\n                var queue = ReactCurrentActQueue.current = prevActQueue !== null ? prevActQueue : []; // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n                // set to `true` while the given callback is executed, not for updates\n                // triggered during an async event, because this is how the legacy\n                // implementation of `act` behaved.\n                ReactCurrentActQueue.isBatchingLegacy = true;\n                var result; // This tracks whether the `act` call is awaited. In certain cases, not\n                // awaiting it is a mistake, so we will detect that and warn.\n                var didAwaitActCall = false;\n                try {\n                    // Reset this to `false` right before entering the React work loop. The\n                    // only place we ever read this fields is just below, right after running\n                    // the callback. So we don't need to reset after the callback runs.\n                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n                    result = callback();\n                    var didScheduleLegacyUpdate = ReactCurrentActQueue.didScheduleLegacyUpdate; // Replicate behavior of original `act` implementation in legacy mode,\n                    // which flushed updates immediately after the scope function exits, even\n                    // if it's an async function.\n                    if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {\n                        flushActQueue(queue);\n                    } // `isBatchingLegacy` gets reset using the regular stack, not the async\n                    // one used to track `act` scopes. Why, you may be wondering? Because\n                    // that's how it worked before version 18. Yes, it's confusing! We should\n                    // delete legacy mode!!\n                    ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n                } catch (error) {\n                    // `isBatchingLegacy` gets reset using the regular stack, not the async\n                    // one used to track `act` scopes. Why, you may be wondering? Because\n                    // that's how it worked before version 18. Yes, it's confusing! We should\n                    // delete legacy mode!!\n                    ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n                    popActScope(prevActQueue, prevActScopeDepth);\n                    throw error;\n                }\n                if (result !== null && typeof result === \"object\" && // $FlowFixMe[method-unbinding]\n                typeof result.then === \"function\") {\n                    // A promise/thenable was returned from the callback. Wait for it to\n                    // resolve before flushing the queue.\n                    //\n                    // If `act` were implemented as an async function, this whole block could\n                    // be a single `await` call. That's really the only difference between\n                    // this branch and the next one.\n                    var thenable = result; // Warn if the an `act` call with an async scope is not awaited. In a\n                    // future release, consider making this an error.\n                    queueSeveralMicrotasks(function() {\n                        if (!didAwaitActCall && !didWarnNoAwaitAct) {\n                            didWarnNoAwaitAct = true;\n                            error(\"You called act(async () => ...) without await. \" + \"This could lead to unexpected testing behaviour, \" + \"interleaving multiple act calls and mixing their \" + \"scopes. \" + \"You should - await act(async () => ...);\");\n                        }\n                    });\n                    return {\n                        then: function(resolve, reject) {\n                            didAwaitActCall = true;\n                            thenable.then(function(returnValue) {\n                                popActScope(prevActQueue, prevActScopeDepth);\n                                if (prevActScopeDepth === 0) {\n                                    // We're exiting the outermost `act` scope. Flush the queue.\n                                    try {\n                                        flushActQueue(queue);\n                                        enqueueTask(function() {\n                                            return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                                        });\n                                    } catch (error) {\n                                        // `thenable` might not be a real promise, and `flushActQueue`\n                                        // might throw, so we need to wrap `flushActQueue` in a\n                                        // try/catch.\n                                        reject(error);\n                                    }\n                                } else {\n                                    resolve(returnValue);\n                                }\n                            }, function(error) {\n                                popActScope(prevActQueue, prevActScopeDepth);\n                                reject(error);\n                            });\n                        }\n                    };\n                } else {\n                    var returnValue = result; // The callback is not an async function. Exit the current\n                    // scope immediately.\n                    popActScope(prevActQueue, prevActScopeDepth);\n                    if (prevActScopeDepth === 0) {\n                        // We're exiting the outermost `act` scope. Flush the queue.\n                        flushActQueue(queue); // If the queue is not empty, it implies that we intentionally yielded\n                        // to the main thread, because something suspended. We will continue\n                        // in an asynchronous task.\n                        //\n                        // Warn if something suspends but the `act` call is not awaited.\n                        // In a future release, consider making this an error.\n                        if (queue.length !== 0) {\n                            queueSeveralMicrotasks(function() {\n                                if (!didAwaitActCall && !didWarnNoAwaitAct) {\n                                    didWarnNoAwaitAct = true;\n                                    error(\"A component suspended inside an `act` scope, but the \" + \"`act` call was not awaited. When testing React \" + \"components that depend on asynchronous data, you must \" + \"await the result:\\n\\n\" + \"await act(() => ...)\");\n                                }\n                            });\n                        } // Like many things in this module, this is next part is confusing.\n                        //\n                        // We do not currently require every `act` call that is passed a\n                        // callback to be awaited, through arguably we should. Since this\n                        // callback was synchronous, we need to exit the current scope before\n                        // returning.\n                        //\n                        // However, if thenable we're about to return *is* awaited, we'll\n                        // immediately restore the current scope. So it shouldn't observable.\n                        //\n                        // This doesn't affect the case where the scope callback is async,\n                        // because we always require those calls to be awaited.\n                        //\n                        // TODO: In a future version, consider always requiring all `act` calls\n                        // to be awaited, regardless of whether the callback is sync or async.\n                        ReactCurrentActQueue.current = null;\n                    }\n                    return {\n                        then: function(resolve, reject) {\n                            didAwaitActCall = true;\n                            if (prevActScopeDepth === 0) {\n                                // If the `act` call is awaited, restore the queue we were\n                                // using before (see long comment above) so we can flush it.\n                                ReactCurrentActQueue.current = queue;\n                                enqueueTask(function() {\n                                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                                });\n                            } else {\n                                resolve(returnValue);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n        function popActScope(prevActQueue, prevActScopeDepth) {\n            {\n                if (prevActScopeDepth !== actScopeDepth - 1) {\n                    error(\"You seem to have overlapping act() calls, this is not supported. \" + \"Be sure to await previous act() calls before making a new one. \");\n                }\n                actScopeDepth = prevActScopeDepth;\n            }\n        }\n        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n            {\n                // Check if any tasks were scheduled asynchronously.\n                var queue = ReactCurrentActQueue.current;\n                if (queue !== null) {\n                    if (queue.length !== 0) {\n                        // Async tasks were scheduled, mostly likely in a microtask.\n                        // Keep flushing until there are no more.\n                        try {\n                            flushActQueue(queue); // The work we just performed may have schedule additional async\n                            // tasks. Wait a macrotask and check again.\n                            enqueueTask(function() {\n                                return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                            });\n                        } catch (error) {\n                            // Leave remaining tasks on the queue if something throws.\n                            reject(error);\n                        }\n                    } else {\n                        // The queue is empty. We can finish.\n                        ReactCurrentActQueue.current = null;\n                        resolve(returnValue);\n                    }\n                } else {\n                    resolve(returnValue);\n                }\n            }\n        }\n        var isFlushing = false;\n        function flushActQueue(queue) {\n            {\n                if (!isFlushing) {\n                    // Prevent re-entrance.\n                    isFlushing = true;\n                    var i = 0;\n                    try {\n                        for(; i < queue.length; i++){\n                            var callback = queue[i];\n                            do {\n                                ReactCurrentActQueue.didUsePromise = false;\n                                var continuation = callback(false);\n                                if (continuation !== null) {\n                                    if (ReactCurrentActQueue.didUsePromise) {\n                                        // The component just suspended. Yield to the main thread in\n                                        // case the promise is already resolved. If so, it will ping in\n                                        // a microtask and we can resume without unwinding the stack.\n                                        queue[i] = callback;\n                                        queue.splice(0, i);\n                                        return;\n                                    }\n                                    callback = continuation;\n                                } else {\n                                    break;\n                                }\n                            }while (true);\n                        } // We flushed the entire queue.\n                        queue.length = 0;\n                    } catch (error) {\n                        // If something throws, leave the remaining callbacks on the queue.\n                        queue.splice(0, i + 1);\n                        throw error;\n                    } finally{\n                        isFlushing = false;\n                    }\n                }\n            }\n        } // Some of our warnings attempt to detect if the `act` call is awaited by\n        // checking in an asynchronous task. Wait a few microtasks before checking. The\n        // only reason one isn't sufficient is we want to accommodate the case where an\n        // `act` call is returned from an async function without first being awaited,\n        // since that's a somewhat common pattern. If you do this too many times in a\n        // nested sequence, you might get a warning, but you can always fix by awaiting\n        // the call.\n        //\n        // A macrotask would also work (and is the fallback) but depending on the test\n        // environment it may cause the warning to fire too late.\n        var queueSeveralMicrotasks = typeof queueMicrotask === \"function\" ? function(callback) {\n            queueMicrotask(function() {\n                return queueMicrotask(callback);\n            });\n        } : enqueueTask;\n        var createElement = createElementWithValidation;\n        var cloneElement = cloneElementWithValidation;\n        var createFactory = createFactoryWithValidation;\n        var Children = {\n            map: mapChildren,\n            forEach: forEachChildren,\n            count: countChildren,\n            toArray: toArray,\n            only: onlyChild\n        };\n        exports.Children = Children;\n        exports.Component = Component;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.Profiler = REACT_PROFILER_TYPE;\n        exports.PureComponent = PureComponent;\n        exports.StrictMode = REACT_STRICT_MODE_TYPE;\n        exports.Suspense = REACT_SUSPENSE_TYPE;\n        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n        exports.cache = cache;\n        exports.cloneElement = cloneElement;\n        exports.createContext = createContext;\n        exports.createElement = createElement;\n        exports.createFactory = createFactory;\n        exports.createRef = createRef;\n        exports.forwardRef = forwardRef;\n        exports.isValidElement = isValidElement;\n        exports.lazy = lazy;\n        exports.memo = memo;\n        exports.startTransition = startTransition;\n        exports.unstable_act = act;\n        exports.unstable_useCacheRefresh = useCacheRefresh;\n        exports.use = use;\n        exports.useCallback = useCallback;\n        exports.useContext = useContext;\n        exports.useDebugValue = useDebugValue;\n        exports.useDeferredValue = useDeferredValue;\n        exports.useEffect = useEffect;\n        exports.useId = useId;\n        exports.useImperativeHandle = useImperativeHandle;\n        exports.useInsertionEffect = useInsertionEffect;\n        exports.useLayoutEffect = useLayoutEffect;\n        exports.useMemo = useMemo;\n        exports.useOptimistic = useOptimistic;\n        exports.useReducer = useReducer;\n        exports.useRef = useRef;\n        exports.useState = useState;\n        exports.useSyncExternalStore = useSyncExternalStore;\n        exports.useTransition = useTransition;\n        exports.version = ReactVersion;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/react/cjs/react.development.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/compiled/react/index.js":
/*!*********************************************************!*\
  !*** ../node_modules/next/dist/compiled/react/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"(rsc)/../node_modules/next/dist/compiled/react/cjs/react.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLEtBQXlCLEVBQWMsRUFFMUMsTUFBTTtJQUNMQyxpSkFBeUI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9pbmRleC5qcz84ZDM0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/compiled/react/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/lib/constants.js":
/*!**************************************************!*\
  !*** ../node_modules/next/dist/lib/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NEXT_QUERY_PARAM_PREFIX: function() {\n        return NEXT_QUERY_PARAM_PREFIX;\n    },\n    PRERENDER_REVALIDATE_HEADER: function() {\n        return PRERENDER_REVALIDATE_HEADER;\n    },\n    PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER: function() {\n        return PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER;\n    },\n    RSC_PREFETCH_SUFFIX: function() {\n        return RSC_PREFETCH_SUFFIX;\n    },\n    RSC_SUFFIX: function() {\n        return RSC_SUFFIX;\n    },\n    NEXT_DATA_SUFFIX: function() {\n        return NEXT_DATA_SUFFIX;\n    },\n    NEXT_META_SUFFIX: function() {\n        return NEXT_META_SUFFIX;\n    },\n    NEXT_BODY_SUFFIX: function() {\n        return NEXT_BODY_SUFFIX;\n    },\n    NEXT_CACHE_TAGS_HEADER: function() {\n        return NEXT_CACHE_TAGS_HEADER;\n    },\n    NEXT_CACHE_SOFT_TAGS_HEADER: function() {\n        return NEXT_CACHE_SOFT_TAGS_HEADER;\n    },\n    NEXT_CACHE_REVALIDATED_TAGS_HEADER: function() {\n        return NEXT_CACHE_REVALIDATED_TAGS_HEADER;\n    },\n    NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER: function() {\n        return NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER;\n    },\n    NEXT_CACHE_TAG_MAX_LENGTH: function() {\n        return NEXT_CACHE_TAG_MAX_LENGTH;\n    },\n    NEXT_CACHE_SOFT_TAG_MAX_LENGTH: function() {\n        return NEXT_CACHE_SOFT_TAG_MAX_LENGTH;\n    },\n    NEXT_CACHE_IMPLICIT_TAG_ID: function() {\n        return NEXT_CACHE_IMPLICIT_TAG_ID;\n    },\n    CACHE_ONE_YEAR: function() {\n        return CACHE_ONE_YEAR;\n    },\n    MIDDLEWARE_FILENAME: function() {\n        return MIDDLEWARE_FILENAME;\n    },\n    MIDDLEWARE_LOCATION_REGEXP: function() {\n        return MIDDLEWARE_LOCATION_REGEXP;\n    },\n    INSTRUMENTATION_HOOK_FILENAME: function() {\n        return INSTRUMENTATION_HOOK_FILENAME;\n    },\n    PAGES_DIR_ALIAS: function() {\n        return PAGES_DIR_ALIAS;\n    },\n    DOT_NEXT_ALIAS: function() {\n        return DOT_NEXT_ALIAS;\n    },\n    ROOT_DIR_ALIAS: function() {\n        return ROOT_DIR_ALIAS;\n    },\n    APP_DIR_ALIAS: function() {\n        return APP_DIR_ALIAS;\n    },\n    RSC_MOD_REF_PROXY_ALIAS: function() {\n        return RSC_MOD_REF_PROXY_ALIAS;\n    },\n    RSC_ACTION_VALIDATE_ALIAS: function() {\n        return RSC_ACTION_VALIDATE_ALIAS;\n    },\n    RSC_ACTION_PROXY_ALIAS: function() {\n        return RSC_ACTION_PROXY_ALIAS;\n    },\n    RSC_ACTION_ENCRYPTION_ALIAS: function() {\n        return RSC_ACTION_ENCRYPTION_ALIAS;\n    },\n    RSC_ACTION_CLIENT_WRAPPER_ALIAS: function() {\n        return RSC_ACTION_CLIENT_WRAPPER_ALIAS;\n    },\n    PUBLIC_DIR_MIDDLEWARE_CONFLICT: function() {\n        return PUBLIC_DIR_MIDDLEWARE_CONFLICT;\n    },\n    SSG_GET_INITIAL_PROPS_CONFLICT: function() {\n        return SSG_GET_INITIAL_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_GET_INIT_PROPS_CONFLICT: function() {\n        return SERVER_PROPS_GET_INIT_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_SSG_CONFLICT: function() {\n        return SERVER_PROPS_SSG_CONFLICT;\n    },\n    STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR: function() {\n        return STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR;\n    },\n    SERVER_PROPS_EXPORT_ERROR: function() {\n        return SERVER_PROPS_EXPORT_ERROR;\n    },\n    GSP_NO_RETURNED_VALUE: function() {\n        return GSP_NO_RETURNED_VALUE;\n    },\n    GSSP_NO_RETURNED_VALUE: function() {\n        return GSSP_NO_RETURNED_VALUE;\n    },\n    UNSTABLE_REVALIDATE_RENAME_ERROR: function() {\n        return UNSTABLE_REVALIDATE_RENAME_ERROR;\n    },\n    GSSP_COMPONENT_MEMBER_ERROR: function() {\n        return GSSP_COMPONENT_MEMBER_ERROR;\n    },\n    NON_STANDARD_NODE_ENV: function() {\n        return NON_STANDARD_NODE_ENV;\n    },\n    SSG_FALLBACK_EXPORT_ERROR: function() {\n        return SSG_FALLBACK_EXPORT_ERROR;\n    },\n    ESLINT_DEFAULT_DIRS: function() {\n        return ESLINT_DEFAULT_DIRS;\n    },\n    ESLINT_PROMPT_VALUES: function() {\n        return ESLINT_PROMPT_VALUES;\n    },\n    SERVER_RUNTIME: function() {\n        return SERVER_RUNTIME;\n    },\n    WEBPACK_LAYERS: function() {\n        return WEBPACK_LAYERS;\n    },\n    WEBPACK_RESOURCE_QUERIES: function() {\n        return WEBPACK_RESOURCE_QUERIES;\n    }\n});\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst PRERENDER_REVALIDATE_HEADER = \"x-prerender-revalidate\";\nconst PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = \"x-prerender-revalidate-if-generated\";\nconst RSC_PREFETCH_SUFFIX = \".prefetch.rsc\";\nconst RSC_SUFFIX = \".rsc\";\nconst NEXT_DATA_SUFFIX = \".json\";\nconst NEXT_META_SUFFIX = \".meta\";\nconst NEXT_BODY_SUFFIX = \".body\";\nconst NEXT_CACHE_TAGS_HEADER = \"x-next-cache-tags\";\nconst NEXT_CACHE_SOFT_TAGS_HEADER = \"x-next-cache-soft-tags\";\nconst NEXT_CACHE_REVALIDATED_TAGS_HEADER = \"x-next-revalidated-tags\";\nconst NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER = \"x-next-revalidate-tag-token\";\nconst NEXT_CACHE_TAG_MAX_LENGTH = 256;\nconst NEXT_CACHE_SOFT_TAG_MAX_LENGTH = 1024;\nconst NEXT_CACHE_IMPLICIT_TAG_ID = \"_N_T_\";\nconst CACHE_ONE_YEAR = 31536000;\nconst MIDDLEWARE_FILENAME = \"middleware\";\nconst MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;\nconst INSTRUMENTATION_HOOK_FILENAME = \"instrumentation\";\nconst PAGES_DIR_ALIAS = \"private-next-pages\";\nconst DOT_NEXT_ALIAS = \"private-dot-next\";\nconst ROOT_DIR_ALIAS = \"private-next-root-dir\";\nconst APP_DIR_ALIAS = \"private-next-app-dir\";\nconst RSC_MOD_REF_PROXY_ALIAS = \"next/dist/build/webpack/loaders/next-flight-loader/module-proxy\";\nconst RSC_ACTION_VALIDATE_ALIAS = \"private-next-rsc-action-validate\";\nconst RSC_ACTION_PROXY_ALIAS = \"private-next-rsc-action-proxy\";\nconst RSC_ACTION_ENCRYPTION_ALIAS = \"private-next-rsc-action-encryption\";\nconst RSC_ACTION_CLIENT_WRAPPER_ALIAS = \"private-next-rsc-action-client-wrapper\";\nconst PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;\nconst SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;\nconst SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;\nconst SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;\nconst STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;\nconst SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;\nconst GSP_NO_RETURNED_VALUE = \"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\";\nconst GSSP_NO_RETURNED_VALUE = \"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\";\nconst UNSTABLE_REVALIDATE_RENAME_ERROR = \"The `unstable_revalidate` property is available for general use.\\n\" + \"Please use `revalidate` instead.\";\nconst GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;\nconst NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;\nconst SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;\nconst ESLINT_DEFAULT_DIRS = [\n    \"app\",\n    \"pages\",\n    \"components\",\n    \"lib\",\n    \"src\"\n];\nconst ESLINT_PROMPT_VALUES = [\n    {\n        title: \"Strict\",\n        recommended: true,\n        config: {\n            extends: \"next/core-web-vitals\"\n        }\n    },\n    {\n        title: \"Base\",\n        config: {\n            extends: \"next\"\n        }\n    },\n    {\n        title: \"Cancel\",\n        config: null\n    }\n];\nconst SERVER_RUNTIME = {\n    edge: \"edge\",\n    experimentalEdge: \"experimental-edge\",\n    nodejs: \"nodejs\"\n};\n/**\n * The names of the webpack layers. These layers are the primitives for the\n * webpack chunks.\n */ const WEBPACK_LAYERS_NAMES = {\n    /**\n   * The layer for the shared code between the client and server bundles.\n   */ shared: \"shared\",\n    /**\n   * React Server Components layer (rsc).\n   */ reactServerComponents: \"rsc\",\n    /**\n   * Server Side Rendering layer for app (ssr).\n   */ serverSideRendering: \"ssr\",\n    /**\n   * The browser client bundle layer for actions.\n   */ actionBrowser: \"action-browser\",\n    /**\n   * The layer for the API routes.\n   */ api: \"api\",\n    /**\n   * The layer for the middleware code.\n   */ middleware: \"middleware\",\n    /**\n   * The layer for assets on the edge.\n   */ edgeAsset: \"edge-asset\",\n    /**\n   * The browser client bundle layer for App directory.\n   */ appPagesBrowser: \"app-pages-browser\",\n    /**\n   * The server bundle layer for metadata routes.\n   */ appMetadataRoute: \"app-metadata-route\",\n    /**\n   * The layer for the server bundle for App Route handlers.\n   */ appRouteHandler: \"app-route-handler\"\n};\nconst WEBPACK_LAYERS = {\n    ...WEBPACK_LAYERS_NAMES,\n    GROUP: {\n        server: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute,\n            WEBPACK_LAYERS_NAMES.appRouteHandler\n        ],\n        nonClientServerTarget: [\n            // plus middleware and pages api\n            WEBPACK_LAYERS_NAMES.middleware,\n            WEBPACK_LAYERS_NAMES.api\n        ],\n        app: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute,\n            WEBPACK_LAYERS_NAMES.appRouteHandler,\n            WEBPACK_LAYERS_NAMES.serverSideRendering,\n            WEBPACK_LAYERS_NAMES.appPagesBrowser\n        ]\n    }\n};\nconst WEBPACK_RESOURCE_QUERIES = {\n    edgeSSREntry: \"__next_edge_ssr_entry__\",\n    metadata: \"__next_metadata__\",\n    metadataRoute: \"__next_metadata_route__\",\n    metadataImageMeta: \"__next_metadata_image_meta__\"\n}; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/lib/picocolors.js":
/*!***************************************************!*\
  !*** ../node_modules/next/dist/lib/picocolors.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("// ISC License\n// Copyright (c) 2021 Alexey Raspopov, Kostiantyn Denysov, Anton Verinov\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n//\n// https://github.com/alexeyraspopov/picocolors/blob/b6261487e7b81aaab2440e397a356732cad9e342/picocolors.js#L1\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    reset: function() {\n        return reset;\n    },\n    bold: function() {\n        return bold;\n    },\n    dim: function() {\n        return dim;\n    },\n    italic: function() {\n        return italic;\n    },\n    underline: function() {\n        return underline;\n    },\n    inverse: function() {\n        return inverse;\n    },\n    hidden: function() {\n        return hidden;\n    },\n    strikethrough: function() {\n        return strikethrough;\n    },\n    black: function() {\n        return black;\n    },\n    red: function() {\n        return red;\n    },\n    green: function() {\n        return green;\n    },\n    yellow: function() {\n        return yellow;\n    },\n    blue: function() {\n        return blue;\n    },\n    magenta: function() {\n        return magenta;\n    },\n    purple: function() {\n        return purple;\n    },\n    cyan: function() {\n        return cyan;\n    },\n    white: function() {\n        return white;\n    },\n    gray: function() {\n        return gray;\n    },\n    bgBlack: function() {\n        return bgBlack;\n    },\n    bgRed: function() {\n        return bgRed;\n    },\n    bgGreen: function() {\n        return bgGreen;\n    },\n    bgYellow: function() {\n        return bgYellow;\n    },\n    bgBlue: function() {\n        return bgBlue;\n    },\n    bgMagenta: function() {\n        return bgMagenta;\n    },\n    bgCyan: function() {\n        return bgCyan;\n    },\n    bgWhite: function() {\n        return bgWhite;\n    }\n});\nvar _globalThis;\nconst { env, stdout } = ((_globalThis = globalThis) == null ? void 0 : _globalThis.process) ?? {};\nconst enabled = env && !env.NO_COLOR && (env.FORCE_COLOR || (stdout == null ? void 0 : stdout.isTTY) && !env.CI && env.TERM !== \"dumb\");\nconst replaceClose = (str, close, replace, index)=>{\n    const start = str.substring(0, index) + replace;\n    const end = str.substring(index + close.length);\n    const nextIndex = end.indexOf(close);\n    return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;\n};\nconst formatter = (open, close, replace = open)=>(input)=>{\n        const string = \"\" + input;\n        const index = string.indexOf(close, open.length);\n        return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;\n    };\nconst reset = enabled ? (s)=>`\\x1b[0m${s}\\x1b[0m` : String;\nconst bold = enabled ? formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\") : String;\nconst dim = enabled ? formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\") : String;\nconst italic = enabled ? formatter(\"\\x1b[3m\", \"\\x1b[23m\") : String;\nconst underline = enabled ? formatter(\"\\x1b[4m\", \"\\x1b[24m\") : String;\nconst inverse = enabled ? formatter(\"\\x1b[7m\", \"\\x1b[27m\") : String;\nconst hidden = enabled ? formatter(\"\\x1b[8m\", \"\\x1b[28m\") : String;\nconst strikethrough = enabled ? formatter(\"\\x1b[9m\", \"\\x1b[29m\") : String;\nconst black = enabled ? formatter(\"\\x1b[30m\", \"\\x1b[39m\") : String;\nconst red = enabled ? formatter(\"\\x1b[31m\", \"\\x1b[39m\") : String;\nconst green = enabled ? formatter(\"\\x1b[32m\", \"\\x1b[39m\") : String;\nconst yellow = enabled ? formatter(\"\\x1b[33m\", \"\\x1b[39m\") : String;\nconst blue = enabled ? formatter(\"\\x1b[34m\", \"\\x1b[39m\") : String;\nconst magenta = enabled ? formatter(\"\\x1b[35m\", \"\\x1b[39m\") : String;\nconst purple = enabled ? formatter(\"\\x1b[38;2;173;127;168m\", \"\\x1b[39m\") : String;\nconst cyan = enabled ? formatter(\"\\x1b[36m\", \"\\x1b[39m\") : String;\nconst white = enabled ? formatter(\"\\x1b[37m\", \"\\x1b[39m\") : String;\nconst gray = enabled ? formatter(\"\\x1b[90m\", \"\\x1b[39m\") : String;\nconst bgBlack = enabled ? formatter(\"\\x1b[40m\", \"\\x1b[49m\") : String;\nconst bgRed = enabled ? formatter(\"\\x1b[41m\", \"\\x1b[49m\") : String;\nconst bgGreen = enabled ? formatter(\"\\x1b[42m\", \"\\x1b[49m\") : String;\nconst bgYellow = enabled ? formatter(\"\\x1b[43m\", \"\\x1b[49m\") : String;\nconst bgBlue = enabled ? formatter(\"\\x1b[44m\", \"\\x1b[49m\") : String;\nconst bgMagenta = enabled ? formatter(\"\\x1b[45m\", \"\\x1b[49m\") : String;\nconst bgCyan = enabled ? formatter(\"\\x1b[46m\", \"\\x1b[49m\") : String;\nconst bgWhite = enabled ? formatter(\"\\x1b[47m\", \"\\x1b[49m\") : String; //# sourceMappingURL=picocolors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/lib/picocolors.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/future/route-kind.js":
/*!*************************************************************!*\
  !*** ../node_modules/next/dist/server/future/route-kind.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouteKind\", ({\n    enumerable: true,\n    get: function() {\n        return RouteKind;\n    }\n}));\nvar RouteKind;\n(function(RouteKind) {\n    RouteKind[/**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */ \"PAGES\"] = \"PAGES\";\n    RouteKind[/**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */ \"PAGES_API\"] = \"PAGES_API\";\n    RouteKind[/**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */ \"APP_PAGE\"] = \"APP_PAGE\";\n    RouteKind[/**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */ \"APP_ROUTE\"] = \"APP_ROUTE\";\n})(RouteKind || (RouteKind = {})); //# sourceMappingURL=route-kind.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLElBQUlBO0FBQ0gsVUFBU0EsU0FBUztJQUNmQSxTQUFTLENBQUM7O0dBRVgsR0FBRyxRQUFRLEdBQUc7SUFDYkEsU0FBUyxDQUFDOztHQUVYLEdBQUcsWUFBWSxHQUFHO0lBQ2pCQSxTQUFTLENBQUM7OztHQUdYLEdBQUcsV0FBVyxHQUFHO0lBQ2hCQSxTQUFTLENBQUM7OztHQUdYLEdBQUcsWUFBWSxHQUFHO0FBQ3JCLEdBQUdBLGFBQWNBLENBQUFBLFlBQVksQ0FBQyxLQUU5QixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmQuanM/MTNjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlS2luZFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUm91dGVLaW5kO1xuICAgIH1cbn0pO1xudmFyIFJvdXRlS2luZDtcbihmdW5jdGlvbihSb3V0ZUtpbmQpIHtcbiAgICBSb3V0ZUtpbmRbLyoqXG4gICAqIGBQQUdFU2AgcmVwcmVzZW50cyBhbGwgdGhlIFJlYWN0IHBhZ2VzIHRoYXQgYXJlIHVuZGVyIGBwYWdlcy9gLlxuICAgKi8gXCJQQUdFU1wiXSA9IFwiUEFHRVNcIjtcbiAgICBSb3V0ZUtpbmRbLyoqXG4gICAqIGBQQUdFU19BUElgIHJlcHJlc2VudHMgYWxsIHRoZSBBUEkgcm91dGVzIHVuZGVyIGBwYWdlcy9hcGkvYC5cbiAgICovIFwiUEFHRVNfQVBJXCJdID0gXCJQQUdFU19BUElcIjtcbiAgICBSb3V0ZUtpbmRbLyoqXG4gICAqIGBBUFBfUEFHRWAgcmVwcmVzZW50cyBhbGwgdGhlIFJlYWN0IHBhZ2VzIHRoYXQgYXJlIHVuZGVyIGBhcHAvYCB3aXRoIHRoZVxuICAgKiBmaWxlbmFtZSBvZiBgcGFnZS57aix0fXN7LHh9YC5cbiAgICovIFwiQVBQX1BBR0VcIl0gPSBcIkFQUF9QQUdFXCI7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgQVBQX1JPVVRFYCByZXByZXNlbnRzIGFsbCB0aGUgQVBJIHJvdXRlcyBhbmQgbWV0YWRhdGEgcm91dGVzIHRoYXQgYXJlIHVuZGVyIGBhcHAvYCB3aXRoIHRoZVxuICAgKiBmaWxlbmFtZSBvZiBgcm91dGUue2osdH1zeyx4fWAuXG4gICAqLyBcIkFQUF9ST1VURVwiXSA9IFwiQVBQX1JPVVRFXCI7XG59KShSb3V0ZUtpbmQgfHwgKFJvdXRlS2luZCA9IHt9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLWtpbmQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIlJvdXRlS2luZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/future/route-kind.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nif (false) {} else {\n    if (false) {} else {\n        if (true) {\n            module.exports = __webpack_require__(/*! next/dist/compiled/next-server/app-page.runtime.dev.js */ \"next/dist/compiled/next-server/app-page.runtime.dev.js\");\n        } else {}\n    }\n} //# sourceMappingURL=module.compiled.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXBhZ2UvbW9kdWxlLmNvbXBpbGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsS0FBbUMsRUFBRSxFQUV4QyxNQUFNO0lBQ0gsSUFBSUEsS0FBcUMsRUFBRSxFQVExQyxNQUFNO1FBQ0gsSUFBSUEsSUFBc0MsRUFBRTtZQUN4Q0csNEpBQWtGO1FBQ3RGLE9BQU8sRUFJTjtJQUNMO0FBQ0osRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXBhZ2UvbW9kdWxlLmNvbXBpbGVkLmpzPzU0NzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSBcImVkZ2VcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXBhZ2UvbW9kdWxlLmpzXCIpO1xufSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0VYUEVSSU1FTlRBTF9SRUFDVCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1wYWdlLWV4cGVyaW1lbnRhbC5ydW50aW1lLmRldi5qc1wiKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5UVVJCT1BBQ0spIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcGFnZS10dXJiby1leHBlcmltZW50YWwucnVudGltZS5wcm9kLmpzXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1wYWdlLWV4cGVyaW1lbnRhbC5ydW50aW1lLnByb2QuanNcIik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1wYWdlLnJ1bnRpbWUuZGV2LmpzXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52LlRVUkJPUEFDSykge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1wYWdlLXR1cmJvLnJ1bnRpbWUucHJvZC5qc1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcGFnZS5ydW50aW1lLnByb2QuanNcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5jb21waWxlZC5qcy5tYXAiXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5FWFRfUlVOVElNRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiX19ORVhUX0VYUEVSSU1FTlRBTF9SRUFDVCIsIlRVUkJPUEFDSyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../../module.compiled */ \"(ssr)/../node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js\").vendored[\"react-rsc\"].ReactDOM; //# sourceMappingURL=react-dom.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXBhZ2UvdmVuZG9yZWQvcnNjL3JlYWN0LWRvbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSwyTEFBZ0YsRUFFaEYscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1wYWdlL3ZlbmRvcmVkL3JzYy9yZWFjdC1kb20uanM/NjNlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL21vZHVsZS5jb21waWxlZFwiKS52ZW5kb3JlZFtcInJlYWN0LXJzY1wiXS5SZWFjdERPTTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3QtZG9tLmpzLm1hcCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsInZlbmRvcmVkIiwiUmVhY3RET00iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nif (false) {} else {\n    if (true) {\n        module.exports = __webpack_require__(/*! next/dist/compiled/next-server/app-route.runtime.dev.js */ \"next/dist/compiled/next-server/app-route.runtime.dev.js\");\n    } else {}\n} //# sourceMappingURL=module.compiled.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLEtBQW1DLEVBQUUsRUFFeEMsTUFBTTtJQUNILElBQUlBLElBQXNDLEVBQUU7UUFDeENHLDhKQUFtRjtJQUN2RixPQUFPLEVBSU47QUFDTCxFQUVBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkLmpzPzJhMTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSBcImVkZ2VcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5qc1wiKTtcbn0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1yb3V0ZS5ydW50aW1lLmRldi5qc1wiKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52LlRVUkJPUEFDSykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvbmV4dC1zZXJ2ZXIvYXBwLXJvdXRlLXR1cmJvLnJ1bnRpbWUucHJvZC5qc1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvbmV4dC1zZXJ2ZXIvYXBwLXJvdXRlLnJ1bnRpbWUucHJvZC5qc1wiKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5jb21waWxlZC5qcy5tYXAiXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5FWFRfUlVOVElNRSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiVFVSQk9QQUNLIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/lib/patch-fetch.js":
/*!***********************************************************!*\
  !*** ../node_modules/next/dist/server/lib/patch-fetch.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    validateTags: function() {\n        return validateTags;\n    },\n    addImplicitTags: function() {\n        return addImplicitTags;\n    },\n    patchFetch: function() {\n        return patchFetch;\n    }\n});\nconst _constants = __webpack_require__(/*! ./trace/constants */ \"(rsc)/../node_modules/next/dist/server/lib/trace/constants.js\");\nconst _tracer = __webpack_require__(/*! ./trace/tracer */ \"(rsc)/../node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants1 = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/../node_modules/next/dist/lib/constants.js\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(/*! ../../build/output/log */ \"(rsc)/../node_modules/next/dist/build/output/log.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst isEdgeRuntime = \"nodejs\" === \"edge\";\nfunction validateTags(tags, description) {\n    const validTags = [];\n    const invalidTags = [];\n    for (const tag of tags){\n        if (typeof tag !== \"string\") {\n            invalidTags.push({\n                tag,\n                reason: \"invalid type, must be a string\"\n            });\n        } else if (tag.length > _constants1.NEXT_CACHE_TAG_MAX_LENGTH) {\n            invalidTags.push({\n                tag,\n                reason: `exceeded max length of ${_constants1.NEXT_CACHE_TAG_MAX_LENGTH}`\n            });\n        } else {\n            validTags.push(tag);\n        }\n    }\n    if (invalidTags.length > 0) {\n        console.warn(`Warning: invalid tags passed to ${description}: `);\n        for (const { tag, reason } of invalidTags){\n            console.log(`tag: \"${tag}\" ${reason}`);\n        }\n    }\n    return validTags;\n}\nconst getDerivedTags = (pathname)=>{\n    const derivedTags = [\n        `/layout`\n    ];\n    // we automatically add the current path segments as tags\n    // for revalidatePath handling\n    if (pathname.startsWith(\"/\")) {\n        const pathnameParts = pathname.split(\"/\");\n        for(let i = 1; i < pathnameParts.length + 1; i++){\n            let curPathname = pathnameParts.slice(0, i).join(\"/\");\n            if (curPathname) {\n                // all derived tags other than the page are layout tags\n                if (!curPathname.endsWith(\"/page\") && !curPathname.endsWith(\"/route\")) {\n                    curPathname = `${curPathname}${!curPathname.endsWith(\"/\") ? \"/\" : \"\"}layout`;\n                }\n                derivedTags.push(curPathname);\n            }\n        }\n    }\n    return derivedTags;\n};\nfunction addImplicitTags(staticGenerationStore) {\n    const newTags = [];\n    const { pagePath, urlPathname } = staticGenerationStore;\n    if (!Array.isArray(staticGenerationStore.tags)) {\n        staticGenerationStore.tags = [];\n    }\n    if (pagePath) {\n        const derivedTags = getDerivedTags(pagePath);\n        for (let tag of derivedTags){\n            var _staticGenerationStore_tags;\n            tag = `${_constants1.NEXT_CACHE_IMPLICIT_TAG_ID}${tag}`;\n            if (!((_staticGenerationStore_tags = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags.includes(tag))) {\n                staticGenerationStore.tags.push(tag);\n            }\n            newTags.push(tag);\n        }\n    }\n    if (urlPathname) {\n        var _staticGenerationStore_tags1;\n        const parsedPathname = new URL(urlPathname, \"http://n\").pathname;\n        const tag = `${_constants1.NEXT_CACHE_IMPLICIT_TAG_ID}${parsedPathname}`;\n        if (!((_staticGenerationStore_tags1 = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags1.includes(tag))) {\n            staticGenerationStore.tags.push(tag);\n        }\n        newTags.push(tag);\n    }\n    return newTags;\n}\nfunction trackFetchMetric(staticGenerationStore, ctx) {\n    if (!staticGenerationStore) return;\n    if (!staticGenerationStore.fetchMetrics) {\n        staticGenerationStore.fetchMetrics = [];\n    }\n    const dedupeFields = [\n        \"url\",\n        \"status\",\n        \"method\"\n    ];\n    // don't add metric if one already exists for the fetch\n    if (staticGenerationStore.fetchMetrics.some((metric)=>{\n        return dedupeFields.every((field)=>metric[field] === ctx[field]);\n    })) {\n        return;\n    }\n    staticGenerationStore.fetchMetrics.push({\n        url: ctx.url,\n        cacheStatus: ctx.cacheStatus,\n        cacheReason: ctx.cacheReason,\n        status: ctx.status,\n        method: ctx.method,\n        start: ctx.start,\n        end: Date.now(),\n        idx: staticGenerationStore.nextFetchId || 0\n    });\n}\nfunction patchFetch({ serverHooks, staticGenerationAsyncStorage }) {\n    if (!globalThis._nextOriginalFetch) {\n        globalThis._nextOriginalFetch = globalThis.fetch;\n    }\n    if (globalThis.fetch.__nextPatched) return;\n    const { DynamicServerError } = serverHooks;\n    const originFetch = globalThis._nextOriginalFetch;\n    globalThis.fetch = async (input, init)=>{\n        var _init_method, _this;\n        let url;\n        try {\n            url = new URL(input instanceof Request ? input.url : input);\n            url.username = \"\";\n            url.password = \"\";\n        } catch  {\n            // Error caused by malformed URL should be handled by native fetch\n            url = undefined;\n        }\n        const fetchUrl = (url == null ? void 0 : url.href) ?? \"\";\n        const fetchStart = Date.now();\n        const method = (init == null ? void 0 : (_init_method = init.method) == null ? void 0 : _init_method.toUpperCase()) || \"GET\";\n        // Do create a new span trace for internal fetches in the\n        // non-verbose mode.\n        const isInternal = ((_this = init == null ? void 0 : init.next) == null ? void 0 : _this.internal) === true;\n        return await (0, _tracer.getTracer)().trace(isInternal ? _constants.NextNodeServerSpan.internalFetch : _constants.AppRenderSpan.fetch, {\n            kind: _tracer.SpanKind.CLIENT,\n            spanName: [\n                \"fetch\",\n                method,\n                fetchUrl\n            ].filter(Boolean).join(\" \"),\n            attributes: {\n                \"http.url\": fetchUrl,\n                \"http.method\": method,\n                \"net.peer.name\": url == null ? void 0 : url.hostname,\n                \"net.peer.port\": (url == null ? void 0 : url.port) || undefined\n            }\n        }, async ()=>{\n            var _getRequestMeta;\n            const staticGenerationStore = staticGenerationAsyncStorage.getStore() || (fetch.__nextGetStaticStore == null ? void 0 : fetch.__nextGetStaticStore.call(fetch));\n            const isRequestInput = input && typeof input === \"object\" && typeof input.method === \"string\";\n            const getRequestMeta = (field)=>{\n                let value = isRequestInput ? input[field] : null;\n                return value || (init == null ? void 0 : init[field]);\n            };\n            // If the staticGenerationStore is not available, we can't do any\n            // special treatment of fetch, therefore fallback to the original\n            // fetch implementation.\n            if (!staticGenerationStore || isInternal || staticGenerationStore.isDraftMode) {\n                return originFetch(input, init);\n            }\n            let revalidate = undefined;\n            const getNextField = (field)=>{\n                var _init_next, _init_next1, _input_next;\n                return typeof (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next[field]) !== \"undefined\" ? init == null ? void 0 : (_init_next1 = init.next) == null ? void 0 : _init_next1[field] : isRequestInput ? (_input_next = input.next) == null ? void 0 : _input_next[field] : undefined;\n            };\n            // RequestInit doesn't keep extra fields e.g. next so it's\n            // only available if init is used separate\n            let curRevalidate = getNextField(\"revalidate\");\n            const tags = validateTags(getNextField(\"tags\") || [], `fetch ${input.toString()}`);\n            if (Array.isArray(tags)) {\n                if (!staticGenerationStore.tags) {\n                    staticGenerationStore.tags = [];\n                }\n                for (const tag of tags){\n                    if (!staticGenerationStore.tags.includes(tag)) {\n                        staticGenerationStore.tags.push(tag);\n                    }\n                }\n            }\n            const implicitTags = addImplicitTags(staticGenerationStore);\n            const isOnlyCache = staticGenerationStore.fetchCache === \"only-cache\";\n            const isForceCache = staticGenerationStore.fetchCache === \"force-cache\";\n            const isDefaultCache = staticGenerationStore.fetchCache === \"default-cache\";\n            const isDefaultNoStore = staticGenerationStore.fetchCache === \"default-no-store\";\n            const isOnlyNoStore = staticGenerationStore.fetchCache === \"only-no-store\";\n            const isForceNoStore = staticGenerationStore.fetchCache === \"force-no-store\";\n            let _cache = getRequestMeta(\"cache\");\n            let cacheReason = \"\";\n            if (typeof _cache === \"string\" && typeof curRevalidate !== \"undefined\") {\n                // when providing fetch with a Request input, it'll automatically set a cache value of 'default'\n                // we only want to warn if the user is explicitly setting a cache value\n                if (!(isRequestInput && _cache === \"default\")) {\n                    _log.warn(`fetch for ${fetchUrl} on ${staticGenerationStore.urlPathname} specified \"cache: ${_cache}\" and \"revalidate: ${curRevalidate}\", only one should be specified.`);\n                }\n                _cache = undefined;\n            }\n            if (_cache === \"force-cache\") {\n                curRevalidate = false;\n            } else if (_cache === \"no-cache\" || _cache === \"no-store\" || isForceNoStore || isOnlyNoStore) {\n                curRevalidate = 0;\n            }\n            if (_cache === \"no-cache\" || _cache === \"no-store\") {\n                cacheReason = `cache: ${_cache}`;\n            }\n            if (typeof curRevalidate === \"number\" || curRevalidate === false) {\n                revalidate = curRevalidate;\n            }\n            const _headers = getRequestMeta(\"headers\");\n            const initHeaders = typeof (_headers == null ? void 0 : _headers.get) === \"function\" ? _headers : new Headers(_headers || {});\n            const hasUnCacheableHeader = initHeaders.get(\"authorization\") || initHeaders.get(\"cookie\");\n            const isUnCacheableMethod = ![\n                \"get\",\n                \"head\"\n            ].includes(((_getRequestMeta = getRequestMeta(\"method\")) == null ? void 0 : _getRequestMeta.toLowerCase()) || \"get\");\n            // if there are authorized headers or a POST method and\n            // dynamic data usage was present above the tree we bail\n            // e.g. if cookies() is used before an authed/POST fetch\n            const autoNoCache = (hasUnCacheableHeader || isUnCacheableMethod) && staticGenerationStore.revalidate === 0;\n            if (isForceNoStore) {\n                cacheReason = \"fetchCache = force-no-store\";\n            }\n            if (isOnlyNoStore) {\n                if (_cache === \"force-cache\" || typeof revalidate !== \"undefined\" && (revalidate === false || revalidate > 0)) {\n                    throw new Error(`cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`);\n                }\n                cacheReason = \"fetchCache = only-no-store\";\n            }\n            if (isOnlyCache && _cache === \"no-store\") {\n                throw new Error(`cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`);\n            }\n            if (isForceCache && (typeof curRevalidate === \"undefined\" || curRevalidate === 0)) {\n                cacheReason = \"fetchCache = force-cache\";\n                revalidate = false;\n            }\n            if (typeof revalidate === \"undefined\") {\n                if (isDefaultCache) {\n                    revalidate = false;\n                    cacheReason = \"fetchCache = default-cache\";\n                } else if (autoNoCache) {\n                    revalidate = 0;\n                    cacheReason = \"auto no cache\";\n                } else if (isDefaultNoStore) {\n                    revalidate = 0;\n                    cacheReason = \"fetchCache = default-no-store\";\n                } else {\n                    cacheReason = \"auto cache\";\n                    revalidate = typeof staticGenerationStore.revalidate === \"boolean\" || typeof staticGenerationStore.revalidate === \"undefined\" ? false : staticGenerationStore.revalidate;\n                }\n            } else if (!cacheReason) {\n                cacheReason = `revalidate: ${revalidate}`;\n            }\n            if (// revalidate although if it occurs during build we do\n            !autoNoCache && // If the revalidate value isn't currently set or the value is less\n            // than the current revalidate value, we should update the revalidate\n            // value.\n            (typeof staticGenerationStore.revalidate === \"undefined\" || typeof revalidate === \"number\" && (staticGenerationStore.revalidate === false || typeof staticGenerationStore.revalidate === \"number\" && revalidate < staticGenerationStore.revalidate))) {\n                // If we were setting the revalidate value to 0, we should try to\n                // postpone instead first.\n                if (revalidate === 0) {\n                    staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, \"revalidate: 0\");\n                }\n                staticGenerationStore.revalidate = revalidate;\n            }\n            const isCacheableRevalidate = typeof revalidate === \"number\" && revalidate > 0 || revalidate === false;\n            let cacheKey;\n            if (staticGenerationStore.incrementalCache && isCacheableRevalidate) {\n                try {\n                    cacheKey = await staticGenerationStore.incrementalCache.fetchCacheKey(fetchUrl, isRequestInput ? input : init);\n                } catch (err) {\n                    console.error(`Failed to generate cache key for`, input);\n                }\n            }\n            const fetchIdx = staticGenerationStore.nextFetchId ?? 1;\n            staticGenerationStore.nextFetchId = fetchIdx + 1;\n            const normalizedRevalidate = typeof revalidate !== \"number\" ? _constants1.CACHE_ONE_YEAR : revalidate;\n            const doOriginalFetch = async (isStale, cacheReasonOverride)=>{\n                const requestInputFields = [\n                    \"cache\",\n                    \"credentials\",\n                    \"headers\",\n                    \"integrity\",\n                    \"keepalive\",\n                    \"method\",\n                    \"mode\",\n                    \"redirect\",\n                    \"referrer\",\n                    \"referrerPolicy\",\n                    \"window\",\n                    \"duplex\",\n                    // don't pass through signal when revalidating\n                    ...isStale ? [] : [\n                        \"signal\"\n                    ]\n                ];\n                if (isRequestInput) {\n                    const reqInput = input;\n                    const reqOptions = {\n                        body: reqInput._ogBody || reqInput.body\n                    };\n                    for (const field of requestInputFields){\n                        // @ts-expect-error custom fields\n                        reqOptions[field] = reqInput[field];\n                    }\n                    input = new Request(reqInput.url, reqOptions);\n                } else if (init) {\n                    const initialInit = init;\n                    init = {\n                        body: init._ogBody || init.body\n                    };\n                    for (const field of requestInputFields){\n                        // @ts-expect-error custom fields\n                        init[field] = initialInit[field];\n                    }\n                }\n                // add metadata to init without editing the original\n                const clonedInit = {\n                    ...init,\n                    next: {\n                        ...init == null ? void 0 : init.next,\n                        fetchType: \"origin\",\n                        fetchIdx\n                    }\n                };\n                return originFetch(input, clonedInit).then(async (res)=>{\n                    if (!isStale) {\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason: cacheReasonOverride || cacheReason,\n                            cacheStatus: revalidate === 0 || cacheReasonOverride ? \"skip\" : \"miss\",\n                            status: res.status,\n                            method: clonedInit.method || \"GET\"\n                        });\n                    }\n                    if (res.status === 200 && staticGenerationStore.incrementalCache && cacheKey && isCacheableRevalidate) {\n                        const bodyBuffer = Buffer.from(await res.arrayBuffer());\n                        try {\n                            await staticGenerationStore.incrementalCache.set(cacheKey, {\n                                kind: \"FETCH\",\n                                data: {\n                                    headers: Object.fromEntries(res.headers.entries()),\n                                    body: bodyBuffer.toString(\"base64\"),\n                                    status: res.status,\n                                    url: res.url\n                                },\n                                revalidate: normalizedRevalidate\n                            }, {\n                                fetchCache: true,\n                                revalidate,\n                                fetchUrl,\n                                fetchIdx,\n                                tags\n                            });\n                        } catch (err) {\n                            console.warn(`Failed to set fetch cache`, input, err);\n                        }\n                        const response = new Response(bodyBuffer, {\n                            headers: new Headers(res.headers),\n                            status: res.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: res.url\n                        });\n                        return response;\n                    }\n                    return res;\n                });\n            };\n            let handleUnlock = ()=>Promise.resolve();\n            let cacheReasonOverride;\n            if (cacheKey && staticGenerationStore.incrementalCache) {\n                handleUnlock = await staticGenerationStore.incrementalCache.lock(cacheKey);\n                const entry = staticGenerationStore.isOnDemandRevalidate ? null : await staticGenerationStore.incrementalCache.get(cacheKey, {\n                    kindHint: \"fetch\",\n                    revalidate,\n                    fetchUrl,\n                    fetchIdx,\n                    tags,\n                    softTags: implicitTags\n                });\n                if (entry) {\n                    await handleUnlock();\n                } else {\n                    // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n                    cacheReasonOverride = \"cache-control: no-cache (hard refresh)\";\n                }\n                if ((entry == null ? void 0 : entry.value) && entry.value.kind === \"FETCH\") {\n                    // when stale and is revalidating we wait for fresh data\n                    // so the revalidated entry has the updated data\n                    if (!(staticGenerationStore.isRevalidate && entry.isStale)) {\n                        if (entry.isStale) {\n                            staticGenerationStore.pendingRevalidates ??= {};\n                            if (!staticGenerationStore.pendingRevalidates[cacheKey]) {\n                                staticGenerationStore.pendingRevalidates[cacheKey] = doOriginalFetch(true).catch(console.error);\n                            }\n                        }\n                        const resData = entry.value.data;\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason,\n                            cacheStatus: \"hit\",\n                            status: resData.status || 200,\n                            method: (init == null ? void 0 : init.method) || \"GET\"\n                        });\n                        const response = new Response(Buffer.from(resData.body, \"base64\"), {\n                            headers: resData.headers,\n                            status: resData.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: entry.value.data.url\n                        });\n                        return response;\n                    }\n                }\n            }\n            if (staticGenerationStore.isStaticGeneration && init && typeof init === \"object\") {\n                const { cache } = init;\n                // Delete `cache` property as Cloudflare Workers will throw an error\n                if (isEdgeRuntime) delete init.cache;\n                if (cache === \"no-store\") {\n                    const dynamicUsageReason = `no-store fetch ${input}${staticGenerationStore.urlPathname ? ` ${staticGenerationStore.urlPathname}` : \"\"}`;\n                    // If enabled, we should bail out of static generation.\n                    staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, dynamicUsageReason);\n                    // PPR is not enabled, or React postpone is not available, we\n                    // should set the revalidate to 0.\n                    staticGenerationStore.revalidate = 0;\n                    const err = new DynamicServerError(dynamicUsageReason);\n                    staticGenerationStore.dynamicUsageErr = err;\n                    staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                }\n                const hasNextConfig = \"next\" in init;\n                const { next = {} } = init;\n                if (typeof next.revalidate === \"number\" && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof staticGenerationStore.revalidate === \"number\" && next.revalidate < staticGenerationStore.revalidate)) {\n                    const forceDynamic = staticGenerationStore.forceDynamic;\n                    if (!forceDynamic && next.revalidate === 0) {\n                        const dynamicUsageReason = `revalidate: 0 fetch ${input}${staticGenerationStore.urlPathname ? ` ${staticGenerationStore.urlPathname}` : \"\"}`;\n                        // If enabled, we should bail out of static generation.\n                        staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, dynamicUsageReason);\n                        const err = new DynamicServerError(dynamicUsageReason);\n                        staticGenerationStore.dynamicUsageErr = err;\n                        staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                    }\n                    if (!forceDynamic || next.revalidate !== 0) {\n                        staticGenerationStore.revalidate = next.revalidate;\n                    }\n                }\n                if (hasNextConfig) delete init.next;\n            }\n            return doOriginalFetch(false, cacheReasonOverride).finally(handleUnlock);\n        });\n    };\n    globalThis.fetch.__nextGetStaticStore = ()=>{\n        return staticGenerationAsyncStorage;\n    };\n    globalThis.fetch.__nextPatched = true;\n} //# sourceMappingURL=patch-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBSU47QUFDQSxTQUFTSSxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVixPQUFPQyxjQUFjLENBQUNRLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUU4sU0FBUztJQUNiRyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtJQUNBQyxpQkFBaUI7UUFDYixPQUFPQTtJQUNYO0lBQ0FDLFlBQVk7UUFDUixPQUFPQTtJQUNYO0FBQ0o7QUFDQSxNQUFNTyxhQUFhQyxtQkFBT0EsQ0FBQyx3RkFBbUI7QUFDOUMsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsa0ZBQWdCO0FBQ3hDLE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDLDZFQUFxQjtBQUNqRCxNQUFNRyxPQUFPLFdBQVcsR0FBR0MsMEJBQTBCSixtQkFBT0EsQ0FBQyxtRkFBd0I7QUFDckYsU0FBU0sseUJBQXlCQyxXQUFXO0lBQ3pDLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFDMUMsSUFBSUMsb0JBQW9CLElBQUlEO0lBQzVCLElBQUlFLG1CQUFtQixJQUFJRjtJQUMzQixPQUFPLENBQUNGLDJCQUEyQixTQUFTQyxXQUFXO1FBQ25ELE9BQU9BLGNBQWNHLG1CQUFtQkQ7SUFDNUMsR0FBR0Y7QUFDUDtBQUNBLFNBQVNGLDBCQUEwQk0sR0FBRyxFQUFFSixXQUFXO0lBQy9DLElBQUksQ0FBQ0EsZUFBZUksT0FBT0EsSUFBSUMsVUFBVSxFQUFFO1FBQ3ZDLE9BQU9EO0lBQ1g7SUFDQSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUN0RSxPQUFPO1lBQ0hFLFNBQVNGO1FBQ2I7SUFDSjtJQUNBLElBQUlHLFFBQVFSLHlCQUF5QkM7SUFDckMsSUFBSU8sU0FBU0EsTUFBTUMsR0FBRyxDQUFDSixNQUFNO1FBQ3pCLE9BQU9HLE1BQU1mLEdBQUcsQ0FBQ1k7SUFDckI7SUFDQSxJQUFJSyxTQUFTLENBQUM7SUFDZCxJQUFJQyx3QkFBd0IvQixPQUFPQyxjQUFjLElBQUlELE9BQU9nQyx3QkFBd0I7SUFDcEYsSUFBSSxJQUFJQyxPQUFPUixJQUFJO1FBQ2YsSUFBSVEsUUFBUSxhQUFhakMsT0FBT2tDLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNYLEtBQUtRLE1BQU07WUFDckUsSUFBSUksT0FBT04sd0JBQXdCL0IsT0FBT2dDLHdCQUF3QixDQUFDUCxLQUFLUSxPQUFPO1lBQy9FLElBQUlJLFFBQVNBLENBQUFBLEtBQUt4QixHQUFHLElBQUl3QixLQUFLQyxHQUFHLEdBQUc7Z0JBQ2hDdEMsT0FBT0MsY0FBYyxDQUFDNkIsUUFBUUcsS0FBS0k7WUFDdkMsT0FBTztnQkFDSFAsTUFBTSxDQUFDRyxJQUFJLEdBQUdSLEdBQUcsQ0FBQ1EsSUFBSTtZQUMxQjtRQUNKO0lBQ0o7SUFDQUgsT0FBT0gsT0FBTyxHQUFHRjtJQUNqQixJQUFJRyxPQUFPO1FBQ1BBLE1BQU1VLEdBQUcsQ0FBQ2IsS0FBS0s7SUFDbkI7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsTUFBTVMsZ0JBQWdCQyxRQUF3QixLQUFLO0FBQ25ELFNBQVNuQyxhQUFhc0MsSUFBSSxFQUFFQyxXQUFXO0lBQ25DLE1BQU1DLFlBQVksRUFBRTtJQUNwQixNQUFNQyxjQUFjLEVBQUU7SUFDdEIsS0FBSyxNQUFNQyxPQUFPSixLQUFLO1FBQ25CLElBQUksT0FBT0ksUUFBUSxVQUFVO1lBQ3pCRCxZQUFZRSxJQUFJLENBQUM7Z0JBQ2JEO2dCQUNBRSxRQUFRO1lBQ1o7UUFDSixPQUFPLElBQUlGLElBQUlHLE1BQU0sR0FBR2pDLFlBQVlrQyx5QkFBeUIsRUFBRTtZQUMzREwsWUFBWUUsSUFBSSxDQUFDO2dCQUNiRDtnQkFDQUUsUUFBUSxDQUFDLHVCQUF1QixFQUFFaEMsWUFBWWtDLHlCQUF5QixDQUFDLENBQUM7WUFDN0U7UUFDSixPQUFPO1lBQ0hOLFVBQVVHLElBQUksQ0FBQ0Q7UUFDbkI7SUFDSjtJQUNBLElBQUlELFlBQVlJLE1BQU0sR0FBRyxHQUFHO1FBQ3hCRSxRQUFRQyxJQUFJLENBQUMsQ0FBQyxnQ0FBZ0MsRUFBRVQsWUFBWSxFQUFFLENBQUM7UUFDL0QsS0FBSyxNQUFNLEVBQUVHLEdBQUcsRUFBRUUsTUFBTSxFQUFFLElBQUlILFlBQVk7WUFDdENNLFFBQVFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRVAsSUFBSSxFQUFFLEVBQUVFLE9BQU8sQ0FBQztRQUN6QztJQUNKO0lBQ0EsT0FBT0o7QUFDWDtBQUNBLE1BQU1VLGlCQUFpQixDQUFDQztJQUNwQixNQUFNQyxjQUFjO1FBQ2hCLENBQUMsT0FBTyxDQUFDO0tBQ1o7SUFDRCx5REFBeUQ7SUFDekQsOEJBQThCO0lBQzlCLElBQUlELFNBQVNFLFVBQVUsQ0FBQyxNQUFNO1FBQzFCLE1BQU1DLGdCQUFnQkgsU0FBU0ksS0FBSyxDQUFDO1FBQ3JDLElBQUksSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixjQUFjVCxNQUFNLEdBQUcsR0FBR1csSUFBSTtZQUM3QyxJQUFJQyxjQUFjSCxjQUFjSSxLQUFLLENBQUMsR0FBR0YsR0FBR0csSUFBSSxDQUFDO1lBQ2pELElBQUlGLGFBQWE7Z0JBQ2IsdURBQXVEO2dCQUN2RCxJQUFJLENBQUNBLFlBQVlHLFFBQVEsQ0FBQyxZQUFZLENBQUNILFlBQVlHLFFBQVEsQ0FBQyxXQUFXO29CQUNuRUgsY0FBYyxDQUFDLEVBQUVBLFlBQVksRUFBRSxDQUFDQSxZQUFZRyxRQUFRLENBQUMsT0FBTyxNQUFNLEdBQUcsTUFBTSxDQUFDO2dCQUNoRjtnQkFDQVIsWUFBWVQsSUFBSSxDQUFDYztZQUNyQjtRQUNKO0lBQ0o7SUFDQSxPQUFPTDtBQUNYO0FBQ0EsU0FBU25ELGdCQUFnQjRELHFCQUFxQjtJQUMxQyxNQUFNQyxVQUFVLEVBQUU7SUFDbEIsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFdBQVcsRUFBRSxHQUFHSDtJQUNsQyxJQUFJLENBQUNJLE1BQU1DLE9BQU8sQ0FBQ0wsc0JBQXNCdkIsSUFBSSxHQUFHO1FBQzVDdUIsc0JBQXNCdkIsSUFBSSxHQUFHLEVBQUU7SUFDbkM7SUFDQSxJQUFJeUIsVUFBVTtRQUNWLE1BQU1YLGNBQWNGLGVBQWVhO1FBQ25DLEtBQUssSUFBSXJCLE9BQU9VLFlBQVk7WUFDeEIsSUFBSWU7WUFDSnpCLE1BQU0sQ0FBQyxFQUFFOUIsWUFBWXdELDBCQUEwQixDQUFDLEVBQUUxQixJQUFJLENBQUM7WUFDdkQsSUFBSSxDQUFFLEVBQUN5Qiw4QkFBOEJOLHNCQUFzQnZCLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSTZCLDRCQUE0QkUsUUFBUSxDQUFDM0IsSUFBRyxHQUFJO2dCQUM1SG1CLHNCQUFzQnZCLElBQUksQ0FBQ0ssSUFBSSxDQUFDRDtZQUNwQztZQUNBb0IsUUFBUW5CLElBQUksQ0FBQ0Q7UUFDakI7SUFDSjtJQUNBLElBQUlzQixhQUFhO1FBQ2IsSUFBSU07UUFDSixNQUFNQyxpQkFBaUIsSUFBSUMsSUFBSVIsYUFBYSxZQUFZYixRQUFRO1FBQ2hFLE1BQU1ULE1BQU0sQ0FBQyxFQUFFOUIsWUFBWXdELDBCQUEwQixDQUFDLEVBQUVHLGVBQWUsQ0FBQztRQUN4RSxJQUFJLENBQUUsRUFBQ0QsK0JBQStCVCxzQkFBc0J2QixJQUFJLEtBQUssT0FBTyxLQUFLLElBQUlnQyw2QkFBNkJELFFBQVEsQ0FBQzNCLElBQUcsR0FBSTtZQUM5SG1CLHNCQUFzQnZCLElBQUksQ0FBQ0ssSUFBSSxDQUFDRDtRQUNwQztRQUNBb0IsUUFBUW5CLElBQUksQ0FBQ0Q7SUFDakI7SUFDQSxPQUFPb0I7QUFDWDtBQUNBLFNBQVNXLGlCQUFpQloscUJBQXFCLEVBQUVhLEdBQUc7SUFDaEQsSUFBSSxDQUFDYix1QkFBdUI7SUFDNUIsSUFBSSxDQUFDQSxzQkFBc0JjLFlBQVksRUFBRTtRQUNyQ2Qsc0JBQXNCYyxZQUFZLEdBQUcsRUFBRTtJQUMzQztJQUNBLE1BQU1DLGVBQWU7UUFDakI7UUFDQTtRQUNBO0tBQ0g7SUFDRCx1REFBdUQ7SUFDdkQsSUFBSWYsc0JBQXNCYyxZQUFZLENBQUNFLElBQUksQ0FBQyxDQUFDQztRQUN6QyxPQUFPRixhQUFhRyxLQUFLLENBQUMsQ0FBQ0MsUUFBUUYsTUFBTSxDQUFDRSxNQUFNLEtBQUtOLEdBQUcsQ0FBQ00sTUFBTTtJQUNuRSxJQUFJO1FBQ0E7SUFDSjtJQUNBbkIsc0JBQXNCYyxZQUFZLENBQUNoQyxJQUFJLENBQUM7UUFDcENzQyxLQUFLUCxJQUFJTyxHQUFHO1FBQ1pDLGFBQWFSLElBQUlRLFdBQVc7UUFDNUJDLGFBQWFULElBQUlTLFdBQVc7UUFDNUJDLFFBQVFWLElBQUlVLE1BQU07UUFDbEJDLFFBQVFYLElBQUlXLE1BQU07UUFDbEJDLE9BQU9aLElBQUlZLEtBQUs7UUFDaEJDLEtBQUtDLEtBQUtDLEdBQUc7UUFDYkMsS0FBSzdCLHNCQUFzQjhCLFdBQVcsSUFBSTtJQUM5QztBQUNKO0FBQ0EsU0FBU3pGLFdBQVcsRUFBRTBGLFdBQVcsRUFBRUMsNEJBQTRCLEVBQUU7SUFDN0QsSUFBSSxDQUFDQyxXQUFXQyxrQkFBa0IsRUFBRTtRQUNoQ0QsV0FBV0Msa0JBQWtCLEdBQUdELFdBQVdFLEtBQUs7SUFDcEQ7SUFDQSxJQUFJRixXQUFXRSxLQUFLLENBQUNDLGFBQWEsRUFBRTtJQUNwQyxNQUFNLEVBQUVDLGtCQUFrQixFQUFFLEdBQUdOO0lBQy9CLE1BQU1PLGNBQWNMLFdBQVdDLGtCQUFrQjtJQUNqREQsV0FBV0UsS0FBSyxHQUFHLE9BQU9JLE9BQU9DO1FBQzdCLElBQUlDLGNBQWNDO1FBQ2xCLElBQUl0QjtRQUNKLElBQUk7WUFDQUEsTUFBTSxJQUFJVCxJQUFJNEIsaUJBQWlCSSxVQUFVSixNQUFNbkIsR0FBRyxHQUFHbUI7WUFDckRuQixJQUFJd0IsUUFBUSxHQUFHO1lBQ2Z4QixJQUFJeUIsUUFBUSxHQUFHO1FBQ25CLEVBQUUsT0FBTztZQUNMLGtFQUFrRTtZQUNsRXpCLE1BQU0wQjtRQUNWO1FBQ0EsTUFBTUMsV0FBVyxDQUFDM0IsT0FBTyxPQUFPLEtBQUssSUFBSUEsSUFBSTRCLElBQUksS0FBSztRQUN0RCxNQUFNQyxhQUFhdEIsS0FBS0MsR0FBRztRQUMzQixNQUFNSixTQUFTLENBQUNnQixRQUFRLE9BQU8sS0FBSyxJQUFJLENBQUNDLGVBQWVELEtBQUtoQixNQUFNLEtBQUssT0FBTyxLQUFLLElBQUlpQixhQUFhUyxXQUFXLEVBQUMsS0FBTTtRQUN2SCx5REFBeUQ7UUFDekQsb0JBQW9CO1FBQ3BCLE1BQU1DLGFBQWEsQ0FBQyxDQUFDVCxRQUFRRixRQUFRLE9BQU8sS0FBSyxJQUFJQSxLQUFLWSxJQUFJLEtBQUssT0FBTyxLQUFLLElBQUlWLE1BQU1XLFFBQVEsTUFBTTtRQUN2RyxPQUFPLE1BQU0sQ0FBQyxHQUFHdkcsUUFBUXdHLFNBQVMsSUFBSUMsS0FBSyxDQUFDSixhQUFhdkcsV0FBVzRHLGtCQUFrQixDQUFDQyxhQUFhLEdBQUc3RyxXQUFXOEcsYUFBYSxDQUFDdkIsS0FBSyxFQUFFO1lBQ25Jd0IsTUFBTTdHLFFBQVE4RyxRQUFRLENBQUNDLE1BQU07WUFDN0JDLFVBQVU7Z0JBQ047Z0JBQ0F0QztnQkFDQXVCO2FBQ0gsQ0FBQ2dCLE1BQU0sQ0FBQ0MsU0FBU2xFLElBQUksQ0FBQztZQUN2Qm1FLFlBQVk7Z0JBQ1IsWUFBWWxCO2dCQUNaLGVBQWV2QjtnQkFDZixpQkFBaUJKLE9BQU8sT0FBTyxLQUFLLElBQUlBLElBQUk4QyxRQUFRO2dCQUNwRCxpQkFBaUIsQ0FBQzlDLE9BQU8sT0FBTyxLQUFLLElBQUlBLElBQUkrQyxJQUFJLEtBQUtyQjtZQUMxRDtRQUNKLEdBQUc7WUFDQyxJQUFJc0I7WUFDSixNQUFNcEUsd0JBQXdCZ0MsNkJBQTZCcUMsUUFBUSxNQUFPbEMsQ0FBQUEsTUFBTW1DLG9CQUFvQixJQUFJLE9BQU8sS0FBSyxJQUFJbkMsTUFBTW1DLG9CQUFvQixDQUFDcEcsSUFBSSxDQUFDaUUsTUFBSztZQUM3SixNQUFNb0MsaUJBQWlCaEMsU0FBUyxPQUFPQSxVQUFVLFlBQVksT0FBT0EsTUFBTWYsTUFBTSxLQUFLO1lBQ3JGLE1BQU1nRCxpQkFBaUIsQ0FBQ3JEO2dCQUNwQixJQUFJbEYsUUFBUXNJLGlCQUFpQmhDLEtBQUssQ0FBQ3BCLE1BQU0sR0FBRztnQkFDNUMsT0FBT2xGLFNBQVV1RyxDQUFBQSxRQUFRLE9BQU8sS0FBSyxJQUFJQSxJQUFJLENBQUNyQixNQUFNO1lBQ3hEO1lBQ0EsaUVBQWlFO1lBQ2pFLGlFQUFpRTtZQUNqRSx3QkFBd0I7WUFDeEIsSUFBSSxDQUFDbkIseUJBQXlCbUQsY0FBY25ELHNCQUFzQnlFLFdBQVcsRUFBRTtnQkFDM0UsT0FBT25DLFlBQVlDLE9BQU9DO1lBQzlCO1lBQ0EsSUFBSWtDLGFBQWE1QjtZQUNqQixNQUFNNkIsZUFBZSxDQUFDeEQ7Z0JBQ2xCLElBQUl5RCxZQUFZQyxhQUFhQztnQkFDN0IsT0FBTyxPQUFRdEMsQ0FBQUEsUUFBUSxPQUFPLEtBQUssSUFBSSxDQUFDb0MsYUFBYXBDLEtBQUtZLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSXdCLFVBQVUsQ0FBQ3pELE1BQU0sTUFBTSxjQUFjcUIsUUFBUSxPQUFPLEtBQUssSUFBSSxDQUFDcUMsY0FBY3JDLEtBQUtZLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSXlCLFdBQVcsQ0FBQzFELE1BQU0sR0FBR29ELGlCQUFpQixDQUFDTyxjQUFjdkMsTUFBTWEsSUFBSSxLQUFLLE9BQU8sS0FBSyxJQUFJMEIsV0FBVyxDQUFDM0QsTUFBTSxHQUFHMkI7WUFDMVM7WUFDQSwwREFBMEQ7WUFDMUQsMENBQTBDO1lBQzFDLElBQUlpQyxnQkFBZ0JKLGFBQWE7WUFDakMsTUFBTWxHLE9BQU90QyxhQUFhd0ksYUFBYSxXQUFXLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRXBDLE1BQU15QyxRQUFRLEdBQUcsQ0FBQztZQUNqRixJQUFJNUUsTUFBTUMsT0FBTyxDQUFDNUIsT0FBTztnQkFDckIsSUFBSSxDQUFDdUIsc0JBQXNCdkIsSUFBSSxFQUFFO29CQUM3QnVCLHNCQUFzQnZCLElBQUksR0FBRyxFQUFFO2dCQUNuQztnQkFDQSxLQUFLLE1BQU1JLE9BQU9KLEtBQUs7b0JBQ25CLElBQUksQ0FBQ3VCLHNCQUFzQnZCLElBQUksQ0FBQytCLFFBQVEsQ0FBQzNCLE1BQU07d0JBQzNDbUIsc0JBQXNCdkIsSUFBSSxDQUFDSyxJQUFJLENBQUNEO29CQUNwQztnQkFDSjtZQUNKO1lBQ0EsTUFBTW9HLGVBQWU3SSxnQkFBZ0I0RDtZQUNyQyxNQUFNa0YsY0FBY2xGLHNCQUFzQm1GLFVBQVUsS0FBSztZQUN6RCxNQUFNQyxlQUFlcEYsc0JBQXNCbUYsVUFBVSxLQUFLO1lBQzFELE1BQU1FLGlCQUFpQnJGLHNCQUFzQm1GLFVBQVUsS0FBSztZQUM1RCxNQUFNRyxtQkFBbUJ0RixzQkFBc0JtRixVQUFVLEtBQUs7WUFDOUQsTUFBTUksZ0JBQWdCdkYsc0JBQXNCbUYsVUFBVSxLQUFLO1lBQzNELE1BQU1LLGlCQUFpQnhGLHNCQUFzQm1GLFVBQVUsS0FBSztZQUM1RCxJQUFJTSxTQUFTakIsZUFBZTtZQUM1QixJQUFJbEQsY0FBYztZQUNsQixJQUFJLE9BQU9tRSxXQUFXLFlBQVksT0FBT1Ysa0JBQWtCLGFBQWE7Z0JBQ3BFLGdHQUFnRztnQkFDaEcsdUVBQXVFO2dCQUN2RSxJQUFJLENBQUVSLENBQUFBLGtCQUFrQmtCLFdBQVcsU0FBUSxHQUFJO29CQUMzQ3pJLEtBQUttQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUU0RCxTQUFTLElBQUksRUFBRS9DLHNCQUFzQkcsV0FBVyxDQUFDLG1CQUFtQixFQUFFc0YsT0FBTyxtQkFBbUIsRUFBRVYsY0FBYyxnQ0FBZ0MsQ0FBQztnQkFDNUs7Z0JBQ0FVLFNBQVMzQztZQUNiO1lBQ0EsSUFBSTJDLFdBQVcsZUFBZTtnQkFDMUJWLGdCQUFnQjtZQUNwQixPQUFPLElBQUlVLFdBQVcsY0FBY0EsV0FBVyxjQUFjRCxrQkFBa0JELGVBQWU7Z0JBQzFGUixnQkFBZ0I7WUFDcEI7WUFDQSxJQUFJVSxXQUFXLGNBQWNBLFdBQVcsWUFBWTtnQkFDaERuRSxjQUFjLENBQUMsT0FBTyxFQUFFbUUsT0FBTyxDQUFDO1lBQ3BDO1lBQ0EsSUFBSSxPQUFPVixrQkFBa0IsWUFBWUEsa0JBQWtCLE9BQU87Z0JBQzlETCxhQUFhSztZQUNqQjtZQUNBLE1BQU1XLFdBQVdsQixlQUFlO1lBQ2hDLE1BQU1tQixjQUFjLE9BQVFELENBQUFBLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVMvSSxHQUFHLE1BQU0sYUFBYStJLFdBQVcsSUFBSUUsUUFBUUYsWUFBWSxDQUFDO1lBQzNILE1BQU1HLHVCQUF1QkYsWUFBWWhKLEdBQUcsQ0FBQyxvQkFBb0JnSixZQUFZaEosR0FBRyxDQUFDO1lBQ2pGLE1BQU1tSixzQkFBc0IsQ0FBQztnQkFDekI7Z0JBQ0E7YUFDSCxDQUFDdEYsUUFBUSxDQUFDLENBQUMsQ0FBQzRELGtCQUFrQkksZUFBZSxTQUFRLEtBQU0sT0FBTyxLQUFLLElBQUlKLGdCQUFnQjJCLFdBQVcsRUFBQyxLQUFNO1lBQzlHLHVEQUF1RDtZQUN2RCx3REFBd0Q7WUFDeEQsd0RBQXdEO1lBQ3hELE1BQU1DLGNBQWMsQ0FBQ0gsd0JBQXdCQyxtQkFBa0IsS0FBTTlGLHNCQUFzQjBFLFVBQVUsS0FBSztZQUMxRyxJQUFJYyxnQkFBZ0I7Z0JBQ2hCbEUsY0FBYztZQUNsQjtZQUNBLElBQUlpRSxlQUFlO2dCQUNmLElBQUlFLFdBQVcsaUJBQWlCLE9BQU9mLGVBQWUsZUFBZ0JBLENBQUFBLGVBQWUsU0FBU0EsYUFBYSxJQUFJO29CQUMzRyxNQUFNLElBQUl1QixNQUFNLENBQUMsdUNBQXVDLEVBQUVsRCxTQUFTLGdEQUFnRCxDQUFDO2dCQUN4SDtnQkFDQXpCLGNBQWM7WUFDbEI7WUFDQSxJQUFJNEQsZUFBZU8sV0FBVyxZQUFZO2dCQUN0QyxNQUFNLElBQUlRLE1BQU0sQ0FBQyxvQ0FBb0MsRUFBRWxELFNBQVMsNkNBQTZDLENBQUM7WUFDbEg7WUFDQSxJQUFJcUMsZ0JBQWlCLFFBQU9MLGtCQUFrQixlQUFlQSxrQkFBa0IsSUFBSTtnQkFDL0V6RCxjQUFjO2dCQUNkb0QsYUFBYTtZQUNqQjtZQUNBLElBQUksT0FBT0EsZUFBZSxhQUFhO2dCQUNuQyxJQUFJVyxnQkFBZ0I7b0JBQ2hCWCxhQUFhO29CQUNicEQsY0FBYztnQkFDbEIsT0FBTyxJQUFJMEUsYUFBYTtvQkFDcEJ0QixhQUFhO29CQUNicEQsY0FBYztnQkFDbEIsT0FBTyxJQUFJZ0Usa0JBQWtCO29CQUN6QlosYUFBYTtvQkFDYnBELGNBQWM7Z0JBQ2xCLE9BQU87b0JBQ0hBLGNBQWM7b0JBQ2RvRCxhQUFhLE9BQU8xRSxzQkFBc0IwRSxVQUFVLEtBQUssYUFBYSxPQUFPMUUsc0JBQXNCMEUsVUFBVSxLQUFLLGNBQWMsUUFBUTFFLHNCQUFzQjBFLFVBQVU7Z0JBQzVLO1lBQ0osT0FBTyxJQUFJLENBQUNwRCxhQUFhO2dCQUNyQkEsY0FBYyxDQUFDLFlBQVksRUFBRW9ELFdBQVcsQ0FBQztZQUM3QztZQUNBLElBQ0Esc0RBQXNEO1lBQ3RELENBQUNzQixlQUFlLG1FQUFtRTtZQUNuRixxRUFBcUU7WUFDckUsU0FBUztZQUNSLFFBQU9oRyxzQkFBc0IwRSxVQUFVLEtBQUssZUFBZSxPQUFPQSxlQUFlLFlBQWExRSxDQUFBQSxzQkFBc0IwRSxVQUFVLEtBQUssU0FBUyxPQUFPMUUsc0JBQXNCMEUsVUFBVSxLQUFLLFlBQVlBLGFBQWExRSxzQkFBc0IwRSxVQUFVLElBQUk7Z0JBQ2xQLGlFQUFpRTtnQkFDakUsMEJBQTBCO2dCQUMxQixJQUFJQSxlQUFlLEdBQUc7b0JBQ2xCMUUsc0JBQXNCa0csUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJbEcsc0JBQXNCa0csUUFBUSxDQUFDaEksSUFBSSxDQUFDOEIsdUJBQXVCO2dCQUNqSDtnQkFDQUEsc0JBQXNCMEUsVUFBVSxHQUFHQTtZQUN2QztZQUNBLE1BQU15Qix3QkFBd0IsT0FBT3pCLGVBQWUsWUFBWUEsYUFBYSxLQUFLQSxlQUFlO1lBQ2pHLElBQUkwQjtZQUNKLElBQUlwRyxzQkFBc0JxRyxnQkFBZ0IsSUFBSUYsdUJBQXVCO2dCQUNqRSxJQUFJO29CQUNBQyxXQUFXLE1BQU1wRyxzQkFBc0JxRyxnQkFBZ0IsQ0FBQ0MsYUFBYSxDQUFDdkQsVUFBVXdCLGlCQUFpQmhDLFFBQVFDO2dCQUM3RyxFQUFFLE9BQU8rRCxLQUFLO29CQUNWckgsUUFBUXNILEtBQUssQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLEVBQUVqRTtnQkFDdEQ7WUFDSjtZQUNBLE1BQU1rRSxXQUFXekcsc0JBQXNCOEIsV0FBVyxJQUFJO1lBQ3REOUIsc0JBQXNCOEIsV0FBVyxHQUFHMkUsV0FBVztZQUMvQyxNQUFNQyx1QkFBdUIsT0FBT2hDLGVBQWUsV0FBVzNILFlBQVk0SixjQUFjLEdBQUdqQztZQUMzRixNQUFNa0Msa0JBQWtCLE9BQU9DLFNBQVNDO2dCQUNwQyxNQUFNQyxxQkFBcUI7b0JBQ3ZCO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLDhDQUE4Qzt1QkFDM0NGLFVBQVUsRUFBRSxHQUFHO3dCQUNkO3FCQUNIO2lCQUNKO2dCQUNELElBQUl0QyxnQkFBZ0I7b0JBQ2hCLE1BQU15QyxXQUFXekU7b0JBQ2pCLE1BQU0wRSxhQUFhO3dCQUNmQyxNQUFNRixTQUFTRyxPQUFPLElBQUlILFNBQVNFLElBQUk7b0JBQzNDO29CQUNBLEtBQUssTUFBTS9GLFNBQVM0RixtQkFBbUI7d0JBQ25DLGlDQUFpQzt3QkFDakNFLFVBQVUsQ0FBQzlGLE1BQU0sR0FBRzZGLFFBQVEsQ0FBQzdGLE1BQU07b0JBQ3ZDO29CQUNBb0IsUUFBUSxJQUFJSSxRQUFRcUUsU0FBUzVGLEdBQUcsRUFBRTZGO2dCQUN0QyxPQUFPLElBQUl6RSxNQUFNO29CQUNiLE1BQU00RSxjQUFjNUU7b0JBQ3BCQSxPQUFPO3dCQUNIMEUsTUFBTTFFLEtBQUsyRSxPQUFPLElBQUkzRSxLQUFLMEUsSUFBSTtvQkFDbkM7b0JBQ0EsS0FBSyxNQUFNL0YsU0FBUzRGLG1CQUFtQjt3QkFDbkMsaUNBQWlDO3dCQUNqQ3ZFLElBQUksQ0FBQ3JCLE1BQU0sR0FBR2lHLFdBQVcsQ0FBQ2pHLE1BQU07b0JBQ3BDO2dCQUNKO2dCQUNBLG9EQUFvRDtnQkFDcEQsTUFBTWtHLGFBQWE7b0JBQ2YsR0FBRzdFLElBQUk7b0JBQ1BZLE1BQU07d0JBQ0YsR0FBR1osUUFBUSxPQUFPLEtBQUssSUFBSUEsS0FBS1ksSUFBSTt3QkFDcENrRSxXQUFXO3dCQUNYYjtvQkFDSjtnQkFDSjtnQkFDQSxPQUFPbkUsWUFBWUMsT0FBTzhFLFlBQVlFLElBQUksQ0FBQyxPQUFPQztvQkFDOUMsSUFBSSxDQUFDWCxTQUFTO3dCQUNWakcsaUJBQWlCWix1QkFBdUI7NEJBQ3BDeUIsT0FBT3dCOzRCQUNQN0IsS0FBSzJCOzRCQUNMekIsYUFBYXdGLHVCQUF1QnhGOzRCQUNwQ0QsYUFBYXFELGVBQWUsS0FBS29DLHNCQUFzQixTQUFTOzRCQUNoRXZGLFFBQVFpRyxJQUFJakcsTUFBTTs0QkFDbEJDLFFBQVE2RixXQUFXN0YsTUFBTSxJQUFJO3dCQUNqQztvQkFDSjtvQkFDQSxJQUFJZ0csSUFBSWpHLE1BQU0sS0FBSyxPQUFPdkIsc0JBQXNCcUcsZ0JBQWdCLElBQUlELFlBQVlELHVCQUF1Qjt3QkFDbkcsTUFBTXNCLGFBQWFDLE9BQU9DLElBQUksQ0FBQyxNQUFNSCxJQUFJSSxXQUFXO3dCQUNwRCxJQUFJOzRCQUNBLE1BQU01SCxzQkFBc0JxRyxnQkFBZ0IsQ0FBQ2pJLEdBQUcsQ0FBQ2dJLFVBQVU7Z0NBQ3ZEekMsTUFBTTtnQ0FDTmtFLE1BQU07b0NBQ0ZDLFNBQVNoTSxPQUFPaU0sV0FBVyxDQUFDUCxJQUFJTSxPQUFPLENBQUNFLE9BQU87b0NBQy9DZCxNQUFNTyxXQUFXekMsUUFBUSxDQUFDO29DQUMxQnpELFFBQVFpRyxJQUFJakcsTUFBTTtvQ0FDbEJILEtBQUtvRyxJQUFJcEcsR0FBRztnQ0FDaEI7Z0NBQ0FzRCxZQUFZZ0M7NEJBQ2hCLEdBQUc7Z0NBQ0N2QixZQUFZO2dDQUNaVDtnQ0FDQTNCO2dDQUNBMEQ7Z0NBQ0FoSTs0QkFDSjt3QkFDSixFQUFFLE9BQU84SCxLQUFLOzRCQUNWckgsUUFBUUMsSUFBSSxDQUFDLENBQUMseUJBQXlCLENBQUMsRUFBRW9ELE9BQU9nRTt3QkFDckQ7d0JBQ0EsTUFBTTBCLFdBQVcsSUFBSUMsU0FBU1QsWUFBWTs0QkFDdENLLFNBQVMsSUFBSWxDLFFBQVE0QixJQUFJTSxPQUFPOzRCQUNoQ3ZHLFFBQVFpRyxJQUFJakcsTUFBTTt3QkFDdEI7d0JBQ0F6RixPQUFPQyxjQUFjLENBQUNrTSxVQUFVLE9BQU87NEJBQ25DaE0sT0FBT3VMLElBQUlwRyxHQUFHO3dCQUNsQjt3QkFDQSxPQUFPNkc7b0JBQ1g7b0JBQ0EsT0FBT1Q7Z0JBQ1g7WUFDSjtZQUNBLElBQUlXLGVBQWUsSUFBSUMsUUFBUUMsT0FBTztZQUN0QyxJQUFJdkI7WUFDSixJQUFJVixZQUFZcEcsc0JBQXNCcUcsZ0JBQWdCLEVBQUU7Z0JBQ3BEOEIsZUFBZSxNQUFNbkksc0JBQXNCcUcsZ0JBQWdCLENBQUNpQyxJQUFJLENBQUNsQztnQkFDakUsTUFBTW1DLFFBQVF2SSxzQkFBc0J3SSxvQkFBb0IsR0FBRyxPQUFPLE1BQU14SSxzQkFBc0JxRyxnQkFBZ0IsQ0FBQzFKLEdBQUcsQ0FBQ3lKLFVBQVU7b0JBQ3pIcUMsVUFBVTtvQkFDVi9EO29CQUNBM0I7b0JBQ0EwRDtvQkFDQWhJO29CQUNBaUssVUFBVXpEO2dCQUNkO2dCQUNBLElBQUlzRCxPQUFPO29CQUNQLE1BQU1KO2dCQUNWLE9BQU87b0JBQ0gsNEhBQTRIO29CQUM1SHJCLHNCQUFzQjtnQkFDMUI7Z0JBQ0EsSUFBSSxDQUFDeUIsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTXRNLEtBQUssS0FBS3NNLE1BQU10TSxLQUFLLENBQUMwSCxJQUFJLEtBQUssU0FBUztvQkFDeEUsd0RBQXdEO29CQUN4RCxnREFBZ0Q7b0JBQ2hELElBQUksQ0FBRTNELENBQUFBLHNCQUFzQjJJLFlBQVksSUFBSUosTUFBTTFCLE9BQU8sR0FBRzt3QkFDeEQsSUFBSTBCLE1BQU0xQixPQUFPLEVBQUU7NEJBQ2Y3RyxzQkFBc0I0SSxrQkFBa0IsS0FBSyxDQUFDOzRCQUM5QyxJQUFJLENBQUM1SSxzQkFBc0I0SSxrQkFBa0IsQ0FBQ3hDLFNBQVMsRUFBRTtnQ0FDckRwRyxzQkFBc0I0SSxrQkFBa0IsQ0FBQ3hDLFNBQVMsR0FBR1EsZ0JBQWdCLE1BQU1pQyxLQUFLLENBQUMzSixRQUFRc0gsS0FBSzs0QkFDbEc7d0JBQ0o7d0JBQ0EsTUFBTXNDLFVBQVVQLE1BQU10TSxLQUFLLENBQUM0TCxJQUFJO3dCQUNoQ2pILGlCQUFpQlosdUJBQXVCOzRCQUNwQ3lCLE9BQU93Qjs0QkFDUDdCLEtBQUsyQjs0QkFDTHpCOzRCQUNBRCxhQUFhOzRCQUNiRSxRQUFRdUgsUUFBUXZILE1BQU0sSUFBSTs0QkFDMUJDLFFBQVEsQ0FBQ2dCLFFBQVEsT0FBTyxLQUFLLElBQUlBLEtBQUtoQixNQUFNLEtBQUs7d0JBQ3JEO3dCQUNBLE1BQU15RyxXQUFXLElBQUlDLFNBQVNSLE9BQU9DLElBQUksQ0FBQ21CLFFBQVE1QixJQUFJLEVBQUUsV0FBVzs0QkFDL0RZLFNBQVNnQixRQUFRaEIsT0FBTzs0QkFDeEJ2RyxRQUFRdUgsUUFBUXZILE1BQU07d0JBQzFCO3dCQUNBekYsT0FBT0MsY0FBYyxDQUFDa00sVUFBVSxPQUFPOzRCQUNuQ2hNLE9BQU9zTSxNQUFNdE0sS0FBSyxDQUFDNEwsSUFBSSxDQUFDekcsR0FBRzt3QkFDL0I7d0JBQ0EsT0FBTzZHO29CQUNYO2dCQUNKO1lBQ0o7WUFDQSxJQUFJakksc0JBQXNCK0ksa0JBQWtCLElBQUl2RyxRQUFRLE9BQU9BLFNBQVMsVUFBVTtnQkFDOUUsTUFBTSxFQUFFOUUsS0FBSyxFQUFFLEdBQUc4RTtnQkFDbEIsb0VBQW9FO2dCQUNwRSxJQUFJbkUsZUFBZSxPQUFPbUUsS0FBSzlFLEtBQUs7Z0JBQ3BDLElBQUlBLFVBQVUsWUFBWTtvQkFDdEIsTUFBTXNMLHFCQUFxQixDQUFDLGVBQWUsRUFBRXpHLE1BQU0sRUFBRXZDLHNCQUFzQkcsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFSCxzQkFBc0JHLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUN2SSx1REFBdUQ7b0JBQ3ZESCxzQkFBc0JrRyxRQUFRLElBQUksT0FBTyxLQUFLLElBQUlsRyxzQkFBc0JrRyxRQUFRLENBQUNoSSxJQUFJLENBQUM4Qix1QkFBdUJnSjtvQkFDN0csNkRBQTZEO29CQUM3RCxrQ0FBa0M7b0JBQ2xDaEosc0JBQXNCMEUsVUFBVSxHQUFHO29CQUNuQyxNQUFNNkIsTUFBTSxJQUFJbEUsbUJBQW1CMkc7b0JBQ25DaEosc0JBQXNCaUosZUFBZSxHQUFHMUM7b0JBQ3hDdkcsc0JBQXNCa0osdUJBQXVCLEdBQUdGO2dCQUNwRDtnQkFDQSxNQUFNRyxnQkFBZ0IsVUFBVTNHO2dCQUNoQyxNQUFNLEVBQUVZLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBR1o7Z0JBQ3RCLElBQUksT0FBT1ksS0FBS3NCLFVBQVUsS0FBSyxZQUFhLFFBQU8xRSxzQkFBc0IwRSxVQUFVLEtBQUssZUFBZSxPQUFPMUUsc0JBQXNCMEUsVUFBVSxLQUFLLFlBQVl0QixLQUFLc0IsVUFBVSxHQUFHMUUsc0JBQXNCMEUsVUFBVSxHQUFHO29CQUNoTixNQUFNMEUsZUFBZXBKLHNCQUFzQm9KLFlBQVk7b0JBQ3ZELElBQUksQ0FBQ0EsZ0JBQWdCaEcsS0FBS3NCLFVBQVUsS0FBSyxHQUFHO3dCQUN4QyxNQUFNc0UscUJBQXFCLENBQUMsb0JBQW9CLEVBQUV6RyxNQUFNLEVBQUV2QyxzQkFBc0JHLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRUgsc0JBQXNCRyxXQUFXLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzt3QkFDNUksdURBQXVEO3dCQUN2REgsc0JBQXNCa0csUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJbEcsc0JBQXNCa0csUUFBUSxDQUFDaEksSUFBSSxDQUFDOEIsdUJBQXVCZ0o7d0JBQzdHLE1BQU16QyxNQUFNLElBQUlsRSxtQkFBbUIyRzt3QkFDbkNoSixzQkFBc0JpSixlQUFlLEdBQUcxQzt3QkFDeEN2RyxzQkFBc0JrSix1QkFBdUIsR0FBR0Y7b0JBQ3BEO29CQUNBLElBQUksQ0FBQ0ksZ0JBQWdCaEcsS0FBS3NCLFVBQVUsS0FBSyxHQUFHO3dCQUN4QzFFLHNCQUFzQjBFLFVBQVUsR0FBR3RCLEtBQUtzQixVQUFVO29CQUN0RDtnQkFDSjtnQkFDQSxJQUFJeUUsZUFBZSxPQUFPM0csS0FBS1ksSUFBSTtZQUN2QztZQUNBLE9BQU93RCxnQkFBZ0IsT0FBT0UscUJBQXFCdUMsT0FBTyxDQUFDbEI7UUFDL0Q7SUFDSjtJQUNBbEcsV0FBV0UsS0FBSyxDQUFDbUMsb0JBQW9CLEdBQUc7UUFDcEMsT0FBT3RDO0lBQ1g7SUFDQUMsV0FBV0UsS0FBSyxDQUFDQyxhQUFhLEdBQUc7QUFDckMsRUFFQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoLmpzP2Q1MmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB2YWxpZGF0ZVRhZ3M6IG51bGwsXG4gICAgYWRkSW1wbGljaXRUYWdzOiBudWxsLFxuICAgIHBhdGNoRmV0Y2g6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgdmFsaWRhdGVUYWdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlVGFncztcbiAgICB9LFxuICAgIGFkZEltcGxpY2l0VGFnczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhZGRJbXBsaWNpdFRhZ3M7XG4gICAgfSxcbiAgICBwYXRjaEZldGNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBhdGNoRmV0Y2g7XG4gICAgfVxufSk7XG5jb25zdCBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4vdHJhY2UvY29uc3RhbnRzXCIpO1xuY29uc3QgX3RyYWNlciA9IHJlcXVpcmUoXCIuL3RyYWNlL3RyYWNlclwiKTtcbmNvbnN0IF9jb25zdGFudHMxID0gcmVxdWlyZShcIi4uLy4uL2xpYi9jb25zdGFudHNcIik7XG5jb25zdCBfbG9nID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkKHJlcXVpcmUoXCIuLi8uLi9idWlsZC9vdXRwdXQvbG9nXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkge1xuICAgIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpO1xuICAgIHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTtcbiAgICByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uKG5vZGVJbnRlcm9wKSB7XG4gICAgICAgIHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDtcbiAgICB9KShub2RlSW50ZXJvcCk7XG59XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHtcbiAgICBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTtcbiAgICBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICAgIH1cbiAgICB2YXIgbmV3T2JqID0ge307XG4gICAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICAgIGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlLnNldChvYmosIG5ld09iaik7XG4gICAgfVxuICAgIHJldHVybiBuZXdPYmo7XG59XG5jb25zdCBpc0VkZ2VSdW50aW1lID0gcHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSBcImVkZ2VcIjtcbmZ1bmN0aW9uIHZhbGlkYXRlVGFncyh0YWdzLCBkZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IHZhbGlkVGFncyA9IFtdO1xuICAgIGNvbnN0IGludmFsaWRUYWdzID0gW107XG4gICAgZm9yIChjb25zdCB0YWcgb2YgdGFncyl7XG4gICAgICAgIGlmICh0eXBlb2YgdGFnICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpbnZhbGlkVGFncy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcImludmFsaWQgdHlwZSwgbXVzdCBiZSBhIHN0cmluZ1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0YWcubGVuZ3RoID4gX2NvbnN0YW50czEuTkVYVF9DQUNIRV9UQUdfTUFYX0xFTkdUSCkge1xuICAgICAgICAgICAgaW52YWxpZFRhZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogYGV4Y2VlZGVkIG1heCBsZW5ndGggb2YgJHtfY29uc3RhbnRzMS5ORVhUX0NBQ0hFX1RBR19NQVhfTEVOR1RIfWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsaWRUYWdzLnB1c2godGFnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW52YWxpZFRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFdhcm5pbmc6IGludmFsaWQgdGFncyBwYXNzZWQgdG8gJHtkZXNjcmlwdGlvbn06IGApO1xuICAgICAgICBmb3IgKGNvbnN0IHsgdGFnLCByZWFzb24gfSBvZiBpbnZhbGlkVGFncyl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgdGFnOiBcIiR7dGFnfVwiICR7cmVhc29ufWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWxpZFRhZ3M7XG59XG5jb25zdCBnZXREZXJpdmVkVGFncyA9IChwYXRobmFtZSk9PntcbiAgICBjb25zdCBkZXJpdmVkVGFncyA9IFtcbiAgICAgICAgYC9sYXlvdXRgXG4gICAgXTtcbiAgICAvLyB3ZSBhdXRvbWF0aWNhbGx5IGFkZCB0aGUgY3VycmVudCBwYXRoIHNlZ21lbnRzIGFzIHRhZ3NcbiAgICAvLyBmb3IgcmV2YWxpZGF0ZVBhdGggaGFuZGxpbmdcbiAgICBpZiAocGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgY29uc3QgcGF0aG5hbWVQYXJ0cyA9IHBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHBhdGhuYW1lUGFydHMubGVuZ3RoICsgMTsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjdXJQYXRobmFtZSA9IHBhdGhuYW1lUGFydHMuc2xpY2UoMCwgaSkuam9pbihcIi9cIik7XG4gICAgICAgICAgICBpZiAoY3VyUGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBhbGwgZGVyaXZlZCB0YWdzIG90aGVyIHRoYW4gdGhlIHBhZ2UgYXJlIGxheW91dCB0YWdzXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJQYXRobmFtZS5lbmRzV2l0aChcIi9wYWdlXCIpICYmICFjdXJQYXRobmFtZS5lbmRzV2l0aChcIi9yb3V0ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJQYXRobmFtZSA9IGAke2N1clBhdGhuYW1lfSR7IWN1clBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIn1sYXlvdXRgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZXJpdmVkVGFncy5wdXNoKGN1clBhdGhuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVyaXZlZFRhZ3M7XG59O1xuZnVuY3Rpb24gYWRkSW1wbGljaXRUYWdzKHN0YXRpY0dlbmVyYXRpb25TdG9yZSkge1xuICAgIGNvbnN0IG5ld1RhZ3MgPSBbXTtcbiAgICBjb25zdCB7IHBhZ2VQYXRoLCB1cmxQYXRobmFtZSB9ID0gc3RhdGljR2VuZXJhdGlvblN0b3JlO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShzdGF0aWNHZW5lcmF0aW9uU3RvcmUudGFncykpIHtcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnRhZ3MgPSBbXTtcbiAgICB9XG4gICAgaWYgKHBhZ2VQYXRoKSB7XG4gICAgICAgIGNvbnN0IGRlcml2ZWRUYWdzID0gZ2V0RGVyaXZlZFRhZ3MocGFnZVBhdGgpO1xuICAgICAgICBmb3IgKGxldCB0YWcgb2YgZGVyaXZlZFRhZ3Mpe1xuICAgICAgICAgICAgdmFyIF9zdGF0aWNHZW5lcmF0aW9uU3RvcmVfdGFncztcbiAgICAgICAgICAgIHRhZyA9IGAke19jb25zdGFudHMxLk5FWFRfQ0FDSEVfSU1QTElDSVRfVEFHX0lEfSR7dGFnfWA7XG4gICAgICAgICAgICBpZiAoISgoX3N0YXRpY0dlbmVyYXRpb25TdG9yZV90YWdzID0gc3RhdGljR2VuZXJhdGlvblN0b3JlLnRhZ3MpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGljR2VuZXJhdGlvblN0b3JlX3RhZ3MuaW5jbHVkZXModGFnKSkpIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUudGFncy5wdXNoKHRhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdUYWdzLnB1c2godGFnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodXJsUGF0aG5hbWUpIHtcbiAgICAgICAgdmFyIF9zdGF0aWNHZW5lcmF0aW9uU3RvcmVfdGFnczE7XG4gICAgICAgIGNvbnN0IHBhcnNlZFBhdGhuYW1lID0gbmV3IFVSTCh1cmxQYXRobmFtZSwgXCJodHRwOi8vblwiKS5wYXRobmFtZTtcbiAgICAgICAgY29uc3QgdGFnID0gYCR7X2NvbnN0YW50czEuTkVYVF9DQUNIRV9JTVBMSUNJVF9UQUdfSUR9JHtwYXJzZWRQYXRobmFtZX1gO1xuICAgICAgICBpZiAoISgoX3N0YXRpY0dlbmVyYXRpb25TdG9yZV90YWdzMSA9IHN0YXRpY0dlbmVyYXRpb25TdG9yZS50YWdzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRpY0dlbmVyYXRpb25TdG9yZV90YWdzMS5pbmNsdWRlcyh0YWcpKSkge1xuICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnRhZ3MucHVzaCh0YWcpO1xuICAgICAgICB9XG4gICAgICAgIG5ld1RhZ3MucHVzaCh0YWcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VGFncztcbn1cbmZ1bmN0aW9uIHRyYWNrRmV0Y2hNZXRyaWMoc3RhdGljR2VuZXJhdGlvblN0b3JlLCBjdHgpIHtcbiAgICBpZiAoIXN0YXRpY0dlbmVyYXRpb25TdG9yZSkgcmV0dXJuO1xuICAgIGlmICghc3RhdGljR2VuZXJhdGlvblN0b3JlLmZldGNoTWV0cmljcykge1xuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZmV0Y2hNZXRyaWNzID0gW107XG4gICAgfVxuICAgIGNvbnN0IGRlZHVwZUZpZWxkcyA9IFtcbiAgICAgICAgXCJ1cmxcIixcbiAgICAgICAgXCJzdGF0dXNcIixcbiAgICAgICAgXCJtZXRob2RcIlxuICAgIF07XG4gICAgLy8gZG9uJ3QgYWRkIG1ldHJpYyBpZiBvbmUgYWxyZWFkeSBleGlzdHMgZm9yIHRoZSBmZXRjaFxuICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZmV0Y2hNZXRyaWNzLnNvbWUoKG1ldHJpYyk9PntcbiAgICAgICAgcmV0dXJuIGRlZHVwZUZpZWxkcy5ldmVyeSgoZmllbGQpPT5tZXRyaWNbZmllbGRdID09PSBjdHhbZmllbGRdKTtcbiAgICB9KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5mZXRjaE1ldHJpY3MucHVzaCh7XG4gICAgICAgIHVybDogY3R4LnVybCxcbiAgICAgICAgY2FjaGVTdGF0dXM6IGN0eC5jYWNoZVN0YXR1cyxcbiAgICAgICAgY2FjaGVSZWFzb246IGN0eC5jYWNoZVJlYXNvbixcbiAgICAgICAgc3RhdHVzOiBjdHguc3RhdHVzLFxuICAgICAgICBtZXRob2Q6IGN0eC5tZXRob2QsXG4gICAgICAgIHN0YXJ0OiBjdHguc3RhcnQsXG4gICAgICAgIGVuZDogRGF0ZS5ub3coKSxcbiAgICAgICAgaWR4OiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUubmV4dEZldGNoSWQgfHwgMFxuICAgIH0pO1xufVxuZnVuY3Rpb24gcGF0Y2hGZXRjaCh7IHNlcnZlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlIH0pIHtcbiAgICBpZiAoIWdsb2JhbFRoaXMuX25leHRPcmlnaW5hbEZldGNoKSB7XG4gICAgICAgIGdsb2JhbFRoaXMuX25leHRPcmlnaW5hbEZldGNoID0gZ2xvYmFsVGhpcy5mZXRjaDtcbiAgICB9XG4gICAgaWYgKGdsb2JhbFRoaXMuZmV0Y2guX19uZXh0UGF0Y2hlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgRHluYW1pY1NlcnZlckVycm9yIH0gPSBzZXJ2ZXJIb29rcztcbiAgICBjb25zdCBvcmlnaW5GZXRjaCA9IGdsb2JhbFRoaXMuX25leHRPcmlnaW5hbEZldGNoO1xuICAgIGdsb2JhbFRoaXMuZmV0Y2ggPSBhc3luYyAoaW5wdXQsIGluaXQpPT57XG4gICAgICAgIHZhciBfaW5pdF9tZXRob2QsIF90aGlzO1xuICAgICAgICBsZXQgdXJsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdXJsID0gbmV3IFVSTChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QgPyBpbnB1dC51cmwgOiBpbnB1dCk7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gXCJcIjtcbiAgICAgICAgfSBjYXRjaCAge1xuICAgICAgICAgICAgLy8gRXJyb3IgY2F1c2VkIGJ5IG1hbGZvcm1lZCBVUkwgc2hvdWxkIGJlIGhhbmRsZWQgYnkgbmF0aXZlIGZldGNoXG4gICAgICAgICAgICB1cmwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmV0Y2hVcmwgPSAodXJsID09IG51bGwgPyB2b2lkIDAgOiB1cmwuaHJlZikgPz8gXCJcIjtcbiAgICAgICAgY29uc3QgZmV0Y2hTdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IChpbml0ID09IG51bGwgPyB2b2lkIDAgOiAoX2luaXRfbWV0aG9kID0gaW5pdC5tZXRob2QpID09IG51bGwgPyB2b2lkIDAgOiBfaW5pdF9tZXRob2QudG9VcHBlckNhc2UoKSkgfHwgXCJHRVRcIjtcbiAgICAgICAgLy8gRG8gY3JlYXRlIGEgbmV3IHNwYW4gdHJhY2UgZm9yIGludGVybmFsIGZldGNoZXMgaW4gdGhlXG4gICAgICAgIC8vIG5vbi12ZXJib3NlIG1vZGUuXG4gICAgICAgIGNvbnN0IGlzSW50ZXJuYWwgPSAoKF90aGlzID0gaW5pdCA9PSBudWxsID8gdm9pZCAwIDogaW5pdC5uZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMuaW50ZXJuYWwpID09PSB0cnVlO1xuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIF90cmFjZXIuZ2V0VHJhY2VyKSgpLnRyYWNlKGlzSW50ZXJuYWwgPyBfY29uc3RhbnRzLk5leHROb2RlU2VydmVyU3Bhbi5pbnRlcm5hbEZldGNoIDogX2NvbnN0YW50cy5BcHBSZW5kZXJTcGFuLmZldGNoLCB7XG4gICAgICAgICAgICBraW5kOiBfdHJhY2VyLlNwYW5LaW5kLkNMSUVOVCxcbiAgICAgICAgICAgIHNwYW5OYW1lOiBbXG4gICAgICAgICAgICAgICAgXCJmZXRjaFwiLFxuICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICBmZXRjaFVybFxuICAgICAgICAgICAgXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIiksXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgXCJodHRwLnVybFwiOiBmZXRjaFVybCxcbiAgICAgICAgICAgICAgICBcImh0dHAubWV0aG9kXCI6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICBcIm5ldC5wZWVyLm5hbWVcIjogdXJsID09IG51bGwgPyB2b2lkIDAgOiB1cmwuaG9zdG5hbWUsXG4gICAgICAgICAgICAgICAgXCJuZXQucGVlci5wb3J0XCI6ICh1cmwgPT0gbnVsbCA/IHZvaWQgMCA6IHVybC5wb3J0KSB8fCB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgYXN5bmMgKCk9PntcbiAgICAgICAgICAgIHZhciBfZ2V0UmVxdWVzdE1ldGE7XG4gICAgICAgICAgICBjb25zdCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUgPSBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCkgfHwgKGZldGNoLl9fbmV4dEdldFN0YXRpY1N0b3JlID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaC5fX25leHRHZXRTdGF0aWNTdG9yZS5jYWxsKGZldGNoKSk7XG4gICAgICAgICAgICBjb25zdCBpc1JlcXVlc3RJbnB1dCA9IGlucHV0ICYmIHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaW5wdXQubWV0aG9kID09PSBcInN0cmluZ1wiO1xuICAgICAgICAgICAgY29uc3QgZ2V0UmVxdWVzdE1ldGEgPSAoZmllbGQpPT57XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaXNSZXF1ZXN0SW5wdXQgPyBpbnB1dFtmaWVsZF0gOiBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSB8fCAoaW5pdCA9PSBudWxsID8gdm9pZCAwIDogaW5pdFtmaWVsZF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBzdGF0aWNHZW5lcmF0aW9uU3RvcmUgaXMgbm90IGF2YWlsYWJsZSwgd2UgY2FuJ3QgZG8gYW55XG4gICAgICAgICAgICAvLyBzcGVjaWFsIHRyZWF0bWVudCBvZiBmZXRjaCwgdGhlcmVmb3JlIGZhbGxiYWNrIHRvIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgLy8gZmV0Y2ggaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgICBpZiAoIXN0YXRpY0dlbmVyYXRpb25TdG9yZSB8fCBpc0ludGVybmFsIHx8IHN0YXRpY0dlbmVyYXRpb25TdG9yZS5pc0RyYWZ0TW9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5GZXRjaChpbnB1dCwgaW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmV2YWxpZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGdldE5leHRGaWVsZCA9IChmaWVsZCk9PntcbiAgICAgICAgICAgICAgICB2YXIgX2luaXRfbmV4dCwgX2luaXRfbmV4dDEsIF9pbnB1dF9uZXh0O1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGluaXQgPT0gbnVsbCA/IHZvaWQgMCA6IChfaW5pdF9uZXh0ID0gaW5pdC5uZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2luaXRfbmV4dFtmaWVsZF0pICE9PSBcInVuZGVmaW5lZFwiID8gaW5pdCA9PSBudWxsID8gdm9pZCAwIDogKF9pbml0X25leHQxID0gaW5pdC5uZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2luaXRfbmV4dDFbZmllbGRdIDogaXNSZXF1ZXN0SW5wdXQgPyAoX2lucHV0X25leHQgPSBpbnB1dC5uZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2lucHV0X25leHRbZmllbGRdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFJlcXVlc3RJbml0IGRvZXNuJ3Qga2VlcCBleHRyYSBmaWVsZHMgZS5nLiBuZXh0IHNvIGl0J3NcbiAgICAgICAgICAgIC8vIG9ubHkgYXZhaWxhYmxlIGlmIGluaXQgaXMgdXNlZCBzZXBhcmF0ZVxuICAgICAgICAgICAgbGV0IGN1clJldmFsaWRhdGUgPSBnZXROZXh0RmllbGQoXCJyZXZhbGlkYXRlXCIpO1xuICAgICAgICAgICAgY29uc3QgdGFncyA9IHZhbGlkYXRlVGFncyhnZXROZXh0RmllbGQoXCJ0YWdzXCIpIHx8IFtdLCBgZmV0Y2ggJHtpbnB1dC50b1N0cmluZygpfWApO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFncykpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRpY0dlbmVyYXRpb25TdG9yZS50YWdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS50YWdzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGFnIG9mIHRhZ3Mpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRpY0dlbmVyYXRpb25TdG9yZS50YWdzLmluY2x1ZGVzKHRhZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS50YWdzLnB1c2godGFnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGltcGxpY2l0VGFncyA9IGFkZEltcGxpY2l0VGFncyhzdGF0aWNHZW5lcmF0aW9uU3RvcmUpO1xuICAgICAgICAgICAgY29uc3QgaXNPbmx5Q2FjaGUgPSBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZmV0Y2hDYWNoZSA9PT0gXCJvbmx5LWNhY2hlXCI7XG4gICAgICAgICAgICBjb25zdCBpc0ZvcmNlQ2FjaGUgPSBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZmV0Y2hDYWNoZSA9PT0gXCJmb3JjZS1jYWNoZVwiO1xuICAgICAgICAgICAgY29uc3QgaXNEZWZhdWx0Q2FjaGUgPSBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZmV0Y2hDYWNoZSA9PT0gXCJkZWZhdWx0LWNhY2hlXCI7XG4gICAgICAgICAgICBjb25zdCBpc0RlZmF1bHROb1N0b3JlID0gc3RhdGljR2VuZXJhdGlvblN0b3JlLmZldGNoQ2FjaGUgPT09IFwiZGVmYXVsdC1uby1zdG9yZVwiO1xuICAgICAgICAgICAgY29uc3QgaXNPbmx5Tm9TdG9yZSA9IHN0YXRpY0dlbmVyYXRpb25TdG9yZS5mZXRjaENhY2hlID09PSBcIm9ubHktbm8tc3RvcmVcIjtcbiAgICAgICAgICAgIGNvbnN0IGlzRm9yY2VOb1N0b3JlID0gc3RhdGljR2VuZXJhdGlvblN0b3JlLmZldGNoQ2FjaGUgPT09IFwiZm9yY2Utbm8tc3RvcmVcIjtcbiAgICAgICAgICAgIGxldCBfY2FjaGUgPSBnZXRSZXF1ZXN0TWV0YShcImNhY2hlXCIpO1xuICAgICAgICAgICAgbGV0IGNhY2hlUmVhc29uID0gXCJcIjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX2NhY2hlID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBjdXJSZXZhbGlkYXRlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiBwcm92aWRpbmcgZmV0Y2ggd2l0aCBhIFJlcXVlc3QgaW5wdXQsIGl0J2xsIGF1dG9tYXRpY2FsbHkgc2V0IGEgY2FjaGUgdmFsdWUgb2YgJ2RlZmF1bHQnXG4gICAgICAgICAgICAgICAgLy8gd2Ugb25seSB3YW50IHRvIHdhcm4gaWYgdGhlIHVzZXIgaXMgZXhwbGljaXRseSBzZXR0aW5nIGEgY2FjaGUgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoIShpc1JlcXVlc3RJbnB1dCAmJiBfY2FjaGUgPT09IFwiZGVmYXVsdFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBfbG9nLndhcm4oYGZldGNoIGZvciAke2ZldGNoVXJsfSBvbiAke3N0YXRpY0dlbmVyYXRpb25TdG9yZS51cmxQYXRobmFtZX0gc3BlY2lmaWVkIFwiY2FjaGU6ICR7X2NhY2hlfVwiIGFuZCBcInJldmFsaWRhdGU6ICR7Y3VyUmV2YWxpZGF0ZX1cIiwgb25seSBvbmUgc2hvdWxkIGJlIHNwZWNpZmllZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2NhY2hlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9jYWNoZSA9PT0gXCJmb3JjZS1jYWNoZVwiKSB7XG4gICAgICAgICAgICAgICAgY3VyUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfY2FjaGUgPT09IFwibm8tY2FjaGVcIiB8fCBfY2FjaGUgPT09IFwibm8tc3RvcmVcIiB8fCBpc0ZvcmNlTm9TdG9yZSB8fCBpc09ubHlOb1N0b3JlKSB7XG4gICAgICAgICAgICAgICAgY3VyUmV2YWxpZGF0ZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX2NhY2hlID09PSBcIm5vLWNhY2hlXCIgfHwgX2NhY2hlID09PSBcIm5vLXN0b3JlXCIpIHtcbiAgICAgICAgICAgICAgICBjYWNoZVJlYXNvbiA9IGBjYWNoZTogJHtfY2FjaGV9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyUmV2YWxpZGF0ZSA9PT0gXCJudW1iZXJcIiB8fCBjdXJSZXZhbGlkYXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldmFsaWRhdGUgPSBjdXJSZXZhbGlkYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgX2hlYWRlcnMgPSBnZXRSZXF1ZXN0TWV0YShcImhlYWRlcnNcIik7XG4gICAgICAgICAgICBjb25zdCBpbml0SGVhZGVycyA9IHR5cGVvZiAoX2hlYWRlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IF9oZWFkZXJzLmdldCkgPT09IFwiZnVuY3Rpb25cIiA/IF9oZWFkZXJzIDogbmV3IEhlYWRlcnMoX2hlYWRlcnMgfHwge30pO1xuICAgICAgICAgICAgY29uc3QgaGFzVW5DYWNoZWFibGVIZWFkZXIgPSBpbml0SGVhZGVycy5nZXQoXCJhdXRob3JpemF0aW9uXCIpIHx8IGluaXRIZWFkZXJzLmdldChcImNvb2tpZVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGlzVW5DYWNoZWFibGVNZXRob2QgPSAhW1xuICAgICAgICAgICAgICAgIFwiZ2V0XCIsXG4gICAgICAgICAgICAgICAgXCJoZWFkXCJcbiAgICAgICAgICAgIF0uaW5jbHVkZXMoKChfZ2V0UmVxdWVzdE1ldGEgPSBnZXRSZXF1ZXN0TWV0YShcIm1ldGhvZFwiKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9nZXRSZXF1ZXN0TWV0YS50b0xvd2VyQ2FzZSgpKSB8fCBcImdldFwiKTtcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBhdXRob3JpemVkIGhlYWRlcnMgb3IgYSBQT1NUIG1ldGhvZCBhbmRcbiAgICAgICAgICAgIC8vIGR5bmFtaWMgZGF0YSB1c2FnZSB3YXMgcHJlc2VudCBhYm92ZSB0aGUgdHJlZSB3ZSBiYWlsXG4gICAgICAgICAgICAvLyBlLmcuIGlmIGNvb2tpZXMoKSBpcyB1c2VkIGJlZm9yZSBhbiBhdXRoZWQvUE9TVCBmZXRjaFxuICAgICAgICAgICAgY29uc3QgYXV0b05vQ2FjaGUgPSAoaGFzVW5DYWNoZWFibGVIZWFkZXIgfHwgaXNVbkNhY2hlYWJsZU1ldGhvZCkgJiYgc3RhdGljR2VuZXJhdGlvblN0b3JlLnJldmFsaWRhdGUgPT09IDA7XG4gICAgICAgICAgICBpZiAoaXNGb3JjZU5vU3RvcmUpIHtcbiAgICAgICAgICAgICAgICBjYWNoZVJlYXNvbiA9IFwiZmV0Y2hDYWNoZSA9IGZvcmNlLW5vLXN0b3JlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNPbmx5Tm9TdG9yZSkge1xuICAgICAgICAgICAgICAgIGlmIChfY2FjaGUgPT09IFwiZm9yY2UtY2FjaGVcIiB8fCB0eXBlb2YgcmV2YWxpZGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAocmV2YWxpZGF0ZSA9PT0gZmFsc2UgfHwgcmV2YWxpZGF0ZSA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2FjaGU6ICdmb3JjZS1jYWNoZScgdXNlZCBvbiBmZXRjaCBmb3IgJHtmZXRjaFVybH0gd2l0aCAnZXhwb3J0IGNvbnN0IGZldGNoQ2FjaGUgPSAnb25seS1uby1zdG9yZSdgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FjaGVSZWFzb24gPSBcImZldGNoQ2FjaGUgPSBvbmx5LW5vLXN0b3JlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNPbmx5Q2FjaGUgJiYgX2NhY2hlID09PSBcIm5vLXN0b3JlXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhY2hlOiAnbm8tc3RvcmUnIHVzZWQgb24gZmV0Y2ggZm9yICR7ZmV0Y2hVcmx9IHdpdGggJ2V4cG9ydCBjb25zdCBmZXRjaENhY2hlID0gJ29ubHktY2FjaGUnYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGb3JjZUNhY2hlICYmICh0eXBlb2YgY3VyUmV2YWxpZGF0ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBjdXJSZXZhbGlkYXRlID09PSAwKSkge1xuICAgICAgICAgICAgICAgIGNhY2hlUmVhc29uID0gXCJmZXRjaENhY2hlID0gZm9yY2UtY2FjaGVcIjtcbiAgICAgICAgICAgICAgICByZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldmFsaWRhdGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEZWZhdWx0Q2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVJlYXNvbiA9IFwiZmV0Y2hDYWNoZSA9IGRlZmF1bHQtY2FjaGVcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF1dG9Ob0NhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldmFsaWRhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVJlYXNvbiA9IFwiYXV0byBubyBjYWNoZVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEZWZhdWx0Tm9TdG9yZSkge1xuICAgICAgICAgICAgICAgICAgICByZXZhbGlkYXRlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVSZWFzb24gPSBcImZldGNoQ2FjaGUgPSBkZWZhdWx0LW5vLXN0b3JlXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVSZWFzb24gPSBcImF1dG8gY2FjaGVcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZSA9IHR5cGVvZiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZW9mIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5yZXZhbGlkYXRlID09PSBcInVuZGVmaW5lZFwiID8gZmFsc2UgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFjYWNoZVJlYXNvbikge1xuICAgICAgICAgICAgICAgIGNhY2hlUmVhc29uID0gYHJldmFsaWRhdGU6ICR7cmV2YWxpZGF0ZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKC8vIHdlIGRvbid0IGNvbnNpZGVyIGF1dG9Ob0NhY2hlIHRvIHN3aXRjaCB0byBkeW5hbWljIGR1cmluZ1xuICAgICAgICAgICAgLy8gcmV2YWxpZGF0ZSBhbHRob3VnaCBpZiBpdCBvY2N1cnMgZHVyaW5nIGJ1aWxkIHdlIGRvXG4gICAgICAgICAgICAhYXV0b05vQ2FjaGUgJiYgLy8gSWYgdGhlIHJldmFsaWRhdGUgdmFsdWUgaXNuJ3QgY3VycmVudGx5IHNldCBvciB0aGUgdmFsdWUgaXMgbGVzc1xuICAgICAgICAgICAgLy8gdGhhbiB0aGUgY3VycmVudCByZXZhbGlkYXRlIHZhbHVlLCB3ZSBzaG91bGQgdXBkYXRlIHRoZSByZXZhbGlkYXRlXG4gICAgICAgICAgICAvLyB2YWx1ZS5cbiAgICAgICAgICAgICh0eXBlb2Ygc3RhdGljR2VuZXJhdGlvblN0b3JlLnJldmFsaWRhdGUgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIHJldmFsaWRhdGUgPT09IFwibnVtYmVyXCIgJiYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZS5yZXZhbGlkYXRlID09PSBmYWxzZSB8fCB0eXBlb2Ygc3RhdGljR2VuZXJhdGlvblN0b3JlLnJldmFsaWRhdGUgPT09IFwibnVtYmVyXCIgJiYgcmV2YWxpZGF0ZSA8IHN0YXRpY0dlbmVyYXRpb25TdG9yZS5yZXZhbGlkYXRlKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSB3ZXJlIHNldHRpbmcgdGhlIHJldmFsaWRhdGUgdmFsdWUgdG8gMCwgd2Ugc2hvdWxkIHRyeSB0b1xuICAgICAgICAgICAgICAgIC8vIHBvc3Rwb25lIGluc3RlYWQgZmlyc3QuXG4gICAgICAgICAgICAgICAgaWYgKHJldmFsaWRhdGUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnBvc3Rwb25lID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucG9zdHBvbmUuY2FsbChzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIFwicmV2YWxpZGF0ZTogMFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnJldmFsaWRhdGUgPSByZXZhbGlkYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNDYWNoZWFibGVSZXZhbGlkYXRlID0gdHlwZW9mIHJldmFsaWRhdGUgPT09IFwibnVtYmVyXCIgJiYgcmV2YWxpZGF0ZSA+IDAgfHwgcmV2YWxpZGF0ZSA9PT0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgY2FjaGVLZXk7XG4gICAgICAgICAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlLmluY3JlbWVudGFsQ2FjaGUgJiYgaXNDYWNoZWFibGVSZXZhbGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVLZXkgPSBhd2FpdCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuaW5jcmVtZW50YWxDYWNoZS5mZXRjaENhY2hlS2V5KGZldGNoVXJsLCBpc1JlcXVlc3RJbnB1dCA/IGlucHV0IDogaW5pdCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBnZW5lcmF0ZSBjYWNoZSBrZXkgZm9yYCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZldGNoSWR4ID0gc3RhdGljR2VuZXJhdGlvblN0b3JlLm5leHRGZXRjaElkID8/IDE7XG4gICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUubmV4dEZldGNoSWQgPSBmZXRjaElkeCArIDE7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkUmV2YWxpZGF0ZSA9IHR5cGVvZiByZXZhbGlkYXRlICE9PSBcIm51bWJlclwiID8gX2NvbnN0YW50czEuQ0FDSEVfT05FX1lFQVIgOiByZXZhbGlkYXRlO1xuICAgICAgICAgICAgY29uc3QgZG9PcmlnaW5hbEZldGNoID0gYXN5bmMgKGlzU3RhbGUsIGNhY2hlUmVhc29uT3ZlcnJpZGUpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdElucHV0RmllbGRzID0gW1xuICAgICAgICAgICAgICAgICAgICBcImNhY2hlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY3JlZGVudGlhbHNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJoZWFkZXJzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaW50ZWdyaXR5XCIsXG4gICAgICAgICAgICAgICAgICAgIFwia2VlcGFsaXZlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibWV0aG9kXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibW9kZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInJlZGlyZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwicmVmZXJyZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJyZWZlcnJlclBvbGljeVwiLFxuICAgICAgICAgICAgICAgICAgICBcIndpbmRvd1wiLFxuICAgICAgICAgICAgICAgICAgICBcImR1cGxleFwiLFxuICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBwYXNzIHRocm91Z2ggc2lnbmFsIHdoZW4gcmV2YWxpZGF0aW5nXG4gICAgICAgICAgICAgICAgICAgIC4uLmlzU3RhbGUgPyBbXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2lnbmFsXCJcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVxdWVzdElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcUlucHV0ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiByZXFJbnB1dC5fb2dCb2R5IHx8IHJlcUlucHV0LmJvZHlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiByZXF1ZXN0SW5wdXRGaWVsZHMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBjdXN0b20gZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXFPcHRpb25zW2ZpZWxkXSA9IHJlcUlucHV0W2ZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IG5ldyBSZXF1ZXN0KHJlcUlucHV0LnVybCwgcmVxT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbml0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxJbml0ID0gaW5pdDtcbiAgICAgICAgICAgICAgICAgICAgaW5pdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGluaXQuX29nQm9keSB8fCBpbml0LmJvZHlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiByZXF1ZXN0SW5wdXRGaWVsZHMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBjdXN0b20gZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0W2ZpZWxkXSA9IGluaXRpYWxJbml0W2ZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhZGQgbWV0YWRhdGEgdG8gaW5pdCB3aXRob3V0IGVkaXRpbmcgdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgY29uc3QgY2xvbmVkSW5pdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uaW5pdCxcbiAgICAgICAgICAgICAgICAgICAgbmV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uaW5pdCA9PSBudWxsID8gdm9pZCAwIDogaW5pdC5uZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hUeXBlOiBcIm9yaWdpblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hJZHhcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbkZldGNoKGlucHV0LCBjbG9uZWRJbml0KS50aGVuKGFzeW5jIChyZXMpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNTdGFsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tGZXRjaE1ldHJpYyhzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogZmV0Y2hTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGZldGNoVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlUmVhc29uOiBjYWNoZVJlYXNvbk92ZXJyaWRlIHx8IGNhY2hlUmVhc29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlU3RhdHVzOiByZXZhbGlkYXRlID09PSAwIHx8IGNhY2hlUmVhc29uT3ZlcnJpZGUgPyBcInNraXBcIiA6IFwibWlzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGNsb25lZEluaXQubWV0aG9kIHx8IFwiR0VUXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDAgJiYgc3RhdGljR2VuZXJhdGlvblN0b3JlLmluY3JlbWVudGFsQ2FjaGUgJiYgY2FjaGVLZXkgJiYgaXNDYWNoZWFibGVSZXZhbGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib2R5QnVmZmVyID0gQnVmZmVyLmZyb20oYXdhaXQgcmVzLmFycmF5QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuaW5jcmVtZW50YWxDYWNoZS5zZXQoY2FjaGVLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2luZDogXCJGRVRDSFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuZnJvbUVudHJpZXMocmVzLmhlYWRlcnMuZW50cmllcygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlCdWZmZXIudG9TdHJpbmcoXCJiYXNlNjRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHJlcy51cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZTogbm9ybWFsaXplZFJldmFsaWRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoQ2FjaGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmFsaWRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZXRjaElkeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gc2V0IGZldGNoIGNhY2hlYCwgaW5wdXQsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5QnVmZmVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzLnN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UsIFwidXJsXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzLnVybFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgaGFuZGxlVW5sb2NrID0gKCk9PlByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgbGV0IGNhY2hlUmVhc29uT3ZlcnJpZGU7XG4gICAgICAgICAgICBpZiAoY2FjaGVLZXkgJiYgc3RhdGljR2VuZXJhdGlvblN0b3JlLmluY3JlbWVudGFsQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmxvY2sgPSBhd2FpdCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuaW5jcmVtZW50YWxDYWNoZS5sb2NrKGNhY2hlS2V5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IHN0YXRpY0dlbmVyYXRpb25TdG9yZS5pc09uRGVtYW5kUmV2YWxpZGF0ZSA/IG51bGwgOiBhd2FpdCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuaW5jcmVtZW50YWxDYWNoZS5nZXQoY2FjaGVLZXksIHtcbiAgICAgICAgICAgICAgICAgICAga2luZEhpbnQ6IFwiZmV0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hVcmwsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoSWR4LFxuICAgICAgICAgICAgICAgICAgICB0YWdzLFxuICAgICAgICAgICAgICAgICAgICBzb2Z0VGFnczogaW1wbGljaXRUYWdzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGhhbmRsZVVubG9jaygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIGRldiwgaW5jcmVtZW50YWwgY2FjaGUgcmVzcG9uc2Ugd2lsbCBiZSBudWxsIGluIGNhc2UgdGhlIGJyb3dzZXIgYWRkcyBgY2FjaGUtY29udHJvbDogbm8tY2FjaGVgIGluIHRoZSByZXF1ZXN0IGhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVSZWFzb25PdmVycmlkZSA9IFwiY2FjaGUtY29udHJvbDogbm8tY2FjaGUgKGhhcmQgcmVmcmVzaClcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChlbnRyeSA9PSBudWxsID8gdm9pZCAwIDogZW50cnkudmFsdWUpICYmIGVudHJ5LnZhbHVlLmtpbmQgPT09IFwiRkVUQ0hcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHN0YWxlIGFuZCBpcyByZXZhbGlkYXRpbmcgd2Ugd2FpdCBmb3IgZnJlc2ggZGF0YVxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGUgcmV2YWxpZGF0ZWQgZW50cnkgaGFzIHRoZSB1cGRhdGVkIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc3RhdGljR2VuZXJhdGlvblN0b3JlLmlzUmV2YWxpZGF0ZSAmJiBlbnRyeS5pc1N0YWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzU3RhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucGVuZGluZ1JldmFsaWRhdGVzID8/PSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRpY0dlbmVyYXRpb25TdG9yZS5wZW5kaW5nUmV2YWxpZGF0ZXNbY2FjaGVLZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5wZW5kaW5nUmV2YWxpZGF0ZXNbY2FjaGVLZXldID0gZG9PcmlnaW5hbEZldGNoKHRydWUpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc0RhdGEgPSBlbnRyeS52YWx1ZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tGZXRjaE1ldHJpYyhzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogZmV0Y2hTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGZldGNoVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlUmVhc29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlU3RhdHVzOiBcImhpdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzRGF0YS5zdGF0dXMgfHwgMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogKGluaXQgPT0gbnVsbCA/IHZvaWQgMCA6IGluaXQubWV0aG9kKSB8fCBcIkdFVFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKEJ1ZmZlci5mcm9tKHJlc0RhdGEuYm9keSwgXCJiYXNlNjRcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXNEYXRhLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXNEYXRhLnN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UsIFwidXJsXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW50cnkudmFsdWUuZGF0YS51cmxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZS5pc1N0YXRpY0dlbmVyYXRpb24gJiYgaW5pdCAmJiB0eXBlb2YgaW5pdCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY2FjaGUgfSA9IGluaXQ7XG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIGBjYWNoZWAgcHJvcGVydHkgYXMgQ2xvdWRmbGFyZSBXb3JrZXJzIHdpbGwgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICBpZiAoaXNFZGdlUnVudGltZSkgZGVsZXRlIGluaXQuY2FjaGU7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlID09PSBcIm5vLXN0b3JlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHluYW1pY1VzYWdlUmVhc29uID0gYG5vLXN0b3JlIGZldGNoICR7aW5wdXR9JHtzdGF0aWNHZW5lcmF0aW9uU3RvcmUudXJsUGF0aG5hbWUgPyBgICR7c3RhdGljR2VuZXJhdGlvblN0b3JlLnVybFBhdGhuYW1lfWAgOiBcIlwifWA7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGVuYWJsZWQsIHdlIHNob3VsZCBiYWlsIG91dCBvZiBzdGF0aWMgZ2VuZXJhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnBvc3Rwb25lID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucG9zdHBvbmUuY2FsbChzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIGR5bmFtaWNVc2FnZVJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBQUiBpcyBub3QgZW5hYmxlZCwgb3IgUmVhY3QgcG9zdHBvbmUgaXMgbm90IGF2YWlsYWJsZSwgd2VcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdWxkIHNldCB0aGUgcmV2YWxpZGF0ZSB0byAwLlxuICAgICAgICAgICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBEeW5hbWljU2VydmVyRXJyb3IoZHluYW1pY1VzYWdlUmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZUVyciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZURlc2NyaXB0aW9uID0gZHluYW1pY1VzYWdlUmVhc29uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBoYXNOZXh0Q29uZmlnID0gXCJuZXh0XCIgaW4gaW5pdDtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG5leHQgPSB7fSB9ID0gaW5pdDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5leHQucmV2YWxpZGF0ZSA9PT0gXCJudW1iZXJcIiAmJiAodHlwZW9mIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5yZXZhbGlkYXRlID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSA9PT0gXCJudW1iZXJcIiAmJiBuZXh0LnJldmFsaWRhdGUgPCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9yY2VEeW5hbWljID0gc3RhdGljR2VuZXJhdGlvblN0b3JlLmZvcmNlRHluYW1pYztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JjZUR5bmFtaWMgJiYgbmV4dC5yZXZhbGlkYXRlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkeW5hbWljVXNhZ2VSZWFzb24gPSBgcmV2YWxpZGF0ZTogMCBmZXRjaCAke2lucHV0fSR7c3RhdGljR2VuZXJhdGlvblN0b3JlLnVybFBhdGhuYW1lID8gYCAke3N0YXRpY0dlbmVyYXRpb25TdG9yZS51cmxQYXRobmFtZX1gIDogXCJcIn1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgZW5hYmxlZCwgd2Ugc2hvdWxkIGJhaWwgb3V0IG9mIHN0YXRpYyBnZW5lcmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnBvc3Rwb25lID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucG9zdHBvbmUuY2FsbChzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIGR5bmFtaWNVc2FnZVJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRHluYW1pY1NlcnZlckVycm9yKGR5bmFtaWNVc2FnZVJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1VzYWdlRXJyID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZURlc2NyaXB0aW9uID0gZHluYW1pY1VzYWdlUmVhc29uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghZm9yY2VEeW5hbWljIHx8IG5leHQucmV2YWxpZGF0ZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnJldmFsaWRhdGUgPSBuZXh0LnJldmFsaWRhdGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhhc05leHRDb25maWcpIGRlbGV0ZSBpbml0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZG9PcmlnaW5hbEZldGNoKGZhbHNlLCBjYWNoZVJlYXNvbk92ZXJyaWRlKS5maW5hbGx5KGhhbmRsZVVubG9jayk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZ2xvYmFsVGhpcy5mZXRjaC5fX25leHRHZXRTdGF0aWNTdG9yZSA9ICgpPT57XG4gICAgICAgIHJldHVybiBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlO1xuICAgIH07XG4gICAgZ2xvYmFsVGhpcy5mZXRjaC5fX25leHRQYXRjaGVkID0gdHJ1ZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0Y2gtZmV0Y2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwidmFsaWRhdGVUYWdzIiwiYWRkSW1wbGljaXRUYWdzIiwicGF0Y2hGZXRjaCIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsIl9jb25zdGFudHMiLCJyZXF1aXJlIiwiX3RyYWNlciIsIl9jb25zdGFudHMxIiwiX2xvZyIsIl9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsImlzRWRnZVJ1bnRpbWUiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9SVU5USU1FIiwidGFncyIsImRlc2NyaXB0aW9uIiwidmFsaWRUYWdzIiwiaW52YWxpZFRhZ3MiLCJ0YWciLCJwdXNoIiwicmVhc29uIiwibGVuZ3RoIiwiTkVYVF9DQUNIRV9UQUdfTUFYX0xFTkdUSCIsImNvbnNvbGUiLCJ3YXJuIiwibG9nIiwiZ2V0RGVyaXZlZFRhZ3MiLCJwYXRobmFtZSIsImRlcml2ZWRUYWdzIiwic3RhcnRzV2l0aCIsInBhdGhuYW1lUGFydHMiLCJzcGxpdCIsImkiLCJjdXJQYXRobmFtZSIsInNsaWNlIiwiam9pbiIsImVuZHNXaXRoIiwic3RhdGljR2VuZXJhdGlvblN0b3JlIiwibmV3VGFncyIsInBhZ2VQYXRoIiwidXJsUGF0aG5hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJfc3RhdGljR2VuZXJhdGlvblN0b3JlX3RhZ3MiLCJORVhUX0NBQ0hFX0lNUExJQ0lUX1RBR19JRCIsImluY2x1ZGVzIiwiX3N0YXRpY0dlbmVyYXRpb25TdG9yZV90YWdzMSIsInBhcnNlZFBhdGhuYW1lIiwiVVJMIiwidHJhY2tGZXRjaE1ldHJpYyIsImN0eCIsImZldGNoTWV0cmljcyIsImRlZHVwZUZpZWxkcyIsInNvbWUiLCJtZXRyaWMiLCJldmVyeSIsImZpZWxkIiwidXJsIiwiY2FjaGVTdGF0dXMiLCJjYWNoZVJlYXNvbiIsInN0YXR1cyIsIm1ldGhvZCIsInN0YXJ0IiwiZW5kIiwiRGF0ZSIsIm5vdyIsImlkeCIsIm5leHRGZXRjaElkIiwic2VydmVySG9va3MiLCJzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlIiwiZ2xvYmFsVGhpcyIsIl9uZXh0T3JpZ2luYWxGZXRjaCIsImZldGNoIiwiX19uZXh0UGF0Y2hlZCIsIkR5bmFtaWNTZXJ2ZXJFcnJvciIsIm9yaWdpbkZldGNoIiwiaW5wdXQiLCJpbml0IiwiX2luaXRfbWV0aG9kIiwiX3RoaXMiLCJSZXF1ZXN0IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZGVmaW5lZCIsImZldGNoVXJsIiwiaHJlZiIsImZldGNoU3RhcnQiLCJ0b1VwcGVyQ2FzZSIsImlzSW50ZXJuYWwiLCJuZXh0IiwiaW50ZXJuYWwiLCJnZXRUcmFjZXIiLCJ0cmFjZSIsIk5leHROb2RlU2VydmVyU3BhbiIsImludGVybmFsRmV0Y2giLCJBcHBSZW5kZXJTcGFuIiwia2luZCIsIlNwYW5LaW5kIiwiQ0xJRU5UIiwic3Bhbk5hbWUiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXR0cmlidXRlcyIsImhvc3RuYW1lIiwicG9ydCIsIl9nZXRSZXF1ZXN0TWV0YSIsImdldFN0b3JlIiwiX19uZXh0R2V0U3RhdGljU3RvcmUiLCJpc1JlcXVlc3RJbnB1dCIsImdldFJlcXVlc3RNZXRhIiwiaXNEcmFmdE1vZGUiLCJyZXZhbGlkYXRlIiwiZ2V0TmV4dEZpZWxkIiwiX2luaXRfbmV4dCIsIl9pbml0X25leHQxIiwiX2lucHV0X25leHQiLCJjdXJSZXZhbGlkYXRlIiwidG9TdHJpbmciLCJpbXBsaWNpdFRhZ3MiLCJpc09ubHlDYWNoZSIsImZldGNoQ2FjaGUiLCJpc0ZvcmNlQ2FjaGUiLCJpc0RlZmF1bHRDYWNoZSIsImlzRGVmYXVsdE5vU3RvcmUiLCJpc09ubHlOb1N0b3JlIiwiaXNGb3JjZU5vU3RvcmUiLCJfY2FjaGUiLCJfaGVhZGVycyIsImluaXRIZWFkZXJzIiwiSGVhZGVycyIsImhhc1VuQ2FjaGVhYmxlSGVhZGVyIiwiaXNVbkNhY2hlYWJsZU1ldGhvZCIsInRvTG93ZXJDYXNlIiwiYXV0b05vQ2FjaGUiLCJFcnJvciIsInBvc3Rwb25lIiwiaXNDYWNoZWFibGVSZXZhbGlkYXRlIiwiY2FjaGVLZXkiLCJpbmNyZW1lbnRhbENhY2hlIiwiZmV0Y2hDYWNoZUtleSIsImVyciIsImVycm9yIiwiZmV0Y2hJZHgiLCJub3JtYWxpemVkUmV2YWxpZGF0ZSIsIkNBQ0hFX09ORV9ZRUFSIiwiZG9PcmlnaW5hbEZldGNoIiwiaXNTdGFsZSIsImNhY2hlUmVhc29uT3ZlcnJpZGUiLCJyZXF1ZXN0SW5wdXRGaWVsZHMiLCJyZXFJbnB1dCIsInJlcU9wdGlvbnMiLCJib2R5IiwiX29nQm9keSIsImluaXRpYWxJbml0IiwiY2xvbmVkSW5pdCIsImZldGNoVHlwZSIsInRoZW4iLCJyZXMiLCJib2R5QnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsImFycmF5QnVmZmVyIiwiZGF0YSIsImhlYWRlcnMiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJyZXNwb25zZSIsIlJlc3BvbnNlIiwiaGFuZGxlVW5sb2NrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJsb2NrIiwiZW50cnkiLCJpc09uRGVtYW5kUmV2YWxpZGF0ZSIsImtpbmRIaW50Iiwic29mdFRhZ3MiLCJpc1JldmFsaWRhdGUiLCJwZW5kaW5nUmV2YWxpZGF0ZXMiLCJjYXRjaCIsInJlc0RhdGEiLCJpc1N0YXRpY0dlbmVyYXRpb24iLCJkeW5hbWljVXNhZ2VSZWFzb24iLCJkeW5hbWljVXNhZ2VFcnIiLCJkeW5hbWljVXNhZ2VEZXNjcmlwdGlvbiIsImhhc05leHRDb25maWciLCJmb3JjZUR5bmFtaWMiLCJmaW5hbGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/lib/patch-fetch.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/lib/trace/constants.js":
/*!***************************************************************!*\
  !*** ../node_modules/next/dist/server/lib/trace/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/ // eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NextVanillaSpanAllowlist: function() {\n        return NextVanillaSpanAllowlist;\n    },\n    BaseServerSpan: function() {\n        return BaseServerSpan;\n    },\n    LoadComponentsSpan: function() {\n        return LoadComponentsSpan;\n    },\n    NextServerSpan: function() {\n        return NextServerSpan;\n    },\n    NextNodeServerSpan: function() {\n        return NextNodeServerSpan;\n    },\n    StartServerSpan: function() {\n        return StartServerSpan;\n    },\n    RenderSpan: function() {\n        return RenderSpan;\n    },\n    RouterSpan: function() {\n        return RouterSpan;\n    },\n    AppRenderSpan: function() {\n        return AppRenderSpan;\n    },\n    NodeSpan: function() {\n        return NodeSpan;\n    },\n    AppRouteRouteHandlersSpan: function() {\n        return AppRouteRouteHandlersSpan;\n    },\n    ResolveMetadataSpan: function() {\n        return ResolveMetadataSpan;\n    }\n});\nvar BaseServerSpan;\n(function(BaseServerSpan) {\n    BaseServerSpan[\"handleRequest\"] = \"BaseServer.handleRequest\";\n    BaseServerSpan[\"run\"] = \"BaseServer.run\";\n    BaseServerSpan[\"pipe\"] = \"BaseServer.pipe\";\n    BaseServerSpan[\"getStaticHTML\"] = \"BaseServer.getStaticHTML\";\n    BaseServerSpan[\"render\"] = \"BaseServer.render\";\n    BaseServerSpan[\"renderToResponseWithComponents\"] = \"BaseServer.renderToResponseWithComponents\";\n    BaseServerSpan[\"renderToResponse\"] = \"BaseServer.renderToResponse\";\n    BaseServerSpan[\"renderToHTML\"] = \"BaseServer.renderToHTML\";\n    BaseServerSpan[\"renderError\"] = \"BaseServer.renderError\";\n    BaseServerSpan[\"renderErrorToResponse\"] = \"BaseServer.renderErrorToResponse\";\n    BaseServerSpan[\"renderErrorToHTML\"] = \"BaseServer.renderErrorToHTML\";\n    BaseServerSpan[\"render404\"] = \"BaseServer.render404\";\n})(BaseServerSpan || (BaseServerSpan = {}));\nvar LoadComponentsSpan;\n(function(LoadComponentsSpan) {\n    LoadComponentsSpan[\"loadDefaultErrorComponents\"] = \"LoadComponents.loadDefaultErrorComponents\";\n    LoadComponentsSpan[\"loadComponents\"] = \"LoadComponents.loadComponents\";\n})(LoadComponentsSpan || (LoadComponentsSpan = {}));\nvar NextServerSpan;\n(function(NextServerSpan) {\n    NextServerSpan[\"getRequestHandler\"] = \"NextServer.getRequestHandler\";\n    NextServerSpan[\"getServer\"] = \"NextServer.getServer\";\n    NextServerSpan[\"getServerRequestHandler\"] = \"NextServer.getServerRequestHandler\";\n    NextServerSpan[\"createServer\"] = \"createServer.createServer\";\n})(NextServerSpan || (NextServerSpan = {}));\nvar NextNodeServerSpan;\n(function(NextNodeServerSpan) {\n    NextNodeServerSpan[\"compression\"] = \"NextNodeServer.compression\";\n    NextNodeServerSpan[\"getBuildId\"] = \"NextNodeServer.getBuildId\";\n    NextNodeServerSpan[\"generateStaticRoutes\"] = \"NextNodeServer.generateStaticRoutes\";\n    NextNodeServerSpan[\"generateFsStaticRoutes\"] = \"NextNodeServer.generateFsStaticRoutes\";\n    NextNodeServerSpan[\"generatePublicRoutes\"] = \"NextNodeServer.generatePublicRoutes\";\n    NextNodeServerSpan[\"generateImageRoutes\"] = \"NextNodeServer.generateImageRoutes.route\";\n    NextNodeServerSpan[\"sendRenderResult\"] = \"NextNodeServer.sendRenderResult\";\n    NextNodeServerSpan[\"proxyRequest\"] = \"NextNodeServer.proxyRequest\";\n    NextNodeServerSpan[\"runApi\"] = \"NextNodeServer.runApi\";\n    NextNodeServerSpan[\"render\"] = \"NextNodeServer.render\";\n    NextNodeServerSpan[\"renderHTML\"] = \"NextNodeServer.renderHTML\";\n    NextNodeServerSpan[\"imageOptimizer\"] = \"NextNodeServer.imageOptimizer\";\n    NextNodeServerSpan[\"getPagePath\"] = \"NextNodeServer.getPagePath\";\n    NextNodeServerSpan[\"getRoutesManifest\"] = \"NextNodeServer.getRoutesManifest\";\n    NextNodeServerSpan[\"findPageComponents\"] = \"NextNodeServer.findPageComponents\";\n    NextNodeServerSpan[\"getFontManifest\"] = \"NextNodeServer.getFontManifest\";\n    NextNodeServerSpan[\"getServerComponentManifest\"] = \"NextNodeServer.getServerComponentManifest\";\n    NextNodeServerSpan[\"getRequestHandler\"] = \"NextNodeServer.getRequestHandler\";\n    NextNodeServerSpan[\"renderToHTML\"] = \"NextNodeServer.renderToHTML\";\n    NextNodeServerSpan[\"renderError\"] = \"NextNodeServer.renderError\";\n    NextNodeServerSpan[\"renderErrorToHTML\"] = \"NextNodeServer.renderErrorToHTML\";\n    NextNodeServerSpan[\"render404\"] = \"NextNodeServer.render404\";\n    NextNodeServerSpan[\"route\"] = \"route\";\n    NextNodeServerSpan[\"onProxyReq\"] = \"onProxyReq\";\n    NextNodeServerSpan[\"apiResolver\"] = \"apiResolver\";\n    NextNodeServerSpan[\"internalFetch\"] = \"internalFetch\";\n})(NextNodeServerSpan || (NextNodeServerSpan = {}));\nvar StartServerSpan;\n(function(StartServerSpan) {\n    StartServerSpan[\"startServer\"] = \"startServer.startServer\";\n})(StartServerSpan || (StartServerSpan = {}));\nvar RenderSpan;\n(function(RenderSpan) {\n    RenderSpan[\"getServerSideProps\"] = \"Render.getServerSideProps\";\n    RenderSpan[\"getStaticProps\"] = \"Render.getStaticProps\";\n    RenderSpan[\"renderToString\"] = \"Render.renderToString\";\n    RenderSpan[\"renderDocument\"] = \"Render.renderDocument\";\n    RenderSpan[\"createBodyResult\"] = \"Render.createBodyResult\";\n})(RenderSpan || (RenderSpan = {}));\nvar AppRenderSpan;\n(function(AppRenderSpan) {\n    AppRenderSpan[\"renderToString\"] = \"AppRender.renderToString\";\n    AppRenderSpan[\"renderToReadableStream\"] = \"AppRender.renderToReadableStream\";\n    AppRenderSpan[\"getBodyResult\"] = \"AppRender.getBodyResult\";\n    AppRenderSpan[\"fetch\"] = \"AppRender.fetch\";\n})(AppRenderSpan || (AppRenderSpan = {}));\nvar RouterSpan;\n(function(RouterSpan) {\n    RouterSpan[\"executeRoute\"] = \"Router.executeRoute\";\n})(RouterSpan || (RouterSpan = {}));\nvar NodeSpan;\n(function(NodeSpan) {\n    NodeSpan[\"runHandler\"] = \"Node.runHandler\";\n})(NodeSpan || (NodeSpan = {}));\nvar AppRouteRouteHandlersSpan;\n(function(AppRouteRouteHandlersSpan) {\n    AppRouteRouteHandlersSpan[\"runHandler\"] = \"AppRouteRouteHandlers.runHandler\";\n})(AppRouteRouteHandlersSpan || (AppRouteRouteHandlersSpan = {}));\nvar ResolveMetadataSpan;\n(function(ResolveMetadataSpan) {\n    ResolveMetadataSpan[\"generateMetadata\"] = \"ResolveMetadata.generateMetadata\";\n    ResolveMetadataSpan[\"generateViewport\"] = \"ResolveMetadata.generateViewport\";\n})(ResolveMetadataSpan || (ResolveMetadataSpan = {}));\nconst NextVanillaSpanAllowlist = [\n    \"BaseServer.handleRequest\",\n    \"Render.getServerSideProps\",\n    \"Render.getStaticProps\",\n    \"AppRender.fetch\",\n    \"AppRender.getBodyResult\",\n    \"Render.renderDocument\",\n    \"Node.runHandler\",\n    \"AppRouteRouteHandlers.runHandler\",\n    \"ResolveMetadata.generateMetadata\",\n    \"ResolveMetadata.generateViewport\"\n]; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/lib/trace/constants.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/lib/trace/tracer.js":
/*!************************************************************!*\
  !*** ../node_modules/next/dist/server/lib/trace/tracer.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getTracer: function() {\n        return getTracer;\n    },\n    SpanStatusCode: function() {\n        return SpanStatusCode;\n    },\n    SpanKind: function() {\n        return SpanKind;\n    }\n});\nconst _constants = __webpack_require__(/*! ./constants */ \"(rsc)/../node_modules/next/dist/server/lib/trace/constants.js\");\nlet api;\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (false) {} else {\n    try {\n        api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    } catch (err) {\n        api = __webpack_require__(/*! next/dist/compiled/@opentelemetry/api */ \"(rsc)/../node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    }\n}\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;\nconst isPromise = (p)=>{\n    return p !== null && typeof p === \"object\" && typeof p.then === \"function\";\n};\nconst closeSpanWithError = (span, error)=>{\n    if ((error == null ? void 0 : error.bubble) === true) {\n        span.setAttribute(\"next.bubble\", true);\n    } else {\n        if (error) {\n            span.recordException(error);\n        }\n        span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error == null ? void 0 : error.message\n        });\n    }\n    span.end();\n};\n/** we use this map to propagate attributes from nested spans to the top span */ const rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey(\"next.rootSpanId\");\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nclass NextTracerImpl {\n    /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */ getTracerInstance() {\n        return trace.getTracer(\"next.js\", \"0.0.1\");\n    }\n    getContext() {\n        return context;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    withPropagatedContext(carrier, fn, getter) {\n        const activeContext = context.active();\n        if (trace.getSpanContext(activeContext)) {\n            // Active span is already set, too late to propagate.\n            return fn();\n        }\n        const remoteContext = propagation.extract(activeContext, carrier, getter);\n        return context.with(remoteContext, fn);\n    }\n    trace(...args) {\n        var _trace_getSpanContext;\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        // coerce options form overload\n        const { fn, options } = typeof fnOrOptions === \"function\" ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        if (!_constants.NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== \"1\" || options.hideSpan) {\n            return fn();\n        }\n        const spanName = options.spanName ?? type;\n        // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = ROOT_CONTEXT;\n            isRootSpan = true;\n        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            \"next.span_name\": spanName,\n            \"next.span_type\": type,\n            ...options.attributes\n        };\n        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        result.then(()=>span.end(), (err)=>closeSpanWithError(span, err)).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!_constants.NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== \"1\") {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === \"function\" && typeof fn === \"function\") {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === \"function\") {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})(); //# sourceMappingURL=tracer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/lib/trace/tracer.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/exports/next-response.js":
/*!*********************************************************************!*\
  !*** ../node_modules/next/dist/server/web/exports/next-response.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// This file is for modularized imports for next/server to get fully-treeshaking.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _response.NextResponse;\n    }\n}));\nconst _response = __webpack_require__(/*! ../spec-extension/response */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/response.js\"); //# sourceMappingURL=next-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL2V4cG9ydHMvbmV4dC1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpRkFBaUY7QUFDcEU7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDJDQUEwQztJQUN0Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0MsVUFBVUMsWUFBWTtJQUNqQztBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1ELFlBQVlFLG1CQUFPQSxDQUFDLHlHQUE0QixHQUV0RCx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL2V4cG9ydHMvbmV4dC1yZXNwb25zZS5qcz84OWI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0cyBmb3IgbmV4dC9zZXJ2ZXIgdG8gZ2V0IGZ1bGx5LXRyZWVzaGFraW5nLlxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfcmVzcG9uc2UuTmV4dFJlc3BvbnNlO1xuICAgIH1cbn0pO1xuY29uc3QgX3Jlc3BvbnNlID0gcmVxdWlyZShcIi4uL3NwZWMtZXh0ZW5zaW9uL3Jlc3BvbnNlXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0LXJlc3BvbnNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVzcG9uc2UiLCJOZXh0UmVzcG9uc2UiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/exports/next-response.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/next-url.js":
/*!********************************************************!*\
  !*** ../node_modules/next/dist/server/web/next-url.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextURL\", ({\n    enumerable: true,\n    get: function() {\n        return NextURL;\n    }\n}));\nconst _detectdomainlocale = __webpack_require__(/*! ../../shared/lib/i18n/detect-domain-locale */ \"(rsc)/../node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\");\nconst _formatnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/format-next-pathname-info */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\nconst _gethostname = __webpack_require__(/*! ../../shared/lib/get-hostname */ \"(rsc)/../node_modules/next/dist/shared/lib/get-hostname.js\");\nconst _getnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/get-next-pathname-info */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|\\[::1\\]|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nclass NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyze();\n    }\n    analyze() {\n        var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig, _this_Internal_domainLocale, _this_Internal_options_nextConfig_i18n1, _this_Internal_options_nextConfig1;\n        const info = (0, _getnextpathnameinfo.getNextPathnameInfo)(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !undefined,\n            i18nProvider: this[Internal].options.i18nProvider\n        });\n        const hostname = (0, _gethostname.getHostname)(this[Internal].url, this[Internal].options.headers);\n        this[Internal].domainLocale = this[Internal].options.i18nProvider ? this[Internal].options.i18nProvider.detectDomainLocale(hostname) : (0, _detectdomainlocale.detectDomainLocale)((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.domains, hostname);\n        const defaultLocale = ((_this_Internal_domainLocale = this[Internal].domainLocale) == null ? void 0 : _this_Internal_domainLocale.defaultLocale) || ((_this_Internal_options_nextConfig1 = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n1 = _this_Internal_options_nextConfig1.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n1.defaultLocale);\n        this[Internal].url.pathname = info.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = info.basePath ?? \"\";\n        this[Internal].buildId = info.buildId;\n        this[Internal].locale = info.locale ?? defaultLocale;\n        this[Internal].trailingSlash = info.trailingSlash;\n    }\n    formatPathname() {\n        return (0, _formatnextpathnameinfo.formatNextPathnameInfo)({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig;\n        if (!this[Internal].locale || !((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyze();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n} //# sourceMappingURL=next-url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/next-url.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/headers.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/next/dist/server/web/spec-extension/adapters/headers.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyHeadersError: function() {\n        return ReadonlyHeadersError;\n    },\n    HeadersAdapter: function() {\n        return HeadersAdapter;\n    }\n});\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyHeadersError extends Error {\n    constructor(){\n        super(\"Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers\");\n    }\n    static callable() {\n        throw new ReadonlyHeadersError();\n    }\n}\nclass HeadersAdapter extends Headers {\n    constructor(headers){\n        // We've already overridden the methods that would be called, so we're just\n        // calling the super constructor to ensure that the instanceof check works.\n        super();\n        this.headers = new Proxy(headers, {\n            get (target, prop, receiver) {\n                // Because this is just an object, we expect that all \"get\" operations\n                // are for properties. If it's a \"get\" for a symbol, we'll just return\n                // the symbol.\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return undefined.\n                if (typeof original === \"undefined\") return;\n                // If the original casing exists, return the value.\n                return _reflect.ReflectAdapter.get(target, original, receiver);\n            },\n            set (target, prop, value, receiver) {\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.set(target, prop, value, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, use the prop as the key.\n                return _reflect.ReflectAdapter.set(target, original ?? prop, value, receiver);\n            },\n            has (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.has(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return false.\n                if (typeof original === \"undefined\") return false;\n                // If the original casing exists, return true.\n                return _reflect.ReflectAdapter.has(target, original);\n            },\n            deleteProperty (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.deleteProperty(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return true.\n                if (typeof original === \"undefined\") return true;\n                // If the original casing exists, delete the property.\n                return _reflect.ReflectAdapter.deleteProperty(target, original);\n            }\n        });\n    }\n    /**\n   * Seals a Headers instance to prevent modification by throwing an error when\n   * any mutating method is called.\n   */ static seal(headers) {\n        return new Proxy(headers, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"append\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyHeadersError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n    /**\n   * Merges a header value into a string. This stores multiple values as an\n   * array, so we need to merge them into a string.\n   *\n   * @param value a header value\n   * @returns a merged header value (a string)\n   */ merge(value) {\n        if (Array.isArray(value)) return value.join(\", \");\n        return value;\n    }\n    /**\n   * Creates a Headers instance from a plain object or a Headers instance.\n   *\n   * @param headers a plain object or a Headers instance\n   * @returns a headers instance\n   */ static from(headers) {\n        if (headers instanceof Headers) return headers;\n        return new HeadersAdapter(headers);\n    }\n    append(name, value) {\n        const existing = this.headers[name];\n        if (typeof existing === \"string\") {\n            this.headers[name] = [\n                existing,\n                value\n            ];\n        } else if (Array.isArray(existing)) {\n            existing.push(value);\n        } else {\n            this.headers[name] = value;\n        }\n    }\n    delete(name) {\n        delete this.headers[name];\n    }\n    get(name) {\n        const value = this.headers[name];\n        if (typeof value !== \"undefined\") return this.merge(value);\n        return null;\n    }\n    has(name) {\n        return typeof this.headers[name] !== \"undefined\";\n    }\n    set(name, value) {\n        this.headers[name] = value;\n    }\n    forEach(callbackfn, thisArg) {\n        for (const [name, value] of this.entries()){\n            callbackfn.call(thisArg, value, name, this);\n        }\n    }\n    *entries() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(name);\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n    *keys() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            yield name;\n        }\n    }\n    *values() {\n        for (const key of Object.keys(this.headers)){\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(key);\n            yield value;\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/headers.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/reflect.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/next/dist/server/web/spec-extension/adapters/reflect.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"ReflectAdapter\", ({\n    enumerable: true,\n    get: function() {\n        return ReflectAdapter;\n    }\n}));\nclass ReflectAdapter {\n    static get(target, prop, receiver) {\n        const value = Reflect.get(target, prop, receiver);\n        if (typeof value === \"function\") {\n            return value.bind(target);\n        }\n        return value;\n    }\n    static set(target, prop, value, receiver) {\n        return Reflect.set(target, prop, value, receiver);\n    }\n    static has(target, prop) {\n        return Reflect.has(target, prop);\n    }\n    static deleteProperty(target, prop) {\n        return Reflect.deleteProperty(target, prop);\n    }\n} //# sourceMappingURL=reflect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL3JlZmxlY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGtEQUFpRDtJQUM3Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1BO0lBQ0YsT0FBT0QsSUFBSUUsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRTtRQUMvQixNQUFNTixRQUFRTyxRQUFRTCxHQUFHLENBQUNFLFFBQVFDLE1BQU1DO1FBQ3hDLElBQUksT0FBT04sVUFBVSxZQUFZO1lBQzdCLE9BQU9BLE1BQU1RLElBQUksQ0FBQ0o7UUFDdEI7UUFDQSxPQUFPSjtJQUNYO0lBQ0EsT0FBT1MsSUFBSUwsTUFBTSxFQUFFQyxJQUFJLEVBQUVMLEtBQUssRUFBRU0sUUFBUSxFQUFFO1FBQ3RDLE9BQU9DLFFBQVFFLEdBQUcsQ0FBQ0wsUUFBUUMsTUFBTUwsT0FBT007SUFDNUM7SUFDQSxPQUFPSSxJQUFJTixNQUFNLEVBQUVDLElBQUksRUFBRTtRQUNyQixPQUFPRSxRQUFRRyxHQUFHLENBQUNOLFFBQVFDO0lBQy9CO0lBQ0EsT0FBT00sZUFBZVAsTUFBTSxFQUFFQyxJQUFJLEVBQUU7UUFDaEMsT0FBT0UsUUFBUUksY0FBYyxDQUFDUCxRQUFRQztJQUMxQztBQUNKLEVBRUEsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9yZWZsZWN0LmpzPzNlZTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZWZsZWN0QWRhcHRlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUmVmbGVjdEFkYXB0ZXI7XG4gICAgfVxufSk7XG5jbGFzcyBSZWZsZWN0QWRhcHRlciB7XG4gICAgc3RhdGljIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmJpbmQodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgc3RhdGljIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcCk7XG4gICAgfVxuICAgIHN0YXRpYyBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZmxlY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIlJlZmxlY3RBZGFwdGVyIiwidGFyZ2V0IiwicHJvcCIsInJlY2VpdmVyIiwiUmVmbGVjdCIsImJpbmQiLCJzZXQiLCJoYXMiLCJkZWxldGVQcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyRequestCookiesError: function() {\n        return ReadonlyRequestCookiesError;\n    },\n    RequestCookiesAdapter: function() {\n        return RequestCookiesAdapter;\n    },\n    getModifiedCookieValues: function() {\n        return getModifiedCookieValues;\n    },\n    appendMutableCookies: function() {\n        return appendMutableCookies;\n    },\n    MutableRequestCookiesAdapter: function() {\n        return MutableRequestCookiesAdapter;\n    }\n});\nconst _cookies = __webpack_require__(/*! ../cookies */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyRequestCookiesError extends Error {\n    constructor(){\n        super(\"Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options\");\n    }\n    static callable() {\n        throw new ReadonlyRequestCookiesError();\n    }\n}\nclass RequestCookiesAdapter {\n    static seal(cookies) {\n        return new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"clear\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyRequestCookiesError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\nconst SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for(\"next.mutated.cookies\");\nfunction getModifiedCookieValues(cookies) {\n    const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];\n    if (!modified || !Array.isArray(modified) || modified.length === 0) {\n        return [];\n    }\n    return modified;\n}\nfunction appendMutableCookies(headers, mutableCookies) {\n    const modifiedCookieValues = getModifiedCookieValues(mutableCookies);\n    if (modifiedCookieValues.length === 0) {\n        return false;\n    }\n    // Return a new response that extends the response with\n    // the modified cookies as fallbacks. `res` cookies\n    // will still take precedence.\n    const resCookies = new _cookies.ResponseCookies(headers);\n    const returnedCookies = resCookies.getAll();\n    // Set the modified cookies as fallbacks.\n    for (const cookie of modifiedCookieValues){\n        resCookies.set(cookie);\n    }\n    // Set the original cookies as the final values.\n    for (const cookie of returnedCookies){\n        resCookies.set(cookie);\n    }\n    return true;\n}\nclass MutableRequestCookiesAdapter {\n    static wrap(cookies, onUpdateCookies) {\n        const responseCookes = new _cookies.ResponseCookies(new Headers());\n        for (const cookie of cookies.getAll()){\n            responseCookes.set(cookie);\n        }\n        let modifiedValues = [];\n        const modifiedCookies = new Set();\n        const updateResponseCookies = ()=>{\n            var _fetch___nextGetStaticStore;\n            // TODO-APP: change method of getting staticGenerationAsyncStore\n            const staticGenerationAsyncStore = fetch.__nextGetStaticStore == null ? void 0 : (_fetch___nextGetStaticStore = fetch.__nextGetStaticStore.call(fetch)) == null ? void 0 : _fetch___nextGetStaticStore.getStore();\n            if (staticGenerationAsyncStore) {\n                staticGenerationAsyncStore.pathWasRevalidated = true;\n            }\n            const allCookies = responseCookes.getAll();\n            modifiedValues = allCookies.filter((c)=>modifiedCookies.has(c.name));\n            if (onUpdateCookies) {\n                const serializedCookies = [];\n                for (const cookie of modifiedValues){\n                    const tempCookies = new _cookies.ResponseCookies(new Headers());\n                    tempCookies.set(cookie);\n                    serializedCookies.push(tempCookies.toString());\n                }\n                onUpdateCookies(serializedCookies);\n            }\n        };\n        return new Proxy(responseCookes, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    // A special symbol to get the modified cookie values\n                    case SYMBOL_MODIFY_COOKIE_VALUES:\n                        return modifiedValues;\n                    // TODO: Throw error if trying to set a cookie after the response\n                    // headers have been set.\n                    case \"delete\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                target.delete(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    case \"set\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                return target.set(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n} //# sourceMappingURL=request-cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/spec-extension/cookies.js":
/*!**********************************************************************!*\
  !*** ../node_modules/next/dist/server/web/spec-extension/cookies.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RequestCookies: function() {\n        return _cookies.RequestCookies;\n    },\n    ResponseCookies: function() {\n        return _cookies.ResponseCookies;\n    }\n});\nconst _cookies = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(rsc)/../node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\"); //# sourceMappingURL=cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2Nvb2tpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FHTjtBQUNBLFNBQVNHLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlULE9BQU9DLGNBQWMsQ0FBQ08sUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTCxTQUFTO0lBQ2JHLGdCQUFnQjtRQUNaLE9BQU9RLFNBQVNSLGNBQWM7SUFDbEM7SUFDQUMsaUJBQWlCO1FBQ2IsT0FBT08sU0FBU1AsZUFBZTtJQUNuQztBQUNKO0FBQ0EsTUFBTU8sV0FBV0MsbUJBQU9BLENBQUMseUhBQTBDLEdBRW5FLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vY29va2llcy5qcz8yOGZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUmVxdWVzdENvb2tpZXM6IG51bGwsXG4gICAgUmVzcG9uc2VDb29raWVzOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIFJlcXVlc3RDb29raWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jb29raWVzLlJlcXVlc3RDb29raWVzO1xuICAgIH0sXG4gICAgUmVzcG9uc2VDb29raWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jb29raWVzLlJlc3BvbnNlQ29va2llcztcbiAgICB9XG59KTtcbmNvbnN0IF9jb29raWVzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9AZWRnZS1ydW50aW1lL2Nvb2tpZXNcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvb2tpZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiUmVxdWVzdENvb2tpZXMiLCJSZXNwb25zZUNvb2tpZXMiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfY29va2llcyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/spec-extension/cookies.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/spec-extension/response.js":
/*!***********************************************************************!*\
  !*** ../node_modules/next/dist/server/web/spec-extension/response.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextResponse\", ({\n    enumerable: true,\n    get: function() {\n        return NextResponse;\n    }\n}));\nconst _nexturl = __webpack_require__(/*! ../next-url */ \"(rsc)/../node_modules/next/dist/server/web/next-url.js\");\nconst _utils = __webpack_require__(/*! ../utils */ \"(rsc)/../node_modules/next/dist/server/web/utils.js\");\nconst _cookies = __webpack_require__(/*! ./cookies */ \"(rsc)/../node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        this[INTERNALS] = {\n            cookies: new _cookies.ResponseCookies(this.headers),\n            url: init.url ? new _nexturl.NextURL(init.url, {\n                headers: (0, _utils.toNodeOutgoingHttpHeaders)(this.headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", (0, _utils.validateURL)(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", (0, _utils.validateURL)(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n} //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/spec-extension/response.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/server/web/utils.js":
/*!*****************************************************!*\
  !*** ../node_modules/next/dist/server/web/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    fromNodeOutgoingHttpHeaders: function() {\n        return fromNodeOutgoingHttpHeaders;\n    },\n    splitCookiesString: function() {\n        return splitCookiesString;\n    },\n    toNodeOutgoingHttpHeaders: function() {\n        return toNodeOutgoingHttpHeaders;\n    },\n    validateURL: function() {\n        return validateURL;\n    }\n});\nfunction fromNodeOutgoingHttpHeaders(nodeHeaders) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(nodeHeaders)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (typeof v === \"undefined\") continue;\n            if (typeof v === \"number\") {\n                v = v.toString();\n            }\n            headers.append(key, v);\n        }\n    }\n    return headers;\n}\nfunction splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nfunction toNodeOutgoingHttpHeaders(headers) {\n    const nodeHeaders = {};\n    const cookies = [];\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            if (key.toLowerCase() === \"set-cookie\") {\n                // We may have gotten a comma joined string of cookies, or multiple\n                // set-cookie headers. We need to merge them into one header array\n                // to represent all the cookies.\n                cookies.push(...splitCookiesString(value));\n                nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;\n            } else {\n                nodeHeaders[key] = value;\n            }\n        }\n    }\n    return nodeHeaders;\n}\nfunction validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/server/web/utils.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/get-hostname.js":
/*!************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/get-hostname.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getHostname\", ({\n    enumerable: true,\n    get: function() {\n        return getHostname;\n    }\n}));\nfunction getHostname(parsed, headers) {\n    // Get the hostname from the headers if it exists, otherwise use the parsed\n    // hostname.\n    let hostname;\n    if ((headers == null ? void 0 : headers.host) && !Array.isArray(headers.host)) {\n        hostname = headers.host.toString().split(\":\", 1)[0];\n    } else if (parsed.hostname) {\n        hostname = parsed.hostname;\n    } else return;\n    return hostname.toLowerCase();\n} //# sourceMappingURL=get-hostname.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2dldC1ob3N0bmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsK0NBQThDO0lBQzFDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsWUFBWUMsTUFBTSxFQUFFQyxPQUFPO0lBQ2hDLDJFQUEyRTtJQUMzRSxZQUFZO0lBQ1osSUFBSUM7SUFDSixJQUFJLENBQUNELFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFFLElBQUksS0FBSyxDQUFDQyxNQUFNQyxPQUFPLENBQUNKLFFBQVFFLElBQUksR0FBRztRQUMzRUQsV0FBV0QsUUFBUUUsSUFBSSxDQUFDRyxRQUFRLEdBQUdDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZELE9BQU8sSUFBSVAsT0FBT0UsUUFBUSxFQUFFO1FBQ3hCQSxXQUFXRixPQUFPRSxRQUFRO0lBQzlCLE9BQU87SUFDUCxPQUFPQSxTQUFTTSxXQUFXO0FBQy9CLEVBRUEsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9nZXQtaG9zdG5hbWUuanM/MjU3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEhvc3RuYW1lXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRIb3N0bmFtZTtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIGdldEhvc3RuYW1lKHBhcnNlZCwgaGVhZGVycykge1xuICAgIC8vIEdldCB0aGUgaG9zdG5hbWUgZnJvbSB0aGUgaGVhZGVycyBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB1c2UgdGhlIHBhcnNlZFxuICAgIC8vIGhvc3RuYW1lLlxuICAgIGxldCBob3N0bmFtZTtcbiAgICBpZiAoKGhlYWRlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGhlYWRlcnMuaG9zdCkgJiYgIUFycmF5LmlzQXJyYXkoaGVhZGVycy5ob3N0KSkge1xuICAgICAgICBob3N0bmFtZSA9IGhlYWRlcnMuaG9zdC50b1N0cmluZygpLnNwbGl0KFwiOlwiLCAxKVswXTtcbiAgICB9IGVsc2UgaWYgKHBhcnNlZC5ob3N0bmFtZSkge1xuICAgICAgICBob3N0bmFtZSA9IHBhcnNlZC5ob3N0bmFtZTtcbiAgICB9IGVsc2UgcmV0dXJuO1xuICAgIHJldHVybiBob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtaG9zdG5hbWUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldEhvc3RuYW1lIiwicGFyc2VkIiwiaGVhZGVycyIsImhvc3RuYW1lIiwiaG9zdCIsIkFycmF5IiwiaXNBcnJheSIsInRvU3RyaW5nIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/get-hostname.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js":
/*!*************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"detectDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return detectDomainLocale;\n    }\n}));\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n    if (!domainItems) return;\n    if (detectedLocale) {\n        detectedLocale = detectedLocale.toLowerCase();\n    }\n    for (const item of domainItems){\n        var _item_domain, _item_locales;\n        // remove port if present\n        const domainHostname = (_item_domain = item.domain) == null ? void 0 : _item_domain.split(\":\", 1)[0].toLowerCase();\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item_locales = item.locales) == null ? void 0 : _item_locales.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n            return item;\n        }\n    }\n} //# sourceMappingURL=detect-domain-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2kxOG4vZGV0ZWN0LWRvbWFpbi1sb2NhbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHNEQUFxRDtJQUNqREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLFNBQVNBLG1CQUFtQkMsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLGNBQWM7SUFDN0QsSUFBSSxDQUFDRixhQUFhO0lBQ2xCLElBQUlFLGdCQUFnQjtRQUNoQkEsaUJBQWlCQSxlQUFlQyxXQUFXO0lBQy9DO0lBQ0EsS0FBSyxNQUFNQyxRQUFRSixZQUFZO1FBQzNCLElBQUlLLGNBQWNDO1FBQ2xCLHlCQUF5QjtRQUN6QixNQUFNQyxpQkFBaUIsQ0FBQ0YsZUFBZUQsS0FBS0ksTUFBTSxLQUFLLE9BQU8sS0FBSyxJQUFJSCxhQUFhSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDTixXQUFXO1FBQ2hILElBQUlGLGFBQWFNLGtCQUFrQkwsbUJBQW1CRSxLQUFLTSxhQUFhLENBQUNQLFdBQVcsTUFBTyxFQUFDRyxnQkFBZ0JGLEtBQUtPLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSUwsY0FBY00sSUFBSSxDQUFDLENBQUNDLFNBQVNBLE9BQU9WLFdBQVcsT0FBT0QsZUFBYyxHQUFJO1lBQ2pOLE9BQU9FO1FBQ1g7SUFDSjtBQUNKLEVBRUEsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pMThuL2RldGVjdC1kb21haW4tbG9jYWxlLmpzPzRjMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZXRlY3REb21haW5Mb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRldGVjdERvbWFpbkxvY2FsZTtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIGRldGVjdERvbWFpbkxvY2FsZShkb21haW5JdGVtcywgaG9zdG5hbWUsIGRldGVjdGVkTG9jYWxlKSB7XG4gICAgaWYgKCFkb21haW5JdGVtcykgcmV0dXJuO1xuICAgIGlmIChkZXRlY3RlZExvY2FsZSkge1xuICAgICAgICBkZXRlY3RlZExvY2FsZSA9IGRldGVjdGVkTG9jYWxlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkb21haW5JdGVtcyl7XG4gICAgICAgIHZhciBfaXRlbV9kb21haW4sIF9pdGVtX2xvY2FsZXM7XG4gICAgICAgIC8vIHJlbW92ZSBwb3J0IGlmIHByZXNlbnRcbiAgICAgICAgY29uc3QgZG9tYWluSG9zdG5hbWUgPSAoX2l0ZW1fZG9tYWluID0gaXRlbS5kb21haW4pID09IG51bGwgPyB2b2lkIDAgOiBfaXRlbV9kb21haW4uc3BsaXQoXCI6XCIsIDEpWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChob3N0bmFtZSA9PT0gZG9tYWluSG9zdG5hbWUgfHwgZGV0ZWN0ZWRMb2NhbGUgPT09IGl0ZW0uZGVmYXVsdExvY2FsZS50b0xvd2VyQ2FzZSgpIHx8ICgoX2l0ZW1fbG9jYWxlcyA9IGl0ZW0ubG9jYWxlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtX2xvY2FsZXMuc29tZSgobG9jYWxlKT0+bG9jYWxlLnRvTG93ZXJDYXNlKCkgPT09IGRldGVjdGVkTG9jYWxlKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXRlY3QtZG9tYWluLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGV0ZWN0RG9tYWluTG9jYWxlIiwiZG9tYWluSXRlbXMiLCJob3N0bmFtZSIsImRldGVjdGVkTG9jYWxlIiwidG9Mb3dlckNhc2UiLCJpdGVtIiwiX2l0ZW1fZG9tYWluIiwiX2l0ZW1fbG9jYWxlcyIsImRvbWFpbkhvc3RuYW1lIiwiZG9tYWluIiwic3BsaXQiLCJkZWZhdWx0TG9jYWxlIiwibG9jYWxlcyIsInNvbWUiLCJsb2NhbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js":
/*!**************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"normalizeLocalePath\", ({\n    enumerable: true,\n    get: function() {\n        return normalizeLocalePath;\n    }\n}));\nfunction normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split(\"/\");\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join(\"/\") || \"/\";\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n} //# sourceMappingURL=normalize-locale-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxvQkFBb0JDLFFBQVEsRUFBRUMsT0FBTztJQUMxQyxJQUFJQztJQUNKLCtEQUErRDtJQUMvRCxNQUFNQyxnQkFBZ0JILFNBQVNJLEtBQUssQ0FBQztJQUNwQ0gsQ0FBQUEsV0FBVyxFQUFFLEVBQUVJLElBQUksQ0FBQyxDQUFDQztRQUNsQixJQUFJSCxhQUFhLENBQUMsRUFBRSxJQUFJQSxhQUFhLENBQUMsRUFBRSxDQUFDSSxXQUFXLE9BQU9ELE9BQU9DLFdBQVcsSUFBSTtZQUM3RUwsaUJBQWlCSTtZQUNqQkgsY0FBY0ssTUFBTSxDQUFDLEdBQUc7WUFDeEJSLFdBQVdHLGNBQWNNLElBQUksQ0FBQyxRQUFRO1lBQ3RDLE9BQU87UUFDWDtRQUNBLE9BQU87SUFDWDtJQUNBLE9BQU87UUFDSFQ7UUFDQUU7SUFDSjtBQUNKLEVBRUEsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aC5qcz9hZWU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibm9ybWFsaXplTG9jYWxlUGF0aFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplTG9jYWxlUGF0aDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZVBhdGgocGF0aG5hbWUsIGxvY2FsZXMpIHtcbiAgICBsZXQgZGV0ZWN0ZWRMb2NhbGU7XG4gICAgLy8gZmlyc3QgaXRlbSB3aWxsIGJlIGVtcHR5IHN0cmluZyBmcm9tIHNwbGl0dGluZyBhdCBmaXJzdCBjaGFyXG4gICAgY29uc3QgcGF0aG5hbWVQYXJ0cyA9IHBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAobG9jYWxlcyB8fCBbXSkuc29tZSgobG9jYWxlKT0+e1xuICAgICAgICBpZiAocGF0aG5hbWVQYXJ0c1sxXSAmJiBwYXRobmFtZVBhcnRzWzFdLnRvTG93ZXJDYXNlKCkgPT09IGxvY2FsZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBkZXRlY3RlZExvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgICAgIHBhdGhuYW1lUGFydHMuc3BsaWNlKDEsIDEpO1xuICAgICAgICAgICAgcGF0aG5hbWUgPSBwYXRobmFtZVBhcnRzLmpvaW4oXCIvXCIpIHx8IFwiL1wiO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lLFxuICAgICAgICBkZXRlY3RlZExvY2FsZVxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vcm1hbGl6ZS1sb2NhbGUtcGF0aC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwibm9ybWFsaXplTG9jYWxlUGF0aCIsInBhdGhuYW1lIiwibG9jYWxlcyIsImRldGVjdGVkTG9jYWxlIiwicGF0aG5hbWVQYXJ0cyIsInNwbGl0Iiwic29tZSIsImxvY2FsZSIsInRvTG93ZXJDYXNlIiwic3BsaWNlIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-locale.js":
/*!***********************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/add-locale.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addLocale\", ({\n    enumerable: true,\n    get: function() {\n        return addLocale;\n    }\n}));\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction addLocale(path, locale, defaultLocale, ignorePrefix) {\n    // If no locale was given or the locale is the default locale, we don't need\n    // to prefix the path.\n    if (!locale || locale === defaultLocale) return path;\n    const lower = path.toLowerCase();\n    // If the path is an API path or the path already has the locale prefix, we\n    // don't need to prefix the path.\n    if (!ignorePrefix) {\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/api\")) return path;\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/\" + locale.toLowerCase())) return path;\n    }\n    // Add the locale prefix to the path.\n    return (0, _addpathprefix.addPathPrefix)(path, \"/\" + locale);\n} //# sourceMappingURL=add-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw2Q0FBNEM7SUFDeENJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxpQkFBaUJDLG1CQUFPQSxDQUFDLHFHQUFtQjtBQUNsRCxNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDLHFHQUFtQjtBQUNsRCxTQUFTRixVQUFVSSxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxZQUFZO0lBQ3hELDRFQUE0RTtJQUM1RSxzQkFBc0I7SUFDdEIsSUFBSSxDQUFDRixVQUFVQSxXQUFXQyxlQUFlLE9BQU9GO0lBQ2hELE1BQU1JLFFBQVFKLEtBQUtLLFdBQVc7SUFDOUIsMkVBQTJFO0lBQzNFLGlDQUFpQztJQUNqQyxJQUFJLENBQUNGLGNBQWM7UUFDZixJQUFJLENBQUMsR0FBR0osZUFBZU8sYUFBYSxFQUFFRixPQUFPLFNBQVMsT0FBT0o7UUFDN0QsSUFBSSxDQUFDLEdBQUdELGVBQWVPLGFBQWEsRUFBRUYsT0FBTyxNQUFNSCxPQUFPSSxXQUFXLEtBQUssT0FBT0w7SUFDckY7SUFDQSxxQ0FBcUM7SUFDckMsT0FBTyxDQUFDLEdBQUdILGVBQWVVLGFBQWEsRUFBRVAsTUFBTSxNQUFNQztBQUN6RCxFQUVBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1sb2NhbGUuanM/MGE4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFkZExvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkTG9jYWxlO1xuICAgIH1cbn0pO1xuY29uc3QgX2FkZHBhdGhwcmVmaXggPSByZXF1aXJlKFwiLi9hZGQtcGF0aC1wcmVmaXhcIik7XG5jb25zdCBfcGF0aGhhc3ByZWZpeCA9IHJlcXVpcmUoXCIuL3BhdGgtaGFzLXByZWZpeFwiKTtcbmZ1bmN0aW9uIGFkZExvY2FsZShwYXRoLCBsb2NhbGUsIGRlZmF1bHRMb2NhbGUsIGlnbm9yZVByZWZpeCkge1xuICAgIC8vIElmIG5vIGxvY2FsZSB3YXMgZ2l2ZW4gb3IgdGhlIGxvY2FsZSBpcyB0aGUgZGVmYXVsdCBsb2NhbGUsIHdlIGRvbid0IG5lZWRcbiAgICAvLyB0byBwcmVmaXggdGhlIHBhdGguXG4gICAgaWYgKCFsb2NhbGUgfHwgbG9jYWxlID09PSBkZWZhdWx0TG9jYWxlKSByZXR1cm4gcGF0aDtcbiAgICBjb25zdCBsb3dlciA9IHBhdGgudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBJZiB0aGUgcGF0aCBpcyBhbiBBUEkgcGF0aCBvciB0aGUgcGF0aCBhbHJlYWR5IGhhcyB0aGUgbG9jYWxlIHByZWZpeCwgd2VcbiAgICAvLyBkb24ndCBuZWVkIHRvIHByZWZpeCB0aGUgcGF0aC5cbiAgICBpZiAoIWlnbm9yZVByZWZpeCkge1xuICAgICAgICBpZiAoKDAsIF9wYXRoaGFzcHJlZml4LnBhdGhIYXNQcmVmaXgpKGxvd2VyLCBcIi9hcGlcIikpIHJldHVybiBwYXRoO1xuICAgICAgICBpZiAoKDAsIF9wYXRoaGFzcHJlZml4LnBhdGhIYXNQcmVmaXgpKGxvd2VyLCBcIi9cIiArIGxvY2FsZS50b0xvd2VyQ2FzZSgpKSkgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIC8vIEFkZCB0aGUgbG9jYWxlIHByZWZpeCB0byB0aGUgcGF0aC5cbiAgICByZXR1cm4gKDAsIF9hZGRwYXRocHJlZml4LmFkZFBhdGhQcmVmaXgpKHBhdGgsIFwiL1wiICsgbG9jYWxlKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYWRkTG9jYWxlIiwiX2FkZHBhdGhwcmVmaXgiLCJyZXF1aXJlIiwiX3BhdGhoYXNwcmVmaXgiLCJwYXRoIiwibG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsImlnbm9yZVByZWZpeCIsImxvd2VyIiwidG9Mb3dlckNhc2UiLCJwYXRoSGFzUHJlZml4IiwiYWRkUGF0aFByZWZpeCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-locale.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js":
/*!****************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathPrefix(path, prefix) {\n    if (!path.startsWith(\"/\") || !prefix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + prefix + pathname + query + hash;\n} //# sourceMappingURL=add-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtcGF0aC1wcmVmaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGlEQUFnRDtJQUM1Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGFBQWFDLG1CQUFPQSxDQUFDLDJGQUFjO0FBQ3pDLFNBQVNGLGNBQWNHLElBQUksRUFBRUMsTUFBTTtJQUMvQixJQUFJLENBQUNELEtBQUtFLFVBQVUsQ0FBQyxRQUFRLENBQUNELFFBQVE7UUFDbEMsT0FBT0Q7SUFDWDtJQUNBLE1BQU0sRUFBRUcsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBR1AsV0FBV1EsU0FBUyxFQUFFTjtJQUM1RCxPQUFPLEtBQUtDLFNBQVNFLFdBQVdDLFFBQVFDO0FBQzVDLEVBRUEsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvYWRkLXBhdGgtcHJlZml4LmpzPzQwYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRQYXRoUHJlZml4XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhZGRQYXRoUHJlZml4O1xuICAgIH1cbn0pO1xuY29uc3QgX3BhcnNlcGF0aCA9IHJlcXVpcmUoXCIuL3BhcnNlLXBhdGhcIik7XG5mdW5jdGlvbiBhZGRQYXRoUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKFwiL1wiKSB8fCAhcHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCB7IHBhdGhuYW1lLCBxdWVyeSwgaGFzaCB9ID0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShwYXRoKTtcbiAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIHBhdGhuYW1lICsgcXVlcnkgKyBoYXNoO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGQtcGF0aC1wcmVmaXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFkZFBhdGhQcmVmaXgiLCJfcGFyc2VwYXRoIiwicmVxdWlyZSIsInBhdGgiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwicGF0aG5hbWUiLCJxdWVyeSIsImhhc2giLCJwYXJzZVBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js":
/*!****************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathSuffix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathSuffix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathSuffix(path, suffix) {\n    if (!path.startsWith(\"/\") || !suffix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + pathname + suffix + query + hash;\n} //# sourceMappingURL=add-path-suffix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtcGF0aC1zdWZmaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGlEQUFnRDtJQUM1Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGFBQWFDLG1CQUFPQSxDQUFDLDJGQUFjO0FBQ3pDLFNBQVNGLGNBQWNHLElBQUksRUFBRUMsTUFBTTtJQUMvQixJQUFJLENBQUNELEtBQUtFLFVBQVUsQ0FBQyxRQUFRLENBQUNELFFBQVE7UUFDbEMsT0FBT0Q7SUFDWDtJQUNBLE1BQU0sRUFBRUcsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBR1AsV0FBV1EsU0FBUyxFQUFFTjtJQUM1RCxPQUFPLEtBQUtHLFdBQVdGLFNBQVNHLFFBQVFDO0FBQzVDLEVBRUEsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvYWRkLXBhdGgtc3VmZml4LmpzPzFhMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRQYXRoU3VmZml4XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhZGRQYXRoU3VmZml4O1xuICAgIH1cbn0pO1xuY29uc3QgX3BhcnNlcGF0aCA9IHJlcXVpcmUoXCIuL3BhcnNlLXBhdGhcIik7XG5mdW5jdGlvbiBhZGRQYXRoU3VmZml4KHBhdGgsIHN1ZmZpeCkge1xuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKFwiL1wiKSB8fCAhc3VmZml4KSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCB7IHBhdGhuYW1lLCBxdWVyeSwgaGFzaCB9ID0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShwYXRoKTtcbiAgICByZXR1cm4gXCJcIiArIHBhdGhuYW1lICsgc3VmZml4ICsgcXVlcnkgKyBoYXNoO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGQtcGF0aC1zdWZmaXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFkZFBhdGhTdWZmaXgiLCJfcGFyc2VwYXRoIiwicmVxdWlyZSIsInBhdGgiLCJzdWZmaXgiLCJzdGFydHNXaXRoIiwicGF0aG5hbWUiLCJxdWVyeSIsImhhc2giLCJwYXJzZVBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"formatNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return formatNextPathnameInfo;\n    }\n}));\nconst _removetrailingslash = __webpack_require__(/*! ./remove-trailing-slash */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _addpathsuffix = __webpack_require__(/*! ./add-path-suffix */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/add-locale.js\");\nfunction formatNextPathnameInfo(info) {\n    let pathname = (0, _addlocale.addLocale)(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    }\n    if (info.buildId) {\n        pathname = (0, _addpathsuffix.addPathSuffix)((0, _addpathprefix.addPathPrefix)(pathname, \"/_next/data/\" + info.buildId), info.pathname === \"/\" ? \"index.json\" : \".json\");\n    }\n    pathname = (0, _addpathprefix.addPathPrefix)(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith(\"/\") ? (0, _addpathsuffix.addPathSuffix)(pathname, \"/\") : pathname : (0, _removetrailingslash.removeTrailingSlash)(pathname);\n} //# sourceMappingURL=format-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9mb3JtYXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCwwREFBeUQ7SUFDckRJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyx1QkFBdUJDLG1CQUFPQSxDQUFDLGlIQUF5QjtBQUM5RCxNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDLHFHQUFtQjtBQUNsRCxNQUFNRSxpQkFBaUJGLG1CQUFPQSxDQUFDLHFHQUFtQjtBQUNsRCxNQUFNRyxhQUFhSCxtQkFBT0EsQ0FBQywyRkFBYztBQUN6QyxTQUFTRix1QkFBdUJNLElBQUk7SUFDaEMsSUFBSUMsV0FBVyxDQUFDLEdBQUdGLFdBQVdHLFNBQVMsRUFBRUYsS0FBS0MsUUFBUSxFQUFFRCxLQUFLRyxNQUFNLEVBQUVILEtBQUtJLE9BQU8sR0FBR0MsWUFBWUwsS0FBS00sYUFBYSxFQUFFTixLQUFLTyxZQUFZO0lBQ3JJLElBQUlQLEtBQUtJLE9BQU8sSUFBSSxDQUFDSixLQUFLUSxhQUFhLEVBQUU7UUFDckNQLFdBQVcsQ0FBQyxHQUFHTixxQkFBcUJjLG1CQUFtQixFQUFFUjtJQUM3RDtJQUNBLElBQUlELEtBQUtJLE9BQU8sRUFBRTtRQUNkSCxXQUFXLENBQUMsR0FBR0gsZUFBZVksYUFBYSxFQUFFLENBQUMsR0FBR2IsZUFBZWMsYUFBYSxFQUFFVixVQUFVLGlCQUFpQkQsS0FBS0ksT0FBTyxHQUFHSixLQUFLQyxRQUFRLEtBQUssTUFBTSxlQUFlO0lBQ3BLO0lBQ0FBLFdBQVcsQ0FBQyxHQUFHSixlQUFlYyxhQUFhLEVBQUVWLFVBQVVELEtBQUtZLFFBQVE7SUFDcEUsT0FBTyxDQUFDWixLQUFLSSxPQUFPLElBQUlKLEtBQUtRLGFBQWEsR0FBRyxDQUFDUCxTQUFTWSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUdmLGVBQWVZLGFBQWEsRUFBRVQsVUFBVSxPQUFPQSxXQUFXLENBQUMsR0FBR04scUJBQXFCYyxtQkFBbUIsRUFBRVI7QUFDdkwsRUFFQSxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9mb3JtYXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzPzYxZGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmb3JtYXROZXh0UGF0aG5hbWVJbmZvXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXROZXh0UGF0aG5hbWVJbmZvO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlbW92ZXRyYWlsaW5nc2xhc2ggPSByZXF1aXJlKFwiLi9yZW1vdmUtdHJhaWxpbmctc2xhc2hcIik7XG5jb25zdCBfYWRkcGF0aHByZWZpeCA9IHJlcXVpcmUoXCIuL2FkZC1wYXRoLXByZWZpeFwiKTtcbmNvbnN0IF9hZGRwYXRoc3VmZml4ID0gcmVxdWlyZShcIi4vYWRkLXBhdGgtc3VmZml4XCIpO1xuY29uc3QgX2FkZGxvY2FsZSA9IHJlcXVpcmUoXCIuL2FkZC1sb2NhbGVcIik7XG5mdW5jdGlvbiBmb3JtYXROZXh0UGF0aG5hbWVJbmZvKGluZm8pIHtcbiAgICBsZXQgcGF0aG5hbWUgPSAoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKGluZm8ucGF0aG5hbWUsIGluZm8ubG9jYWxlLCBpbmZvLmJ1aWxkSWQgPyB1bmRlZmluZWQgOiBpbmZvLmRlZmF1bHRMb2NhbGUsIGluZm8uaWdub3JlUHJlZml4KTtcbiAgICBpZiAoaW5mby5idWlsZElkIHx8ICFpbmZvLnRyYWlsaW5nU2xhc2gpIHtcbiAgICAgICAgcGF0aG5hbWUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xuICAgIH1cbiAgICBpZiAoaW5mby5idWlsZElkKSB7XG4gICAgICAgIHBhdGhuYW1lID0gKDAsIF9hZGRwYXRoc3VmZml4LmFkZFBhdGhTdWZmaXgpKCgwLCBfYWRkcGF0aHByZWZpeC5hZGRQYXRoUHJlZml4KShwYXRobmFtZSwgXCIvX25leHQvZGF0YS9cIiArIGluZm8uYnVpbGRJZCksIGluZm8ucGF0aG5hbWUgPT09IFwiL1wiID8gXCJpbmRleC5qc29uXCIgOiBcIi5qc29uXCIpO1xuICAgIH1cbiAgICBwYXRobmFtZSA9ICgwLCBfYWRkcGF0aHByZWZpeC5hZGRQYXRoUHJlZml4KShwYXRobmFtZSwgaW5mby5iYXNlUGF0aCk7XG4gICAgcmV0dXJuICFpbmZvLmJ1aWxkSWQgJiYgaW5mby50cmFpbGluZ1NsYXNoID8gIXBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA/ICgwLCBfYWRkcGF0aHN1ZmZpeC5hZGRQYXRoU3VmZml4KShwYXRobmFtZSwgXCIvXCIpIDogcGF0aG5hbWUgOiAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJmb3JtYXROZXh0UGF0aG5hbWVJbmZvIiwiX3JlbW92ZXRyYWlsaW5nc2xhc2giLCJyZXF1aXJlIiwiX2FkZHBhdGhwcmVmaXgiLCJfYWRkcGF0aHN1ZmZpeCIsIl9hZGRsb2NhbGUiLCJpbmZvIiwicGF0aG5hbWUiLCJhZGRMb2NhbGUiLCJsb2NhbGUiLCJidWlsZElkIiwidW5kZWZpbmVkIiwiZGVmYXVsdExvY2FsZSIsImlnbm9yZVByZWZpeCIsInRyYWlsaW5nU2xhc2giLCJyZW1vdmVUcmFpbGluZ1NsYXNoIiwiYWRkUGF0aFN1ZmZpeCIsImFkZFBhdGhQcmVmaXgiLCJiYXNlUGF0aCIsImVuZHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return getNextPathnameInfo;\n    }\n}));\nconst _normalizelocalepath = __webpack_require__(/*! ../../i18n/normalize-locale-path */ \"(rsc)/../node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\nconst _removepathprefix = __webpack_require__(/*! ./remove-path-prefix */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction getNextPathnameInfo(pathname, options) {\n    var _options_nextConfig;\n    const { basePath, i18n, trailingSlash } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};\n    const info = {\n        pathname,\n        trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n    };\n    if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {\n        info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    let pathnameNoDataPrefix = info.pathname;\n    if (info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n        const buildId = paths[0];\n        info.buildId = buildId;\n        pathnameNoDataPrefix = paths[1] !== \"index\" ? \"/\" + paths.slice(1).join(\"/\") : \"/\";\n        // update pathname with normalized if enabled although\n        // we use normalized to populate locale info still\n        if (options.parseData === true) {\n            info.pathname = pathnameNoDataPrefix;\n        }\n    }\n    // If provided, use the locale route normalizer to detect the locale instead\n    // of the function below.\n    if (i18n) {\n        let result = options.i18nProvider ? options.i18nProvider.analyze(info.pathname) : (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);\n        info.locale = result.detectedLocale;\n        var _result_pathname;\n        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;\n        if (!result.detectedLocale && info.buildId) {\n            result = options.i18nProvider ? options.i18nProvider.analyze(pathnameNoDataPrefix) : (0, _normalizelocalepath.normalizeLocalePath)(pathnameNoDataPrefix, i18n.locales);\n            if (result.detectedLocale) {\n                info.locale = result.detectedLocale;\n            }\n        }\n    }\n    return info;\n} //# sourceMappingURL=get-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9nZXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyx1QkFBdUJDLG1CQUFPQSxDQUFDLGtIQUFrQztBQUN2RSxNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDLDJHQUFzQjtBQUN4RCxNQUFNRSxpQkFBaUJGLG1CQUFPQSxDQUFDLHFHQUFtQjtBQUNsRCxTQUFTRixvQkFBb0JLLFFBQVEsRUFBRUMsT0FBTztJQUMxQyxJQUFJQztJQUNKLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLGFBQWEsRUFBRSxHQUFHLENBQUNILHNCQUFzQkQsUUFBUUssVUFBVSxLQUFLLE9BQU9KLHNCQUFzQixDQUFDO0lBQ3RILE1BQU1LLE9BQU87UUFDVFA7UUFDQUssZUFBZUwsYUFBYSxNQUFNQSxTQUFTUSxRQUFRLENBQUMsT0FBT0g7SUFDL0Q7SUFDQSxJQUFJRixZQUFZLENBQUMsR0FBR0osZUFBZVUsYUFBYSxFQUFFRixLQUFLUCxRQUFRLEVBQUVHLFdBQVc7UUFDeEVJLEtBQUtQLFFBQVEsR0FBRyxDQUFDLEdBQUdGLGtCQUFrQlksZ0JBQWdCLEVBQUVILEtBQUtQLFFBQVEsRUFBRUc7UUFDdkVJLEtBQUtKLFFBQVEsR0FBR0E7SUFDcEI7SUFDQSxJQUFJUSx1QkFBdUJKLEtBQUtQLFFBQVE7SUFDeEMsSUFBSU8sS0FBS1AsUUFBUSxDQUFDWSxVQUFVLENBQUMsbUJBQW1CTCxLQUFLUCxRQUFRLENBQUNRLFFBQVEsQ0FBQyxVQUFVO1FBQzdFLE1BQU1LLFFBQVFOLEtBQUtQLFFBQVEsQ0FBQ2MsT0FBTyxDQUFDLG9CQUFvQixJQUFJQSxPQUFPLENBQUMsV0FBVyxJQUFJQyxLQUFLLENBQUM7UUFDekYsTUFBTUMsVUFBVUgsS0FBSyxDQUFDLEVBQUU7UUFDeEJOLEtBQUtTLE9BQU8sR0FBR0E7UUFDZkwsdUJBQXVCRSxLQUFLLENBQUMsRUFBRSxLQUFLLFVBQVUsTUFBTUEsTUFBTUksS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQyxPQUFPO1FBQy9FLHNEQUFzRDtRQUN0RCxrREFBa0Q7UUFDbEQsSUFBSWpCLFFBQVFrQixTQUFTLEtBQUssTUFBTTtZQUM1QlosS0FBS1AsUUFBUSxHQUFHVztRQUNwQjtJQUNKO0lBQ0EsNEVBQTRFO0lBQzVFLHlCQUF5QjtJQUN6QixJQUFJUCxNQUFNO1FBQ04sSUFBSWdCLFNBQVNuQixRQUFRb0IsWUFBWSxHQUFHcEIsUUFBUW9CLFlBQVksQ0FBQ0MsT0FBTyxDQUFDZixLQUFLUCxRQUFRLElBQUksQ0FBQyxHQUFHSixxQkFBcUIyQixtQkFBbUIsRUFBRWhCLEtBQUtQLFFBQVEsRUFBRUksS0FBS29CLE9BQU87UUFDM0pqQixLQUFLa0IsTUFBTSxHQUFHTCxPQUFPTSxjQUFjO1FBQ25DLElBQUlDO1FBQ0pwQixLQUFLUCxRQUFRLEdBQUcsQ0FBQzJCLG1CQUFtQlAsT0FBT3BCLFFBQVEsS0FBSyxPQUFPMkIsbUJBQW1CcEIsS0FBS1AsUUFBUTtRQUMvRixJQUFJLENBQUNvQixPQUFPTSxjQUFjLElBQUluQixLQUFLUyxPQUFPLEVBQUU7WUFDeENJLFNBQVNuQixRQUFRb0IsWUFBWSxHQUFHcEIsUUFBUW9CLFlBQVksQ0FBQ0MsT0FBTyxDQUFDWCx3QkFBd0IsQ0FBQyxHQUFHZixxQkFBcUIyQixtQkFBbUIsRUFBRVosc0JBQXNCUCxLQUFLb0IsT0FBTztZQUNySyxJQUFJSixPQUFPTSxjQUFjLEVBQUU7Z0JBQ3ZCbkIsS0FBS2tCLE1BQU0sR0FBR0wsT0FBT00sY0FBYztZQUN2QztRQUNKO0lBQ0o7SUFDQSxPQUFPbkI7QUFDWCxFQUVBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2dldC1uZXh0LXBhdGhuYW1lLWluZm8uanM/YjgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE5leHRQYXRobmFtZUluZm9cIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5leHRQYXRobmFtZUluZm87XG4gICAgfVxufSk7XG5jb25zdCBfbm9ybWFsaXplbG9jYWxlcGF0aCA9IHJlcXVpcmUoXCIuLi8uLi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aFwiKTtcbmNvbnN0IF9yZW1vdmVwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vcmVtb3ZlLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBnZXROZXh0UGF0aG5hbWVJbmZvKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zX25leHRDb25maWc7XG4gICAgY29uc3QgeyBiYXNlUGF0aCwgaTE4biwgdHJhaWxpbmdTbGFzaCB9ID0gKF9vcHRpb25zX25leHRDb25maWcgPSBvcHRpb25zLm5leHRDb25maWcpICE9IG51bGwgPyBfb3B0aW9uc19uZXh0Q29uZmlnIDoge307XG4gICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgIHRyYWlsaW5nU2xhc2g6IHBhdGhuYW1lICE9PSBcIi9cIiA/IHBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA6IHRyYWlsaW5nU2xhc2hcbiAgICB9O1xuICAgIGlmIChiYXNlUGF0aCAmJiAoMCwgX3BhdGhoYXNwcmVmaXgucGF0aEhhc1ByZWZpeCkoaW5mby5wYXRobmFtZSwgYmFzZVBhdGgpKSB7XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSAoMCwgX3JlbW92ZXBhdGhwcmVmaXgucmVtb3ZlUGF0aFByZWZpeCkoaW5mby5wYXRobmFtZSwgYmFzZVBhdGgpO1xuICAgICAgICBpbmZvLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgfVxuICAgIGxldCBwYXRobmFtZU5vRGF0YVByZWZpeCA9IGluZm8ucGF0aG5hbWU7XG4gICAgaWYgKGluZm8ucGF0aG5hbWUuc3RhcnRzV2l0aChcIi9fbmV4dC9kYXRhL1wiKSAmJiBpbmZvLnBhdGhuYW1lLmVuZHNXaXRoKFwiLmpzb25cIikpIHtcbiAgICAgICAgY29uc3QgcGF0aHMgPSBpbmZvLnBhdGhuYW1lLnJlcGxhY2UoL15cXC9fbmV4dFxcL2RhdGFcXC8vLCBcIlwiKS5yZXBsYWNlKC9cXC5qc29uJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgY29uc3QgYnVpbGRJZCA9IHBhdGhzWzBdO1xuICAgICAgICBpbmZvLmJ1aWxkSWQgPSBidWlsZElkO1xuICAgICAgICBwYXRobmFtZU5vRGF0YVByZWZpeCA9IHBhdGhzWzFdICE9PSBcImluZGV4XCIgPyBcIi9cIiArIHBhdGhzLnNsaWNlKDEpLmpvaW4oXCIvXCIpIDogXCIvXCI7XG4gICAgICAgIC8vIHVwZGF0ZSBwYXRobmFtZSB3aXRoIG5vcm1hbGl6ZWQgaWYgZW5hYmxlZCBhbHRob3VnaFxuICAgICAgICAvLyB3ZSB1c2Ugbm9ybWFsaXplZCB0byBwb3B1bGF0ZSBsb2NhbGUgaW5mbyBzdGlsbFxuICAgICAgICBpZiAob3B0aW9ucy5wYXJzZURhdGEgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGluZm8ucGF0aG5hbWUgPSBwYXRobmFtZU5vRGF0YVByZWZpeDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiBwcm92aWRlZCwgdXNlIHRoZSBsb2NhbGUgcm91dGUgbm9ybWFsaXplciB0byBkZXRlY3QgdGhlIGxvY2FsZSBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIGZ1bmN0aW9uIGJlbG93LlxuICAgIGlmIChpMThuKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBvcHRpb25zLmkxOG5Qcm92aWRlciA/IG9wdGlvbnMuaTE4blByb3ZpZGVyLmFuYWx5emUoaW5mby5wYXRobmFtZSkgOiAoMCwgX25vcm1hbGl6ZWxvY2FsZXBhdGgubm9ybWFsaXplTG9jYWxlUGF0aCkoaW5mby5wYXRobmFtZSwgaTE4bi5sb2NhbGVzKTtcbiAgICAgICAgaW5mby5sb2NhbGUgPSByZXN1bHQuZGV0ZWN0ZWRMb2NhbGU7XG4gICAgICAgIHZhciBfcmVzdWx0X3BhdGhuYW1lO1xuICAgICAgICBpbmZvLnBhdGhuYW1lID0gKF9yZXN1bHRfcGF0aG5hbWUgPSByZXN1bHQucGF0aG5hbWUpICE9IG51bGwgPyBfcmVzdWx0X3BhdGhuYW1lIDogaW5mby5wYXRobmFtZTtcbiAgICAgICAgaWYgKCFyZXN1bHQuZGV0ZWN0ZWRMb2NhbGUgJiYgaW5mby5idWlsZElkKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBvcHRpb25zLmkxOG5Qcm92aWRlciA/IG9wdGlvbnMuaTE4blByb3ZpZGVyLmFuYWx5emUocGF0aG5hbWVOb0RhdGFQcmVmaXgpIDogKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKHBhdGhuYW1lTm9EYXRhUHJlZml4LCBpMThuLmxvY2FsZXMpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5kZXRlY3RlZExvY2FsZSkge1xuICAgICAgICAgICAgICAgIGluZm8ubG9jYWxlID0gcmVzdWx0LmRldGVjdGVkTG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtbmV4dC1wYXRobmFtZS1pbmZvLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJnZXROZXh0UGF0aG5hbWVJbmZvIiwiX25vcm1hbGl6ZWxvY2FsZXBhdGgiLCJyZXF1aXJlIiwiX3JlbW92ZXBhdGhwcmVmaXgiLCJfcGF0aGhhc3ByZWZpeCIsInBhdGhuYW1lIiwib3B0aW9ucyIsIl9vcHRpb25zX25leHRDb25maWciLCJiYXNlUGF0aCIsImkxOG4iLCJ0cmFpbGluZ1NsYXNoIiwibmV4dENvbmZpZyIsImluZm8iLCJlbmRzV2l0aCIsInBhdGhIYXNQcmVmaXgiLCJyZW1vdmVQYXRoUHJlZml4IiwicGF0aG5hbWVOb0RhdGFQcmVmaXgiLCJzdGFydHNXaXRoIiwicGF0aHMiLCJyZXBsYWNlIiwic3BsaXQiLCJidWlsZElkIiwic2xpY2UiLCJqb2luIiwicGFyc2VEYXRhIiwicmVzdWx0IiwiaTE4blByb3ZpZGVyIiwiYW5hbHl6ZSIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJsb2NhbGVzIiwibG9jYWxlIiwiZGV0ZWN0ZWRMb2NhbGUiLCJfcmVzdWx0X3BhdGhuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/parse-path.js":
/*!***********************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/parse-path.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"parsePath\", ({\n    enumerable: true,\n    get: function() {\n        return parsePath;\n    }\n}));\nfunction parsePath(path) {\n    const hashIndex = path.indexOf(\"#\");\n    const queryIndex = path.indexOf(\"?\");\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n} //# sourceMappingURL=parse-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS1wYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUMsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw2Q0FBNEM7SUFDeENJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxVQUFVQyxJQUFJO0lBQ25CLE1BQU1DLFlBQVlELEtBQUtFLE9BQU8sQ0FBQztJQUMvQixNQUFNQyxhQUFhSCxLQUFLRSxPQUFPLENBQUM7SUFDaEMsTUFBTUUsV0FBV0QsYUFBYSxDQUFDLEtBQU1GLENBQUFBLFlBQVksS0FBS0UsYUFBYUYsU0FBUTtJQUMzRSxJQUFJRyxZQUFZSCxZQUFZLENBQUMsR0FBRztRQUM1QixPQUFPO1lBQ0hJLFVBQVVMLEtBQUtNLFNBQVMsQ0FBQyxHQUFHRixXQUFXRCxhQUFhRjtZQUNwRE0sT0FBT0gsV0FBV0osS0FBS00sU0FBUyxDQUFDSCxZQUFZRixZQUFZLENBQUMsSUFBSUEsWUFBWU8sYUFBYTtZQUN2RkMsTUFBTVIsWUFBWSxDQUFDLElBQUlELEtBQUtVLEtBQUssQ0FBQ1QsYUFBYTtRQUNuRDtJQUNKO0lBQ0EsT0FBTztRQUNISSxVQUFVTDtRQUNWTyxPQUFPO1FBQ1BFLE1BQU07SUFDVjtBQUNKLEVBRUEsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGFyc2UtcGF0aC5qcz8xZGM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2l2ZW4gYSBwYXRoIHRoaXMgZnVuY3Rpb24gd2lsbCBmaW5kIHRoZSBwYXRobmFtZSwgcXVlcnkgYW5kIGhhc2ggYW5kIHJldHVyblxuICogdGhlbS4gVGhpcyBpcyB1c2VmdWwgdG8gcGFyc2UgZnVsbCBwYXRocyBvbiB0aGUgY2xpZW50IHNpZGUuXG4gKiBAcGFyYW0gcGF0aCBBIHBhdGggdG8gcGFyc2UgZS5nLiAvZm9vL2Jhcj9pZD0xI2hhc2hcbiAqLyBcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlUGF0aFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcGFyc2VQYXRoO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgICBjb25zdCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuICAgIGNvbnN0IHF1ZXJ5SW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGNvbnN0IGhhc1F1ZXJ5ID0gcXVlcnlJbmRleCA+IC0xICYmIChoYXNoSW5kZXggPCAwIHx8IHF1ZXJ5SW5kZXggPCBoYXNoSW5kZXgpO1xuICAgIGlmIChoYXNRdWVyeSB8fCBoYXNoSW5kZXggPiAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF0aG5hbWU6IHBhdGguc3Vic3RyaW5nKDAsIGhhc1F1ZXJ5ID8gcXVlcnlJbmRleCA6IGhhc2hJbmRleCksXG4gICAgICAgICAgICBxdWVyeTogaGFzUXVlcnkgPyBwYXRoLnN1YnN0cmluZyhxdWVyeUluZGV4LCBoYXNoSW5kZXggPiAtMSA/IGhhc2hJbmRleCA6IHVuZGVmaW5lZCkgOiBcIlwiLFxuICAgICAgICAgICAgaGFzaDogaGFzaEluZGV4ID4gLTEgPyBwYXRoLnNsaWNlKGhhc2hJbmRleCkgOiBcIlwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICBxdWVyeTogXCJcIixcbiAgICAgICAgaGFzaDogXCJcIlxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInBhcnNlUGF0aCIsInBhdGgiLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwicXVlcnlJbmRleCIsImhhc1F1ZXJ5IiwicGF0aG5hbWUiLCJzdWJzdHJpbmciLCJxdWVyeSIsInVuZGVmaW5lZCIsImhhc2giLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/parse-path.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js":
/*!****************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"pathHasPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return pathHasPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction pathHasPrefix(path, prefix) {\n    if (typeof path !== \"string\") {\n        return false;\n    }\n    const { pathname } = (0, _parsepath.parsePath)(path);\n    return pathname === prefix || pathname.startsWith(prefix + \"/\");\n} //# sourceMappingURL=path-has-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXRoLWhhcy1wcmVmaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGlEQUFnRDtJQUM1Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGFBQWFDLG1CQUFPQSxDQUFDLDJGQUFjO0FBQ3pDLFNBQVNGLGNBQWNHLElBQUksRUFBRUMsTUFBTTtJQUMvQixJQUFJLE9BQU9ELFNBQVMsVUFBVTtRQUMxQixPQUFPO0lBQ1g7SUFDQSxNQUFNLEVBQUVFLFFBQVEsRUFBRSxHQUFHLENBQUMsR0FBR0osV0FBV0ssU0FBUyxFQUFFSDtJQUMvQyxPQUFPRSxhQUFhRCxVQUFVQyxTQUFTRSxVQUFVLENBQUNILFNBQVM7QUFDL0QsRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXRoLWhhcy1wcmVmaXguanM/MDRmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhdGhIYXNQcmVmaXhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhIYXNQcmVmaXg7XG4gICAgfVxufSk7XG5jb25zdCBfcGFyc2VwYXRoID0gcmVxdWlyZShcIi4vcGFyc2UtcGF0aFwiKTtcbmZ1bmN0aW9uIHBhdGhIYXNQcmVmaXgocGF0aCwgcHJlZml4KSB7XG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSB9ID0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShwYXRoKTtcbiAgICByZXR1cm4gcGF0aG5hbWUgPT09IHByZWZpeCB8fCBwYXRobmFtZS5zdGFydHNXaXRoKHByZWZpeCArIFwiL1wiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aC1oYXMtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJwYXRoSGFzUHJlZml4IiwiX3BhcnNlcGF0aCIsInJlcXVpcmUiLCJwYXRoIiwicHJlZml4IiwicGF0aG5hbWUiLCJwYXJzZVBhdGgiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removePathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return removePathPrefix;\n    }\n}));\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/../node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction removePathPrefix(path, prefix) {\n    // If the path doesn't start with the prefix we can return it as is. This\n    // protects us from situations where the prefix is a substring of the path\n    // prefix such as:\n    //\n    // For prefix: /blog\n    //\n    //   /blog -> true\n    //   /blog/ -> true\n    //   /blog/1 -> true\n    //   /blogging -> false\n    //   /blogging/ -> false\n    //   /blogging/1 -> false\n    if (!(0, _pathhasprefix.pathHasPrefix)(path, prefix)) {\n        return path;\n    }\n    // Remove the prefix from the path via slicing.\n    const withoutPrefix = path.slice(prefix.length);\n    // If the path without the prefix starts with a `/` we can return it as is.\n    if (withoutPrefix.startsWith(\"/\")) {\n        return withoutPrefix;\n    }\n    // If the path without the prefix doesn't start with a `/` we need to add it\n    // back to the path to make sure it's a valid path.\n    return \"/\" + withoutPrefix;\n} //# sourceMappingURL=remove-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yZW1vdmUtcGF0aC1wcmVmaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILG9EQUFtRDtJQUMvQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGlCQUFpQkMsbUJBQU9BLENBQUMscUdBQW1CO0FBQ2xELFNBQVNGLGlCQUFpQkcsSUFBSSxFQUFFQyxNQUFNO0lBQ2xDLHlFQUF5RTtJQUN6RSwwRUFBMEU7SUFDMUUsa0JBQWtCO0lBQ2xCLEVBQUU7SUFDRixvQkFBb0I7SUFDcEIsRUFBRTtJQUNGLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIseUJBQXlCO0lBQ3pCLElBQUksQ0FBQyxDQUFDLEdBQUdILGVBQWVJLGFBQWEsRUFBRUYsTUFBTUMsU0FBUztRQUNsRCxPQUFPRDtJQUNYO0lBQ0EsK0NBQStDO0lBQy9DLE1BQU1HLGdCQUFnQkgsS0FBS0ksS0FBSyxDQUFDSCxPQUFPSSxNQUFNO0lBQzlDLDJFQUEyRTtJQUMzRSxJQUFJRixjQUFjRyxVQUFVLENBQUMsTUFBTTtRQUMvQixPQUFPSDtJQUNYO0lBQ0EsNEVBQTRFO0lBQzVFLG1EQUFtRDtJQUNuRCxPQUFPLE1BQU1BO0FBQ2pCLEVBRUEsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVtb3ZlLXBhdGgtcHJlZml4LmpzPzNjYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW1vdmVQYXRoUHJlZml4XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZW1vdmVQYXRoUHJlZml4O1xuICAgIH1cbn0pO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiByZW1vdmVQYXRoUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIC8vIElmIHRoZSBwYXRoIGRvZXNuJ3Qgc3RhcnQgd2l0aCB0aGUgcHJlZml4IHdlIGNhbiByZXR1cm4gaXQgYXMgaXMuIFRoaXNcbiAgICAvLyBwcm90ZWN0cyB1cyBmcm9tIHNpdHVhdGlvbnMgd2hlcmUgdGhlIHByZWZpeCBpcyBhIHN1YnN0cmluZyBvZiB0aGUgcGF0aFxuICAgIC8vIHByZWZpeCBzdWNoIGFzOlxuICAgIC8vXG4gICAgLy8gRm9yIHByZWZpeDogL2Jsb2dcbiAgICAvL1xuICAgIC8vICAgL2Jsb2cgLT4gdHJ1ZVxuICAgIC8vICAgL2Jsb2cvIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nLzEgLT4gdHJ1ZVxuICAgIC8vICAgL2Jsb2dnaW5nIC0+IGZhbHNlXG4gICAgLy8gICAvYmxvZ2dpbmcvIC0+IGZhbHNlXG4gICAgLy8gICAvYmxvZ2dpbmcvMSAtPiBmYWxzZVxuICAgIGlmICghKDAsIF9wYXRoaGFzcHJlZml4LnBhdGhIYXNQcmVmaXgpKHBhdGgsIHByZWZpeCkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgcHJlZml4IGZyb20gdGhlIHBhdGggdmlhIHNsaWNpbmcuXG4gICAgY29uc3Qgd2l0aG91dFByZWZpeCA9IHBhdGguc2xpY2UocHJlZml4Lmxlbmd0aCk7XG4gICAgLy8gSWYgdGhlIHBhdGggd2l0aG91dCB0aGUgcHJlZml4IHN0YXJ0cyB3aXRoIGEgYC9gIHdlIGNhbiByZXR1cm4gaXQgYXMgaXMuXG4gICAgaWYgKHdpdGhvdXRQcmVmaXguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRQcmVmaXg7XG4gICAgfVxuICAgIC8vIElmIHRoZSBwYXRoIHdpdGhvdXQgdGhlIHByZWZpeCBkb2Vzbid0IHN0YXJ0IHdpdGggYSBgL2Agd2UgbmVlZCB0byBhZGQgaXRcbiAgICAvLyBiYWNrIHRvIHRoZSBwYXRoIHRvIG1ha2Ugc3VyZSBpdCdzIGEgdmFsaWQgcGF0aC5cbiAgICByZXR1cm4gXCIvXCIgKyB3aXRob3V0UHJlZml4O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmUtcGF0aC1wcmVmaXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInJlbW92ZVBhdGhQcmVmaXgiLCJfcGF0aGhhc3ByZWZpeCIsInJlcXVpcmUiLCJwYXRoIiwicHJlZml4IiwicGF0aEhhc1ByZWZpeCIsIndpdGhvdXRQcmVmaXgiLCJzbGljZSIsImxlbmd0aCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removeTrailingSlash\", ({\n    enumerable: true,\n    get: function() {\n        return removeTrailingSlash;\n    }\n}));\nfunction removeTrailingSlash(route) {\n    return route.replace(/\\/$/, \"\") || \"/\";\n} //# sourceMappingURL=remove-trailing-slash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yZW1vdmUtdHJhaWxpbmctc2xhc2guanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQWdCO0FBQ2pCQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsdURBQXNEO0lBQ2xESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0Esb0JBQW9CQyxLQUFLO0lBQzlCLE9BQU9BLE1BQU1DLE9BQU8sQ0FBQyxPQUFPLE9BQU87QUFDdkMsRUFFQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yZW1vdmUtdHJhaWxpbmctc2xhc2guanM/ZGMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlbW92ZXMgdGhlIHRyYWlsaW5nIHNsYXNoIGZvciBhIGdpdmVuIHJvdXRlIG9yIHBhZ2UgcGF0aC4gUHJlc2VydmVzIHRoZVxuICogcm9vdCBwYWdlLiBFeGFtcGxlczpcbiAqICAgLSBgL2Zvby9iYXIvYCAtPiBgL2Zvby9iYXJgXG4gKiAgIC0gYC9mb28vYmFyYCAtPiBgL2Zvby9iYXJgXG4gKiAgIC0gYC9gIC0+IGAvYFxuICovIFwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlVHJhaWxpbmdTbGFzaFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlVHJhaWxpbmdTbGFzaDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHJlbW92ZVRyYWlsaW5nU2xhc2gocm91dGUpIHtcbiAgICByZXR1cm4gcm91dGUucmVwbGFjZSgvXFwvJC8sIFwiXCIpIHx8IFwiL1wiO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmUtdHJhaWxpbmctc2xhc2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInJlbW92ZVRyYWlsaW5nU2xhc2giLCJyb3V0ZSIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/next/headers.js":
/*!***************************************!*\
  !*** ../node_modules/next/headers.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/components/headers */ \"(rsc)/../node_modules/next/dist/client/components/headers.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvaGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsNElBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tZWJvb2t1cy1iYWNrZW5kLy4uL25vZGVfbW9kdWxlcy9uZXh0L2hlYWRlcnMuanM/ZDMxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9jbGllbnQvY29tcG9uZW50cy9oZWFkZXJzJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/headers.js\n");

/***/ })

};
;