/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xmlbuilder";
exports.ids = ["vendor-chunks/xmlbuilder"];
exports.modules = {

/***/ "(rsc)/../node_modules/xmlbuilder/lib/DocumentPosition.js":
/*!**********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/DocumentPosition.js ***!
  \**********************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    module.exports = {\n        Disconnected: 1,\n        Preceding: 2,\n        Following: 4,\n        Contains: 8,\n        ContainedBy: 16,\n        ImplementationSpecific: 32\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL0RvY3VtZW50UG9zaXRpb24uanM/ZjhiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIERpc2Nvbm5lY3RlZDogMSxcbiAgICBQcmVjZWRpbmc6IDIsXG4gICAgRm9sbG93aW5nOiA0LFxuICAgIENvbnRhaW5zOiA4LFxuICAgIENvbnRhaW5lZEJ5OiAxNixcbiAgICBJbXBsZW1lbnRhdGlvblNwZWNpZmljOiAzMlxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJEaXNjb25uZWN0ZWQiLCJQcmVjZWRpbmciLCJGb2xsb3dpbmciLCJDb250YWlucyIsIkNvbnRhaW5lZEJ5IiwiSW1wbGVtZW50YXRpb25TcGVjaWZpYyIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNqQyxDQUFBO0lBQ0NBLE9BQU9DLE9BQU8sR0FBRztRQUNmQyxjQUFjO1FBQ2RDLFdBQVc7UUFDWEMsV0FBVztRQUNYQyxVQUFVO1FBQ1ZDLGFBQWE7UUFDYkMsd0JBQXdCO0lBQzFCO0FBRUYsQ0FBQSxFQUFHQyxJQUFJLENBQUMsSUFBSSIsImZpbGUiOiIocnNjKS8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvRG9jdW1lbnRQb3NpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/DocumentPosition.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/NodeType.js":
/*!**************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/NodeType.js ***!
  \**************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    module.exports = {\n        Element: 1,\n        Attribute: 2,\n        Text: 3,\n        CData: 4,\n        EntityReference: 5,\n        EntityDeclaration: 6,\n        ProcessingInstruction: 7,\n        Comment: 8,\n        Document: 9,\n        DocType: 10,\n        DocumentFragment: 11,\n        NotationDeclaration: 12,\n        // Numeric codes up to 200 are reserved to W3C for possible future use.\n        // Following are types internal to this library:\n        Declaration: 201,\n        Raw: 202,\n        AttributeDeclaration: 203,\n        ElementDeclaration: 204,\n        Dummy: 205\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL05vZGVUeXBlLmpzPzFkZDIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFbGVtZW50OiAxLFxuICAgIEF0dHJpYnV0ZTogMixcbiAgICBUZXh0OiAzLFxuICAgIENEYXRhOiA0LFxuICAgIEVudGl0eVJlZmVyZW5jZTogNSxcbiAgICBFbnRpdHlEZWNsYXJhdGlvbjogNixcbiAgICBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb246IDcsXG4gICAgQ29tbWVudDogOCxcbiAgICBEb2N1bWVudDogOSxcbiAgICBEb2NUeXBlOiAxMCxcbiAgICBEb2N1bWVudEZyYWdtZW50OiAxMSxcbiAgICBOb3RhdGlvbkRlY2xhcmF0aW9uOiAxMixcbiAgICAvLyBOdW1lcmljIGNvZGVzIHVwIHRvIDIwMCBhcmUgcmVzZXJ2ZWQgdG8gVzNDIGZvciBwb3NzaWJsZSBmdXR1cmUgdXNlLlxuICAgIC8vIEZvbGxvd2luZyBhcmUgdHlwZXMgaW50ZXJuYWwgdG8gdGhpcyBsaWJyYXJ5OlxuICAgIERlY2xhcmF0aW9uOiAyMDEsXG4gICAgUmF3OiAyMDIsXG4gICAgQXR0cmlidXRlRGVjbGFyYXRpb246IDIwMyxcbiAgICBFbGVtZW50RGVjbGFyYXRpb246IDIwNCxcbiAgICBEdW1teTogMjA1XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkVsZW1lbnQiLCJBdHRyaWJ1dGUiLCJUZXh0IiwiQ0RhdGEiLCJFbnRpdHlSZWZlcmVuY2UiLCJFbnRpdHlEZWNsYXJhdGlvbiIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsIkNvbW1lbnQiLCJEb2N1bWVudCIsIkRvY1R5cGUiLCJEb2N1bWVudEZyYWdtZW50IiwiTm90YXRpb25EZWNsYXJhdGlvbiIsIkRlY2xhcmF0aW9uIiwiUmF3IiwiQXR0cmlidXRlRGVjbGFyYXRpb24iLCJFbGVtZW50RGVjbGFyYXRpb24iLCJEdW1teSIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNqQyxDQUFBO0lBQ0NBLE9BQU9DLE9BQU8sR0FBRztRQUNmQyxTQUFTO1FBQ1RDLFdBQVc7UUFDWEMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLGlCQUFpQjtRQUNqQkMsbUJBQW1CO1FBQ25CQyx1QkFBdUI7UUFDdkJDLFNBQVM7UUFDVEMsVUFBVTtRQUNWQyxTQUFTO1FBQ1RDLGtCQUFrQjtRQUNsQkMscUJBQXFCO1FBQ3JCLHVFQUF1RTtRQUN2RSxnREFBZ0Q7UUFDaERDLGFBQWE7UUFDYkMsS0FBSztRQUNMQyxzQkFBc0I7UUFDdEJDLG9CQUFvQjtRQUNwQkMsT0FBTztJQUNUO0FBRUYsQ0FBQSxFQUFHQyxJQUFJLENBQUMsSUFBSSIsImZpbGUiOiIocnNjKS8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvTm9kZVR5cGUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/Utility.js":
/*!*************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/Utility.js ***!
  \*************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    // Copies all enumerable own properties from `sources` to `target`\n    var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject, hasProp = {}.hasOwnProperty;\n    assign = function(target, ...sources) {\n        var i, key, len, source;\n        if (isFunction(Object.assign)) {\n            Object.assign.apply(null, arguments);\n        } else {\n            for(i = 0, len = sources.length; i < len; i++){\n                source = sources[i];\n                if (source != null) {\n                    for(key in source){\n                        if (!hasProp.call(source, key)) continue;\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n    // Determines if `val` is a Function object\n    isFunction = function(val) {\n        return !!val && Object.prototype.toString.call(val) === \"[object Function]\";\n    };\n    // Determines if `val` is an Object\n    isObject = function(val) {\n        var ref;\n        return !!val && ((ref = typeof val) === \"function\" || ref === \"object\");\n    };\n    // Determines if `val` is an Array\n    isArray = function(val) {\n        if (isFunction(Array.isArray)) {\n            return Array.isArray(val);\n        } else {\n            return Object.prototype.toString.call(val) === \"[object Array]\";\n        }\n    };\n    // Determines if `val` is an empty Array or an Object with no own properties\n    isEmpty = function(val) {\n        var key;\n        if (isArray(val)) {\n            return !val.length;\n        } else {\n            for(key in val){\n                if (!hasProp.call(val, key)) continue;\n                return false;\n            }\n            return true;\n        }\n    };\n    // Determines if `val` is a plain Object\n    isPlainObject = function(val) {\n        var ctor, proto;\n        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === \"function\" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n    };\n    // Gets the primitive value of an object\n    getValue = function(obj) {\n        if (isFunction(obj.valueOf)) {\n            return obj.valueOf();\n        } else {\n            return obj;\n        }\n    };\n    module.exports.assign = assign;\n    module.exports.isFunction = isFunction;\n    module.exports.isObject = isObject;\n    module.exports.isArray = isArray;\n    module.exports.isEmpty = isEmpty;\n    module.exports.isPlainObject = isPlainObject;\n    module.exports.getValue = getValue;\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1V0aWxpdHkuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2pDO0lBQ0Msa0VBQWtFO0lBQ2xFLElBQUlBLFFBQVFDLFVBQVVDLFNBQVNDLFNBQVNDLFlBQVlDLFVBQVVDLGVBQzVEQyxVQUFVLENBQUMsRUFBRUMsY0FBYztJQUU3QlIsU0FBUyxTQUFTUyxNQUFNLEVBQUUsR0FBR0MsT0FBTztRQUNsQyxJQUFJQyxHQUFHQyxLQUFLQyxLQUFLQztRQUNqQixJQUFJVixXQUFXVyxPQUFPZixNQUFNLEdBQUc7WUFDN0JlLE9BQU9mLE1BQU0sQ0FBQ2dCLEtBQUssQ0FBQyxNQUFNQztRQUM1QixPQUFPO1lBQ0wsSUFBS04sSUFBSSxHQUFHRSxNQUFNSCxRQUFRUSxNQUFNLEVBQUVQLElBQUlFLEtBQUtGLElBQUs7Z0JBQzlDRyxTQUFTSixPQUFPLENBQUNDLEVBQUU7Z0JBQ25CLElBQUlHLFVBQVUsTUFBTTtvQkFDbEIsSUFBS0YsT0FBT0UsT0FBUTt3QkFDbEIsSUFBSSxDQUFDUCxRQUFRWSxJQUFJLENBQUNMLFFBQVFGLE1BQU07d0JBQ2hDSCxNQUFNLENBQUNHLElBQUksR0FBR0UsTUFBTSxDQUFDRixJQUFJO29CQUMzQjtnQkFDRjtZQUNGO1FBQ0Y7UUFDQSxPQUFPSDtJQUNUO0lBRUEsMkNBQTJDO0lBQzNDTCxhQUFhLFNBQVNnQixHQUFHO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDQSxPQUFPTCxPQUFPTSxTQUFTLENBQUNDLFFBQVEsQ0FBQ0gsSUFBSSxDQUFDQyxTQUFTO0lBQzFEO0lBRUEsbUNBQW1DO0lBQ25DZixXQUFXLFNBQVNlLEdBQUc7UUFDckIsSUFBSUc7UUFDSixPQUFPLENBQUMsQ0FBQ0gsT0FBUSxFQUFDRyxNQUFNLE9BQU9ILEdBQUUsTUFBTyxjQUFjRyxRQUFRLFFBQU87SUFDdkU7SUFFQSxrQ0FBa0M7SUFDbENyQixVQUFVLFNBQVNrQixHQUFHO1FBQ3BCLElBQUloQixXQUFXb0IsTUFBTXRCLE9BQU8sR0FBRztZQUM3QixPQUFPc0IsTUFBTXRCLE9BQU8sQ0FBQ2tCO1FBQ3ZCLE9BQU87WUFDTCxPQUFPTCxPQUFPTSxTQUFTLENBQUNDLFFBQVEsQ0FBQ0gsSUFBSSxDQUFDQyxTQUFTO1FBQ2pEO0lBQ0Y7SUFFQSw0RUFBNEU7SUFDNUVqQixVQUFVLFNBQVNpQixHQUFHO1FBQ3BCLElBQUlSO1FBQ0osSUFBSVYsUUFBUWtCLE1BQU07WUFDaEIsT0FBTyxDQUFDQSxJQUFJRixNQUFNO1FBQ3BCLE9BQU87WUFDTCxJQUFLTixPQUFPUSxJQUFLO2dCQUNmLElBQUksQ0FBQ2IsUUFBUVksSUFBSSxDQUFDQyxLQUFLUixNQUFNO2dCQUM3QixPQUFPO1lBQ1Q7WUFDQSxPQUFPO1FBQ1Q7SUFDRjtJQUVBLHdDQUF3QztJQUN4Q04sZ0JBQWdCLFNBQVNjLEdBQUc7UUFDMUIsSUFBSUssTUFBTUM7UUFDVixPQUFPckIsU0FBU2UsUUFBU00sQ0FBQUEsUUFBUVgsT0FBT1ksY0FBYyxDQUFDUCxJQUFHLEtBQU9LLENBQUFBLE9BQU9DLE1BQU1FLFdBQVcsS0FBTSxPQUFPSCxTQUFTLGNBQWdCQSxnQkFBZ0JBLFFBQVVJLFNBQVNSLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDSCxJQUFJLENBQUNNLFVBQVVJLFNBQVNSLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDSCxJQUFJLENBQUNKO0lBQ3ZPO0lBRUEsd0NBQXdDO0lBQ3hDZCxXQUFXLFNBQVM2QixHQUFHO1FBQ3JCLElBQUkxQixXQUFXMEIsSUFBSUMsT0FBTyxHQUFHO1lBQzNCLE9BQU9ELElBQUlDLE9BQU87UUFDcEIsT0FBTztZQUNMLE9BQU9EO1FBQ1Q7SUFDRjtJQUVBRSxxQkFBcUIsR0FBR2hDO0lBRXhCZ0MseUJBQXlCLEdBQUc1QjtJQUU1QjRCLHVCQUF1QixHQUFHM0I7SUFFMUIyQixzQkFBc0IsR0FBRzlCO0lBRXpCOEIsc0JBQXNCLEdBQUc3QjtJQUV6QjZCLDRCQUE0QixHQUFHMUI7SUFFL0IwQix1QkFBdUIsR0FBRy9CO0FBRTVCLEdBQUdrQixJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvVXRpbGl0eS5qcz9mNmMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgLy8gQ29waWVzIGFsbCBlbnVtZXJhYmxlIG93biBwcm9wZXJ0aWVzIGZyb20gYHNvdXJjZXNgIHRvIGB0YXJnZXRgXG4gIHZhciBhc3NpZ24sIGdldFZhbHVlLCBpc0FycmF5LCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgaXNQbGFpbk9iamVjdCxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgYXNzaWduID0gZnVuY3Rpb24odGFyZ2V0LCAuLi5zb3VyY2VzKSB7XG4gICAgdmFyIGksIGtleSwgbGVuLCBzb3VyY2U7XG4gICAgaWYgKGlzRnVuY3Rpb24oT2JqZWN0LmFzc2lnbikpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIC8vIERldGVybWluZXMgaWYgYHZhbGAgaXMgYSBGdW5jdGlvbiBvYmplY3RcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAhIXZhbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcblxuICAvLyBEZXRlcm1pbmVzIGlmIGB2YWxgIGlzIGFuIE9iamVjdFxuICBpc09iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciByZWY7XG4gICAgcmV0dXJuICEhdmFsICYmICgocmVmID0gdHlwZW9mIHZhbCkgPT09ICdmdW5jdGlvbicgfHwgcmVmID09PSAnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lcyBpZiBgdmFsYCBpcyBhbiBBcnJheVxuICBpc0FycmF5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oQXJyYXkuaXNBcnJheSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lcyBpZiBgdmFsYCBpcyBhbiBlbXB0eSBBcnJheSBvciBhbiBPYmplY3Qgd2l0aCBubyBvd24gcHJvcGVydGllc1xuICBpc0VtcHR5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXR1cm4gIXZhbC5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoa2V5IGluIHZhbCkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbCh2YWwsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lcyBpZiBgdmFsYCBpcyBhIHBsYWluIE9iamVjdFxuICBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIGN0b3IsIHByb3RvO1xuICAgIHJldHVybiBpc09iamVjdCh2YWwpICYmIChwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpKSAmJiAoY3RvciA9IHByb3RvLmNvbnN0cnVjdG9yKSAmJiAodHlwZW9mIGN0b3IgPT09ICdmdW5jdGlvbicpICYmIChjdG9yIGluc3RhbmNlb2YgY3RvcikgJiYgKEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGN0b3IpID09PSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChPYmplY3QpKTtcbiAgfTtcblxuICAvLyBHZXRzIHRoZSBwcmltaXRpdmUgdmFsdWUgb2YgYW4gb2JqZWN0XG4gIGdldFZhbHVlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqLnZhbHVlT2YpKSB7XG4gICAgICByZXR1cm4gb2JqLnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuYXNzaWduID0gYXNzaWduO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuZ2V0VmFsdWUgPSBnZXRWYWx1ZTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJhc3NpZ24iLCJnZXRWYWx1ZSIsImlzQXJyYXkiLCJpc0VtcHR5IiwiaXNGdW5jdGlvbiIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsImhhc1Byb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInRhcmdldCIsInNvdXJjZXMiLCJpIiwia2V5IiwibGVuIiwic291cmNlIiwiT2JqZWN0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjYWxsIiwidmFsIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJyZWYiLCJBcnJheSIsImN0b3IiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJGdW5jdGlvbiIsIm9iaiIsInZhbHVlT2YiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/Utility.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/WriterState.js":
/*!*****************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/WriterState.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    module.exports = {\n        None: 0,\n        OpenTag: 1,\n        InsideTag: 2,\n        CloseTag: 3\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1dyaXRlclN0YXRlLmpzPzQyNzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBOb25lOiAwLFxuICAgIE9wZW5UYWc6IDEsXG4gICAgSW5zaWRlVGFnOiAyLFxuICAgIENsb3NlVGFnOiAzXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIk5vbmUiLCJPcGVuVGFnIiwiSW5zaWRlVGFnIiwiQ2xvc2VUYWciLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakMsQ0FBQTtJQUNDQSxPQUFPQyxPQUFPLEdBQUc7UUFDZkMsTUFBTTtRQUNOQyxTQUFTO1FBQ1RDLFdBQVc7UUFDWEMsVUFBVTtJQUNaO0FBRUYsQ0FBQSxFQUFHQyxJQUFJLENBQUMsSUFBSSIsImZpbGUiOiIocnNjKS8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvV3JpdGVyU3RhdGUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/WriterState.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLAttribute.js":
/*!******************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLAttribute.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLAttribute, XMLNode;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    // Represents an attribute\n    module.exports = XMLAttribute = (function() {\n        class XMLAttribute {\n            // Initializes a new instance of `XMLAttribute`\n            // `parent` the parent node\n            // `name` attribute target\n            // `value` attribute value\n            constructor(parent, name, value){\n                this.parent = parent;\n                if (this.parent) {\n                    this.options = this.parent.options;\n                    this.stringify = this.parent.stringify;\n                }\n                if (name == null) {\n                    throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n                }\n                this.name = this.stringify.name(name);\n                this.value = this.stringify.attValue(value);\n                this.type = NodeType.Attribute;\n                // DOM level 3\n                this.isId = false;\n                this.schemaTypeInfo = null;\n            }\n            // Creates and returns a deep clone of `this`\n            clone() {\n                return Object.create(this);\n            }\n            // Converts the XML fragment to string\n            // `options.pretty` pretty prints the result\n            // `options.indent` indentation for pretty print\n            // `options.offset` how many indentations to add to every line for pretty print\n            // `options.newline` newline sequence for pretty print\n            toString(options) {\n                return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n            }\n            // Returns debug string for this node\n            debugInfo(name) {\n                name = name || this.name;\n                if (name == null) {\n                    return \"parent: <\" + this.parent.name + \">\";\n                } else {\n                    return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n                }\n            }\n            isEqualNode(node) {\n                if (node.namespaceURI !== this.namespaceURI) {\n                    return false;\n                }\n                if (node.prefix !== this.prefix) {\n                    return false;\n                }\n                if (node.localName !== this.localName) {\n                    return false;\n                }\n                if (node.value !== this.value) {\n                    return false;\n                }\n                return true;\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLAttribute.prototype, \"nodeType\", {\n            get: function() {\n                return this.type;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"ownerElement\", {\n            get: function() {\n                return this.parent;\n            }\n        });\n        // DOM level 3\n        Object.defineProperty(XMLAttribute.prototype, \"textContent\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        // DOM level 4\n        Object.defineProperty(XMLAttribute.prototype, \"namespaceURI\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"prefix\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"localName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"specified\", {\n            get: function() {\n                return true;\n            }\n        });\n        return XMLAttribute;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLAttribute.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLCData.js":
/*!**************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLCData.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLCData, XMLCharacterData;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    // Represents a  CDATA node\n    module.exports = XMLCData = class XMLCData extends XMLCharacterData {\n        // Initializes a new instance of `XMLCData`\n        // `text` CDATA text\n        constructor(parent, text){\n            super(parent);\n            if (text == null) {\n                throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n            }\n            this.name = \"#cdata-section\";\n            this.type = NodeType.CData;\n            this.value = this.stringify.cdata(text);\n        }\n        // Creates and returns a deep clone of `this`\n        clone() {\n            return Object.create(this);\n        }\n        // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENEYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNqQztJQUNDLElBQUlBLFVBQVVDLFVBQVVDO0lBRXhCRixXQUFXRyxtQkFBT0EsQ0FBQztJQUVuQkQsbUJBQW1CQyxtQkFBT0EsQ0FBQztJQUUzQiwyQkFBMkI7SUFDM0JDLE9BQU9DLE9BQU8sR0FBR0osV0FBVyxNQUFNQSxpQkFBaUJDO1FBQ2pELDJDQUEyQztRQUUzQyxvQkFBb0I7UUFDcEJJLFlBQVlDLE1BQU0sRUFBRUMsSUFBSSxDQUFFO1lBQ3hCLEtBQUssQ0FBQ0Q7WUFDTixJQUFJQyxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSx5QkFBeUIsSUFBSSxDQUFDQyxTQUFTO1lBQ3pEO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUc7WUFDWixJQUFJLENBQUNDLElBQUksR0FBR1osU0FBU2EsS0FBSztZQUMxQixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDUjtRQUNwQztRQUVBLDZDQUE2QztRQUM3Q1MsUUFBUTtZQUNOLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUEsc0NBQXNDO1FBRXRDLDRDQUE0QztRQUM1QyxnREFBZ0Q7UUFDaEQsK0VBQStFO1FBQy9FLHNEQUFzRDtRQUN0REMsU0FBU0MsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ04sS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNLLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUNGO1FBQzNFO0lBRUY7QUFFRixHQUFHRyxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ0RhdGEuanM/MzZjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ0RhdGEsIFhNTENoYXJhY3RlckRhdGE7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSAgQ0RBVEEgbm9kZVxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTENEYXRhID0gY2xhc3MgWE1MQ0RhdGEgZXh0ZW5kcyBYTUxDaGFyYWN0ZXJEYXRhIHtcbiAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MQ0RhdGFgXG5cbiAgICAvLyBgdGV4dGAgQ0RBVEEgdGV4dFxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgdGV4dCkge1xuICAgICAgc3VwZXIocGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBDREFUQSB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjY2RhdGEtc2VjdGlvblwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQ0RhdGE7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuY2RhdGEodGV4dCk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGRlZXAgY2xvbmUgb2YgYHRoaXNgXG4gICAgY2xvbmUoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyB0aGUgWE1MIGZyYWdtZW50IHRvIHN0cmluZ1xuXG4gICAgLy8gYG9wdGlvbnMucHJldHR5YCBwcmV0dHkgcHJpbnRzIHRoZSByZXN1bHRcbiAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5vZmZzZXRgIGhvdyBtYW55IGluZGVudGF0aW9ucyB0byBhZGQgdG8gZXZlcnkgbGluZSBmb3IgcHJldHR5IHByaW50XG4gICAgLy8gYG9wdGlvbnMubmV3bGluZWAgbmV3bGluZSBzZXF1ZW5jZSBmb3IgcHJldHR5IHByaW50XG4gICAgdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuY2RhdGEodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTENEYXRhIiwiWE1MQ2hhcmFjdGVyRGF0YSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJ0ZXh0IiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJuYW1lIiwidHlwZSIsIkNEYXRhIiwidmFsdWUiLCJzdHJpbmdpZnkiLCJjZGF0YSIsImNsb25lIiwiT2JqZWN0IiwiY3JlYXRlIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZmlsdGVyT3B0aW9ucyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLCData.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLCharacterData.js":
/*!**********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLCharacterData.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var XMLCharacterData, XMLNode;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    // Represents a character data node\n    module.exports = XMLCharacterData = (function() {\n        class XMLCharacterData extends XMLNode {\n            // Initializes a new instance of `XMLCharacterData`\n            constructor(parent){\n                super(parent);\n                this.value = \"\";\n            }\n            // Creates and returns a deep clone of `this`\n            clone() {\n                return Object.create(this);\n            }\n            // DOM level 1 functions to be implemented later\n            substringData(offset, count) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            appendData(arg) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            insertData(offset, arg) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            deleteData(offset, count) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            replaceData(offset, count, arg) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            isEqualNode(node) {\n                if (!super.isEqualNode(node)) {\n                    return false;\n                }\n                if (node.data !== this.data) {\n                    return false;\n                }\n                return true;\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLCharacterData.prototype, \"data\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        Object.defineProperty(XMLCharacterData.prototype, \"length\", {\n            get: function() {\n                return this.value.length;\n            }\n        });\n        // DOM level 3\n        Object.defineProperty(XMLCharacterData.prototype, \"textContent\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        return XMLCharacterData;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENoYXJhY3RlckRhdGEuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2pDO0lBQ0MsSUFBSUEsa0JBQWtCQztJQUV0QkEsVUFBVUMsbUJBQU9BLENBQUM7SUFFbEIsbUNBQW1DO0lBQ25DQyxPQUFPQyxPQUFPLEdBQUdKLG1CQUFtQixDQUFDO1FBQ25DLE1BQU1BLHlCQUF5QkM7WUFDN0IsbURBQW1EO1lBRW5ESSxZQUFZQyxNQUFNLENBQUU7Z0JBQ2xCLEtBQUssQ0FBQ0E7Z0JBQ04sSUFBSSxDQUFDQyxLQUFLLEdBQUc7WUFDZjtZQUdBLDZDQUE2QztZQUM3Q0MsUUFBUTtnQkFDTixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtZQUMzQjtZQUVBLGdEQUFnRDtZQUNoREMsY0FBY0MsTUFBTSxFQUFFQyxLQUFLLEVBQUU7Z0JBQzNCLE1BQU0sSUFBSUMsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1lBQ3hFO1lBRUFDLFdBQVdDLEdBQUcsRUFBRTtnQkFDZCxNQUFNLElBQUlILE1BQU0sd0NBQXdDLElBQUksQ0FBQ0MsU0FBUztZQUN4RTtZQUVBRyxXQUFXTixNQUFNLEVBQUVLLEdBQUcsRUFBRTtnQkFDdEIsTUFBTSxJQUFJSCxNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7WUFDeEU7WUFFQUksV0FBV1AsTUFBTSxFQUFFQyxLQUFLLEVBQUU7Z0JBQ3hCLE1BQU0sSUFBSUMsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1lBQ3hFO1lBRUFLLFlBQVlSLE1BQU0sRUFBRUMsS0FBSyxFQUFFSSxHQUFHLEVBQUU7Z0JBQzlCLE1BQU0sSUFBSUgsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1lBQ3hFO1lBRUFNLFlBQVlDLElBQUksRUFBRTtnQkFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQ0QsWUFBWUMsT0FBTztvQkFDNUIsT0FBTztnQkFDVDtnQkFDQSxJQUFJQSxLQUFLQyxJQUFJLEtBQUssSUFBSSxDQUFDQSxJQUFJLEVBQUU7b0JBQzNCLE9BQU87Z0JBQ1Q7Z0JBQ0EsT0FBTztZQUNUO1FBRUY7O1FBRUEsY0FBYztRQUNkZCxPQUFPZSxjQUFjLENBQUN4QixpQkFBaUJ5QixTQUFTLEVBQUUsUUFBUTtZQUN4REMsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ25CLEtBQUs7WUFDbkI7WUFDQW9CLEtBQUssU0FBU3BCLEtBQUs7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDQSxLQUFLLEdBQUdBLFNBQVM7WUFDL0I7UUFDRjtRQUVBRSxPQUFPZSxjQUFjLENBQUN4QixpQkFBaUJ5QixTQUFTLEVBQUUsVUFBVTtZQUMxREMsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ25CLEtBQUssQ0FBQ3FCLE1BQU07WUFDMUI7UUFDRjtRQUVBLGNBQWM7UUFDZG5CLE9BQU9lLGNBQWMsQ0FBQ3hCLGlCQUFpQnlCLFNBQVMsRUFBRSxlQUFlO1lBQy9EQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDbkIsS0FBSztZQUNuQjtZQUNBb0IsS0FBSyxTQUFTcEIsS0FBSztnQkFDakIsT0FBTyxJQUFJLENBQUNBLEtBQUssR0FBR0EsU0FBUztZQUMvQjtRQUNGO1FBRUEsT0FBT1A7SUFFVCxHQUFHNkIsSUFBSSxDQUFDLElBQUk7QUFFZCxHQUFHQSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ2hhcmFjdGVyRGF0YS5qcz84MzdiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTENoYXJhY3RlckRhdGEsIFhNTE5vZGU7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSBjaGFyYWN0ZXIgZGF0YSBub2RlXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ2hhcmFjdGVyRGF0YSA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBYTUxDaGFyYWN0ZXJEYXRhIGV4dGVuZHMgWE1MTm9kZSB7XG4gICAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MQ2hhcmFjdGVyRGF0YWBcblxuICAgICAgY29uc3RydWN0b3IocGFyZW50KSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgXG4gICAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcbiAgICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgLy8gRE9NIGxldmVsIDEgZnVuY3Rpb25zIHRvIGJlIGltcGxlbWVudGVkIGxhdGVyXG4gICAgICBzdWJzdHJpbmdEYXRhKG9mZnNldCwgY291bnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICBhcHBlbmREYXRhKGFyZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG5cbiAgICAgIGluc2VydERhdGEob2Zmc2V0LCBhcmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGVEYXRhKG9mZnNldCwgY291bnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICByZXBsYWNlRGF0YShvZmZzZXQsIGNvdW50LCBhcmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICBpc0VxdWFsTm9kZShub2RlKSB7XG4gICAgICAgIGlmICghc3VwZXIuaXNFcXVhbE5vZGUobm9kZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8vIERPTSBsZXZlbCAxXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAnZGF0YScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERPTSBsZXZlbCAzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gWE1MQ2hhcmFjdGVyRGF0YTtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTENoYXJhY3RlckRhdGEiLCJYTUxOb2RlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsInZhbHVlIiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJzdWJzdHJpbmdEYXRhIiwib2Zmc2V0IiwiY291bnQiLCJFcnJvciIsImRlYnVnSW5mbyIsImFwcGVuZERhdGEiLCJhcmciLCJpbnNlcnREYXRhIiwiZGVsZXRlRGF0YSIsInJlcGxhY2VEYXRhIiwiaXNFcXVhbE5vZGUiLCJub2RlIiwiZGF0YSIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0Iiwic2V0IiwibGVuZ3RoIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLCharacterData.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLComment.js":
/*!****************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLComment.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLCharacterData, XMLComment;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    // Represents a comment node\n    module.exports = XMLComment = class XMLComment extends XMLCharacterData {\n        // Initializes a new instance of `XMLComment`\n        // `text` comment text\n        constructor(parent, text){\n            super(parent);\n            if (text == null) {\n                throw new Error(\"Missing comment text. \" + this.debugInfo());\n            }\n            this.name = \"#comment\";\n            this.type = NodeType.Comment;\n            this.value = this.stringify.comment(text);\n        }\n        // Creates and returns a deep clone of `this`\n        clone() {\n            return Object.create(this);\n        }\n        // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENvbW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2pDO0lBQ0MsSUFBSUEsVUFBVUMsa0JBQWtCQztJQUVoQ0YsV0FBV0csbUJBQU9BLENBQUM7SUFFbkJGLG1CQUFtQkUsbUJBQU9BLENBQUM7SUFFM0IsNEJBQTRCO0lBQzVCQyxPQUFPQyxPQUFPLEdBQUdILGFBQWEsTUFBTUEsbUJBQW1CRDtRQUNyRCw2Q0FBNkM7UUFFN0Msc0JBQXNCO1FBQ3RCSyxZQUFZQyxNQUFNLEVBQUVDLElBQUksQ0FBRTtZQUN4QixLQUFLLENBQUNEO1lBQ04sSUFBSUMsUUFBUSxNQUFNO2dCQUNoQixNQUFNLElBQUlDLE1BQU0sMkJBQTJCLElBQUksQ0FBQ0MsU0FBUztZQUMzRDtZQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1lBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdaLFNBQVNhLE9BQU87WUFDNUIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNDLE9BQU8sQ0FBQ1I7UUFDdEM7UUFFQSw2Q0FBNkM7UUFDN0NTLFFBQVE7WUFDTixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBLHNDQUFzQztRQUV0Qyw0Q0FBNEM7UUFDNUMsZ0RBQWdEO1FBQ2hELCtFQUErRTtRQUMvRSxzREFBc0Q7UUFDdERDLFNBQVNDLE9BQU8sRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNOLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDSyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDRjtRQUM3RTtJQUVGO0FBRUYsR0FBR0csSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENvbW1lbnQuanM/ZDA2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ2hhcmFjdGVyRGF0YSwgWE1MQ29tbWVudDtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9YTUxDaGFyYWN0ZXJEYXRhJyk7XG5cbiAgLy8gUmVwcmVzZW50cyBhIGNvbW1lbnQgbm9kZVxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTENvbW1lbnQgPSBjbGFzcyBYTUxDb21tZW50IGV4dGVuZHMgWE1MQ2hhcmFjdGVyRGF0YSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTENvbW1lbnRgXG5cbiAgICAvLyBgdGV4dGAgY29tbWVudCB0ZXh0XG4gICAgY29uc3RydWN0b3IocGFyZW50LCB0ZXh0KSB7XG4gICAgICBzdXBlcihwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNvbW1lbnQgdGV4dC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IFwiI2NvbW1lbnRcIjtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkNvbW1lbnQ7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuY29tbWVudCh0ZXh0KTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcbiAgICBjbG9uZSgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5jb21tZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxDaGFyYWN0ZXJEYXRhIiwiWE1MQ29tbWVudCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJ0ZXh0IiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJuYW1lIiwidHlwZSIsIkNvbW1lbnQiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsImNvbW1lbnQiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImZpbHRlck9wdGlvbnMiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLComment.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js":
/*!*************************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n    XMLDOMErrorHandler = __webpack_require__(/*! ./XMLDOMErrorHandler */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js\");\n    XMLDOMStringList = __webpack_require__(/*! ./XMLDOMStringList */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDOMStringList.js\");\n    // Implements the DOMConfiguration interface\n    module.exports = XMLDOMConfiguration = (function() {\n        class XMLDOMConfiguration {\n            constructor(){\n                var clonedSelf;\n                this.defaultParams = {\n                    \"canonical-form\": false,\n                    \"cdata-sections\": false,\n                    \"comments\": false,\n                    \"datatype-normalization\": false,\n                    \"element-content-whitespace\": true,\n                    \"entities\": true,\n                    \"error-handler\": new XMLDOMErrorHandler(),\n                    \"infoset\": true,\n                    \"validate-if-schema\": false,\n                    \"namespaces\": true,\n                    \"namespace-declarations\": true,\n                    \"normalize-characters\": false,\n                    \"schema-location\": \"\",\n                    \"schema-type\": \"\",\n                    \"split-cdata-sections\": true,\n                    \"validate\": false,\n                    \"well-formed\": true\n                };\n                this.params = clonedSelf = Object.create(this.defaultParams);\n            }\n            // Gets the value of a parameter.\n            // `name` name of the parameter\n            getParameter(name) {\n                if (this.params.hasOwnProperty(name)) {\n                    return this.params[name];\n                } else {\n                    return null;\n                }\n            }\n            // Checks if setting a parameter to a specific value is supported.\n            // `name` name of the parameter\n            // `value` parameter value\n            canSetParameter(name, value) {\n                return true;\n            }\n            // Sets the value of a parameter.\n            // `name` name of the parameter\n            // `value` new value or null if the user wishes to unset the parameter\n            setParameter(name, value) {\n                if (value != null) {\n                    return this.params[name] = value;\n                } else {\n                    return delete this.params[name];\n                }\n            }\n        }\n        ;\n        // Returns the list of parameter names\n        Object.defineProperty(XMLDOMConfiguration.prototype, \"parameterNames\", {\n            get: function() {\n                return new XMLDOMStringList(Object.keys(this.defaultParams));\n            }\n        });\n        return XMLDOMConfiguration;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUNvbmZpZ3VyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2pDO0lBQ0MsSUFBSUEscUJBQXFCQyxvQkFBb0JDO0lBRTdDRCxxQkFBcUJFLG1CQUFPQSxDQUFDO0lBRTdCRCxtQkFBbUJDLG1CQUFPQSxDQUFDO0lBRTNCLDRDQUE0QztJQUM1Q0MsT0FBT0MsT0FBTyxHQUFHTCxzQkFBc0IsQ0FBQztRQUN0QyxNQUFNQTtZQUNKTSxhQUFjO2dCQUNaLElBQUlDO2dCQUNKLElBQUksQ0FBQ0MsYUFBYSxHQUFHO29CQUNuQixrQkFBa0I7b0JBQ2xCLGtCQUFrQjtvQkFDbEIsWUFBWTtvQkFDWiwwQkFBMEI7b0JBQzFCLDhCQUE4QjtvQkFDOUIsWUFBWTtvQkFDWixpQkFBaUIsSUFBSVA7b0JBQ3JCLFdBQVc7b0JBQ1gsc0JBQXNCO29CQUN0QixjQUFjO29CQUNkLDBCQUEwQjtvQkFDMUIsd0JBQXdCO29CQUN4QixtQkFBbUI7b0JBQ25CLGVBQWU7b0JBQ2Ysd0JBQXdCO29CQUN4QixZQUFZO29CQUNaLGVBQWU7Z0JBQ2pCO2dCQUNBLElBQUksQ0FBQ1EsTUFBTSxHQUFHRixhQUFhRyxPQUFPQyxNQUFNLENBQUMsSUFBSSxDQUFDSCxhQUFhO1lBQzdEO1lBRUEsaUNBQWlDO1lBRWpDLCtCQUErQjtZQUMvQkksYUFBYUMsSUFBSSxFQUFFO2dCQUNqQixJQUFJLElBQUksQ0FBQ0osTUFBTSxDQUFDSyxjQUFjLENBQUNELE9BQU87b0JBQ3BDLE9BQU8sSUFBSSxDQUFDSixNQUFNLENBQUNJLEtBQUs7Z0JBQzFCLE9BQU87b0JBQ0wsT0FBTztnQkFDVDtZQUNGO1lBRUEsa0VBQWtFO1lBRWxFLCtCQUErQjtZQUMvQiwwQkFBMEI7WUFDMUJFLGdCQUFnQkYsSUFBSSxFQUFFRyxLQUFLLEVBQUU7Z0JBQzNCLE9BQU87WUFDVDtZQUVBLGlDQUFpQztZQUVqQywrQkFBK0I7WUFDL0Isc0VBQXNFO1lBQ3RFQyxhQUFhSixJQUFJLEVBQUVHLEtBQUssRUFBRTtnQkFDeEIsSUFBSUEsU0FBUyxNQUFNO29CQUNqQixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDSSxLQUFLLEdBQUdHO2dCQUM3QixPQUFPO29CQUNMLE9BQU8sT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ0ksS0FBSztnQkFDakM7WUFDRjtRQUVGOztRQUVBLHNDQUFzQztRQUN0Q0gsT0FBT1EsY0FBYyxDQUFDbEIsb0JBQW9CbUIsU0FBUyxFQUFFLGtCQUFrQjtZQUNyRUMsS0FBSztnQkFDSCxPQUFPLElBQUlsQixpQkFBaUJRLE9BQU9XLElBQUksQ0FBQyxJQUFJLENBQUNiLGFBQWE7WUFDNUQ7UUFDRjtRQUVBLE9BQU9SO0lBRVQsR0FBR3NCLElBQUksQ0FBQyxJQUFJO0FBRWQsR0FBR0EsSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUNvbmZpZ3VyYXRpb24uanM/MWNhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01Db25maWd1cmF0aW9uLCBYTUxET01FcnJvckhhbmRsZXIsIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgWE1MRE9NRXJyb3JIYW5kbGVyID0gcmVxdWlyZSgnLi9YTUxET01FcnJvckhhbmRsZXInKTtcblxuICBYTUxET01TdHJpbmdMaXN0ID0gcmVxdWlyZSgnLi9YTUxET01TdHJpbmdMaXN0Jyk7XG5cbiAgLy8gSW1wbGVtZW50cyB0aGUgRE9NQ29uZmlndXJhdGlvbiBpbnRlcmZhY2VcbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01Db25maWd1cmF0aW9uID0gKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIFhNTERPTUNvbmZpZ3VyYXRpb24ge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHZhciBjbG9uZWRTZWxmO1xuICAgICAgICB0aGlzLmRlZmF1bHRQYXJhbXMgPSB7XG4gICAgICAgICAgXCJjYW5vbmljYWwtZm9ybVwiOiBmYWxzZSxcbiAgICAgICAgICBcImNkYXRhLXNlY3Rpb25zXCI6IGZhbHNlLFxuICAgICAgICAgIFwiY29tbWVudHNcIjogZmFsc2UsXG4gICAgICAgICAgXCJkYXRhdHlwZS1ub3JtYWxpemF0aW9uXCI6IGZhbHNlLFxuICAgICAgICAgIFwiZWxlbWVudC1jb250ZW50LXdoaXRlc3BhY2VcIjogdHJ1ZSxcbiAgICAgICAgICBcImVudGl0aWVzXCI6IHRydWUsXG4gICAgICAgICAgXCJlcnJvci1oYW5kbGVyXCI6IG5ldyBYTUxET01FcnJvckhhbmRsZXIoKSxcbiAgICAgICAgICBcImluZm9zZXRcIjogdHJ1ZSxcbiAgICAgICAgICBcInZhbGlkYXRlLWlmLXNjaGVtYVwiOiBmYWxzZSxcbiAgICAgICAgICBcIm5hbWVzcGFjZXNcIjogdHJ1ZSxcbiAgICAgICAgICBcIm5hbWVzcGFjZS1kZWNsYXJhdGlvbnNcIjogdHJ1ZSxcbiAgICAgICAgICBcIm5vcm1hbGl6ZS1jaGFyYWN0ZXJzXCI6IGZhbHNlLFxuICAgICAgICAgIFwic2NoZW1hLWxvY2F0aW9uXCI6ICcnLFxuICAgICAgICAgIFwic2NoZW1hLXR5cGVcIjogJycsXG4gICAgICAgICAgXCJzcGxpdC1jZGF0YS1zZWN0aW9uc1wiOiB0cnVlLFxuICAgICAgICAgIFwidmFsaWRhdGVcIjogZmFsc2UsXG4gICAgICAgICAgXCJ3ZWxsLWZvcm1lZFwiOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGFyYW1zID0gY2xvbmVkU2VsZiA9IE9iamVjdC5jcmVhdGUodGhpcy5kZWZhdWx0UGFyYW1zKTtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0cyB0aGUgdmFsdWUgb2YgYSBwYXJhbWV0ZXIuXG5cbiAgICAgIC8vIGBuYW1lYCBuYW1lIG9mIHRoZSBwYXJhbWV0ZXJcbiAgICAgIGdldFBhcmFtZXRlcihuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBhcmFtc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGVja3MgaWYgc2V0dGluZyBhIHBhcmFtZXRlciB0byBhIHNwZWNpZmljIHZhbHVlIGlzIHN1cHBvcnRlZC5cblxuICAgICAgLy8gYG5hbWVgIG5hbWUgb2YgdGhlIHBhcmFtZXRlclxuICAgICAgLy8gYHZhbHVlYCBwYXJhbWV0ZXIgdmFsdWVcbiAgICAgIGNhblNldFBhcmFtZXRlcihuYW1lLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0cyB0aGUgdmFsdWUgb2YgYSBwYXJhbWV0ZXIuXG5cbiAgICAgIC8vIGBuYW1lYCBuYW1lIG9mIHRoZSBwYXJhbWV0ZXJcbiAgICAgIC8vIGB2YWx1ZWAgbmV3IHZhbHVlIG9yIG51bGwgaWYgdGhlIHVzZXIgd2lzaGVzIHRvIHVuc2V0IHRoZSBwYXJhbWV0ZXJcbiAgICAgIHNldFBhcmFtZXRlcihuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBhcmFtc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWxldGUgdGhpcy5wYXJhbXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH07XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBsaXN0IG9mIHBhcmFtZXRlciBuYW1lc1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxET01Db25maWd1cmF0aW9uLnByb3RvdHlwZSwgJ3BhcmFtZXRlck5hbWVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYTUxET01TdHJpbmdMaXN0KE9iamVjdC5rZXlzKHRoaXMuZGVmYXVsdFBhcmFtcykpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFhNTERPTUNvbmZpZ3VyYXRpb247XG5cbiAgfSkuY2FsbCh0aGlzKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxET01Db25maWd1cmF0aW9uIiwiWE1MRE9NRXJyb3JIYW5kbGVyIiwiWE1MRE9NU3RyaW5nTGlzdCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJjbG9uZWRTZWxmIiwiZGVmYXVsdFBhcmFtcyIsInBhcmFtcyIsIk9iamVjdCIsImNyZWF0ZSIsImdldFBhcmFtZXRlciIsIm5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhblNldFBhcmFtZXRlciIsInZhbHVlIiwic2V0UGFyYW1ldGVyIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJrZXlzIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js":
/*!************************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js ***!
  \************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    // Represents the error handler for DOM operations\n    var XMLDOMErrorHandler;\n    module.exports = XMLDOMErrorHandler = class XMLDOMErrorHandler {\n        // Initializes a new instance of `XMLDOMErrorHandler`\n        constructor(){}\n        // Called on the error handler when an error occurs.\n        // `error` the error message as a string\n        handleError(error) {\n            throw new Error(error);\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUVycm9ySGFuZGxlci5qcz8wYzZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgLy8gUmVwcmVzZW50cyB0aGUgZXJyb3IgaGFuZGxlciBmb3IgRE9NIG9wZXJhdGlvbnNcbiAgdmFyIFhNTERPTUVycm9ySGFuZGxlcjtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTUVycm9ySGFuZGxlciA9IGNsYXNzIFhNTERPTUVycm9ySGFuZGxlciB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTERPTUVycm9ySGFuZGxlcmBcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIC8vIENhbGxlZCBvbiB0aGUgZXJyb3IgaGFuZGxlciB3aGVuIGFuIGVycm9yIG9jY3Vycy5cblxuICAgIC8vIGBlcnJvcmAgdGhlIGVycm9yIG1lc3NhZ2UgYXMgYSBzdHJpbmdcbiAgICBoYW5kbGVFcnJvcihlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxET01FcnJvckhhbmRsZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJoYW5kbGVFcnJvciIsImVycm9yIiwiRXJyb3IiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakMsQ0FBQTtJQUNDLGtEQUFrRDtJQUNsRCxJQUFJQTtJQUVKQyxPQUFPQyxPQUFPLEdBQUdGLHFCQUFxQixNQUFNQTtRQUMxQyxxREFBcUQ7UUFFckRHLGFBQWMsQ0FBQztRQUVmLG9EQUFvRDtRQUVwRCx3Q0FBd0M7UUFDeENDLFlBQVlDLEtBQUssRUFBRTtZQUNqQixNQUFNLElBQUlDLE1BQU1EO1FBQ2xCO0lBRUY7QUFFRixDQUFBLEVBQUdFLElBQUksQ0FBQyxJQUFJIiwiZmlsZSI6Iihyc2MpLy4uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01FcnJvckhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDOMImplementation.js":
/*!**************************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDOMImplementation.js ***!
  \**************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    // Implements the DOMImplementation interface\n    var XMLDOMImplementation;\n    module.exports = XMLDOMImplementation = class XMLDOMImplementation {\n        // Tests if the DOM implementation implements a specific feature.\n        // `feature` package name of the feature to test. In Level 1, the\n        //           legal values are \"HTML\" and \"XML\" (case-insensitive).\n        // `version` version number of the package name to test. \n        //           In Level 1, this is the string \"1.0\". If the version is \n        //           not specified, supporting any version of the feature will \n        //           cause the method to return true.\n        hasFeature(feature, version) {\n            return true;\n        }\n        // Creates a new document type declaration.\n        // `qualifiedName` qualified name of the document type to be created\n        // `publicId` public identifier of the external subset\n        // `systemId` system identifier of the external subset\n        createDocumentType(qualifiedName, publicId, systemId) {\n            throw new Error(\"This DOM method is not implemented.\");\n        }\n        // Creates a new document.\n        // `namespaceURI` namespace URI of the document element to create\n        // `qualifiedName` the qualified name of the document to be created\n        // `doctype` the type of document to be created or null\n        createDocument(namespaceURI, qualifiedName, doctype) {\n            throw new Error(\"This DOM method is not implemented.\");\n        }\n        // Creates a new HTML document.\n        // `title` document title\n        createHTMLDocument(title) {\n            throw new Error(\"This DOM method is not implemented.\");\n        }\n        // Returns a specialized object which implements the specialized APIs \n        // of the specified feature and version.\n        // `feature` name of the feature requested.\n        // `version` version number of the feature to test\n        getFeature(feature, version) {\n            throw new Error(\"This DOM method is not implemented.\");\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUltcGxlbWVudGF0aW9uLmpzPzE3NDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICAvLyBJbXBsZW1lbnRzIHRoZSBET01JbXBsZW1lbnRhdGlvbiBpbnRlcmZhY2VcbiAgdmFyIFhNTERPTUltcGxlbWVudGF0aW9uO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRE9NSW1wbGVtZW50YXRpb24gPSBjbGFzcyBYTUxET01JbXBsZW1lbnRhdGlvbiB7XG4gICAgLy8gVGVzdHMgaWYgdGhlIERPTSBpbXBsZW1lbnRhdGlvbiBpbXBsZW1lbnRzIGEgc3BlY2lmaWMgZmVhdHVyZS5cblxuICAgIC8vIGBmZWF0dXJlYCBwYWNrYWdlIG5hbWUgb2YgdGhlIGZlYXR1cmUgdG8gdGVzdC4gSW4gTGV2ZWwgMSwgdGhlXG4gICAgLy8gICAgICAgICAgIGxlZ2FsIHZhbHVlcyBhcmUgXCJIVE1MXCIgYW5kIFwiWE1MXCIgKGNhc2UtaW5zZW5zaXRpdmUpLlxuICAgIC8vIGB2ZXJzaW9uYCB2ZXJzaW9uIG51bWJlciBvZiB0aGUgcGFja2FnZSBuYW1lIHRvIHRlc3QuIFxuICAgIC8vICAgICAgICAgICBJbiBMZXZlbCAxLCB0aGlzIGlzIHRoZSBzdHJpbmcgXCIxLjBcIi4gSWYgdGhlIHZlcnNpb24gaXMgXG4gICAgLy8gICAgICAgICAgIG5vdCBzcGVjaWZpZWQsIHN1cHBvcnRpbmcgYW55IHZlcnNpb24gb2YgdGhlIGZlYXR1cmUgd2lsbCBcbiAgICAvLyAgICAgICAgICAgY2F1c2UgdGhlIG1ldGhvZCB0byByZXR1cm4gdHJ1ZS5cbiAgICBoYXNGZWF0dXJlKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZXMgYSBuZXcgZG9jdW1lbnQgdHlwZSBkZWNsYXJhdGlvbi5cblxuICAgIC8vIGBxdWFsaWZpZWROYW1lYCBxdWFsaWZpZWQgbmFtZSBvZiB0aGUgZG9jdW1lbnQgdHlwZSB0byBiZSBjcmVhdGVkXG4gICAgLy8gYHB1YmxpY0lkYCBwdWJsaWMgaWRlbnRpZmllciBvZiB0aGUgZXh0ZXJuYWwgc3Vic2V0XG4gICAgLy8gYHN5c3RlbUlkYCBzeXN0ZW0gaWRlbnRpZmllciBvZiB0aGUgZXh0ZXJuYWwgc3Vic2V0XG4gICAgY3JlYXRlRG9jdW1lbnRUeXBlKHF1YWxpZmllZE5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlcyBhIG5ldyBkb2N1bWVudC5cblxuICAgIC8vIGBuYW1lc3BhY2VVUklgIG5hbWVzcGFjZSBVUkkgb2YgdGhlIGRvY3VtZW50IGVsZW1lbnQgdG8gY3JlYXRlXG4gICAgLy8gYHF1YWxpZmllZE5hbWVgIHRoZSBxdWFsaWZpZWQgbmFtZSBvZiB0aGUgZG9jdW1lbnQgdG8gYmUgY3JlYXRlZFxuICAgIC8vIGBkb2N0eXBlYCB0aGUgdHlwZSBvZiBkb2N1bWVudCB0byBiZSBjcmVhdGVkIG9yIG51bGxcbiAgICBjcmVhdGVEb2N1bWVudChuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZXMgYSBuZXcgSFRNTCBkb2N1bWVudC5cblxuICAgIC8vIGB0aXRsZWAgZG9jdW1lbnQgdGl0bGVcbiAgICBjcmVhdGVIVE1MRG9jdW1lbnQodGl0bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgYSBzcGVjaWFsaXplZCBvYmplY3Qgd2hpY2ggaW1wbGVtZW50cyB0aGUgc3BlY2lhbGl6ZWQgQVBJcyBcbiAgICAvLyBvZiB0aGUgc3BlY2lmaWVkIGZlYXR1cmUgYW5kIHZlcnNpb24uXG5cbiAgICAvLyBgZmVhdHVyZWAgbmFtZSBvZiB0aGUgZmVhdHVyZSByZXF1ZXN0ZWQuXG4gICAgLy8gYHZlcnNpb25gIHZlcnNpb24gbnVtYmVyIG9mIHRoZSBmZWF0dXJlIHRvIHRlc3RcbiAgICBnZXRGZWF0dXJlKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cblxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTERPTUltcGxlbWVudGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImhhc0ZlYXR1cmUiLCJmZWF0dXJlIiwidmVyc2lvbiIsImNyZWF0ZURvY3VtZW50VHlwZSIsInF1YWxpZmllZE5hbWUiLCJwdWJsaWNJZCIsInN5c3RlbUlkIiwiRXJyb3IiLCJjcmVhdGVEb2N1bWVudCIsIm5hbWVzcGFjZVVSSSIsImRvY3R5cGUiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJ0aXRsZSIsImdldEZlYXR1cmUiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakMsQ0FBQTtJQUNDLDZDQUE2QztJQUM3QyxJQUFJQTtJQUVKQyxPQUFPQyxPQUFPLEdBQUdGLHVCQUF1QixNQUFNQTtRQUM1QyxpRUFBaUU7UUFFakUsaUVBQWlFO1FBQ2pFLGtFQUFrRTtRQUNsRSx5REFBeUQ7UUFDekQscUVBQXFFO1FBQ3JFLHVFQUF1RTtRQUN2RSw2Q0FBNkM7UUFDN0NHLFdBQVdDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO1lBQzNCLE9BQU87UUFDVDtRQUVBLDJDQUEyQztRQUUzQyxvRUFBb0U7UUFDcEUsc0RBQXNEO1FBQ3RELHNEQUFzRDtRQUN0REMsbUJBQW1CQyxhQUFhLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFO1lBQ3BELE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUVBLDBCQUEwQjtRQUUxQixpRUFBaUU7UUFDakUsbUVBQW1FO1FBQ25FLHVEQUF1RDtRQUN2REMsZUFBZUMsWUFBWSxFQUFFTCxhQUFhLEVBQUVNLE9BQU8sRUFBRTtZQUNuRCxNQUFNLElBQUlILE1BQU07UUFDbEI7UUFFQSwrQkFBK0I7UUFFL0IseUJBQXlCO1FBQ3pCSSxtQkFBbUJDLEtBQUssRUFBRTtZQUN4QixNQUFNLElBQUlMLE1BQU07UUFDbEI7UUFFQSxzRUFBc0U7UUFDdEUsd0NBQXdDO1FBRXhDLDJDQUEyQztRQUMzQyxrREFBa0Q7UUFDbERNLFdBQVdaLE9BQU8sRUFBRUMsT0FBTyxFQUFFO1lBQzNCLE1BQU0sSUFBSUssTUFBTTtRQUNsQjtJQUVGO0FBRUYsQ0FBQSxFQUFHTyxJQUFJLENBQUMsSUFBSSIsImZpbGUiOiIocnNjKS8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NSW1wbGVtZW50YXRpb24uanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDOMImplementation.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDOMStringList.js":
/*!**********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDOMStringList.js ***!
  \**********************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    // Represents a list of string entries\n    var XMLDOMStringList;\n    module.exports = XMLDOMStringList = (function() {\n        class XMLDOMStringList {\n            // Initializes a new instance of `XMLDOMStringList`\n            // This is just a wrapper around an ordinary\n            // JS array.\n            // `arr` the array of string values\n            constructor(arr){\n                this.arr = arr || [];\n            }\n            // Returns the indexth item in the collection.\n            // `index` index into the collection\n            item(index) {\n                return this.arr[index] || null;\n            }\n            // Test if a string is part of this DOMStringList.\n            // `str` the string to look for\n            contains(str) {\n                return this.arr.indexOf(str) !== -1;\n            }\n        }\n        ;\n        // Returns the number of strings in the list.\n        Object.defineProperty(XMLDOMStringList.prototype, \"length\", {\n            get: function() {\n                return this.arr.length;\n            }\n        });\n        return XMLDOMStringList;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTVN0cmluZ0xpc3QuanM/NjA3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIC8vIFJlcHJlc2VudHMgYSBsaXN0IG9mIHN0cmluZyBlbnRyaWVzXG4gIHZhciBYTUxET01TdHJpbmdMaXN0O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRE9NU3RyaW5nTGlzdCA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBYTUxET01TdHJpbmdMaXN0IHtcbiAgICAgIC8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIGBYTUxET01TdHJpbmdMaXN0YFxuICAgICAgLy8gVGhpcyBpcyBqdXN0IGEgd3JhcHBlciBhcm91bmQgYW4gb3JkaW5hcnlcbiAgICAgIC8vIEpTIGFycmF5LlxuXG4gICAgICAvLyBgYXJyYCB0aGUgYXJyYXkgb2Ygc3RyaW5nIHZhbHVlc1xuICAgICAgY29uc3RydWN0b3IoYXJyKSB7XG4gICAgICAgIHRoaXMuYXJyID0gYXJyIHx8IFtdO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm5zIHRoZSBpbmRleHRoIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24uXG5cbiAgICAgIC8vIGBpbmRleGAgaW5kZXggaW50byB0aGUgY29sbGVjdGlvblxuICAgICAgaXRlbShpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnJbaW5kZXhdIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFRlc3QgaWYgYSBzdHJpbmcgaXMgcGFydCBvZiB0aGlzIERPTVN0cmluZ0xpc3QuXG5cbiAgICAgIC8vIGBzdHJgIHRoZSBzdHJpbmcgdG8gbG9vayBmb3JcbiAgICAgIGNvbnRhaW5zKHN0cikge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnIuaW5kZXhPZihzdHIpICE9PSAtMTtcbiAgICAgIH1cblxuICAgIH07XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc3RyaW5ncyBpbiB0aGUgbGlzdC5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcnIubGVuZ3RoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFhNTERPTVN0cmluZ0xpc3Q7XG5cbiAgfSkuY2FsbCh0aGlzKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxET01TdHJpbmdMaXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiY29udGFpbnMiLCJzdHIiLCJpbmRleE9mIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJsZW5ndGgiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakMsQ0FBQTtJQUNDLHNDQUFzQztJQUN0QyxJQUFJQTtJQUVKQyxPQUFPQyxPQUFPLEdBQUdGLG1CQUFtQixBQUFDLENBQUE7UUFDbkMsTUFBTUE7WUFDSixtREFBbUQ7WUFDbkQsNENBQTRDO1lBQzVDLFlBQVk7WUFFWixtQ0FBbUM7WUFDbkNHLFlBQVlDLEdBQUcsQ0FBRTtnQkFDZixJQUFJLENBQUNBLEdBQUcsR0FBR0EsT0FBTyxFQUFFO1lBQ3RCO1lBRUEsOENBQThDO1lBRTlDLG9DQUFvQztZQUNwQ0MsS0FBS0MsS0FBSyxFQUFFO2dCQUNWLE9BQU8sSUFBSSxDQUFDRixHQUFHLENBQUNFLE1BQU0sSUFBSTtZQUM1QjtZQUVBLGtEQUFrRDtZQUVsRCwrQkFBK0I7WUFDL0JDLFNBQVNDLEdBQUcsRUFBRTtnQkFDWixPQUFPLElBQUksQ0FBQ0osR0FBRyxDQUFDSyxPQUFPLENBQUNELFNBQVMsQ0FBQztZQUNwQztRQUVGOztRQUVBLDZDQUE2QztRQUM3Q0UsT0FBT0MsY0FBYyxDQUFDWCxpQkFBaUJZLFNBQVMsRUFBRSxVQUFVO1lBQzFEQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDVCxHQUFHLENBQUNVLE1BQU07WUFDeEI7UUFDRjtRQUVBLE9BQU9kO0lBRVQsQ0FBQSxFQUFHZSxJQUFJLENBQUMsSUFBSTtBQUVkLENBQUEsRUFBR0EsSUFBSSxDQUFDLElBQUkiLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTVN0cmluZ0xpc3QuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDOMStringList.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDTDAttList.js":
/*!*******************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDTDAttList.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDTDAttList, XMLNode;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    // Represents an attribute list\n    module.exports = XMLDTDAttList = class XMLDTDAttList extends XMLNode {\n        // Initializes a new instance of `XMLDTDAttList`\n        // `parent` the parent `XMLDocType` element\n        // `elementName` the name of the element containing this attribute\n        // `attributeName` attribute name\n        // `attributeType` type of the attribute\n        // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,\n        //                    #FIXED or #DEFAULT)\n        // `defaultValue` default value of the attribute\n        //                (only used for #FIXED or #DEFAULT)\n        constructor(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue){\n            super(parent);\n            if (elementName == null) {\n                throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n            }\n            if (attributeName == null) {\n                throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n            }\n            if (!attributeType) {\n                throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n            }\n            if (!defaultValueType) {\n                throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n            }\n            if (defaultValueType.indexOf(\"#\") !== 0) {\n                defaultValueType = \"#\" + defaultValueType;\n            }\n            if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n            }\n            if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n            }\n            this.elementName = this.stringify.name(elementName);\n            this.type = NodeType.AttributeDeclaration;\n            this.attributeName = this.stringify.name(attributeName);\n            this.attributeType = this.stringify.dtdAttType(attributeType);\n            if (defaultValue) {\n                this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n            }\n            this.defaultValueType = defaultValueType;\n        }\n        // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREF0dExpc3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2pDO0lBQ0MsSUFBSUEsVUFBVUMsZUFBZUM7SUFFN0JBLFVBQVVDLG1CQUFPQSxDQUFDO0lBRWxCSCxXQUFXRyxtQkFBT0EsQ0FBQztJQUVuQiwrQkFBK0I7SUFDL0JDLE9BQU9DLE9BQU8sR0FBR0osZ0JBQWdCLE1BQU1BLHNCQUFzQkM7UUFDM0QsZ0RBQWdEO1FBRWhELDJDQUEyQztRQUMzQyxrRUFBa0U7UUFDbEUsaUNBQWlDO1FBQ2pDLHdDQUF3QztRQUN4QyxxRUFBcUU7UUFDckUseUNBQXlDO1FBQ3pDLGdEQUFnRDtRQUNoRCxvREFBb0Q7UUFDcERJLFlBQVlDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxhQUFhLEVBQUVDLGFBQWEsRUFBRUMsZ0JBQWdCLEVBQUVDLFlBQVksQ0FBRTtZQUM3RixLQUFLLENBQUNMO1lBQ04sSUFBSUMsZUFBZSxNQUFNO2dCQUN2QixNQUFNLElBQUlLLE1BQU0sK0JBQStCLElBQUksQ0FBQ0MsU0FBUztZQUMvRDtZQUNBLElBQUlMLGlCQUFpQixNQUFNO2dCQUN6QixNQUFNLElBQUlJLE1BQU0saUNBQWlDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTjtZQUNsRTtZQUNBLElBQUksQ0FBQ0UsZUFBZTtnQkFDbEIsTUFBTSxJQUFJRyxNQUFNLGlDQUFpQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDbEU7WUFDQSxJQUFJLENBQUNHLGtCQUFrQjtnQkFDckIsTUFBTSxJQUFJRSxNQUFNLG9DQUFvQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDckU7WUFDQSxJQUFJRyxpQkFBaUJJLE9BQU8sQ0FBQyxTQUFTLEdBQUc7Z0JBQ3ZDSixtQkFBbUIsTUFBTUE7WUFDM0I7WUFDQSxJQUFJLENBQUNBLGlCQUFpQkssS0FBSyxDQUFDLDJDQUEyQztnQkFDckUsTUFBTSxJQUFJSCxNQUFNLG9GQUFvRixJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDckg7WUFDQSxJQUFJSSxnQkFBZ0IsQ0FBQ0QsaUJBQWlCSyxLQUFLLENBQUMsd0JBQXdCO2dCQUNsRSxNQUFNLElBQUlILE1BQU0sdURBQXVELElBQUksQ0FBQ0MsU0FBUyxDQUFDTjtZQUN4RjtZQUNBLElBQUksQ0FBQ0EsV0FBVyxHQUFHLElBQUksQ0FBQ1MsU0FBUyxDQUFDQyxJQUFJLENBQUNWO1lBQ3ZDLElBQUksQ0FBQ1csSUFBSSxHQUFHbkIsU0FBU29CLG9CQUFvQjtZQUN6QyxJQUFJLENBQUNYLGFBQWEsR0FBRyxJQUFJLENBQUNRLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDVDtZQUN6QyxJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJLENBQUNPLFNBQVMsQ0FBQ0ksVUFBVSxDQUFDWDtZQUMvQyxJQUFJRSxjQUFjO2dCQUNoQixJQUFJLENBQUNBLFlBQVksR0FBRyxJQUFJLENBQUNLLFNBQVMsQ0FBQ0ssYUFBYSxDQUFDVjtZQUNuRDtZQUNBLElBQUksQ0FBQ0QsZ0JBQWdCLEdBQUdBO1FBQzFCO1FBRUEsc0NBQXNDO1FBRXRDLDRDQUE0QztRQUM1QyxnREFBZ0Q7UUFDaEQsK0VBQStFO1FBQy9FLHNEQUFzRDtRQUN0RFksU0FBU0MsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRSxhQUFhLENBQUNIO1FBQ2hGO0lBRUY7QUFFRixHQUFHSSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFREQXR0TGlzdC5qcz84M2ViIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVERBdHRMaXN0LCBYTUxOb2RlO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICAvLyBSZXByZXNlbnRzIGFuIGF0dHJpYnV0ZSBsaXN0XG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFREQXR0TGlzdCA9IGNsYXNzIFhNTERUREF0dExpc3QgZXh0ZW5kcyBYTUxOb2RlIHtcbiAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MRFREQXR0TGlzdGBcblxuICAgIC8vIGBwYXJlbnRgIHRoZSBwYXJlbnQgYFhNTERvY1R5cGVgIGVsZW1lbnRcbiAgICAvLyBgZWxlbWVudE5hbWVgIHRoZSBuYW1lIG9mIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhpcyBhdHRyaWJ1dGVcbiAgICAvLyBgYXR0cmlidXRlTmFtZWAgYXR0cmlidXRlIG5hbWVcbiAgICAvLyBgYXR0cmlidXRlVHlwZWAgdHlwZSBvZiB0aGUgYXR0cmlidXRlXG4gICAgLy8gYGRlZmF1bHRWYWx1ZVR5cGVgIGRlZmF1bHQgdmFsdWUgdHlwZSAoZWl0aGVyICNSRVFVSVJFRCwgI0lNUExJRUQsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICNGSVhFRCBvciAjREVGQVVMVClcbiAgICAvLyBgZGVmYXVsdFZhbHVlYCBkZWZhdWx0IHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGVcbiAgICAvLyAgICAgICAgICAgICAgICAob25seSB1c2VkIGZvciAjRklYRUQgb3IgI0RFRkFVTFQpXG4gICAgY29uc3RydWN0b3IocGFyZW50LCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBzdXBlcihwYXJlbnQpO1xuICAgICAgaWYgKGVsZW1lbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgZWxlbWVudCBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRyaWJ1dGVUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSB0eXBlLiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWRlZmF1bHRWYWx1ZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgYXR0cmlidXRlIGRlZmF1bHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlLmluZGV4T2YoJyMnKSAhPT0gMCkge1xuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gJyMnICsgZGVmYXVsdFZhbHVlVHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjUkVRVUlSRUR8I0lNUExJRUR8I0ZJWEVEfCNERUZBVUxUKSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRlZmF1bHQgdmFsdWUgdHlwZTsgZXhwZWN0ZWQ6ICNSRVFVSVJFRCwgI0lNUExJRUQsICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAmJiAhZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlZmF1bHQgdmFsdWUgb25seSBhcHBsaWVzIHRvICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50TmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUoZWxlbWVudE5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQXR0cmlidXRlRGVjbGFyYXRpb247XG4gICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVUeXBlID0gdGhpcy5zdHJpbmdpZnkuZHRkQXR0VHlwZShhdHRyaWJ1dGVUeXBlKTtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHREZWZhdWx0KGRlZmF1bHRWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZVR5cGUgPSBkZWZhdWx0VmFsdWVUeXBlO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRBdHRMaXN0KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxEVERBdHRMaXN0IiwiWE1MTm9kZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJlbGVtZW50TmFtZSIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVUeXBlIiwiZGVmYXVsdFZhbHVlVHlwZSIsImRlZmF1bHRWYWx1ZSIsIkVycm9yIiwiZGVidWdJbmZvIiwiaW5kZXhPZiIsIm1hdGNoIiwic3RyaW5naWZ5IiwibmFtZSIsInR5cGUiLCJBdHRyaWJ1dGVEZWNsYXJhdGlvbiIsImR0ZEF0dFR5cGUiLCJkdGRBdHREZWZhdWx0IiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZHRkQXR0TGlzdCIsImZpbHRlck9wdGlvbnMiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDTDAttList.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDTDElement.js":
/*!*******************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDTDElement.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDTDElement, XMLNode;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    // Represents an attribute\n    module.exports = XMLDTDElement = class XMLDTDElement extends XMLNode {\n        // Initializes a new instance of `XMLDTDElement`\n        // `parent` the parent `XMLDocType` element\n        // `name` element name\n        // `value` element content (defaults to #PCDATA)\n        constructor(parent, name, value){\n            super(parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n            }\n            if (!value) {\n                value = \"(#PCDATA)\";\n            }\n            if (Array.isArray(value)) {\n                value = \"(\" + value.join(\",\") + \")\";\n            }\n            this.name = this.stringify.name(name);\n            this.type = NodeType.ElementDeclaration;\n            this.value = this.stringify.dtdElementValue(value);\n        }\n        // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2pDO0lBQ0MsSUFBSUEsVUFBVUMsZUFBZUM7SUFFN0JBLFVBQVVDLG1CQUFPQSxDQUFDO0lBRWxCSCxXQUFXRyxtQkFBT0EsQ0FBQztJQUVuQiwwQkFBMEI7SUFDMUJDLE9BQU9DLE9BQU8sR0FBR0osZ0JBQWdCLE1BQU1BLHNCQUFzQkM7UUFDM0QsZ0RBQWdEO1FBRWhELDJDQUEyQztRQUMzQyxzQkFBc0I7UUFDdEIsZ0RBQWdEO1FBQ2hESSxZQUFZQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxDQUFFO1lBQy9CLEtBQUssQ0FBQ0Y7WUFDTixJQUFJQyxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUUsTUFBTSwrQkFBK0IsSUFBSSxDQUFDQyxTQUFTO1lBQy9EO1lBQ0EsSUFBSSxDQUFDRixPQUFPO2dCQUNWQSxRQUFRO1lBQ1Y7WUFDQSxJQUFJRyxNQUFNQyxPQUFPLENBQUNKLFFBQVE7Z0JBQ3hCQSxRQUFRLE1BQU1BLE1BQU1LLElBQUksQ0FBQyxPQUFPO1lBQ2xDO1lBQ0EsSUFBSSxDQUFDTixJQUFJLEdBQUcsSUFBSSxDQUFDTyxTQUFTLENBQUNQLElBQUksQ0FBQ0E7WUFDaEMsSUFBSSxDQUFDUSxJQUFJLEdBQUdoQixTQUFTaUIsa0JBQWtCO1lBQ3ZDLElBQUksQ0FBQ1IsS0FBSyxHQUFHLElBQUksQ0FBQ00sU0FBUyxDQUFDRyxlQUFlLENBQUNUO1FBQzlDO1FBRUEsc0NBQXNDO1FBRXRDLDRDQUE0QztRQUM1QyxnREFBZ0Q7UUFDaEQsK0VBQStFO1FBQy9FLHNEQUFzRDtRQUN0RFUsU0FBU0MsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRSxhQUFhLENBQUNIO1FBQ2hGO0lBRUY7QUFFRixHQUFHSSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFRERWxlbWVudC5qcz9kNDQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVERFbGVtZW50LCBYTUxOb2RlO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICAvLyBSZXByZXNlbnRzIGFuIGF0dHJpYnV0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVsZW1lbnQgPSBjbGFzcyBYTUxEVERFbGVtZW50IGV4dGVuZHMgWE1MTm9kZSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTERUREVsZW1lbnRgXG5cbiAgICAvLyBgcGFyZW50YCB0aGUgcGFyZW50IGBYTUxEb2NUeXBlYCBlbGVtZW50XG4gICAgLy8gYG5hbWVgIGVsZW1lbnQgbmFtZVxuICAgIC8vIGB2YWx1ZWAgZWxlbWVudCBjb250ZW50IChkZWZhdWx0cyB0byAjUENEQVRBKVxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIHN1cGVyKHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVsZW1lbnQgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSAnKCNQQ0RBVEEpJztcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9ICcoJyArIHZhbHVlLmpvaW4oJywnKSArICcpJztcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5FbGVtZW50RGVjbGFyYXRpb247XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZHRkRWxlbWVudFZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyB0aGUgWE1MIGZyYWdtZW50IHRvIHN0cmluZ1xuXG4gICAgLy8gYG9wdGlvbnMucHJldHR5YCBwcmV0dHkgcHJpbnRzIHRoZSByZXN1bHRcbiAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5vZmZzZXRgIGhvdyBtYW55IGluZGVudGF0aW9ucyB0byBhZGQgdG8gZXZlcnkgbGluZSBmb3IgcHJldHR5IHByaW50XG4gICAgLy8gYG9wdGlvbnMubmV3bGluZWAgbmV3bGluZSBzZXF1ZW5jZSBmb3IgcHJldHR5IHByaW50XG4gICAgdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZHRkRWxlbWVudCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cblxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MRFRERWxlbWVudCIsIlhNTE5vZGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwibmFtZSIsInZhbHVlIiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwic3RyaW5naWZ5IiwidHlwZSIsIkVsZW1lbnREZWNsYXJhdGlvbiIsImR0ZEVsZW1lbnRWYWx1ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImR0ZEVsZW1lbnQiLCJmaWx0ZXJPcHRpb25zIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDTDElement.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDTDEntity.js":
/*!******************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDTDEntity.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDTDEntity, XMLNode, isObject;\n    ({ isObject } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    // Represents an entity declaration in the DTD\n    module.exports = XMLDTDEntity = (function() {\n        class XMLDTDEntity extends XMLNode {\n            // Initializes a new instance of `XMLDTDEntity`\n            // `parent` the parent `XMLDocType` element\n            // `pe` whether this is a parameter entity or a general entity\n            //      defaults to `false` (general entity)\n            // `name` the name of the entity\n            // `value` internal entity value or an object with external entity details\n            // `value.pubID` public identifier\n            // `value.sysID` system identifier\n            // `value.nData` notation declaration\n            constructor(parent, pe, name, value){\n                super(parent);\n                if (name == null) {\n                    throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n                }\n                if (value == null) {\n                    throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n                }\n                this.pe = !!pe;\n                this.name = this.stringify.name(name);\n                this.type = NodeType.EntityDeclaration;\n                if (!isObject(value)) {\n                    this.value = this.stringify.dtdEntityValue(value);\n                    this.internal = true;\n                } else {\n                    if (!value.pubID && !value.sysID) {\n                        throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n                    }\n                    if (value.pubID && !value.sysID) {\n                        throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n                    }\n                    this.internal = false;\n                    if (value.pubID != null) {\n                        this.pubID = this.stringify.dtdPubID(value.pubID);\n                    }\n                    if (value.sysID != null) {\n                        this.sysID = this.stringify.dtdSysID(value.sysID);\n                    }\n                    if (value.nData != null) {\n                        this.nData = this.stringify.dtdNData(value.nData);\n                    }\n                    if (this.pe && this.nData) {\n                        throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n                    }\n                }\n            }\n            // Converts the XML fragment to string\n            // `options.pretty` pretty prints the result\n            // `options.indent` indentation for pretty print\n            // `options.offset` how many indentations to add to every line for pretty print\n            // `options.newline` newline sequence for pretty print\n            toString(options) {\n                return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLDTDEntity.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"notationName\", {\n            get: function() {\n                return this.nData || null;\n            }\n        });\n        // DOM level 3\n        Object.defineProperty(XMLDTDEntity.prototype, \"inputEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"xmlEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"xmlVersion\", {\n            get: function() {\n                return null;\n            }\n        });\n        return XMLDTDEntity;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDTDEntity.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDTDNotation.js":
/*!********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDTDNotation.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDTDNotation, XMLNode;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    // Represents a NOTATION entry in the DTD\n    module.exports = XMLDTDNotation = (function() {\n        class XMLDTDNotation extends XMLNode {\n            // Initializes a new instance of `XMLDTDNotation`\n            // `parent` the parent `XMLDocType` element\n            // `name` the name of the notation\n            // `value` an object with external entity details\n            // `value.pubID` public identifier\n            // `value.sysID` system identifier\n            constructor(parent, name, value){\n                super(parent);\n                if (name == null) {\n                    throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n                }\n                if (!value.pubID && !value.sysID) {\n                    throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n                }\n                this.name = this.stringify.name(name);\n                this.type = NodeType.NotationDeclaration;\n                if (value.pubID != null) {\n                    this.pubID = this.stringify.dtdPubID(value.pubID);\n                }\n                if (value.sysID != null) {\n                    this.sysID = this.stringify.dtdSysID(value.sysID);\n                }\n            }\n            // Converts the XML fragment to string\n            // `options.pretty` pretty prints the result\n            // `options.indent` indentation for pretty print\n            // `options.offset` how many indentations to add to every line for pretty print\n            // `options.newline` newline sequence for pretty print\n            toString(options) {\n                return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLDTDNotation.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDTDNotation.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        return XMLDTDNotation;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERURE5vdGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNqQztJQUNDLElBQUlBLFVBQVVDLGdCQUFnQkM7SUFFOUJBLFVBQVVDLG1CQUFPQSxDQUFDO0lBRWxCSCxXQUFXRyxtQkFBT0EsQ0FBQztJQUVuQix5Q0FBeUM7SUFDekNDLE9BQU9DLE9BQU8sR0FBR0osaUJBQWlCLENBQUM7UUFDakMsTUFBTUEsdUJBQXVCQztZQUMzQixpREFBaUQ7WUFFakQsMkNBQTJDO1lBQzNDLGtDQUFrQztZQUNsQyxpREFBaUQ7WUFDakQsa0NBQWtDO1lBQ2xDLGtDQUFrQztZQUNsQ0ksWUFBWUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssQ0FBRTtnQkFDL0IsS0FBSyxDQUFDRjtnQkFDTixJQUFJQyxRQUFRLE1BQU07b0JBQ2hCLE1BQU0sSUFBSUUsTUFBTSxnQ0FBZ0MsSUFBSSxDQUFDQyxTQUFTLENBQUNIO2dCQUNqRTtnQkFDQSxJQUFJLENBQUNDLE1BQU1HLEtBQUssSUFBSSxDQUFDSCxNQUFNSSxLQUFLLEVBQUU7b0JBQ2hDLE1BQU0sSUFBSUgsTUFBTSx1RUFBdUUsSUFBSSxDQUFDQyxTQUFTLENBQUNIO2dCQUN4RztnQkFDQSxJQUFJLENBQUNBLElBQUksR0FBRyxJQUFJLENBQUNNLFNBQVMsQ0FBQ04sSUFBSSxDQUFDQTtnQkFDaEMsSUFBSSxDQUFDTyxJQUFJLEdBQUdmLFNBQVNnQixtQkFBbUI7Z0JBQ3hDLElBQUlQLE1BQU1HLEtBQUssSUFBSSxNQUFNO29CQUN2QixJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0csUUFBUSxDQUFDUixNQUFNRyxLQUFLO2dCQUNsRDtnQkFDQSxJQUFJSCxNQUFNSSxLQUFLLElBQUksTUFBTTtvQkFDdkIsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNJLFFBQVEsQ0FBQ1QsTUFBTUksS0FBSztnQkFDbEQ7WUFDRjtZQUVBLHNDQUFzQztZQUV0Qyw0Q0FBNEM7WUFDNUMsZ0RBQWdEO1lBQ2hELCtFQUErRTtZQUMvRSxzREFBc0Q7WUFDdERNLFNBQVNDLE9BQU8sRUFBRTtnQkFDaEIsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0YsT0FBTyxDQUFDQyxNQUFNLENBQUNFLGFBQWEsQ0FBQ0g7WUFDakY7UUFFRjs7UUFFQSxjQUFjO1FBQ2RJLE9BQU9DLGNBQWMsQ0FBQ3hCLGVBQWV5QixTQUFTLEVBQUUsWUFBWTtZQUMxREMsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ2YsS0FBSztZQUNuQjtRQUNGO1FBRUFZLE9BQU9DLGNBQWMsQ0FBQ3hCLGVBQWV5QixTQUFTLEVBQUUsWUFBWTtZQUMxREMsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ2QsS0FBSztZQUNuQjtRQUNGO1FBRUEsT0FBT1o7SUFFVCxHQUFHMkIsSUFBSSxDQUFDLElBQUk7QUFFZCxHQUFHQSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFRETm90YXRpb24uanM/ODFhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRETm90YXRpb24sIFhNTE5vZGU7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSBOT1RBVElPTiBlbnRyeSBpbiB0aGUgRFREXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFRETm90YXRpb24gPSAoZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgWE1MRFRETm90YXRpb24gZXh0ZW5kcyBYTUxOb2RlIHtcbiAgICAgIC8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIGBYTUxEVEROb3RhdGlvbmBcblxuICAgICAgLy8gYHBhcmVudGAgdGhlIHBhcmVudCBgWE1MRG9jVHlwZWAgZWxlbWVudFxuICAgICAgLy8gYG5hbWVgIHRoZSBuYW1lIG9mIHRoZSBub3RhdGlvblxuICAgICAgLy8gYHZhbHVlYCBhbiBvYmplY3Qgd2l0aCBleHRlcm5hbCBlbnRpdHkgZGV0YWlsc1xuICAgICAgLy8gYHZhbHVlLnB1YklEYCBwdWJsaWMgaWRlbnRpZmllclxuICAgICAgLy8gYHZhbHVlLnN5c0lEYCBzeXN0ZW0gaWRlbnRpZmllclxuICAgICAgY29uc3RydWN0b3IocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBzdXBlcihwYXJlbnQpO1xuICAgICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgbm90YXRpb24gbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQdWJsaWMgb3Igc3lzdGVtIGlkZW50aWZpZXJzIGFyZSByZXF1aXJlZCBmb3IgYW4gZXh0ZXJuYWwgZW50aXR5LiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Ob3RhdGlvbkRlY2xhcmF0aW9uO1xuICAgICAgICBpZiAodmFsdWUucHViSUQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucHViSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRQdWJJRCh2YWx1ZS5wdWJJRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnN5c0lEICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnN5c0lEID0gdGhpcy5zdHJpbmdpZnkuZHRkU3lzSUQodmFsdWUuc3lzSUQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAgIC8vIGBvcHRpb25zLnByZXR0eWAgcHJldHR5IHByaW50cyB0aGUgcmVzdWx0XG4gICAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIGZvciBwcmV0dHkgcHJpbnRcbiAgICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAgIC8vIGBvcHRpb25zLm5ld2xpbmVgIG5ld2xpbmUgc2VxdWVuY2UgZm9yIHByZXR0eSBwcmludFxuICAgICAgdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGROb3RhdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8vIERPTSBsZXZlbCAxXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERURE5vdGF0aW9uLnByb3RvdHlwZSwgJ3B1YmxpY0lkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHViSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRETm90YXRpb24ucHJvdG90eXBlLCAnc3lzdGVtSWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeXNJRDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBYTUxEVEROb3RhdGlvbjtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MRFRETm90YXRpb24iLCJYTUxOb2RlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsIm5hbWUiLCJ2YWx1ZSIsIkVycm9yIiwiZGVidWdJbmZvIiwicHViSUQiLCJzeXNJRCIsInN0cmluZ2lmeSIsInR5cGUiLCJOb3RhdGlvbkRlY2xhcmF0aW9uIiwiZHRkUHViSUQiLCJkdGRTeXNJRCIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImR0ZE5vdGF0aW9uIiwiZmlsdGVyT3B0aW9ucyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDTDNotation.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDeclaration.js":
/*!********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDeclaration.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDeclaration, XMLNode, isObject;\n    ({ isObject } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    // Represents the XML declaration\n    module.exports = XMLDeclaration = class XMLDeclaration extends XMLNode {\n        // Initializes a new instance of `XMLDeclaration`\n        // `parent` the document object\n        // `version` A version number string, e.g. 1.0\n        // `encoding` Encoding declaration, e.g. UTF-8\n        // `standalone` standalone document declaration: true or false\n        constructor(parent, version, encoding, standalone){\n            super(parent);\n            // arguments may also be passed as an object\n            if (isObject(version)) {\n                ({ version, encoding, standalone } = version);\n            }\n            if (!version) {\n                version = \"1.0\";\n            }\n            this.type = NodeType.Declaration;\n            this.version = this.stringify.xmlVersion(version);\n            if (encoding != null) {\n                this.encoding = this.stringify.xmlEncoding(encoding);\n            }\n            if (standalone != null) {\n                this.standalone = this.stringify.xmlStandalone(standalone);\n            }\n        }\n        // Converts to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERlY2xhcmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNqQztJQUNDLElBQUlBLFVBQVVDLGdCQUFnQkMsU0FBU0M7SUFFdEMsR0FBQ0EsUUFBUSxFQUFDLEdBQUdDLG1CQUFPQSxDQUFDLG1FQUFXO0lBRWpDRixVQUFVRSxtQkFBT0EsQ0FBQztJQUVsQkosV0FBV0ksbUJBQU9BLENBQUM7SUFFbkIsaUNBQWlDO0lBQ2pDQyxPQUFPQyxPQUFPLEdBQUdMLGlCQUFpQixNQUFNQSx1QkFBdUJDO1FBQzdELGlEQUFpRDtRQUVqRCwrQkFBK0I7UUFFL0IsOENBQThDO1FBQzlDLDhDQUE4QztRQUM5Qyw4REFBOEQ7UUFDOURLLFlBQVlDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsQ0FBRTtZQUNqRCxLQUFLLENBQUNIO1lBQ04sNENBQTRDO1lBQzVDLElBQUlMLFNBQVNNLFVBQVU7Z0JBQ3BCLEdBQUNBLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxVQUFVLEVBQUMsR0FBR0YsT0FBTTtZQUMzQztZQUNBLElBQUksQ0FBQ0EsU0FBUztnQkFDWkEsVUFBVTtZQUNaO1lBQ0EsSUFBSSxDQUFDRyxJQUFJLEdBQUdaLFNBQVNhLFdBQVc7WUFDaEMsSUFBSSxDQUFDSixPQUFPLEdBQUcsSUFBSSxDQUFDSyxTQUFTLENBQUNDLFVBQVUsQ0FBQ047WUFDekMsSUFBSUMsWUFBWSxNQUFNO2dCQUNwQixJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJLENBQUNJLFNBQVMsQ0FBQ0UsV0FBVyxDQUFDTjtZQUM3QztZQUNBLElBQUlDLGNBQWMsTUFBTTtnQkFDdEIsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSSxDQUFDRyxTQUFTLENBQUNHLGFBQWEsQ0FBQ047WUFDakQ7UUFDRjtRQUVBLHFCQUFxQjtRQUVyQiw0Q0FBNEM7UUFDNUMsZ0RBQWdEO1FBQ2hELCtFQUErRTtRQUMvRSxzREFBc0Q7UUFDdERPLFNBQVNDLE9BQU8sRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSDtRQUNqRjtJQUVGO0FBRUYsR0FBR0ksSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERlY2xhcmF0aW9uLmpzP2QwMTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERlY2xhcmF0aW9uLCBYTUxOb2RlLCBpc09iamVjdDtcblxuICAoe2lzT2JqZWN0fSA9IHJlcXVpcmUoJy4vVXRpbGl0eScpKTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgLy8gUmVwcmVzZW50cyB0aGUgWE1MIGRlY2xhcmF0aW9uXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRGVjbGFyYXRpb24gPSBjbGFzcyBYTUxEZWNsYXJhdGlvbiBleHRlbmRzIFhNTE5vZGUge1xuICAgIC8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIGBYTUxEZWNsYXJhdGlvbmBcblxuICAgIC8vIGBwYXJlbnRgIHRoZSBkb2N1bWVudCBvYmplY3RcblxuICAgIC8vIGB2ZXJzaW9uYCBBIHZlcnNpb24gbnVtYmVyIHN0cmluZywgZS5nLiAxLjBcbiAgICAvLyBgZW5jb2RpbmdgIEVuY29kaW5nIGRlY2xhcmF0aW9uLCBlLmcuIFVURi04XG4gICAgLy8gYHN0YW5kYWxvbmVgIHN0YW5kYWxvbmUgZG9jdW1lbnQgZGVjbGFyYXRpb246IHRydWUgb3IgZmFsc2VcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKSB7XG4gICAgICBzdXBlcihwYXJlbnQpO1xuICAgICAgLy8gYXJndW1lbnRzIG1heSBhbHNvIGJlIHBhc3NlZCBhcyBhbiBvYmplY3RcbiAgICAgIGlmIChpc09iamVjdCh2ZXJzaW9uKSkge1xuICAgICAgICAoe3ZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lfSA9IHZlcnNpb24pO1xuICAgICAgfVxuICAgICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICAgIHZlcnNpb24gPSAnMS4wJztcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkRlY2xhcmF0aW9uO1xuICAgICAgdGhpcy52ZXJzaW9uID0gdGhpcy5zdHJpbmdpZnkueG1sVmVyc2lvbih2ZXJzaW9uKTtcbiAgICAgIGlmIChlbmNvZGluZyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZW5jb2RpbmcgPSB0aGlzLnN0cmluZ2lmeS54bWxFbmNvZGluZyhlbmNvZGluZyk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhbmRhbG9uZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3RhbmRhbG9uZSA9IHRoaXMuc3RyaW5naWZ5LnhtbFN0YW5kYWxvbmUoc3RhbmRhbG9uZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29udmVydHMgdG8gc3RyaW5nXG5cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kZWNsYXJhdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cblxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MRGVjbGFyYXRpb24iLCJYTUxOb2RlIiwiaXNPYmplY3QiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwidmVyc2lvbiIsImVuY29kaW5nIiwic3RhbmRhbG9uZSIsInR5cGUiLCJEZWNsYXJhdGlvbiIsInN0cmluZ2lmeSIsInhtbFZlcnNpb24iLCJ4bWxFbmNvZGluZyIsInhtbFN0YW5kYWxvbmUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJkZWNsYXJhdGlvbiIsImZpbHRlck9wdGlvbnMiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDeclaration.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDocType.js":
/*!****************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDocType.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject;\n    ({ isObject } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n    // Represents doctype declaration\n    module.exports = XMLDocType = (function() {\n        class XMLDocType extends XMLNode {\n            // Initializes a new instance of `XMLDocType`\n            // `parent` the document object\n            // `pubID` public identifier of the external subset\n            // `sysID` system identifier of the external subset\n            constructor(parent, pubID, sysID){\n                var child, i, len, ref;\n                super(parent);\n                this.type = NodeType.DocType;\n                // set DTD name to the name of the root node\n                if (parent.children) {\n                    ref = parent.children;\n                    for(i = 0, len = ref.length; i < len; i++){\n                        child = ref[i];\n                        if (child.type === NodeType.Element) {\n                            this.name = child.name;\n                            break;\n                        }\n                    }\n                }\n                this.documentObject = parent;\n                // arguments may also be passed as an object\n                if (isObject(pubID)) {\n                    ({ pubID, sysID } = pubID);\n                }\n                if (sysID == null) {\n                    [sysID, pubID] = [\n                        pubID,\n                        sysID\n                    ];\n                }\n                if (pubID != null) {\n                    this.pubID = this.stringify.dtdPubID(pubID);\n                }\n                if (sysID != null) {\n                    this.sysID = this.stringify.dtdSysID(sysID);\n                }\n            }\n            // Creates an element type declaration\n            // `name` element name\n            // `value` element content (defaults to #PCDATA)\n            element(name, value) {\n                var child;\n                child = new XMLDTDElement(this, name, value);\n                this.children.push(child);\n                return this;\n            }\n            // Creates an attribute declaration\n            // `elementName` the name of the element containing this attribute\n            // `attributeName` attribute name\n            // `attributeType` type of the attribute (defaults to CDATA)\n            // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n            //                    #DEFAULT) (defaults to #IMPLIED)\n            // `defaultValue` default value of the attribute\n            //                (only used for #FIXED or #DEFAULT)\n            attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n                var child;\n                child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n                this.children.push(child);\n                return this;\n            }\n            // Creates a general entity declaration\n            // `name` the name of the entity\n            // `value` internal entity value or an object with external entity details\n            // `value.pubID` public identifier\n            // `value.sysID` system identifier\n            // `value.nData` notation declaration\n            entity(name, value) {\n                var child;\n                child = new XMLDTDEntity(this, false, name, value);\n                this.children.push(child);\n                return this;\n            }\n            // Creates a parameter entity declaration\n            // `name` the name of the entity\n            // `value` internal entity value or an object with external entity details\n            // `value.pubID` public identifier\n            // `value.sysID` system identifier\n            pEntity(name, value) {\n                var child;\n                child = new XMLDTDEntity(this, true, name, value);\n                this.children.push(child);\n                return this;\n            }\n            // Creates a NOTATION declaration\n            // `name` the name of the notation\n            // `value` an object with external entity details\n            // `value.pubID` public identifier\n            // `value.sysID` system identifier\n            notation(name, value) {\n                var child;\n                child = new XMLDTDNotation(this, name, value);\n                this.children.push(child);\n                return this;\n            }\n            // Converts to string\n            // `options.pretty` pretty prints the result\n            // `options.indent` indentation for pretty print\n            // `options.offset` how many indentations to add to every line for pretty print\n            // `options.newline` newline sequence for pretty print\n            toString(options) {\n                return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n            }\n            // Aliases\n            ele(name, value) {\n                return this.element(name, value);\n            }\n            att(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n                return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            }\n            ent(name, value) {\n                return this.entity(name, value);\n            }\n            pent(name, value) {\n                return this.pEntity(name, value);\n            }\n            not(name, value) {\n                return this.notation(name, value);\n            }\n            up() {\n                return this.root() || this.documentObject;\n            }\n            isEqualNode(node) {\n                if (!super.isEqualNode(node)) {\n                    return false;\n                }\n                if (node.name !== this.name) {\n                    return false;\n                }\n                if (node.publicId !== this.publicId) {\n                    return false;\n                }\n                if (node.systemId !== this.systemId) {\n                    return false;\n                }\n                return true;\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLDocType.prototype, \"entities\", {\n            get: function() {\n                var child, i, len, nodes, ref;\n                nodes = {};\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.EntityDeclaration && !child.pe) {\n                        nodes[child.name] = child;\n                    }\n                }\n                return new XMLNamedNodeMap(nodes);\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"notations\", {\n            get: function() {\n                var child, i, len, nodes, ref;\n                nodes = {};\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.NotationDeclaration) {\n                        nodes[child.name] = child;\n                    }\n                }\n                return new XMLNamedNodeMap(nodes);\n            }\n        });\n        // DOM level 2\n        Object.defineProperty(XMLDocType.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"internalSubset\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        return XMLDocType;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDocType.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDocument.js":
/*!*****************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDocument.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject;\n    ({ isPlainObject } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    XMLDOMImplementation = __webpack_require__(/*! ./XMLDOMImplementation */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDOMImplementation.js\");\n    XMLDOMConfiguration = __webpack_require__(/*! ./XMLDOMConfiguration */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    // Represents an XML builder\n    module.exports = XMLDocument = (function() {\n        class XMLDocument extends XMLNode {\n            // Initializes a new instance of `XMLDocument`\n            // `options.keepNullNodes` whether nodes with null values will be kept\n            //     or ignored: true or false\n            // `options.keepNullAttributes` whether attributes with null values will be\n            //     kept or ignored: true or false\n            // `options.ignoreDecorators` whether decorator strings will be ignored when\n            //     converting JS objects: true or false\n            // `options.separateArrayItems` whether array items are created as separate\n            //     nodes when passed as an object value: true or false\n            // `options.noDoubleEncoding` whether existing html entities are encoded:\n            //     true or false\n            // `options.stringify` a set of functions to use for converting values to\n            //     strings\n            // `options.writer` the default XML writer to use for converting nodes to\n            //     string. If the default writer is not set, the built-in XMLStringWriter\n            //     will be used instead.\n            constructor(options){\n                super(null);\n                this.name = \"#document\";\n                this.type = NodeType.Document;\n                this.documentURI = null;\n                this.domConfig = new XMLDOMConfiguration();\n                options || (options = {});\n                if (!options.writer) {\n                    options.writer = new XMLStringWriter();\n                }\n                this.options = options;\n                this.stringify = new XMLStringifier(options);\n            }\n            // Ends the document and passes it to the given XML writer\n            // `writer` is either an XML writer or a plain object to pass to the\n            // constructor of the default XML writer. The default writer is assigned when\n            // creating the XML document. Following flags are recognized by the\n            // built-in XMLStringWriter:\n            //   `writer.pretty` pretty prints the result\n            //   `writer.indent` indentation for pretty print\n            //   `writer.offset` how many indentations to add to every line for pretty print\n            //   `writer.newline` newline sequence for pretty print\n            end(writer) {\n                var writerOptions;\n                writerOptions = {};\n                if (!writer) {\n                    writer = this.options.writer;\n                } else if (isPlainObject(writer)) {\n                    writerOptions = writer;\n                    writer = this.options.writer;\n                }\n                return writer.document(this, writer.filterOptions(writerOptions));\n            }\n            // Converts the XML document to string\n            // `options.pretty` pretty prints the result\n            // `options.indent` indentation for pretty print\n            // `options.offset` how many indentations to add to every line for pretty print\n            // `options.newline` newline sequence for pretty print\n            toString(options) {\n                return this.options.writer.document(this, this.options.writer.filterOptions(options));\n            }\n            // DOM level 1 functions to be implemented later\n            createElement(tagName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createDocumentFragment() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createTextNode(data) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createComment(data) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createCDATASection(data) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createProcessingInstruction(target, data) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createAttribute(name) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createEntityReference(name) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getElementsByTagName(tagname) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM level 2 functions to be implemented later\n            importNode(importedNode, deep) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createElementNS(namespaceURI, qualifiedName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createAttributeNS(namespaceURI, qualifiedName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getElementsByTagNameNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getElementById(elementId) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM level 3 functions to be implemented later\n            adoptNode(source) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            normalizeDocument() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            renameNode(node, namespaceURI, qualifiedName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM level 4 functions to be implemented later\n            getElementsByClassName(classNames) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createEvent(eventInterface) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createRange() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createNodeIterator(root, whatToShow, filter) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            createTreeWalker(root, whatToShow, filter) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLDocument.prototype, \"implementation\", {\n            value: new XMLDOMImplementation()\n        });\n        Object.defineProperty(XMLDocument.prototype, \"doctype\", {\n            get: function() {\n                var child, i, len, ref;\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.DocType) {\n                        return child;\n                    }\n                }\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"documentElement\", {\n            get: function() {\n                return this.rootObject || null;\n            }\n        });\n        // DOM level 3\n        Object.defineProperty(XMLDocument.prototype, \"inputEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"strictErrorChecking\", {\n            get: function() {\n                return false;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlEncoding\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].encoding;\n                } else {\n                    return null;\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlStandalone\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].standalone === \"yes\";\n                } else {\n                    return false;\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlVersion\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].version;\n                } else {\n                    return \"1.0\";\n                }\n            }\n        });\n        // DOM level 4\n        Object.defineProperty(XMLDocument.prototype, \"URL\", {\n            get: function() {\n                return this.documentURI;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"origin\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"compatMode\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"characterSet\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"contentType\", {\n            get: function() {\n                return null;\n            }\n        });\n        return XMLDocument;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDocument.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDocumentCB.js":
/*!*******************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDocumentCB.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, hasProp = {}.hasOwnProperty;\n    ({ isObject, isFunction, isPlainObject, getValue } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDocument = __webpack_require__(/*! ./XMLDocument */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDocument.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(rsc)/../node_modules/xmlbuilder/lib/WriterState.js\");\n    // Represents an XML builder\n    module.exports = XMLDocumentCB = class XMLDocumentCB {\n        // Initializes a new instance of `XMLDocumentCB`\n        // `options.keepNullNodes` whether nodes with null values will be kept\n        //     or ignored: true or false\n        // `options.keepNullAttributes` whether attributes with null values will be\n        //     kept or ignored: true or false\n        // `options.ignoreDecorators` whether decorator strings will be ignored when\n        //     converting JS objects: true or false\n        // `options.separateArrayItems` whether array items are created as separate\n        //     nodes when passed as an object value: true or false\n        // `options.noDoubleEncoding` whether existing html entities are encoded:\n        //     true or false\n        // `options.stringify` a set of functions to use for converting values to\n        //     strings\n        // `options.writer` the default XML writer to use for converting nodes to\n        //     string. If the default writer is not set, the built-in XMLStringWriter\n        //     will be used instead.\n        // `onData` the function to be called when a new chunk of XML is output. The\n        //          string containing the XML chunk is passed to `onData` as its first\n        //          argument, and the current indentation level as its second argument.\n        // `onEnd`  the function to be called when the XML document is completed with\n        //          `end`. `onEnd` does not receive any arguments.\n        constructor(options, onData, onEnd){\n            var writerOptions;\n            this.name = \"?xml\";\n            this.type = NodeType.Document;\n            options || (options = {});\n            writerOptions = {};\n            if (!options.writer) {\n                options.writer = new XMLStringWriter();\n            } else if (isPlainObject(options.writer)) {\n                writerOptions = options.writer;\n                options.writer = new XMLStringWriter();\n            }\n            this.options = options;\n            this.writer = options.writer;\n            this.writerOptions = this.writer.filterOptions(writerOptions);\n            this.stringify = new XMLStringifier(options);\n            this.onDataCallback = onData || function() {};\n            this.onEndCallback = onEnd || function() {};\n            this.currentNode = null;\n            this.currentLevel = -1;\n            this.openTags = {};\n            this.documentStarted = false;\n            this.documentCompleted = false;\n            this.root = null;\n        }\n        // Creates a child element node from the given XMLNode\n        // `node` the child node\n        createChildNode(node) {\n            var att, attName, attributes, child, i, len, ref, ref1;\n            switch(node.type){\n                case NodeType.CData:\n                    this.cdata(node.value);\n                    break;\n                case NodeType.Comment:\n                    this.comment(node.value);\n                    break;\n                case NodeType.Element:\n                    attributes = {};\n                    ref = node.attribs;\n                    for(attName in ref){\n                        if (!hasProp.call(ref, attName)) continue;\n                        att = ref[attName];\n                        attributes[attName] = att.value;\n                    }\n                    this.node(node.name, attributes);\n                    break;\n                case NodeType.Dummy:\n                    this.dummy();\n                    break;\n                case NodeType.Raw:\n                    this.raw(node.value);\n                    break;\n                case NodeType.Text:\n                    this.text(node.value);\n                    break;\n                case NodeType.ProcessingInstruction:\n                    this.instruction(node.target, node.value);\n                    break;\n                default:\n                    throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n            }\n            ref1 = node.children;\n            // write child nodes recursively\n            for(i = 0, len = ref1.length; i < len; i++){\n                child = ref1[i];\n                this.createChildNode(child);\n                if (child.type === NodeType.Element) {\n                    this.up();\n                }\n            }\n            return this;\n        }\n        // Creates a dummy node\n        dummy() {\n            // no-op, just return this\n            return this;\n        }\n        // Creates a node\n        // `name` name of the node\n        // `attributes` an object containing name/value pairs of attributes\n        // `text` element text\n        node(name, attributes, text) {\n            if (name == null) {\n                throw new Error(\"Missing node name.\");\n            }\n            if (this.root && this.currentLevel === -1) {\n                throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n            }\n            this.openCurrent();\n            name = getValue(name);\n            if (attributes == null) {\n                attributes = {};\n            }\n            attributes = getValue(attributes);\n            // swap argument order: text <-> attributes\n            if (!isObject(attributes)) {\n                [text, attributes] = [\n                    attributes,\n                    text\n                ];\n            }\n            this.currentNode = new XMLElement(this, name, attributes);\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            if (text != null) {\n                this.text(text);\n            }\n            return this;\n        }\n        // Creates a child element node or an element type declaration when called\n        // inside the DTD\n        // `name` name of the node\n        // `attributes` an object containing name/value pairs of attributes\n        // `text` element text\n        element(name, attributes, text) {\n            var child, i, len, oldValidationFlag, ref, root;\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                this.dtdElement(...arguments);\n            } else {\n                if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n                    oldValidationFlag = this.options.noValidation;\n                    this.options.noValidation = true;\n                    root = new XMLDocument(this.options).element(\"TEMP_ROOT\");\n                    root.element(name);\n                    this.options.noValidation = oldValidationFlag;\n                    ref = root.children;\n                    for(i = 0, len = ref.length; i < len; i++){\n                        child = ref[i];\n                        this.createChildNode(child);\n                        if (child.type === NodeType.Element) {\n                            this.up();\n                        }\n                    }\n                } else {\n                    this.node(name, attributes, text);\n                }\n            }\n            return this;\n        }\n        // Adds or modifies an attribute\n        // `name` attribute name\n        // `value` attribute value\n        attribute(name, value) {\n            var attName, attValue;\n            if (!this.currentNode || this.currentNode.children) {\n                throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n            }\n            if (name != null) {\n                name = getValue(name);\n            }\n            if (isObject(name)) {\n                for(attName in name){\n                    if (!hasProp.call(name, attName)) continue;\n                    attValue = name[attName];\n                    this.attribute(attName, attValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                if (this.options.keepNullAttributes && value == null) {\n                    this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n                } else if (value != null) {\n                    this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n                }\n            }\n            return this;\n        }\n        // Creates a text node\n        // `value` element text\n        text(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLText(this, value);\n            this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Creates a CDATA node\n        // `value` element text without CDATA delimiters\n        cdata(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLCData(this, value);\n            this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Creates a comment node\n        // `value` comment text\n        comment(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLComment(this, value);\n            this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Adds unescaped raw text\n        // `value` text\n        raw(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLRaw(this, value);\n            this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Adds a processing instruction\n        // `target` instruction target\n        // `value` instruction value\n        instruction(target, value) {\n            var i, insTarget, insValue, len, node;\n            this.openCurrent();\n            if (target != null) {\n                target = getValue(target);\n            }\n            if (value != null) {\n                value = getValue(value);\n            }\n            if (Array.isArray(target)) {\n                for(i = 0, len = target.length; i < len; i++){\n                    insTarget = target[i];\n                    this.instruction(insTarget);\n                }\n            } else if (isObject(target)) {\n                for(insTarget in target){\n                    if (!hasProp.call(target, insTarget)) continue;\n                    insValue = target[insTarget];\n                    this.instruction(insTarget, insValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                node = new XMLProcessingInstruction(this, target, value);\n                this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            }\n            return this;\n        }\n        // Creates the xml declaration\n        // `version` A version number string, e.g. 1.0\n        // `encoding` Encoding declaration, e.g. UTF-8\n        // `standalone` standalone document declaration: true or false\n        declaration(version, encoding, standalone) {\n            var node;\n            this.openCurrent();\n            if (this.documentStarted) {\n                throw new Error(\"declaration() must be the first node.\");\n            }\n            node = new XMLDeclaration(this, version, encoding, standalone);\n            this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Creates the document type declaration\n        // `root`  the name of the root node\n        // `pubID` the public identifier of the external subset\n        // `sysID` the system identifier of the external subset\n        doctype(root, pubID, sysID) {\n            this.openCurrent();\n            if (root == null) {\n                throw new Error(\"Missing root node name.\");\n            }\n            if (this.root) {\n                throw new Error(\"dtd() must come before the root node.\");\n            }\n            this.currentNode = new XMLDocType(this, pubID, sysID);\n            this.currentNode.rootNodeName = root;\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            return this;\n        }\n        // Creates an element type declaration\n        // `name` element name\n        // `value` element content (defaults to #PCDATA)\n        dtdElement(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDElement(this, name, value);\n            this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Creates an attribute declaration\n        // `elementName` the name of the element containing this attribute\n        // `attributeName` attribute name\n        // `attributeType` type of the attribute (defaults to CDATA)\n        // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n        //                    #DEFAULT) (defaults to #IMPLIED)\n        // `defaultValue` default value of the attribute\n        //                (only used for #FIXED or #DEFAULT)\n        attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Creates a general entity declaration\n        // `name` the name of the entity\n        // `value` internal entity value or an object with external entity details\n        // `value.pubID` public identifier\n        // `value.sysID` system identifier\n        // `value.nData` notation declaration\n        entity(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, false, name, value);\n            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Creates a parameter entity declaration\n        // `name` the name of the entity\n        // `value` internal entity value or an object with external entity details\n        // `value.pubID` public identifier\n        // `value.sysID` system identifier\n        pEntity(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, true, name, value);\n            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Creates a NOTATION declaration\n        // `name` the name of the notation\n        // `value` an object with external entity details\n        // `value.pubID` public identifier\n        // `value.sysID` system identifier\n        notation(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDNotation(this, name, value);\n            this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        }\n        // Gets the parent node\n        up() {\n            if (this.currentLevel < 0) {\n                throw new Error(\"The document node has no parent.\");\n            }\n            if (this.currentNode) {\n                if (this.currentNode.children) {\n                    this.closeNode(this.currentNode);\n                } else {\n                    this.openNode(this.currentNode);\n                }\n                this.currentNode = null;\n            } else {\n                this.closeNode(this.openTags[this.currentLevel]);\n            }\n            delete this.openTags[this.currentLevel];\n            this.currentLevel--;\n            return this;\n        }\n        // Ends the document\n        end() {\n            while(this.currentLevel >= 0){\n                this.up();\n            }\n            return this.onEnd();\n        }\n        // Opens the current parent node\n        openCurrent() {\n            if (this.currentNode) {\n                this.currentNode.children = true;\n                return this.openNode(this.currentNode);\n            }\n        }\n        // Writes the opening tag of the current node or the entire node if it has\n        // no child nodes\n        openNode(node) {\n            var att, chunk, name, ref;\n            if (!node.isOpen) {\n                if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n                    this.root = node;\n                }\n                chunk = \"\";\n                if (node.type === NodeType.Element) {\n                    this.writerOptions.state = WriterState.OpenTag;\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"<\" + node.name;\n                    ref = node.attribs;\n                    for(name in ref){\n                        if (!hasProp.call(ref, name)) continue;\n                        att = ref[name];\n                        chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n                    }\n                    chunk += (node.children ? \">\" : \"/>\") + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                    this.writerOptions.state = WriterState.InsideTag; // if node.type is NodeType.DocType\n                } else {\n                    this.writerOptions.state = WriterState.OpenTag;\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"<!DOCTYPE \" + node.rootNodeName;\n                    // external identifier\n                    if (node.pubID && node.sysID) {\n                        chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                    } else if (node.sysID) {\n                        chunk += ' SYSTEM \"' + node.sysID + '\"';\n                    }\n                    // internal subset\n                    if (node.children) {\n                        chunk += \" [\";\n                        this.writerOptions.state = WriterState.InsideTag;\n                    } else {\n                        this.writerOptions.state = WriterState.CloseTag;\n                        chunk += \">\";\n                    }\n                    chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n                }\n                this.onData(chunk, this.currentLevel);\n                return node.isOpen = true;\n            }\n        }\n        // Writes the closing tag of the current node\n        closeNode(node) {\n            var chunk;\n            if (!node.isClosed) {\n                chunk = \"\";\n                this.writerOptions.state = WriterState.CloseTag;\n                if (node.type === NodeType.Element) {\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"</\" + node.name + \">\" + this.writer.endline(node, this.writerOptions, this.currentLevel); // if node.type is NodeType.DocType\n                } else {\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"]>\" + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                }\n                this.writerOptions.state = WriterState.None;\n                this.onData(chunk, this.currentLevel);\n                return node.isClosed = true;\n            }\n        }\n        // Called when a new chunk of XML is output\n        // `chunk` a string containing the XML chunk\n        // `level` current indentation level\n        onData(chunk, level) {\n            this.documentStarted = true;\n            return this.onDataCallback(chunk, level + 1);\n        }\n        // Called when the XML document is completed\n        onEnd() {\n            this.documentCompleted = true;\n            return this.onEndCallback();\n        }\n        // Returns debug string\n        debugInfo(name) {\n            if (name == null) {\n                return \"\";\n            } else {\n                return \"node: <\" + name + \">\";\n            }\n        }\n        // Node aliases\n        ele() {\n            return this.element(...arguments);\n        }\n        nod(name, attributes, text) {\n            return this.node(name, attributes, text);\n        }\n        txt(value) {\n            return this.text(value);\n        }\n        dat(value) {\n            return this.cdata(value);\n        }\n        com(value) {\n            return this.comment(value);\n        }\n        ins(target, value) {\n            return this.instruction(target, value);\n        }\n        dec(version, encoding, standalone) {\n            return this.declaration(version, encoding, standalone);\n        }\n        dtd(root, pubID, sysID) {\n            return this.doctype(root, pubID, sysID);\n        }\n        e(name, attributes, text) {\n            return this.element(name, attributes, text);\n        }\n        n(name, attributes, text) {\n            return this.node(name, attributes, text);\n        }\n        t(value) {\n            return this.text(value);\n        }\n        d(value) {\n            return this.cdata(value);\n        }\n        c(value) {\n            return this.comment(value);\n        }\n        r(value) {\n            return this.raw(value);\n        }\n        i(target, value) {\n            return this.instruction(target, value);\n        }\n        // Attribute aliases\n        att() {\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                return this.attList(...arguments);\n            } else {\n                return this.attribute(...arguments);\n            }\n        }\n        a() {\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                return this.attList(...arguments);\n            } else {\n                return this.attribute(...arguments);\n            }\n        }\n        // DTD aliases\n        // att() and ele() are defined above\n        ent(name, value) {\n            return this.entity(name, value);\n        }\n        pent(name, value) {\n            return this.pEntity(name, value);\n        }\n        not(name, value) {\n            return this.notation(name, value);\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDocumentCB.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLDummy.js":
/*!**************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLDummy.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLDummy, XMLNode;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    // Represents a  raw node\n    module.exports = XMLDummy = class XMLDummy extends XMLNode {\n        // Initializes a new instance of `XMLDummy`\n        // `XMLDummy` is a special node representing a node with \n        // a null value. Dummy nodes are created while recursively\n        // building the XML tree. Simply skipping null values doesn't\n        // work because that would break the recursive chain.\n        constructor(parent){\n            super(parent);\n            this.type = NodeType.Dummy;\n        }\n        // Creates and returns a deep clone of `this`\n        clone() {\n            return Object.create(this);\n        }\n        // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return \"\";\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTER1bW15LmpzIiwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNqQztJQUNDLElBQUlBLFVBQVVDLFVBQVVDO0lBRXhCQSxVQUFVQyxtQkFBT0EsQ0FBQztJQUVsQkgsV0FBV0csbUJBQU9BLENBQUM7SUFFbkIseUJBQXlCO0lBQ3pCQyxPQUFPQyxPQUFPLEdBQUdKLFdBQVcsTUFBTUEsaUJBQWlCQztRQUNqRCwyQ0FBMkM7UUFFM0MseURBQXlEO1FBQ3pELDBEQUEwRDtRQUMxRCw2REFBNkQ7UUFDN0QscURBQXFEO1FBQ3JESSxZQUFZQyxNQUFNLENBQUU7WUFDbEIsS0FBSyxDQUFDQTtZQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHUixTQUFTUyxLQUFLO1FBQzVCO1FBRUEsNkNBQTZDO1FBQzdDQyxRQUFRO1lBQ04sT0FBT0MsT0FBT0MsTUFBTSxDQUFDLElBQUk7UUFDM0I7UUFFQSxzQ0FBc0M7UUFFdEMsNENBQTRDO1FBQzVDLGdEQUFnRDtRQUNoRCwrRUFBK0U7UUFDL0Usc0RBQXNEO1FBQ3REQyxTQUFTQyxPQUFPLEVBQUU7WUFDaEIsT0FBTztRQUNUO0lBRUY7QUFFRixHQUFHQyxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRHVtbXkuanM/MjhmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRHVtbXksIFhNTE5vZGU7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSAgcmF3IG5vZGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEdW1teSA9IGNsYXNzIFhNTER1bW15IGV4dGVuZHMgWE1MTm9kZSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTER1bW15YFxuXG4gICAgLy8gYFhNTER1bW15YCBpcyBhIHNwZWNpYWwgbm9kZSByZXByZXNlbnRpbmcgYSBub2RlIHdpdGggXG4gICAgLy8gYSBudWxsIHZhbHVlLiBEdW1teSBub2RlcyBhcmUgY3JlYXRlZCB3aGlsZSByZWN1cnNpdmVseVxuICAgIC8vIGJ1aWxkaW5nIHRoZSBYTUwgdHJlZS4gU2ltcGx5IHNraXBwaW5nIG51bGwgdmFsdWVzIGRvZXNuJ3RcbiAgICAvLyB3b3JrIGJlY2F1c2UgdGhhdCB3b3VsZCBicmVhayB0aGUgcmVjdXJzaXZlIGNoYWluLlxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgICAgc3VwZXIocGFyZW50KTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkR1bW15O1xuICAgIH1cblxuICAgIC8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBkZWVwIGNsb25lIG9mIGB0aGlzYFxuICAgIGNsb25lKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydHMgdGhlIFhNTCBmcmFnbWVudCB0byBzdHJpbmdcblxuICAgIC8vIGBvcHRpb25zLnByZXR0eWAgcHJldHR5IHByaW50cyB0aGUgcmVzdWx0XG4gICAgLy8gYG9wdGlvbnMuaW5kZW50YCBpbmRlbnRhdGlvbiBmb3IgcHJldHR5IHByaW50XG4gICAgLy8gYG9wdGlvbnMub2Zmc2V0YCBob3cgbWFueSBpbmRlbnRhdGlvbnMgdG8gYWRkIHRvIGV2ZXJ5IGxpbmUgZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm5ld2xpbmVgIG5ld2xpbmUgc2VxdWVuY2UgZm9yIHByZXR0eSBwcmludFxuICAgIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTER1bW15IiwiWE1MTm9kZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJ0eXBlIiwiRHVtbXkiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLDummy.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLElement.js":
/*!****************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLElement.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, hasProp = {}.hasOwnProperty;\n    ({ isObject, isFunction, getValue } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n    // Represents an element of the XML document\n    module.exports = XMLElement = (function() {\n        class XMLElement extends XMLNode {\n            // Initializes a new instance of `XMLElement`\n            // `parent` the parent node\n            // `name` element name\n            // `attributes` an object containing name/value pairs of attributes\n            constructor(parent, name, attributes){\n                var child, j, len, ref;\n                super(parent);\n                if (name == null) {\n                    throw new Error(\"Missing element name. \" + this.debugInfo());\n                }\n                this.name = this.stringify.name(name);\n                this.type = NodeType.Element;\n                this.attribs = {};\n                this.schemaTypeInfo = null;\n                if (attributes != null) {\n                    this.attribute(attributes);\n                }\n                // set properties if this is the root node\n                if (parent.type === NodeType.Document) {\n                    this.isRoot = true;\n                    this.documentObject = parent;\n                    parent.rootObject = this;\n                    // set dtd name\n                    if (parent.children) {\n                        ref = parent.children;\n                        for(j = 0, len = ref.length; j < len; j++){\n                            child = ref[j];\n                            if (child.type === NodeType.DocType) {\n                                child.name = this.name;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            // Creates and returns a deep clone of `this`\n            clone() {\n                var att, attName, clonedSelf, ref;\n                clonedSelf = Object.create(this);\n                // remove document element\n                if (clonedSelf.isRoot) {\n                    clonedSelf.documentObject = null;\n                }\n                // clone attributes\n                clonedSelf.attribs = {};\n                ref = this.attribs;\n                for(attName in ref){\n                    if (!hasProp.call(ref, attName)) continue;\n                    att = ref[attName];\n                    clonedSelf.attribs[attName] = att.clone();\n                }\n                // clone child nodes\n                clonedSelf.children = [];\n                this.children.forEach(function(child) {\n                    var clonedChild;\n                    clonedChild = child.clone();\n                    clonedChild.parent = clonedSelf;\n                    return clonedSelf.children.push(clonedChild);\n                });\n                return clonedSelf;\n            }\n            // Adds or modifies an attribute\n            // `name` attribute name\n            // `value` attribute value\n            attribute(name, value) {\n                var attName, attValue;\n                if (name != null) {\n                    name = getValue(name);\n                }\n                if (isObject(name)) {\n                    for(attName in name){\n                        if (!hasProp.call(name, attName)) continue;\n                        attValue = name[attName];\n                        this.attribute(attName, attValue);\n                    }\n                } else {\n                    if (isFunction(value)) {\n                        value = value.apply();\n                    }\n                    if (this.options.keepNullAttributes && value == null) {\n                        this.attribs[name] = new XMLAttribute(this, name, \"\");\n                    } else if (value != null) {\n                        this.attribs[name] = new XMLAttribute(this, name, value);\n                    }\n                }\n                return this;\n            }\n            // Removes an attribute\n            // `name` attribute name\n            removeAttribute(name) {\n                var attName, j, len;\n                // Also defined in DOM level 1\n                // removeAttribute(name) removes an attribute by name.\n                if (name == null) {\n                    throw new Error(\"Missing attribute name. \" + this.debugInfo());\n                }\n                name = getValue(name);\n                if (Array.isArray(name)) {\n                    for(j = 0, len = name.length; j < len; j++){\n                        attName = name[j];\n                        delete this.attribs[attName];\n                    }\n                } else {\n                    delete this.attribs[name];\n                }\n                return this;\n            }\n            // Converts the XML fragment to string\n            // `options.pretty` pretty prints the result\n            // `options.indent` indentation for pretty print\n            // `options.offset` how many indentations to add to every line for pretty print\n            // `options.newline` newline sequence for pretty print\n            // `options.allowEmpty` do not self close empty element tags\n            toString(options) {\n                return this.options.writer.element(this, this.options.writer.filterOptions(options));\n            }\n            // Aliases\n            att(name, value) {\n                return this.attribute(name, value);\n            }\n            a(name, value) {\n                return this.attribute(name, value);\n            }\n            // DOM Level 1\n            getAttribute(name) {\n                if (this.attribs.hasOwnProperty(name)) {\n                    return this.attribs[name].value;\n                } else {\n                    return null;\n                }\n            }\n            setAttribute(name, value) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getAttributeNode(name) {\n                if (this.attribs.hasOwnProperty(name)) {\n                    return this.attribs[name];\n                } else {\n                    return null;\n                }\n            }\n            setAttributeNode(newAttr) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            removeAttributeNode(oldAttr) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getElementsByTagName(name) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM Level 2\n            getAttributeNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            setAttributeNS(namespaceURI, qualifiedName, value) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            removeAttributeNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getAttributeNodeNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            setAttributeNodeNS(newAttr) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getElementsByTagNameNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            hasAttribute(name) {\n                return this.attribs.hasOwnProperty(name);\n            }\n            hasAttributeNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM Level 3\n            setIdAttribute(name, isId) {\n                if (this.attribs.hasOwnProperty(name)) {\n                    return this.attribs[name].isId;\n                } else {\n                    return isId;\n                }\n            }\n            setIdAttributeNS(namespaceURI, localName, isId) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            setIdAttributeNode(idAttr, isId) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM Level 4\n            getElementsByTagName(tagname) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getElementsByTagNameNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getElementsByClassName(classNames) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            isEqualNode(node) {\n                var i, j, ref;\n                if (!super.isEqualNode(node)) {\n                    return false;\n                }\n                if (node.namespaceURI !== this.namespaceURI) {\n                    return false;\n                }\n                if (node.prefix !== this.prefix) {\n                    return false;\n                }\n                if (node.localName !== this.localName) {\n                    return false;\n                }\n                if (node.attribs.length !== this.attribs.length) {\n                    return false;\n                }\n                for(i = j = 0, ref = this.attribs.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j){\n                    if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLElement.prototype, \"tagName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        // DOM level 4\n        Object.defineProperty(XMLElement.prototype, \"namespaceURI\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"prefix\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"localName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"id\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"className\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"classList\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"attributes\", {\n            get: function() {\n                if (!this.attributeMap || !this.attributeMap.nodes) {\n                    this.attributeMap = new XMLNamedNodeMap(this.attribs);\n                }\n                return this.attributeMap;\n            }\n        });\n        return XMLElement;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLElement.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js":
/*!*********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js ***!
  \*********************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    // Represents a map of nodes accessed by a string key\n    var XMLNamedNodeMap;\n    module.exports = XMLNamedNodeMap = (function() {\n        class XMLNamedNodeMap {\n            // Initializes a new instance of `XMLNamedNodeMap`\n            // This is just a wrapper around an ordinary\n            // JS object.\n            // `nodes` the object containing nodes.\n            constructor(nodes){\n                this.nodes = nodes;\n            }\n            // Creates and returns a deep clone of `this`\n            clone() {\n                // this class should not be cloned since it wraps\n                // around a given object. The calling function should check\n                // whether the wrapped object is null and supply a new object\n                // (from the clone).\n                return this.nodes = null;\n            }\n            // DOM Level 1\n            getNamedItem(name) {\n                return this.nodes[name];\n            }\n            setNamedItem(node) {\n                var oldNode;\n                oldNode = this.nodes[node.nodeName];\n                this.nodes[node.nodeName] = node;\n                return oldNode || null;\n            }\n            removeNamedItem(name) {\n                var oldNode;\n                oldNode = this.nodes[name];\n                delete this.nodes[name];\n                return oldNode || null;\n            }\n            item(index) {\n                return this.nodes[Object.keys(this.nodes)[index]] || null;\n            }\n            // DOM level 2 functions to be implemented later\n            getNamedItemNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\");\n            }\n            setNamedItemNS(node) {\n                throw new Error(\"This DOM method is not implemented.\");\n            }\n            removeNamedItemNS(namespaceURI, localName) {\n                throw new Error(\"This DOM method is not implemented.\");\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLNamedNodeMap.prototype, \"length\", {\n            get: function() {\n                return Object.keys(this.nodes).length || 0;\n            }\n        });\n        return XMLNamedNodeMap;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5hbWVkTm9kZU1hcC5qcz81NzU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgLy8gUmVwcmVzZW50cyBhIG1hcCBvZiBub2RlcyBhY2Nlc3NlZCBieSBhIHN0cmluZyBrZXlcbiAgdmFyIFhNTE5hbWVkTm9kZU1hcDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTE5hbWVkTm9kZU1hcCA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBYTUxOYW1lZE5vZGVNYXAge1xuICAgICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTE5hbWVkTm9kZU1hcGBcbiAgICAgIC8vIFRoaXMgaXMganVzdCBhIHdyYXBwZXIgYXJvdW5kIGFuIG9yZGluYXJ5XG4gICAgICAvLyBKUyBvYmplY3QuXG5cbiAgICAgIC8vIGBub2Rlc2AgdGhlIG9iamVjdCBjb250YWluaW5nIG5vZGVzLlxuICAgICAgY29uc3RydWN0b3Iobm9kZXMpIHtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcblxuICAgICAgY2xvbmUoKSB7XG4gICAgICAgIC8vIHRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBjbG9uZWQgc2luY2UgaXQgd3JhcHNcbiAgICAgICAgLy8gYXJvdW5kIGEgZ2l2ZW4gb2JqZWN0LiBUaGUgY2FsbGluZyBmdW5jdGlvbiBzaG91bGQgY2hlY2tcbiAgICAgICAgLy8gd2hldGhlciB0aGUgd3JhcHBlZCBvYmplY3QgaXMgbnVsbCBhbmQgc3VwcGx5IGEgbmV3IG9iamVjdFxuICAgICAgICAvLyAoZnJvbSB0aGUgY2xvbmUpLlxuICAgICAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIERPTSBMZXZlbCAxXG4gICAgICBnZXROYW1lZEl0ZW0obmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgc2V0TmFtZWRJdGVtKG5vZGUpIHtcbiAgICAgICAgdmFyIG9sZE5vZGU7XG4gICAgICAgIG9sZE5vZGUgPSB0aGlzLm5vZGVzW25vZGUubm9kZU5hbWVdO1xuICAgICAgICB0aGlzLm5vZGVzW25vZGUubm9kZU5hbWVdID0gbm9kZTtcbiAgICAgICAgcmV0dXJuIG9sZE5vZGUgfHwgbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlTmFtZWRJdGVtKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZE5vZGU7XG4gICAgICAgIG9sZE5vZGUgPSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgICBkZWxldGUgdGhpcy5ub2Rlc1tuYW1lXTtcbiAgICAgICAgcmV0dXJuIG9sZE5vZGUgfHwgbnVsbDtcbiAgICAgIH1cblxuICAgICAgaXRlbShpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlc1tPYmplY3Qua2V5cyh0aGlzLm5vZGVzKVtpbmRleF1dIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIERPTSBsZXZlbCAyIGZ1bmN0aW9ucyB0byBiZSBpbXBsZW1lbnRlZCBsYXRlclxuICAgICAgZ2V0TmFtZWRJdGVtTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIHNldE5hbWVkSXRlbU5TKG5vZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZU5hbWVkSXRlbU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIFxuICAgIC8vIERPTSBsZXZlbCAxXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5ub2RlcykubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gWE1MTmFtZWROb2RlTWFwO1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MTmFtZWROb2RlTWFwIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwibm9kZXMiLCJjbG9uZSIsImdldE5hbWVkSXRlbSIsIm5hbWUiLCJzZXROYW1lZEl0ZW0iLCJub2RlIiwib2xkTm9kZSIsIm5vZGVOYW1lIiwicmVtb3ZlTmFtZWRJdGVtIiwiaXRlbSIsImluZGV4IiwiT2JqZWN0Iiwia2V5cyIsImdldE5hbWVkSXRlbU5TIiwibmFtZXNwYWNlVVJJIiwibG9jYWxOYW1lIiwiRXJyb3IiLCJzZXROYW1lZEl0ZW1OUyIsInJlbW92ZU5hbWVkSXRlbU5TIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJsZW5ndGgiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakMsQ0FBQTtJQUNDLHFEQUFxRDtJQUNyRCxJQUFJQTtJQUVKQyxPQUFPQyxPQUFPLEdBQUdGLGtCQUFrQixBQUFDLENBQUE7UUFDbEMsTUFBTUE7WUFDSixrREFBa0Q7WUFDbEQsNENBQTRDO1lBQzVDLGFBQWE7WUFFYix1Q0FBdUM7WUFDdkNHLFlBQVlDLEtBQUssQ0FBRTtnQkFDakIsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1lBQ2Y7WUFFQSw2Q0FBNkM7WUFFN0NDLFFBQVE7Z0JBQ04saURBQWlEO2dCQUNqRCwyREFBMkQ7Z0JBQzNELDZEQUE2RDtnQkFDN0Qsb0JBQW9CO2dCQUNwQixPQUFPLElBQUksQ0FBQ0QsS0FBSyxHQUFHO1lBQ3RCO1lBRUEsY0FBYztZQUNkRSxhQUFhQyxJQUFJLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNHLEtBQUs7WUFDekI7WUFFQUMsYUFBYUMsSUFBSSxFQUFFO2dCQUNqQixJQUFJQztnQkFDSkEsVUFBVSxJQUFJLENBQUNOLEtBQUssQ0FBQ0ssS0FBS0UsUUFBUSxDQUFDO2dCQUNuQyxJQUFJLENBQUNQLEtBQUssQ0FBQ0ssS0FBS0UsUUFBUSxDQUFDLEdBQUdGO2dCQUM1QixPQUFPQyxXQUFXO1lBQ3BCO1lBRUFFLGdCQUFnQkwsSUFBSSxFQUFFO2dCQUNwQixJQUFJRztnQkFDSkEsVUFBVSxJQUFJLENBQUNOLEtBQUssQ0FBQ0csS0FBSztnQkFDMUIsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0csS0FBSztnQkFDdkIsT0FBT0csV0FBVztZQUNwQjtZQUVBRyxLQUFLQyxLQUFLLEVBQUU7Z0JBQ1YsT0FBTyxJQUFJLENBQUNWLEtBQUssQ0FBQ1csT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ1osS0FBSyxDQUFDLENBQUNVLE1BQU0sQ0FBQyxJQUFJO1lBQ3ZEO1lBRUEsZ0RBQWdEO1lBQ2hERyxlQUFlQyxZQUFZLEVBQUVDLFNBQVMsRUFBRTtnQkFDdEMsTUFBTSxJQUFJQyxNQUFNO1lBQ2xCO1lBRUFDLGVBQWVaLElBQUksRUFBRTtnQkFDbkIsTUFBTSxJQUFJVyxNQUFNO1lBQ2xCO1lBRUFFLGtCQUFrQkosWUFBWSxFQUFFQyxTQUFTLEVBQUU7Z0JBQ3pDLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtRQUVGOztRQUdBLGNBQWM7UUFDZEwsT0FBT1EsY0FBYyxDQUFDdkIsZ0JBQWdCd0IsU0FBUyxFQUFFLFVBQVU7WUFDekRDLEtBQUs7Z0JBQ0gsT0FBT1YsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ1osS0FBSyxFQUFFc0IsTUFBTSxJQUFJO1lBQzNDO1FBQ0Y7UUFFQSxPQUFPMUI7SUFFVCxDQUFBLEVBQUcyQixJQUFJLENBQUMsSUFBSTtBQUVkLENBQUEsRUFBR0EsSUFBSSxDQUFDLElBQUkiLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5hbWVkTm9kZU1hcC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js":
/*!*************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLNode.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, hasProp = {}.hasOwnProperty, splice = [].splice;\n    ({ isObject, isFunction, isEmpty, getValue } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    XMLElement = null;\n    XMLCData = null;\n    XMLComment = null;\n    XMLDeclaration = null;\n    XMLDocType = null;\n    XMLRaw = null;\n    XMLText = null;\n    XMLProcessingInstruction = null;\n    XMLDummy = null;\n    NodeType = null;\n    XMLNodeList = null;\n    XMLNamedNodeMap = null;\n    DocumentPosition = null;\n    // Represents a generic XMl element\n    module.exports = XMLNode = (function() {\n        class XMLNode {\n            // Initializes a new instance of `XMLNode`\n            // `parent` the parent node\n            constructor(parent1){\n                this.parent = parent1;\n                if (this.parent) {\n                    this.options = this.parent.options;\n                    this.stringify = this.parent.stringify;\n                }\n                this.value = null;\n                this.children = [];\n                this.baseURI = null;\n                // first execution, load dependencies that are otherwise\n                // circular (so we can't load them at the top)\n                if (!XMLElement) {\n                    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLElement.js\");\n                    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLCData.js\");\n                    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLComment.js\");\n                    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n                    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDocType.js\");\n                    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLRaw.js\");\n                    XMLText = __webpack_require__(/*! ./XMLText */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLText.js\");\n                    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n                    XMLDummy = __webpack_require__(/*! ./XMLDummy */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDummy.js\");\n                    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n                    XMLNodeList = __webpack_require__(/*! ./XMLNodeList */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNodeList.js\");\n                    XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n                    DocumentPosition = __webpack_require__(/*! ./DocumentPosition */ \"(rsc)/../node_modules/xmlbuilder/lib/DocumentPosition.js\");\n                }\n            }\n            // Sets the parent node of this node and its children recursively\n            // `parent` the parent node\n            setParent(parent) {\n                var child, j, len, ref1, results;\n                this.parent = parent;\n                if (parent) {\n                    this.options = parent.options;\n                    this.stringify = parent.stringify;\n                }\n                ref1 = this.children;\n                results = [];\n                for(j = 0, len = ref1.length; j < len; j++){\n                    child = ref1[j];\n                    results.push(child.setParent(this));\n                }\n                return results;\n            }\n            // Creates a child element node\n            // `name` node name or an object describing the XML tree\n            // `attributes` an object containing name/value pairs of attributes\n            // `text` element text\n            element(name, attributes, text) {\n                var childNode, item, j, k, key, lastChild, len, len1, val;\n                lastChild = null;\n                if (attributes === null && text == null) {\n                    [attributes, text] = [\n                        {},\n                        null\n                    ];\n                }\n                if (attributes == null) {\n                    attributes = {};\n                }\n                attributes = getValue(attributes);\n                // swap argument order: text <-> attributes\n                if (!isObject(attributes)) {\n                    [text, attributes] = [\n                        attributes,\n                        text\n                    ];\n                }\n                if (name != null) {\n                    name = getValue(name);\n                }\n                // expand if array\n                if (Array.isArray(name)) {\n                    for(j = 0, len = name.length; j < len; j++){\n                        item = name[j];\n                        lastChild = this.element(item);\n                    }\n                // evaluate if function\n                } else if (isFunction(name)) {\n                    lastChild = this.element(name.apply());\n                // expand if object\n                } else if (isObject(name)) {\n                    for(key in name){\n                        if (!hasProp.call(name, key)) continue;\n                        val = name[key];\n                        if (isFunction(val)) {\n                            // evaluate if function\n                            val = val.apply();\n                        }\n                        // assign attributes\n                        if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n                            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n                        // skip empty arrays\n                        } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n                            lastChild = this.dummy();\n                        // empty objects produce one node\n                        } else if (isObject(val) && isEmpty(val)) {\n                            lastChild = this.element(key);\n                        // skip null and undefined nodes\n                        } else if (!this.options.keepNullNodes && val == null) {\n                            lastChild = this.dummy();\n                        // expand list by creating child nodes\n                        } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n                            for(k = 0, len1 = val.length; k < len1; k++){\n                                item = val[k];\n                                childNode = {};\n                                childNode[key] = item;\n                                lastChild = this.element(childNode);\n                            }\n                        // expand child nodes under parent\n                        } else if (isObject(val)) {\n                            // if the key is #text expand child nodes under this node to support mixed content\n                            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n                                lastChild = this.element(val);\n                            } else {\n                                lastChild = this.element(key);\n                                lastChild.element(val);\n                            }\n                        } else {\n                            // text node\n                            lastChild = this.element(key, val);\n                        }\n                    }\n                // skip null nodes\n                } else if (!this.options.keepNullNodes && text === null) {\n                    lastChild = this.dummy();\n                } else {\n                    // text node\n                    if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n                        lastChild = this.text(text);\n                    // cdata node\n                    } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n                        lastChild = this.cdata(text);\n                    // comment node\n                    } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n                        lastChild = this.comment(text);\n                    // raw text node\n                    } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n                        lastChild = this.raw(text);\n                    // processing instruction\n                    } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n                        lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n                    } else {\n                        // element node\n                        lastChild = this.node(name, attributes, text);\n                    }\n                }\n                if (lastChild == null) {\n                    throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n                }\n                return lastChild;\n            }\n            // Creates a child element node before the current node\n            // `name` node name or an object describing the XML tree\n            // `attributes` an object containing name/value pairs of attributes\n            // `text` element text\n            insertBefore(name, attributes, text) {\n                var child, i, newChild, refChild, removed;\n                // DOM level 1\n                // insertBefore(newChild, refChild) inserts the child node newChild before refChild\n                if (name != null ? name.type : void 0) {\n                    newChild = name;\n                    refChild = attributes;\n                    newChild.setParent(this);\n                    if (refChild) {\n                        // temporarily remove children starting *with* refChild\n                        i = children.indexOf(refChild);\n                        removed = children.splice(i);\n                        // add the new child\n                        children.push(newChild);\n                        // add back removed children after new child\n                        Array.prototype.push.apply(children, removed);\n                    } else {\n                        children.push(newChild);\n                    }\n                    return newChild;\n                } else {\n                    if (this.isRoot) {\n                        throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n                    }\n                    // temporarily remove children starting *with* this\n                    i = this.parent.children.indexOf(this);\n                    removed = this.parent.children.splice(i);\n                    // add the new child\n                    child = this.parent.element(name, attributes, text);\n                    // add back removed children after new child\n                    Array.prototype.push.apply(this.parent.children, removed);\n                    return child;\n                }\n            }\n            // Creates a child element node after the current node\n            // `name` node name or an object describing the XML tree\n            // `attributes` an object containing name/value pairs of attributes\n            // `text` element text\n            insertAfter(name, attributes, text) {\n                var child, i, removed;\n                if (this.isRoot) {\n                    throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n                }\n                // temporarily remove children starting *after* this\n                i = this.parent.children.indexOf(this);\n                removed = this.parent.children.splice(i + 1);\n                // add the new child\n                child = this.parent.element(name, attributes, text);\n                // add back removed children after new child\n                Array.prototype.push.apply(this.parent.children, removed);\n                return child;\n            }\n            // Deletes a child element node\n            remove() {\n                var i, ref1;\n                if (this.isRoot) {\n                    throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n                }\n                i = this.parent.children.indexOf(this);\n                splice.apply(this.parent.children, [\n                    i,\n                    i - i + 1\n                ].concat(ref1 = [])), ref1;\n                return this.parent;\n            }\n            // Creates a node\n            // `name` name of the node\n            // `attributes` an object containing name/value pairs of attributes\n            // `text` element text\n            node(name, attributes, text) {\n                var child;\n                if (name != null) {\n                    name = getValue(name);\n                }\n                attributes || (attributes = {});\n                attributes = getValue(attributes);\n                // swap argument order: text <-> attributes\n                if (!isObject(attributes)) {\n                    [text, attributes] = [\n                        attributes,\n                        text\n                    ];\n                }\n                child = new XMLElement(this, name, attributes);\n                if (text != null) {\n                    child.text(text);\n                }\n                this.children.push(child);\n                return child;\n            }\n            // Creates a text node\n            // `value` element text\n            text(value) {\n                var child;\n                if (isObject(value)) {\n                    this.element(value);\n                }\n                child = new XMLText(this, value);\n                this.children.push(child);\n                return this;\n            }\n            // Creates a CDATA node\n            // `value` element text without CDATA delimiters\n            cdata(value) {\n                var child;\n                child = new XMLCData(this, value);\n                this.children.push(child);\n                return this;\n            }\n            // Creates a comment node\n            // `value` comment text\n            comment(value) {\n                var child;\n                child = new XMLComment(this, value);\n                this.children.push(child);\n                return this;\n            }\n            // Creates a comment node before the current node\n            // `value` comment text\n            commentBefore(value) {\n                var child, i, removed;\n                // temporarily remove children starting *with* this\n                i = this.parent.children.indexOf(this);\n                removed = this.parent.children.splice(i);\n                // add the new child\n                child = this.parent.comment(value);\n                // add back removed children after new child\n                Array.prototype.push.apply(this.parent.children, removed);\n                return this;\n            }\n            // Creates a comment node after the current node\n            // `value` comment text\n            commentAfter(value) {\n                var child, i, removed;\n                // temporarily remove children starting *after* this\n                i = this.parent.children.indexOf(this);\n                removed = this.parent.children.splice(i + 1);\n                // add the new child\n                child = this.parent.comment(value);\n                // add back removed children after new child\n                Array.prototype.push.apply(this.parent.children, removed);\n                return this;\n            }\n            // Adds unescaped raw text\n            // `value` text\n            raw(value) {\n                var child;\n                child = new XMLRaw(this, value);\n                this.children.push(child);\n                return this;\n            }\n            // Adds a dummy node\n            dummy() {\n                var child;\n                child = new XMLDummy(this);\n                // Normally when a new node is created it is added to the child node collection.\n                // However, dummy nodes are never added to the XML tree. They are created while\n                // converting JS objects to XML nodes in order not to break the recursive function\n                // chain. They can be thought of as invisible nodes. They can be traversed through\n                // by using prev(), next(), up(), etc. functions but they do not exists in the tree.\n                // @children.push child\n                return child;\n            }\n            // Adds a processing instruction\n            // `target` instruction target\n            // `value` instruction value\n            instruction(target, value) {\n                var insTarget, insValue, instruction, j, len;\n                if (target != null) {\n                    target = getValue(target);\n                }\n                if (value != null) {\n                    value = getValue(value);\n                }\n                if (Array.isArray(target)) {\n                    for(j = 0, len = target.length; j < len; j++){\n                        insTarget = target[j];\n                        this.instruction(insTarget);\n                    }\n                } else if (isObject(target)) {\n                    for(insTarget in target){\n                        if (!hasProp.call(target, insTarget)) continue;\n                        insValue = target[insTarget];\n                        this.instruction(insTarget, insValue);\n                    }\n                } else {\n                    if (isFunction(value)) {\n                        value = value.apply();\n                    }\n                    instruction = new XMLProcessingInstruction(this, target, value);\n                    this.children.push(instruction);\n                }\n                return this;\n            }\n            // Creates a processing instruction node before the current node\n            // `target` instruction target\n            // `value` instruction value\n            instructionBefore(target, value) {\n                var child, i, removed;\n                // temporarily remove children starting *with* this\n                i = this.parent.children.indexOf(this);\n                removed = this.parent.children.splice(i);\n                // add the new child\n                child = this.parent.instruction(target, value);\n                // add back removed children after new child\n                Array.prototype.push.apply(this.parent.children, removed);\n                return this;\n            }\n            // Creates a processing instruction node after the current node\n            // `target` instruction target\n            // `value` instruction value\n            instructionAfter(target, value) {\n                var child, i, removed;\n                // temporarily remove children starting *after* this\n                i = this.parent.children.indexOf(this);\n                removed = this.parent.children.splice(i + 1);\n                // add the new child\n                child = this.parent.instruction(target, value);\n                // add back removed children after new child\n                Array.prototype.push.apply(this.parent.children, removed);\n                return this;\n            }\n            // Creates the xml declaration\n            // `version` A version number string, e.g. 1.0\n            // `encoding` Encoding declaration, e.g. UTF-8\n            // `standalone` standalone document declaration: true or false\n            declaration(version, encoding, standalone) {\n                var doc, xmldec;\n                doc = this.document();\n                xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n                // Replace XML declaration if exists, otherwise insert at top\n                if (doc.children.length === 0) {\n                    doc.children.unshift(xmldec);\n                } else if (doc.children[0].type === NodeType.Declaration) {\n                    doc.children[0] = xmldec;\n                } else {\n                    doc.children.unshift(xmldec);\n                }\n                return doc.root() || doc;\n            }\n            // Creates the document type declaration\n            // `pubID` the public identifier of the external subset\n            // `sysID` the system identifier of the external subset\n            dtd(pubID, sysID) {\n                var child, doc, doctype, i, j, k, len, len1, ref1, ref2;\n                doc = this.document();\n                doctype = new XMLDocType(doc, pubID, sysID);\n                ref1 = doc.children;\n                // Replace DTD if exists\n                for(i = j = 0, len = ref1.length; j < len; i = ++j){\n                    child = ref1[i];\n                    if (child.type === NodeType.DocType) {\n                        doc.children[i] = doctype;\n                        return doctype;\n                    }\n                }\n                ref2 = doc.children;\n                // insert before root node if the root node exists\n                for(i = k = 0, len1 = ref2.length; k < len1; i = ++k){\n                    child = ref2[i];\n                    if (child.isRoot) {\n                        doc.children.splice(i, 0, doctype);\n                        return doctype;\n                    }\n                }\n                // otherwise append to end\n                doc.children.push(doctype);\n                return doctype;\n            }\n            // Gets the parent node\n            up() {\n                if (this.isRoot) {\n                    throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n                }\n                return this.parent;\n            }\n            // Gets the root node\n            root() {\n                var node;\n                node = this;\n                while(node){\n                    if (node.type === NodeType.Document) {\n                        return node.rootObject;\n                    } else if (node.isRoot) {\n                        return node;\n                    } else {\n                        node = node.parent;\n                    }\n                }\n            }\n            // Gets the node representing the XML document\n            document() {\n                var node;\n                node = this;\n                while(node){\n                    if (node.type === NodeType.Document) {\n                        return node;\n                    } else {\n                        node = node.parent;\n                    }\n                }\n            }\n            // Ends the document and converts string\n            end(options) {\n                return this.document().end(options);\n            }\n            // Gets the previous node\n            prev() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                if (i < 1) {\n                    throw new Error(\"Already at the first node. \" + this.debugInfo());\n                }\n                return this.parent.children[i - 1];\n            }\n            // Gets the next node\n            next() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                if (i === -1 || i === this.parent.children.length - 1) {\n                    throw new Error(\"Already at the last node. \" + this.debugInfo());\n                }\n                return this.parent.children[i + 1];\n            }\n            // Imports cloned root from another XML document\n            // `doc` the XML document to insert nodes from\n            importDocument(doc) {\n                var child, clonedRoot, j, len, ref1;\n                clonedRoot = doc.root().clone();\n                clonedRoot.parent = this;\n                clonedRoot.isRoot = false;\n                this.children.push(clonedRoot);\n                // set properties if imported element becomes the root node\n                if (this.type === NodeType.Document) {\n                    clonedRoot.isRoot = true;\n                    clonedRoot.documentObject = this;\n                    this.rootObject = clonedRoot;\n                    // set dtd name\n                    if (this.children) {\n                        ref1 = this.children;\n                        for(j = 0, len = ref1.length; j < len; j++){\n                            child = ref1[j];\n                            if (child.type === NodeType.DocType) {\n                                child.name = clonedRoot.name;\n                                break;\n                            }\n                        }\n                    }\n                }\n                return this;\n            }\n            // Returns debug string for this node\n            debugInfo(name) {\n                var ref1, ref2;\n                name = name || this.name;\n                if (name == null && !((ref1 = this.parent) != null ? ref1.name : void 0)) {\n                    return \"\";\n                } else if (name == null) {\n                    return \"parent: <\" + this.parent.name + \">\";\n                } else if (!((ref2 = this.parent) != null ? ref2.name : void 0)) {\n                    return \"node: <\" + name + \">\";\n                } else {\n                    return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n                }\n            }\n            // Aliases\n            ele(name, attributes, text) {\n                return this.element(name, attributes, text);\n            }\n            nod(name, attributes, text) {\n                return this.node(name, attributes, text);\n            }\n            txt(value) {\n                return this.text(value);\n            }\n            dat(value) {\n                return this.cdata(value);\n            }\n            com(value) {\n                return this.comment(value);\n            }\n            ins(target, value) {\n                return this.instruction(target, value);\n            }\n            doc() {\n                return this.document();\n            }\n            dec(version, encoding, standalone) {\n                return this.declaration(version, encoding, standalone);\n            }\n            e(name, attributes, text) {\n                return this.element(name, attributes, text);\n            }\n            n(name, attributes, text) {\n                return this.node(name, attributes, text);\n            }\n            t(value) {\n                return this.text(value);\n            }\n            d(value) {\n                return this.cdata(value);\n            }\n            c(value) {\n                return this.comment(value);\n            }\n            r(value) {\n                return this.raw(value);\n            }\n            i(target, value) {\n                return this.instruction(target, value);\n            }\n            u() {\n                return this.up();\n            }\n            // can be deprecated in a future release\n            importXMLBuilder(doc) {\n                return this.importDocument(doc);\n            }\n            // Adds or modifies an attribute.\n            // `name` attribute name\n            // `value` attribute value\n            attribute(name, value) {\n                throw new Error(\"attribute() applies to element nodes only.\");\n            }\n            att(name, value) {\n                return this.attribute(name, value);\n            }\n            a(name, value) {\n                return this.attribute(name, value);\n            }\n            // Removes an attribute\n            // `name` attribute name\n            removeAttribute(name) {\n                throw new Error(\"attribute() applies to element nodes only.\");\n            }\n            // DOM level 1 functions to be implemented later\n            replaceChild(newChild, oldChild) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            removeChild(oldChild) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            appendChild(newChild) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            hasChildNodes() {\n                return this.children.length !== 0;\n            }\n            cloneNode(deep) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            normalize() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM level 2\n            isSupported(feature, version) {\n                return true;\n            }\n            hasAttributes() {\n                return this.attribs.length !== 0;\n            }\n            // DOM level 3 functions to be implemented later\n            compareDocumentPosition(other) {\n                var ref, res;\n                ref = this;\n                if (ref === other) {\n                    return 0;\n                } else if (this.document() !== other.document()) {\n                    res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n                    if (Math.random() < 0.5) {\n                        res |= DocumentPosition.Preceding;\n                    } else {\n                        res |= DocumentPosition.Following;\n                    }\n                    return res;\n                } else if (ref.isAncestor(other)) {\n                    return DocumentPosition.Contains | DocumentPosition.Preceding;\n                } else if (ref.isDescendant(other)) {\n                    return DocumentPosition.Contains | DocumentPosition.Following;\n                } else if (ref.isPreceding(other)) {\n                    return DocumentPosition.Preceding;\n                } else {\n                    return DocumentPosition.Following;\n                }\n            }\n            isSameNode(other) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            lookupPrefix(namespaceURI) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            isDefaultNamespace(namespaceURI) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            lookupNamespaceURI(prefix) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            isEqualNode(node) {\n                var i, j, ref1;\n                if (node.nodeType !== this.nodeType) {\n                    return false;\n                }\n                if (node.children.length !== this.children.length) {\n                    return false;\n                }\n                for(i = j = 0, ref1 = this.children.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j){\n                    if (!this.children[i].isEqualNode(node.children[i])) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            getFeature(feature, version) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            setUserData(key, data, handler) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            getUserData(key) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // Returns true if other is an inclusive descendant of node,\n            // and false otherwise.\n            contains(other) {\n                if (!other) {\n                    return false;\n                }\n                return other === this || this.isDescendant(other);\n            }\n            // An object A is called a descendant of an object B, if either A is \n            // a child of B or A is a child of an object C that is a descendant of B.\n            isDescendant(node) {\n                var child, isDescendantChild, j, len, ref1;\n                ref1 = this.children;\n                for(j = 0, len = ref1.length; j < len; j++){\n                    child = ref1[j];\n                    if (node === child) {\n                        return true;\n                    }\n                    isDescendantChild = child.isDescendant(node);\n                    if (isDescendantChild) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            // An object A is called an ancestor of an object B if and only if\n            // B is a descendant of A.\n            isAncestor(node) {\n                return node.isDescendant(this);\n            }\n            // An object A is preceding an object B if A and B are in the \n            // same tree and A comes before B in tree order.\n            isPreceding(node) {\n                var nodePos, thisPos;\n                nodePos = this.treePosition(node);\n                thisPos = this.treePosition(this);\n                if (nodePos === -1 || thisPos === -1) {\n                    return false;\n                } else {\n                    return nodePos < thisPos;\n                }\n            }\n            // An object A is folllowing an object B if A and B are in the \n            // same tree and A comes after B in tree order.\n            isFollowing(node) {\n                var nodePos, thisPos;\n                nodePos = this.treePosition(node);\n                thisPos = this.treePosition(this);\n                if (nodePos === -1 || thisPos === -1) {\n                    return false;\n                } else {\n                    return nodePos > thisPos;\n                }\n            }\n            // Returns the preorder position of the given node in the tree, or -1\n            // if the node is not in the tree.\n            treePosition(node) {\n                var found, pos;\n                pos = 0;\n                found = false;\n                this.foreachTreeNode(this.document(), function(childNode) {\n                    pos++;\n                    if (!found && childNode === node) {\n                        return found = true;\n                    }\n                });\n                if (found) {\n                    return pos;\n                } else {\n                    return -1;\n                }\n            }\n            // Depth-first preorder traversal through the XML tree\n            foreachTreeNode(node, func) {\n                var child, j, len, ref1, res;\n                node || (node = this.document());\n                ref1 = node.children;\n                for(j = 0, len = ref1.length; j < len; j++){\n                    child = ref1[j];\n                    if (res = func(child)) {\n                        return res;\n                    } else {\n                        res = this.foreachTreeNode(child, func);\n                        if (res) {\n                            return res;\n                        }\n                    }\n                }\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLNode.prototype, \"nodeName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nodeType\", {\n            get: function() {\n                return this.type;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nodeValue\", {\n            get: function() {\n                return this.value;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"parentNode\", {\n            get: function() {\n                return this.parent;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"childNodes\", {\n            get: function() {\n                if (!this.childNodeList || !this.childNodeList.nodes) {\n                    this.childNodeList = new XMLNodeList(this.children);\n                }\n                return this.childNodeList;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"firstChild\", {\n            get: function() {\n                return this.children[0] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"lastChild\", {\n            get: function() {\n                return this.children[this.children.length - 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"previousSibling\", {\n            get: function() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                return this.parent.children[i - 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nextSibling\", {\n            get: function() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                return this.parent.children[i + 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"ownerDocument\", {\n            get: function() {\n                return this.document() || null;\n            }\n        });\n        // DOM level 3\n        Object.defineProperty(XMLNode.prototype, \"textContent\", {\n            get: function() {\n                var child, j, len, ref1, str;\n                if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n                    str = \"\";\n                    ref1 = this.children;\n                    for(j = 0, len = ref1.length; j < len; j++){\n                        child = ref1[j];\n                        if (child.textContent) {\n                            str += child.textContent;\n                        }\n                    }\n                    return str;\n                } else {\n                    return null;\n                }\n            },\n            set: function(value) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        return XMLNode;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLNodeList.js":
/*!*****************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLNodeList.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    // Represents a list of nodes\n    var XMLNodeList;\n    module.exports = XMLNodeList = (function() {\n        class XMLNodeList {\n            // Initializes a new instance of `XMLNodeList`\n            // This is just a wrapper around an ordinary\n            // JS array.\n            // `nodes` the array containing nodes.\n            constructor(nodes){\n                this.nodes = nodes;\n            }\n            // Creates and returns a deep clone of `this`\n            clone() {\n                // this class should not be cloned since it wraps\n                // around a given array. The calling function should check\n                // whether the wrapped array is null and supply a new array\n                // (from the clone).\n                return this.nodes = null;\n            }\n            // DOM Level 1\n            item(index) {\n                return this.nodes[index] || null;\n            }\n        }\n        ;\n        // DOM level 1\n        Object.defineProperty(XMLNodeList.prototype, \"length\", {\n            get: function() {\n                return this.nodes.length || 0;\n            }\n        });\n        return XMLNodeList;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5vZGVMaXN0LmpzPzhkZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICAvLyBSZXByZXNlbnRzIGEgbGlzdCBvZiBub2Rlc1xuICB2YXIgWE1MTm9kZUxpc3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxOb2RlTGlzdCA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBYTUxOb2RlTGlzdCB7XG4gICAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MTm9kZUxpc3RgXG4gICAgICAvLyBUaGlzIGlzIGp1c3QgYSB3cmFwcGVyIGFyb3VuZCBhbiBvcmRpbmFyeVxuICAgICAgLy8gSlMgYXJyYXkuXG5cbiAgICAgIC8vIGBub2Rlc2AgdGhlIGFycmF5IGNvbnRhaW5pbmcgbm9kZXMuXG4gICAgICBjb25zdHJ1Y3Rvcihub2Rlcykge1xuICAgICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBkZWVwIGNsb25lIG9mIGB0aGlzYFxuXG4gICAgICBjbG9uZSgpIHtcbiAgICAgICAgLy8gdGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGNsb25lZCBzaW5jZSBpdCB3cmFwc1xuICAgICAgICAvLyBhcm91bmQgYSBnaXZlbiBhcnJheS4gVGhlIGNhbGxpbmcgZnVuY3Rpb24gc2hvdWxkIGNoZWNrXG4gICAgICAgIC8vIHdoZXRoZXIgdGhlIHdyYXBwZWQgYXJyYXkgaXMgbnVsbCBhbmQgc3VwcGx5IGEgbmV3IGFycmF5XG4gICAgICAgIC8vIChmcm9tIHRoZSBjbG9uZSkuXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gRE9NIExldmVsIDFcbiAgICAgIGl0ZW0oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgLy8gRE9NIGxldmVsIDFcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZUxpc3QucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gWE1MTm9kZUxpc3Q7XG5cbiAgfSkuY2FsbCh0aGlzKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxOb2RlTGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsIm5vZGVzIiwiY2xvbmUiLCJpdGVtIiwiaW5kZXgiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsImxlbmd0aCIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNqQyxDQUFBO0lBQ0MsNkJBQTZCO0lBQzdCLElBQUlBO0lBRUpDLE9BQU9DLE9BQU8sR0FBR0YsY0FBYyxBQUFDLENBQUE7UUFDOUIsTUFBTUE7WUFDSiw4Q0FBOEM7WUFDOUMsNENBQTRDO1lBQzVDLFlBQVk7WUFFWixzQ0FBc0M7WUFDdENHLFlBQVlDLEtBQUssQ0FBRTtnQkFDakIsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1lBQ2Y7WUFFQSw2Q0FBNkM7WUFFN0NDLFFBQVE7Z0JBQ04saURBQWlEO2dCQUNqRCwwREFBMEQ7Z0JBQzFELDJEQUEyRDtnQkFDM0Qsb0JBQW9CO2dCQUNwQixPQUFPLElBQUksQ0FBQ0QsS0FBSyxHQUFHO1lBQ3RCO1lBRUEsY0FBYztZQUNkRSxLQUFLQyxLQUFLLEVBQUU7Z0JBQ1YsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0csTUFBTSxJQUFJO1lBQzlCO1FBRUY7O1FBRUEsY0FBYztRQUNkQyxPQUFPQyxjQUFjLENBQUNULFlBQVlVLFNBQVMsRUFBRSxVQUFVO1lBQ3JEQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDUCxLQUFLLENBQUNRLE1BQU0sSUFBSTtZQUM5QjtRQUNGO1FBRUEsT0FBT1o7SUFFVCxDQUFBLEVBQUdhLElBQUksQ0FBQyxJQUFJO0FBRWQsQ0FBQSxFQUFHQSxJQUFJLENBQUMsSUFBSSIsImZpbGUiOiIocnNjKS8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MTm9kZUxpc3QuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLNodeList.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js":
/*!******************************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLCharacterData, XMLProcessingInstruction;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    // Represents a processing instruction\n    module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n        // Initializes a new instance of `XMLProcessingInstruction`\n        // `parent` the parent node\n        // `target` instruction target\n        // `value` instruction value\n        constructor(parent, target, value){\n            super(parent);\n            if (target == null) {\n                throw new Error(\"Missing instruction target. \" + this.debugInfo());\n            }\n            this.type = NodeType.ProcessingInstruction;\n            this.target = this.stringify.insTarget(target);\n            this.name = this.target;\n            if (value) {\n                this.value = this.stringify.insValue(value);\n            }\n        }\n        // Creates and returns a deep clone of `this`\n        clone() {\n            return Object.create(this);\n        }\n        // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n        }\n        isEqualNode(node) {\n            if (!super.isEqualNode(node)) {\n                return false;\n            }\n            if (node.target !== this.target) {\n                return false;\n            }\n            return true;\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakM7SUFDQyxJQUFJQSxVQUFVQyxrQkFBa0JDO0lBRWhDRixXQUFXRyxtQkFBT0EsQ0FBQztJQUVuQkYsbUJBQW1CRSxtQkFBT0EsQ0FBQztJQUUzQixzQ0FBc0M7SUFDdENDLE9BQU9DLE9BQU8sR0FBR0gsMkJBQTJCLE1BQU1BLGlDQUFpQ0Q7UUFDakYsMkRBQTJEO1FBRTNELDJCQUEyQjtRQUMzQiw4QkFBOEI7UUFDOUIsNEJBQTRCO1FBQzVCSyxZQUFZQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxDQUFFO1lBQ2pDLEtBQUssQ0FBQ0Y7WUFDTixJQUFJQyxVQUFVLE1BQU07Z0JBQ2xCLE1BQU0sSUFBSUUsTUFBTSxpQ0FBaUMsSUFBSSxDQUFDQyxTQUFTO1lBQ2pFO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdaLFNBQVNhLHFCQUFxQjtZQUMxQyxJQUFJLENBQUNMLE1BQU0sR0FBRyxJQUFJLENBQUNNLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDUDtZQUN2QyxJQUFJLENBQUNRLElBQUksR0FBRyxJQUFJLENBQUNSLE1BQU07WUFDdkIsSUFBSUMsT0FBTztnQkFDVCxJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNLLFNBQVMsQ0FBQ0csUUFBUSxDQUFDUjtZQUN2QztRQUNGO1FBRUEsNkNBQTZDO1FBQzdDUyxRQUFRO1lBQ04sT0FBT0MsT0FBT0MsTUFBTSxDQUFDLElBQUk7UUFDM0I7UUFFQSxzQ0FBc0M7UUFFdEMsNENBQTRDO1FBQzVDLGdEQUFnRDtRQUNoRCwrRUFBK0U7UUFDL0Usc0RBQXNEO1FBQ3REQyxTQUFTQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSDtRQUMzRjtRQUVBSSxZQUFZQyxJQUFJLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQ0QsWUFBWUMsT0FBTztnQkFDNUIsT0FBTztZQUNUO1lBQ0EsSUFBSUEsS0FBS25CLE1BQU0sS0FBSyxJQUFJLENBQUNBLE1BQU0sRUFBRTtnQkFDL0IsT0FBTztZQUNUO1lBQ0EsT0FBTztRQUNUO0lBRUY7QUFFRixHQUFHb0IsSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcz8xNjM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSBwcm9jZXNzaW5nIGluc3RydWN0aW9uXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gY2xhc3MgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIGV4dGVuZHMgWE1MQ2hhcmFjdGVyRGF0YSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbmBcblxuICAgIC8vIGBwYXJlbnRgIHRoZSBwYXJlbnQgbm9kZVxuICAgIC8vIGB0YXJnZXRgIGluc3RydWN0aW9uIHRhcmdldFxuICAgIC8vIGB2YWx1ZWAgaW5zdHJ1Y3Rpb24gdmFsdWVcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHN1cGVyKHBhcmVudCk7XG4gICAgICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBpbnN0cnVjdGlvbiB0YXJnZXQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG4gICAgICB0aGlzLnRhcmdldCA9IHRoaXMuc3RyaW5naWZ5Lmluc1RhcmdldCh0YXJnZXQpO1xuICAgICAgdGhpcy5uYW1lID0gdGhpcy50YXJnZXQ7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5Lmluc1ZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcbiAgICBjbG9uZSgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICBpc0VxdWFsTm9kZShub2RlKSB7XG4gICAgICBpZiAoIXN1cGVyLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnRhcmdldCAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxDaGFyYWN0ZXJEYXRhIiwiWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsInRhcmdldCIsInZhbHVlIiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJ0eXBlIiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwic3RyaW5naWZ5IiwiaW5zVGFyZ2V0IiwibmFtZSIsImluc1ZhbHVlIiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJwcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJmaWx0ZXJPcHRpb25zIiwiaXNFcXVhbE5vZGUiLCJub2RlIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLRaw.js":
/*!************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLRaw.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLNode, XMLRaw;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLNode.js\");\n    // Represents a  raw node\n    module.exports = XMLRaw = class XMLRaw extends XMLNode {\n        // Initializes a new instance of `XMLRaw`\n        // `text` raw text\n        constructor(parent, text){\n            super(parent);\n            if (text == null) {\n                throw new Error(\"Missing raw text. \" + this.debugInfo());\n            }\n            this.type = NodeType.Raw;\n            this.value = this.stringify.raw(text);\n        }\n        // Creates and returns a deep clone of `this`\n        clone() {\n            return Object.create(this);\n        }\n        // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        toString(options) {\n            return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFJhdy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakM7SUFDQyxJQUFJQSxVQUFVQyxTQUFTQztJQUV2QkYsV0FBV0csbUJBQU9BLENBQUM7SUFFbkJGLFVBQVVFLG1CQUFPQSxDQUFDO0lBRWxCLHlCQUF5QjtJQUN6QkMsT0FBT0MsT0FBTyxHQUFHSCxTQUFTLE1BQU1BLGVBQWVEO1FBQzdDLHlDQUF5QztRQUV6QyxrQkFBa0I7UUFDbEJLLFlBQVlDLE1BQU0sRUFBRUMsSUFBSSxDQUFFO1lBQ3hCLEtBQUssQ0FBQ0Q7WUFDTixJQUFJQyxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSx1QkFBdUIsSUFBSSxDQUFDQyxTQUFTO1lBQ3ZEO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdYLFNBQVNZLEdBQUc7WUFDeEIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNDLEdBQUcsQ0FBQ1A7UUFDbEM7UUFFQSw2Q0FBNkM7UUFDN0NRLFFBQVE7WUFDTixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBLHNDQUFzQztRQUV0Qyw0Q0FBNEM7UUFDNUMsZ0RBQWdEO1FBQ2hELCtFQUErRTtRQUMvRSxzREFBc0Q7UUFDdERDLFNBQVNDLE9BQU8sRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNOLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDSyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDRjtRQUN6RTtJQUVGO0FBRUYsR0FBR0csSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21lYm9va3VzLWJhY2tlbmQvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFJhdy5qcz83ZmNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxOb2RlLCBYTUxSYXc7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSAgcmF3IG5vZGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxSYXcgPSBjbGFzcyBYTUxSYXcgZXh0ZW5kcyBYTUxOb2RlIHtcbiAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MUmF3YFxuXG4gICAgLy8gYHRleHRgIHJhdyB0ZXh0XG4gICAgY29uc3RydWN0b3IocGFyZW50LCB0ZXh0KSB7XG4gICAgICBzdXBlcihwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJhdyB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuUmF3O1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LnJhdyh0ZXh0KTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcbiAgICBjbG9uZSgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5yYXcodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTE5vZGUiLCJYTUxSYXciLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwidGV4dCIsIkVycm9yIiwiZGVidWdJbmZvIiwidHlwZSIsIlJhdyIsInZhbHVlIiwic3RyaW5naWZ5IiwicmF3IiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJmaWx0ZXJPcHRpb25zIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLRaw.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLStreamWriter.js":
/*!*********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLStreamWriter.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, WriterState, XMLStreamWriter, XMLWriterBase, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(rsc)/../node_modules/xmlbuilder/lib/WriterState.js\");\n    // Prints XML nodes to a stream\n    module.exports = XMLStreamWriter = class XMLStreamWriter extends XMLWriterBase {\n        // Initializes a new instance of `XMLStreamWriter`\n        // `stream` output stream\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation string\n        // `options.newline` newline sequence\n        // `options.offset` a fixed number of indentations to add to every line\n        // `options.allowEmpty` do not self close empty element tags\n        // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n        // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n        constructor(stream, options){\n            super(options);\n            this.stream = stream;\n        }\n        endline(node, options, level) {\n            if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n                return \"\";\n            } else {\n                return super.endline(node, options, level);\n            }\n        }\n        document(doc, options) {\n            var child, i, j, k, len1, len2, ref, ref1, results;\n            ref = doc.children;\n            // set a flag so that we don't insert a newline after the last root level node \n            for(i = j = 0, len1 = ref.length; j < len1; i = ++j){\n                child = ref[i];\n                child.isLastRootNode = i === doc.children.length - 1;\n            }\n            options = this.filterOptions(options);\n            ref1 = doc.children;\n            results = [];\n            for(k = 0, len2 = ref1.length; k < len2; k++){\n                child = ref1[k];\n                results.push(this.writeChildNode(child, options, 0));\n            }\n            return results;\n        }\n        cdata(node, options, level) {\n            return this.stream.write(super.cdata(node, options, level));\n        }\n        comment(node, options, level) {\n            return this.stream.write(super.comment(node, options, level));\n        }\n        declaration(node, options, level) {\n            return this.stream.write(super.declaration(node, options, level));\n        }\n        docType(node, options, level) {\n            var child, j, len1, ref;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            this.stream.write(this.indent(node, options, level));\n            this.stream.write(\"<!DOCTYPE \" + node.root().name);\n            // external identifier\n            if (node.pubID && node.sysID) {\n                this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n            } else if (node.sysID) {\n                this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n            }\n            // internal subset\n            if (node.children.length > 0) {\n                this.stream.write(\" [\");\n                this.stream.write(this.endline(node, options, level));\n                options.state = WriterState.InsideTag;\n                ref = node.children;\n                for(j = 0, len1 = ref.length; j < len1; j++){\n                    child = ref[j];\n                    this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                this.stream.write(\"]\");\n            }\n            // close tag\n            options.state = WriterState.CloseTag;\n            this.stream.write(options.spaceBeforeSlash + \">\");\n            this.stream.write(this.endline(node, options, level));\n            options.state = WriterState.None;\n            return this.closeNode(node, options, level);\n        }\n        element(node, options, level) {\n            var att, attLen, child, childNodeCount, firstChildNode, j, len, len1, name, prettySuppressed, r, ratt, ref, ref1, ref2, rline;\n            level || (level = 0);\n            // open tag\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<\" + node.name;\n            // attributes\n            if (options.pretty && options.width > 0) {\n                len = r.length;\n                ref = node.attribs;\n                for(name in ref){\n                    if (!hasProp.call(ref, name)) continue;\n                    att = ref[name];\n                    ratt = this.attribute(att, options, level);\n                    attLen = ratt.length;\n                    if (len + attLen > options.width) {\n                        rline = this.indent(node, options, level + 1) + ratt;\n                        r += this.endline(node, options, level) + rline;\n                        len = rline.length;\n                    } else {\n                        rline = \" \" + ratt;\n                        r += rline;\n                        len += rline.length;\n                    }\n                }\n            } else {\n                ref1 = node.attribs;\n                for(name in ref1){\n                    if (!hasProp.call(ref1, name)) continue;\n                    att = ref1[name];\n                    r += this.attribute(att, options, level);\n                }\n            }\n            this.stream.write(r);\n            childNodeCount = node.children.length;\n            firstChildNode = childNodeCount === 0 ? null : node.children[0];\n            if (childNodeCount === 0 || node.children.every(function(e) {\n                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === \"\";\n            })) {\n                // empty element\n                if (options.allowEmpty) {\n                    this.stream.write(\">\");\n                    options.state = WriterState.CloseTag;\n                    this.stream.write(\"</\" + node.name + \">\");\n                } else {\n                    options.state = WriterState.CloseTag;\n                    this.stream.write(options.spaceBeforeSlash + \"/>\");\n                }\n            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n                // do not indent text-only nodes\n                this.stream.write(\">\");\n                options.state = WriterState.InsideTag;\n                options.suppressPrettyCount++;\n                prettySuppressed = true;\n                this.writeChildNode(firstChildNode, options, level + 1);\n                options.suppressPrettyCount--;\n                prettySuppressed = false;\n                options.state = WriterState.CloseTag;\n                this.stream.write(\"</\" + node.name + \">\");\n            } else {\n                this.stream.write(\">\" + this.endline(node, options, level));\n                options.state = WriterState.InsideTag;\n                ref2 = node.children;\n                // inner tags\n                for(j = 0, len1 = ref2.length; j < len1; j++){\n                    child = ref2[j];\n                    this.writeChildNode(child, options, level + 1);\n                }\n                // close tag\n                options.state = WriterState.CloseTag;\n                this.stream.write(this.indent(node, options, level) + \"</\" + node.name + \">\");\n            }\n            this.stream.write(this.endline(node, options, level));\n            options.state = WriterState.None;\n            return this.closeNode(node, options, level);\n        }\n        processingInstruction(node, options, level) {\n            return this.stream.write(super.processingInstruction(node, options, level));\n        }\n        raw(node, options, level) {\n            return this.stream.write(super.raw(node, options, level));\n        }\n        text(node, options, level) {\n            return this.stream.write(super.text(node, options, level));\n        }\n        dtdAttList(node, options, level) {\n            return this.stream.write(super.dtdAttList(node, options, level));\n        }\n        dtdElement(node, options, level) {\n            return this.stream.write(super.dtdElement(node, options, level));\n        }\n        dtdEntity(node, options, level) {\n            return this.stream.write(super.dtdEntity(node, options, level));\n        }\n        dtdNotation(node, options, level) {\n            return this.stream.write(super.dtdNotation(node, options, level));\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLStreamWriter.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLStringWriter.js":
/*!*********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLStringWriter.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var XMLStringWriter, XMLWriterBase;\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    // Prints XML nodes as plain text\n    module.exports = XMLStringWriter = class XMLStringWriter extends XMLWriterBase {\n        // Initializes a new instance of `XMLStringWriter`\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation string\n        // `options.newline` newline sequence\n        // `options.offset` a fixed number of indentations to add to every line\n        // `options.allowEmpty` do not self close empty element tags\n        // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n        // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n        constructor(options){\n            super(options);\n        }\n        document(doc, options) {\n            var child, i, len, r, ref;\n            options = this.filterOptions(options);\n            r = \"\";\n            ref = doc.children;\n            for(i = 0, len = ref.length; i < len; i++){\n                child = ref[i];\n                r += this.writeChildNode(child, options, 0);\n            }\n            // remove trailing newline\n            if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n                r = r.slice(0, -options.newline.length);\n            }\n            return r;\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmluZ1dyaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQ0FBa0M7QUFDakM7SUFDQyxJQUFJQSxpQkFBaUJDO0lBRXJCQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0lBRXhCLGlDQUFpQztJQUNqQ0MsT0FBT0MsT0FBTyxHQUFHSixrQkFBa0IsTUFBTUEsd0JBQXdCQztRQUMvRCxrREFBa0Q7UUFFbEQsNENBQTRDO1FBQzVDLHNDQUFzQztRQUN0QyxxQ0FBcUM7UUFDckMsdUVBQXVFO1FBQ3ZFLDREQUE0RDtRQUM1RCxtRkFBbUY7UUFDbkYsb0ZBQW9GO1FBQ3BGSSxZQUFZQyxPQUFPLENBQUU7WUFDbkIsS0FBSyxDQUFDQTtRQUNSO1FBRUFDLFNBQVNDLEdBQUcsRUFBRUYsT0FBTyxFQUFFO1lBQ3JCLElBQUlHLE9BQU9DLEdBQUdDLEtBQUtDLEdBQUdDO1lBQ3RCUCxVQUFVLElBQUksQ0FBQ1EsYUFBYSxDQUFDUjtZQUM3Qk0sSUFBSTtZQUNKQyxNQUFNTCxJQUFJTyxRQUFRO1lBQ2xCLElBQUtMLElBQUksR0FBR0MsTUFBTUUsSUFBSUcsTUFBTSxFQUFFTixJQUFJQyxLQUFLRCxJQUFLO2dCQUMxQ0QsUUFBUUksR0FBRyxDQUFDSCxFQUFFO2dCQUNkRSxLQUFLLElBQUksQ0FBQ0ssY0FBYyxDQUFDUixPQUFPSCxTQUFTO1lBQzNDO1lBQ0EsMEJBQTBCO1lBQzFCLElBQUlBLFFBQVFZLE1BQU0sSUFBSU4sRUFBRU8sS0FBSyxDQUFDLENBQUNiLFFBQVFjLE9BQU8sQ0FBQ0osTUFBTSxNQUFNVixRQUFRYyxPQUFPLEVBQUU7Z0JBQzFFUixJQUFJQSxFQUFFTyxLQUFLLENBQUMsR0FBRyxDQUFDYixRQUFRYyxPQUFPLENBQUNKLE1BQU07WUFDeEM7WUFDQSxPQUFPSjtRQUNUO0lBRUY7QUFFRixHQUFHUyxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MU3RyaW5nV3JpdGVyLmpzP2VhMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MU3RyaW5nV3JpdGVyLCBYTUxXcml0ZXJCYXNlO1xuXG4gIFhNTFdyaXRlckJhc2UgPSByZXF1aXJlKCcuL1hNTFdyaXRlckJhc2UnKTtcblxuICAvLyBQcmludHMgWE1MIG5vZGVzIGFzIHBsYWluIHRleHRcbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxTdHJpbmdXcml0ZXIgPSBjbGFzcyBYTUxTdHJpbmdXcml0ZXIgZXh0ZW5kcyBYTUxXcml0ZXJCYXNlIHtcbiAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MU3RyaW5nV3JpdGVyYFxuXG4gICAgLy8gYG9wdGlvbnMucHJldHR5YCBwcmV0dHkgcHJpbnRzIHRoZSByZXN1bHRcbiAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIHN0cmluZ1xuICAgIC8vIGBvcHRpb25zLm5ld2xpbmVgIG5ld2xpbmUgc2VxdWVuY2VcbiAgICAvLyBgb3B0aW9ucy5vZmZzZXRgIGEgZml4ZWQgbnVtYmVyIG9mIGluZGVudGF0aW9ucyB0byBhZGQgdG8gZXZlcnkgbGluZVxuICAgIC8vIGBvcHRpb25zLmFsbG93RW1wdHlgIGRvIG5vdCBzZWxmIGNsb3NlIGVtcHR5IGVsZW1lbnQgdGFnc1xuICAgIC8vICdvcHRpb25zLmRvbnRQcmV0dHlUZXh0Tm9kZXMnIGlmIGFueSB0ZXh0IGlzIHByZXNlbnQgaW4gbm9kZSwgZG9uJ3QgaW5kZW50IG9yIExGXG4gICAgLy8gYG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaGAgYWRkIGEgc3BhY2UgYmVmb3JlIHRoZSBjbG9zaW5nIHNsYXNoIG9mIGVtcHR5IGVsZW1lbnRzXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQoZG9jLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgciwgcmVmO1xuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHIgPSAnJztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCAwKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyBuZXdsaW5lXG4gICAgICBpZiAob3B0aW9ucy5wcmV0dHkgJiYgci5zbGljZSgtb3B0aW9ucy5uZXdsaW5lLmxlbmd0aCkgPT09IG9wdGlvbnMubmV3bGluZSkge1xuICAgICAgICByID0gci5zbGljZSgwLCAtb3B0aW9ucy5uZXdsaW5lLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxTdHJpbmdXcml0ZXIiLCJYTUxXcml0ZXJCYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJkb2N1bWVudCIsImRvYyIsImNoaWxkIiwiaSIsImxlbiIsInIiLCJyZWYiLCJmaWx0ZXJPcHRpb25zIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJ3cml0ZUNoaWxkTm9kZSIsInByZXR0eSIsInNsaWNlIiwibmV3bGluZSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLStringWriter.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLStringifier.js":
/*!********************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLStringifier.js ***!
  \********************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    // Converts values to strings\n    var XMLStringifier, hasProp = {}.hasOwnProperty;\n    module.exports = XMLStringifier = (function() {\n        class XMLStringifier {\n            // Initializes a new instance of `XMLStringifier`\n            // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n            // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n            // `options.stringify` a set of functions to use for converting values to strings\n            // `options.noValidation` whether values will be validated and escaped or returned as is\n            constructor(options){\n                var key, ref, value;\n                // Checks whether the given string contains legal characters\n                // Fails with an exception on error\n                // `str` the string to check\n                this.assertLegalChar = this.assertLegalChar.bind(this);\n                // Checks whether the given string contains legal characters for a name\n                // Fails with an exception on error\n                // `str` the string to check\n                this.assertLegalName = this.assertLegalName.bind(this);\n                options || (options = {});\n                this.options = options;\n                if (!this.options.version) {\n                    this.options.version = \"1.0\";\n                }\n                ref = options.stringify || {};\n                for(key in ref){\n                    if (!hasProp.call(ref, key)) continue;\n                    value = ref[key];\n                    this[key] = value;\n                }\n            }\n            // Defaults\n            name(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalName(\"\" + val || \"\");\n            }\n            text(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(this.textEscape(\"\" + val || \"\"));\n            }\n            cdata(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                val = \"\" + val || \"\";\n                val = val.replace(\"]]>\", \"]]]]><![CDATA[>\");\n                return this.assertLegalChar(val);\n            }\n            comment(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                val = \"\" + val || \"\";\n                if (val.match(/--/)) {\n                    throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n                }\n                return this.assertLegalChar(val);\n            }\n            raw(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return \"\" + val || \"\";\n            }\n            attValue(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(this.attEscape(val = \"\" + val || \"\"));\n            }\n            insTarget(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            insValue(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                val = \"\" + val || \"\";\n                if (val.match(/\\?>/)) {\n                    throw new Error(\"Invalid processing instruction value: \" + val);\n                }\n                return this.assertLegalChar(val);\n            }\n            xmlVersion(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                val = \"\" + val || \"\";\n                if (!val.match(/1\\.[0-9]+/)) {\n                    throw new Error(\"Invalid version number: \" + val);\n                }\n                return val;\n            }\n            xmlEncoding(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                val = \"\" + val || \"\";\n                if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n                    throw new Error(\"Invalid encoding: \" + val);\n                }\n                return this.assertLegalChar(val);\n            }\n            xmlStandalone(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                if (val) {\n                    return \"yes\";\n                } else {\n                    return \"no\";\n                }\n            }\n            dtdPubID(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            dtdSysID(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            dtdElementValue(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            dtdAttType(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            dtdAttDefault(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            dtdEntityValue(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            dtdNData(val) {\n                if (this.options.noValidation) {\n                    return val;\n                }\n                return this.assertLegalChar(\"\" + val || \"\");\n            }\n            assertLegalChar(str) {\n                var regex, res;\n                if (this.options.noValidation) {\n                    return str;\n                }\n                regex = \"\";\n                if (this.options.version === \"1.0\") {\n                    // Valid characters from https://www.w3.org/TR/xml/#charsets\n                    // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n                    // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n                    // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n                    //   let xml_10_InvalidChars = regenerate()\n                    //     .addRange(0x0000, 0x0008)\n                    //     .add(0x000B, 0x000C)\n                    //     .addRange(0x000E, 0x001F)\n                    //     .addRange(0xD800, 0xDFFF)\n                    //     .addRange(0xFFFE, 0xFFFF)\n                    regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n                    if (res = str.match(regex)) {\n                        throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n                    }\n                } else if (this.options.version === \"1.1\") {\n                    // Valid characters from https://www.w3.org/TR/xml11/#charsets\n                    // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n                    // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n                    // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n                    //   let xml_11_InvalidChars = regenerate()\n                    //     .add(0x0000)\n                    //     .addRange(0xD800, 0xDFFF)\n                    //     .addRange(0xFFFE, 0xFFFF)\n                    regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n                    if (res = str.match(regex)) {\n                        throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n                    }\n                }\n                return str;\n            }\n            assertLegalName(str) {\n                var regex;\n                if (this.options.noValidation) {\n                    return str;\n                }\n                this.assertLegalChar(str);\n                regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n                if (!str.match(regex)) {\n                    throw new Error(\"Invalid character in name\");\n                }\n                return str;\n            }\n            // Escapes special characters in text\n            // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n            // `str` the string to escape\n            textEscape(str) {\n                var ampregex;\n                if (this.options.noValidation) {\n                    return str;\n                }\n                ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n                return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\r/g, \"&#xD;\");\n            }\n            // Escapes special characters in attribute values\n            // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n            // `str` the string to escape\n            attEscape(str) {\n                var ampregex;\n                if (this.options.noValidation) {\n                    return str;\n                }\n                ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n                return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n            }\n        }\n        ;\n        // strings to match while converting from JS objects\n        XMLStringifier.prototype.convertAttKey = \"@\";\n        XMLStringifier.prototype.convertPIKey = \"?\";\n        XMLStringifier.prototype.convertTextKey = \"#text\";\n        XMLStringifier.prototype.convertCDataKey = \"#cdata\";\n        XMLStringifier.prototype.convertCommentKey = \"#comment\";\n        XMLStringifier.prototype.convertRawKey = \"#raw\";\n        return XMLStringifier;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLStringifier.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLText.js":
/*!*************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLText.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, XMLCharacterData, XMLText;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    // Represents a text node\n    module.exports = XMLText = (function() {\n        class XMLText extends XMLCharacterData {\n            // Initializes a new instance of `XMLText`\n            // `text` element text\n            constructor(parent, text){\n                super(parent);\n                if (text == null) {\n                    throw new Error(\"Missing element text. \" + this.debugInfo());\n                }\n                this.name = \"#text\";\n                this.type = NodeType.Text;\n                this.value = this.stringify.text(text);\n            }\n            // Creates and returns a deep clone of `this`\n            clone() {\n                return Object.create(this);\n            }\n            // Converts the XML fragment to string\n            // `options.pretty` pretty prints the result\n            // `options.indent` indentation for pretty print\n            // `options.offset` how many indentations to add to every line for pretty print\n            // `options.newline` newline sequence for pretty print\n            toString(options) {\n                return this.options.writer.text(this, this.options.writer.filterOptions(options));\n            }\n            // DOM level 1 functions to be implemented later\n            splitText(offset) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n            // DOM level 3 functions to be implemented later\n            replaceWholeText(content) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        }\n        ;\n        // DOM level 3\n        Object.defineProperty(XMLText.prototype, \"isElementContentWhitespace\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLText.prototype, \"wholeText\", {\n            get: function() {\n                var next, prev, str;\n                str = \"\";\n                prev = this.previousSibling;\n                while(prev){\n                    str = prev.data + str;\n                    prev = prev.previousSibling;\n                }\n                str += this.data;\n                next = this.nextSibling;\n                while(next){\n                    str = str + next.data;\n                    next = next.nextSibling;\n                }\n                return str;\n            }\n        });\n        return XMLText;\n    }).call(this);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFRleHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2pDO0lBQ0MsSUFBSUEsVUFBVUMsa0JBQWtCQztJQUVoQ0YsV0FBV0csbUJBQU9BLENBQUM7SUFFbkJGLG1CQUFtQkUsbUJBQU9BLENBQUM7SUFFM0IseUJBQXlCO0lBQ3pCQyxPQUFPQyxPQUFPLEdBQUdILFVBQVUsQ0FBQztRQUMxQixNQUFNQSxnQkFBZ0JEO1lBQ3BCLDBDQUEwQztZQUUxQyxzQkFBc0I7WUFDdEJLLFlBQVlDLE1BQU0sRUFBRUMsSUFBSSxDQUFFO2dCQUN4QixLQUFLLENBQUNEO2dCQUNOLElBQUlDLFFBQVEsTUFBTTtvQkFDaEIsTUFBTSxJQUFJQyxNQUFNLDJCQUEyQixJQUFJLENBQUNDLFNBQVM7Z0JBQzNEO2dCQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHO2dCQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHWixTQUFTYSxJQUFJO2dCQUN6QixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1AsSUFBSSxDQUFDQTtZQUNuQztZQUVBLDZDQUE2QztZQUM3Q1EsUUFBUTtnQkFDTixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtZQUMzQjtZQUVBLHNDQUFzQztZQUV0Qyw0Q0FBNEM7WUFDNUMsZ0RBQWdEO1lBQ2hELCtFQUErRTtZQUMvRSxzREFBc0Q7WUFDdERDLFNBQVNDLE9BQU8sRUFBRTtnQkFDaEIsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDYixJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ1ksT0FBTyxDQUFDQyxNQUFNLENBQUNDLGFBQWEsQ0FBQ0Y7WUFDMUU7WUFFQSxnREFBZ0Q7WUFDaERHLFVBQVVDLE1BQU0sRUFBRTtnQkFDaEIsTUFBTSxJQUFJZixNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7WUFDeEU7WUFFQSxnREFBZ0Q7WUFDaERlLGlCQUFpQkMsT0FBTyxFQUFFO2dCQUN4QixNQUFNLElBQUlqQixNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7WUFDeEU7UUFFRjs7UUFFQSxjQUFjO1FBQ2RPLE9BQU9VLGNBQWMsQ0FBQ3pCLFFBQVEwQixTQUFTLEVBQUUsOEJBQThCO1lBQ3JFQyxLQUFLO2dCQUNILE1BQU0sSUFBSXBCLE1BQU0sd0NBQXdDLElBQUksQ0FBQ0MsU0FBUztZQUN4RTtRQUNGO1FBRUFPLE9BQU9VLGNBQWMsQ0FBQ3pCLFFBQVEwQixTQUFTLEVBQUUsYUFBYTtZQUNwREMsS0FBSztnQkFDSCxJQUFJQyxNQUFNQyxNQUFNQztnQkFDaEJBLE1BQU07Z0JBQ05ELE9BQU8sSUFBSSxDQUFDRSxlQUFlO2dCQUMzQixNQUFPRixLQUFNO29CQUNYQyxNQUFNRCxLQUFLRyxJQUFJLEdBQUdGO29CQUNsQkQsT0FBT0EsS0FBS0UsZUFBZTtnQkFDN0I7Z0JBQ0FELE9BQU8sSUFBSSxDQUFDRSxJQUFJO2dCQUNoQkosT0FBTyxJQUFJLENBQUNLLFdBQVc7Z0JBQ3ZCLE1BQU9MLEtBQU07b0JBQ1hFLE1BQU1BLE1BQU1GLEtBQUtJLElBQUk7b0JBQ3JCSixPQUFPQSxLQUFLSyxXQUFXO2dCQUN6QjtnQkFDQSxPQUFPSDtZQUNUO1FBQ0Y7UUFFQSxPQUFPOUI7SUFFVCxHQUFHa0MsSUFBSSxDQUFDLElBQUk7QUFFZCxHQUFHQSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbWVib29rdXMtYmFja2VuZC8uLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MVGV4dC5qcz85NWU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxUZXh0O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL1hNTENoYXJhY3RlckRhdGEnKTtcblxuICAvLyBSZXByZXNlbnRzIGEgdGV4dCBub2RlXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MVGV4dCA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBYTUxUZXh0IGV4dGVuZHMgWE1MQ2hhcmFjdGVyRGF0YSB7XG4gICAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MVGV4dGBcblxuICAgICAgLy8gYHRleHRgIGVsZW1lbnQgdGV4dFxuICAgICAgY29uc3RydWN0b3IocGFyZW50LCB0ZXh0KSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCk7XG4gICAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGVsZW1lbnQgdGV4dC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBcIiN0ZXh0XCI7XG4gICAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLlRleHQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS50ZXh0KHRleHQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcbiAgICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29udmVydHMgdGhlIFhNTCBmcmFnbWVudCB0byBzdHJpbmdcblxuICAgICAgLy8gYG9wdGlvbnMucHJldHR5YCBwcmV0dHkgcHJpbnRzIHRoZSByZXN1bHRcbiAgICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgICAgLy8gYG9wdGlvbnMub2Zmc2V0YCBob3cgbWFueSBpbmRlbnRhdGlvbnMgdG8gYWRkIHRvIGV2ZXJ5IGxpbmUgZm9yIHByZXR0eSBwcmludFxuICAgICAgLy8gYG9wdGlvbnMubmV3bGluZWAgbmV3bGluZSBzZXF1ZW5jZSBmb3IgcHJldHR5IHByaW50XG4gICAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnRleHQodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gRE9NIGxldmVsIDEgZnVuY3Rpb25zIHRvIGJlIGltcGxlbWVudGVkIGxhdGVyXG4gICAgICBzcGxpdFRleHQob2Zmc2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cblxuICAgICAgLy8gRE9NIGxldmVsIDMgZnVuY3Rpb25zIHRvIGJlIGltcGxlbWVudGVkIGxhdGVyXG4gICAgICByZXBsYWNlV2hvbGVUZXh0KGNvbnRlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8vIERPTSBsZXZlbCAzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTFRleHQucHJvdG90eXBlLCAnaXNFbGVtZW50Q29udGVudFdoaXRlc3BhY2UnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MVGV4dC5wcm90b3R5cGUsICd3aG9sZVRleHQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbmV4dCwgcHJldiwgc3RyO1xuICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgcHJldiA9IHRoaXMucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICB3aGlsZSAocHJldikge1xuICAgICAgICAgIHN0ciA9IHByZXYuZGF0YSArIHN0cjtcbiAgICAgICAgICBwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgc3RyICs9IHRoaXMuZGF0YTtcbiAgICAgICAgbmV4dCA9IHRoaXMubmV4dFNpYmxpbmc7XG4gICAgICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICAgICAgc3RyID0gc3RyICsgbmV4dC5kYXRhO1xuICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gWE1MVGV4dDtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MQ2hhcmFjdGVyRGF0YSIsIlhNTFRleHQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwidGV4dCIsIkVycm9yIiwiZGVidWdJbmZvIiwibmFtZSIsInR5cGUiLCJUZXh0IiwidmFsdWUiLCJzdHJpbmdpZnkiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImZpbHRlck9wdGlvbnMiLCJzcGxpdFRleHQiLCJvZmZzZXQiLCJyZXBsYWNlV2hvbGVUZXh0IiwiY29udGVudCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0IiwibmV4dCIsInByZXYiLCJzdHIiLCJwcmV2aW91c1NpYmxpbmciLCJkYXRhIiwibmV4dFNpYmxpbmciLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLText.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/XMLWriterBase.js":
/*!*******************************************************!*\
  !*** ../node_modules/xmlbuilder/lib/XMLWriterBase.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign, hasProp = {}.hasOwnProperty;\n    ({ assign } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDummy = __webpack_require__(/*! ./XMLDummy */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDummy.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(rsc)/../node_modules/xmlbuilder/lib/WriterState.js\");\n    // Base class for XML writers\n    module.exports = XMLWriterBase = class XMLWriterBase {\n        // Initializes a new instance of `XMLWriterBase`\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation string\n        // `options.newline` newline sequence\n        // `options.offset` a fixed number of indentations to add to every line\n        // `options.width` maximum column width\n        // `options.allowEmpty` do not self close empty element tags\n        // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n        // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n        constructor(options){\n            var key, ref, value;\n            options || (options = {});\n            this.options = options;\n            ref = options.writer || {};\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this[\"_\" + key] = this[key];\n                this[key] = value;\n            }\n        }\n        // Filters writer options and provides defaults\n        // `options` writer options\n        filterOptions(options) {\n            var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n            options || (options = {});\n            options = assign({}, this.options, options);\n            filteredOptions = {\n                writer: this\n            };\n            filteredOptions.pretty = options.pretty || false;\n            filteredOptions.allowEmpty = options.allowEmpty || false;\n            filteredOptions.indent = (ref = options.indent) != null ? ref : \"  \";\n            filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : \"\\n\";\n            filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n            filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n            filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n            filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : \"\";\n            if (filteredOptions.spaceBeforeSlash === true) {\n                filteredOptions.spaceBeforeSlash = \" \";\n            }\n            filteredOptions.suppressPrettyCount = 0;\n            filteredOptions.user = {};\n            filteredOptions.state = WriterState.None;\n            return filteredOptions;\n        }\n        // Returns the indentation string for the current level\n        // `node` current node\n        // `options` writer options\n        // `level` current indentation level\n        indent(node, options, level) {\n            var indentLevel;\n            if (!options.pretty || options.suppressPrettyCount) {\n                return \"\";\n            } else if (options.pretty) {\n                indentLevel = (level || 0) + options.offset + 1;\n                if (indentLevel > 0) {\n                    return new Array(indentLevel).join(options.indent);\n                }\n            }\n            return \"\";\n        }\n        // Returns the newline string\n        // `node` current node\n        // `options` writer options\n        // `level` current indentation level\n        endline(node, options, level) {\n            if (!options.pretty || options.suppressPrettyCount) {\n                return \"\";\n            } else {\n                return options.newline;\n            }\n        }\n        attribute(att, options, level) {\n            var r;\n            this.openAttribute(att, options, level);\n            if (options.pretty && options.width > 0) {\n                r = att.name + '=\"' + att.value + '\"';\n            } else {\n                r = \" \" + att.name + '=\"' + att.value + '\"';\n            }\n            this.closeAttribute(att, options, level);\n            return r;\n        }\n        cdata(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<![CDATA[\";\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += \"]]>\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        comment(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!-- \";\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += \" -->\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        declaration(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<?xml\";\n            options.state = WriterState.InsideTag;\n            r += ' version=\"' + node.version + '\"';\n            if (node.encoding != null) {\n                r += ' encoding=\"' + node.encoding + '\"';\n            }\n            if (node.standalone != null) {\n                r += ' standalone=\"' + node.standalone + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \"?>\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        docType(node, options, level) {\n            var child, i, len1, r, ref;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            r += \"<!DOCTYPE \" + node.root().name;\n            // external identifier\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            // internal subset\n            if (node.children.length > 0) {\n                r += \" [\";\n                r += this.endline(node, options, level);\n                options.state = WriterState.InsideTag;\n                ref = node.children;\n                for(i = 0, len1 = ref.length; i < len1; i++){\n                    child = ref[i];\n                    r += this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                r += \"]\";\n            }\n            // close tag\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        element(node, options, level) {\n            var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n            level || (level = 0);\n            prettySuppressed = false;\n            // open tag\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<\" + node.name;\n            // attributes\n            if (options.pretty && options.width > 0) {\n                len = r.length;\n                ref = node.attribs;\n                for(name in ref){\n                    if (!hasProp.call(ref, name)) continue;\n                    att = ref[name];\n                    ratt = this.attribute(att, options, level);\n                    attLen = ratt.length;\n                    if (len + attLen > options.width) {\n                        rline = this.indent(node, options, level + 1) + ratt;\n                        r += this.endline(node, options, level) + rline;\n                        len = rline.length;\n                    } else {\n                        rline = \" \" + ratt;\n                        r += rline;\n                        len += rline.length;\n                    }\n                }\n            } else {\n                ref1 = node.attribs;\n                for(name in ref1){\n                    if (!hasProp.call(ref1, name)) continue;\n                    att = ref1[name];\n                    r += this.attribute(att, options, level);\n                }\n            }\n            childNodeCount = node.children.length;\n            firstChildNode = childNodeCount === 0 ? null : node.children[0];\n            if (childNodeCount === 0 || node.children.every(function(e) {\n                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === \"\";\n            })) {\n                // empty element\n                if (options.allowEmpty) {\n                    r += \">\";\n                    options.state = WriterState.CloseTag;\n                    r += \"</\" + node.name + \">\" + this.endline(node, options, level);\n                } else {\n                    options.state = WriterState.CloseTag;\n                    r += options.spaceBeforeSlash + \"/>\" + this.endline(node, options, level);\n                }\n            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n                // do not indent text-only nodes\n                r += \">\";\n                options.state = WriterState.InsideTag;\n                options.suppressPrettyCount++;\n                prettySuppressed = true;\n                r += this.writeChildNode(firstChildNode, options, level + 1);\n                options.suppressPrettyCount--;\n                prettySuppressed = false;\n                options.state = WriterState.CloseTag;\n                r += \"</\" + node.name + \">\" + this.endline(node, options, level);\n            } else {\n                // if ANY are a text node, then suppress pretty now\n                if (options.dontPrettyTextNodes) {\n                    ref2 = node.children;\n                    for(i = 0, len1 = ref2.length; i < len1; i++){\n                        child = ref2[i];\n                        if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {\n                            options.suppressPrettyCount++;\n                            prettySuppressed = true;\n                            break;\n                        }\n                    }\n                }\n                // close the opening tag, after dealing with newline\n                r += \">\" + this.endline(node, options, level);\n                options.state = WriterState.InsideTag;\n                ref3 = node.children;\n                // inner tags\n                for(j = 0, len2 = ref3.length; j < len2; j++){\n                    child = ref3[j];\n                    r += this.writeChildNode(child, options, level + 1);\n                }\n                // close tag\n                options.state = WriterState.CloseTag;\n                r += this.indent(node, options, level) + \"</\" + node.name + \">\";\n                if (prettySuppressed) {\n                    options.suppressPrettyCount--;\n                }\n                r += this.endline(node, options, level);\n                options.state = WriterState.None;\n            }\n            this.closeNode(node, options, level);\n            return r;\n        }\n        writeChildNode(node, options, level) {\n            switch(node.type){\n                case NodeType.CData:\n                    return this.cdata(node, options, level);\n                case NodeType.Comment:\n                    return this.comment(node, options, level);\n                case NodeType.Element:\n                    return this.element(node, options, level);\n                case NodeType.Raw:\n                    return this.raw(node, options, level);\n                case NodeType.Text:\n                    return this.text(node, options, level);\n                case NodeType.ProcessingInstruction:\n                    return this.processingInstruction(node, options, level);\n                case NodeType.Dummy:\n                    return \"\";\n                case NodeType.Declaration:\n                    return this.declaration(node, options, level);\n                case NodeType.DocType:\n                    return this.docType(node, options, level);\n                case NodeType.AttributeDeclaration:\n                    return this.dtdAttList(node, options, level);\n                case NodeType.ElementDeclaration:\n                    return this.dtdElement(node, options, level);\n                case NodeType.EntityDeclaration:\n                    return this.dtdEntity(node, options, level);\n                case NodeType.NotationDeclaration:\n                    return this.dtdNotation(node, options, level);\n                default:\n                    throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n            }\n        }\n        processingInstruction(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<?\";\n            options.state = WriterState.InsideTag;\n            r += node.target;\n            if (node.value) {\n                r += \" \" + node.value;\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \"?>\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        raw(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        text(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        dtdAttList(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ATTLIST\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.elementName + \" \" + node.attributeName + \" \" + node.attributeType;\n            if (node.defaultValueType !== \"#DEFAULT\") {\n                r += \" \" + node.defaultValueType;\n            }\n            if (node.defaultValue) {\n                r += ' \"' + node.defaultValue + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        dtdElement(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ELEMENT\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.name + \" \" + node.value;\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        dtdEntity(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ENTITY\";\n            options.state = WriterState.InsideTag;\n            if (node.pe) {\n                r += \" %\";\n            }\n            r += \" \" + node.name;\n            if (node.value) {\n                r += ' \"' + node.value + '\"';\n            } else {\n                if (node.pubID && node.sysID) {\n                    r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                } else if (node.sysID) {\n                    r += ' SYSTEM \"' + node.sysID + '\"';\n                }\n                if (node.nData) {\n                    r += \" NDATA \" + node.nData;\n                }\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        dtdNotation(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!NOTATION\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.name;\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.pubID) {\n                r += ' PUBLIC \"' + node.pubID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        }\n        openNode(node, options, level) {}\n        closeNode(node, options, level) {}\n        openAttribute(att, options, level) {}\n        closeAttribute(att, options, level) {}\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/XMLWriterBase.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/xmlbuilder/lib/index.js":
/*!***********************************************!*\
  !*** ../node_modules/xmlbuilder/lib/index.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.4.1\n(function() {\n    var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction;\n    ({ assign, isFunction } = __webpack_require__(/*! ./Utility */ \"(rsc)/../node_modules/xmlbuilder/lib/Utility.js\"));\n    XMLDOMImplementation = __webpack_require__(/*! ./XMLDOMImplementation */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDOMImplementation.js\");\n    XMLDocument = __webpack_require__(/*! ./XMLDocument */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDocument.js\");\n    XMLDocumentCB = __webpack_require__(/*! ./XMLDocumentCB */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLDocumentCB.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    XMLStreamWriter = __webpack_require__(/*! ./XMLStreamWriter */ \"(rsc)/../node_modules/xmlbuilder/lib/XMLStreamWriter.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(rsc)/../node_modules/xmlbuilder/lib/NodeType.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(rsc)/../node_modules/xmlbuilder/lib/WriterState.js\");\n    // Creates a new document and returns the root node for\n    // chain-building the document tree\n    // `name` name of the root element\n    // `xmldec.version` A version number string, e.g. 1.0\n    // `xmldec.encoding` Encoding declaration, e.g. UTF-8\n    // `xmldec.standalone` standalone document declaration: true or false\n    // `doctype.pubID` public identifier of the external subset\n    // `doctype.sysID` system identifier of the external subset\n    // `options.headless` whether XML declaration and doctype will be included:\n    //     true or false\n    // `options.keepNullNodes` whether nodes with null values will be kept\n    //     or ignored: true or false\n    // `options.keepNullAttributes` whether attributes with null values will be\n    //     kept or ignored: true or false\n    // `options.ignoreDecorators` whether decorator strings will be ignored when\n    //     converting JS objects: true or false\n    // `options.separateArrayItems` whether array items are created as separate\n    //     nodes when passed as an object value: true or false\n    // `options.noDoubleEncoding` whether existing html entities are encoded:\n    //     true or false\n    // `options.stringify` a set of functions to use for converting values to\n    //     strings\n    // `options.writer` the default XML writer to use for converting nodes to\n    //     string. If the default writer is not set, the built-in XMLStringWriter\n    //     will be used instead.\n    module.exports.create = function(name, xmldec, doctype, options) {\n        var doc, root;\n        if (name == null) {\n            throw new Error(\"Root element needs a name.\");\n        }\n        options = assign({}, xmldec, doctype, options);\n        // create the document node\n        doc = new XMLDocument(options);\n        // add the root node\n        root = doc.element(name);\n        // prolog\n        if (!options.headless) {\n            doc.declaration(options);\n            if (options.pubID != null || options.sysID != null) {\n                doc.dtd(options);\n            }\n        }\n        return root;\n    };\n    // Creates a new document and returns the document node for\n    // chain-building the document tree\n    // `options.keepNullNodes` whether nodes with null values will be kept\n    //     or ignored: true or false\n    // `options.keepNullAttributes` whether attributes with null values will be\n    //     kept or ignored: true or false\n    // `options.ignoreDecorators` whether decorator strings will be ignored when\n    //     converting JS objects: true or false\n    // `options.separateArrayItems` whether array items are created as separate\n    //     nodes when passed as an object value: true or false\n    // `options.noDoubleEncoding` whether existing html entities are encoded:\n    //     true or false\n    // `options.stringify` a set of functions to use for converting values to\n    //     strings\n    // `options.writer` the default XML writer to use for converting nodes to\n    //     string. If the default writer is not set, the built-in XMLStringWriter\n    //     will be used instead.\n    // `onData` the function to be called when a new chunk of XML is output. The\n    //          string containing the XML chunk is passed to `onData` as its single\n    //          argument.\n    // `onEnd`  the function to be called when the XML document is completed with\n    //          `end`. `onEnd` does not receive any arguments.\n    module.exports.begin = function(options, onData, onEnd) {\n        if (isFunction(options)) {\n            [onData, onEnd] = [\n                options,\n                onData\n            ];\n            options = {};\n        }\n        if (onData) {\n            return new XMLDocumentCB(options, onData, onEnd);\n        } else {\n            return new XMLDocument(options);\n        }\n    };\n    module.exports.stringWriter = function(options) {\n        return new XMLStringWriter(options);\n    };\n    module.exports.streamWriter = function(stream, options) {\n        return new XMLStreamWriter(stream, options);\n    };\n    module.exports.implementation = new XMLDOMImplementation();\n    module.exports.nodeType = NodeType;\n    module.exports.writerState = WriterState;\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/xmlbuilder/lib/index.js\n");

/***/ })

};
;